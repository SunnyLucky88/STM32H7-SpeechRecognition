
BSP_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001564c  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000068f0  080158e8  080158e8  000258e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0801c1d8  0801c1d8  0002c1d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0801c1dc  0801c1dc  0002c1dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000005fc  24000000  0801c1e0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000dc20  24000600  0801c7dc  00030600  2**5
                  ALLOC
  7 ._user_heap_stack 00001400  2400e220  0801c7dc  0003e220  2**0
                  ALLOC
  8 .ARM.attributes 00000032  00000000  00000000  00040200  2**0
                  CONTENTS, READONLY
  9 .RAM_D3       00000200  38000000  38000000  00040000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 10 .debug_info   0006bfbe  00000000  00000000  00040232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007675  00000000  00000000  000ac1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002e20  00000000  00000000  000b3868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002be8  00000000  00000000  000b6688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004f0b6  00000000  00000000  000b9270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003874a  00000000  00000000  00108326  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001e94c0  00000000  00000000  00140a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      0000032c  00000000  00000000  00329f30  2**0
                  CONTENTS, READONLY
 18 .iar.rtmodel  00000026  00000000  00000000  0032a25c  2**0
                  CONTENTS, READONLY
 19 .iar_vfe_header 00000004  00000000  00000000  0032a284  2**2
                  CONTENTS, READONLY
 20 .debug_frame  0000d030  00000000  00000000  0032a288  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stabstr      00000076  00000000  00000000  003372b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000600 	.word	0x24000600
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080158cc 	.word	0x080158cc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000604 	.word	0x24000604
 80002d4:	080158cc 	.word	0x080158cc

080002d8 <PDM_Filter_Init>:
 80002d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002da:	4605      	mov	r5, r0
 80002dc:	b081      	sub	sp, #4
 80002de:	2140      	movs	r1, #64	; 0x40
 80002e0:	f105 000c 	add.w	r0, r5, #12
 80002e4:	f015 fac5 	bl	8015872 <__aeabi_memclr>
 80002e8:	f8df 0c1c 	ldr.w	r0, [pc, #3100]	; 8000f08 <.text_18>
 80002ec:	f8df 1c1c 	ldr.w	r1, [pc, #3100]	; 8000f0c <.text_19>
 80002f0:	6802      	ldr	r2, [r0, #0]
 80002f2:	2400      	movs	r4, #0
 80002f4:	f24c 2640 	movw	r6, #49728	; 0xc240
 80002f8:	0852      	lsrs	r2, r2, #1
 80002fa:	0052      	lsls	r2, r2, #1
 80002fc:	6002      	str	r2, [r0, #0]
 80002fe:	680b      	ldr	r3, [r1, #0]
 8000300:	f64f 70f0 	movw	r0, #65520	; 0xfff0
 8000304:	4003      	ands	r3, r0
 8000306:	42b3      	cmp	r3, r6
 8000308:	bf1f      	itttt	ne
 800030a:	6809      	ldrne	r1, [r1, #0]
 800030c:	4008      	andne	r0, r1
 800030e:	f24c 2270 	movwne	r2, #49776	; 0xc270
 8000312:	4290      	cmpne	r0, r2
 8000314:	d135      	bne.n	8000382 <PDM_Filter_Init+0xaa>
 8000316:	f8df 3bf8 	ldr.w	r3, [pc, #3064]	; 8000f10 <.text_20>
 800031a:	6818      	ldr	r0, [r3, #0]
 800031c:	bb88      	cbnz	r0, 8000382 <PDM_Filter_Init+0xaa>
 800031e:	f8df 0bf4 	ldr.w	r0, [pc, #3060]	; 8000f14 <.text_21>
 8000322:	6801      	ldr	r1, [r0, #0]
 8000324:	f3c1 010b 	ubfx	r1, r1, #0, #12
 8000328:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 800032c:	bf1f      	itttt	ne
 800032e:	6800      	ldrne	r0, [r0, #0]
 8000330:	f3c0 000b 	ubfxne	r0, r0, #0, #12
 8000334:	f240 4183 	movwne	r1, #1155	; 0x483
 8000338:	4288      	cmpne	r0, r1
 800033a:	d122      	bne.n	8000382 <PDM_Filter_Init+0xaa>
 800033c:	f8df 1bd8 	ldr.w	r1, [pc, #3032]	; 8000f18 <.text_22>
 8000340:	2201      	movs	r2, #1
 8000342:	608a      	str	r2, [r1, #8]
 8000344:	6888      	ldr	r0, [r1, #8]
 8000346:	2800      	cmp	r0, #0
 8000348:	d1fc      	bne.n	8000344 <PDM_Filter_Init+0x6c>
 800034a:	f8df 2bd0 	ldr.w	r2, [pc, #3024]	; 8000f1c <.text_23>
 800034e:	f8df 3bd0 	ldr.w	r3, [pc, #3024]	; 8000f20 <.text_24>
 8000352:	600a      	str	r2, [r1, #0]
 8000354:	6809      	ldr	r1, [r1, #0]
 8000356:	4299      	cmp	r1, r3
 8000358:	d022      	beq.n	80003a0 <PDM_Filter_Init+0xc8>
 800035a:	6468      	str	r0, [r5, #68]	; 0x44
 800035c:	6168      	str	r0, [r5, #20]
 800035e:	896a      	ldrh	r2, [r5, #10]
 8000360:	61e8      	str	r0, [r5, #28]
 8000362:	8928      	ldrh	r0, [r5, #8]
 8000364:	61ac      	str	r4, [r5, #24]
 8000366:	612c      	str	r4, [r5, #16]
 8000368:	60ec      	str	r4, [r5, #12]
 800036a:	626c      	str	r4, [r5, #36]	; 0x24
 800036c:	622c      	str	r4, [r5, #32]
 800036e:	86aa      	strh	r2, [r5, #52]	; 0x34
 8000370:	86e8      	strh	r0, [r5, #54]	; 0x36
 8000372:	642c      	str	r4, [r5, #64]	; 0x40
 8000374:	8828      	ldrh	r0, [r5, #0]
 8000376:	2801      	cmp	r0, #1
 8000378:	d014      	beq.n	80003a4 <PDM_Filter_Init+0xcc>
 800037a:	2800      	cmp	r0, #0
 800037c:	d05d      	beq.n	800043a <PDM_Filter_Init+0x162>
 800037e:	2402      	movs	r4, #2
 8000380:	e0a3      	b.n	80004ca <PDM_Filter_Init+0x1f2>
 8000382:	f8df 1ba0 	ldr.w	r1, [pc, #2976]	; 8000f24 <.text_25>
 8000386:	2201      	movs	r2, #1
 8000388:	608a      	str	r2, [r1, #8]
 800038a:	6888      	ldr	r0, [r1, #8]
 800038c:	2800      	cmp	r0, #0
 800038e:	d1fc      	bne.n	800038a <PDM_Filter_Init+0xb2>
 8000390:	f8df 2b88 	ldr.w	r2, [pc, #2952]	; 8000f1c <.text_23>
 8000394:	f8df 3b88 	ldr.w	r3, [pc, #2952]	; 8000f20 <.text_24>
 8000398:	600a      	str	r2, [r1, #0]
 800039a:	6809      	ldr	r1, [r1, #0]
 800039c:	4299      	cmp	r1, r3
 800039e:	d1dc      	bne.n	800035a <PDM_Filter_Init+0x82>
 80003a0:	646b      	str	r3, [r5, #68]	; 0x44
 80003a2:	e7db      	b.n	800035c <PDM_Filter_Init+0x84>
 80003a4:	f8df 1b80 	ldr.w	r1, [pc, #2944]	; 8000f28 <.text_26>
 80003a8:	7808      	ldrb	r0, [r1, #0]
 80003aa:	2800      	cmp	r0, #0
 80003ac:	f040 808d 	bne.w	80004ca <PDM_Filter_Init+0x1f2>
 80003b0:	2300      	movs	r3, #0
 80003b2:	f8df 0b78 	ldr.w	r0, [pc, #2936]	; 8000f2c <.text_27>
 80003b6:	f8df 2b78 	ldr.w	r2, [pc, #2936]	; 8000f30 <.text_28>
 80003ba:	1d0e      	adds	r6, r1, #4
 80003bc:	f856 6023 	ldr.w	r6, [r6, r3, lsl #2]
 80003c0:	ea02 5706 	and.w	r7, r2, r6, lsl #20
 80003c4:	ea00 0c06 	and.w	ip, r0, r6
 80003c8:	f3c6 5609 	ubfx	r6, r6, #20, #10
 80003cc:	4467      	add	r7, ip
 80003ce:	19f7      	adds	r7, r6, r7
 80003d0:	1d0e      	adds	r6, r1, #4
 80003d2:	f846 7023 	str.w	r7, [r6, r3, lsl #2]
 80003d6:	1c5b      	adds	r3, r3, #1
 80003d8:	1d0f      	adds	r7, r1, #4
 80003da:	f857 6023 	ldr.w	r6, [r7, r3, lsl #2]
 80003de:	ea02 5c06 	and.w	ip, r2, r6, lsl #20
 80003e2:	ea00 0e06 	and.w	lr, r0, r6
 80003e6:	f3c6 5609 	ubfx	r6, r6, #20, #10
 80003ea:	44f4      	add	ip, lr
 80003ec:	44b4      	add	ip, r6
 80003ee:	1d0e      	adds	r6, r1, #4
 80003f0:	f846 c023 	str.w	ip, [r6, r3, lsl #2]
 80003f4:	1c5b      	adds	r3, r3, #1
 80003f6:	f857 6023 	ldr.w	r6, [r7, r3, lsl #2]
 80003fa:	ea02 5c06 	and.w	ip, r2, r6, lsl #20
 80003fe:	ea00 0e06 	and.w	lr, r0, r6
 8000402:	f3c6 5609 	ubfx	r6, r6, #20, #10
 8000406:	44f4      	add	ip, lr
 8000408:	44b4      	add	ip, r6
 800040a:	1d0e      	adds	r6, r1, #4
 800040c:	f846 c023 	str.w	ip, [r6, r3, lsl #2]
 8000410:	1c5b      	adds	r3, r3, #1
 8000412:	f857 6023 	ldr.w	r6, [r7, r3, lsl #2]
 8000416:	ea02 5c06 	and.w	ip, r2, r6, lsl #20
 800041a:	ea00 0e06 	and.w	lr, r0, r6
 800041e:	f3c6 5609 	ubfx	r6, r6, #20, #10
 8000422:	44f4      	add	ip, lr
 8000424:	44b4      	add	ip, r6
 8000426:	1d0e      	adds	r6, r1, #4
 8000428:	f846 c023 	str.w	ip, [r6, r3, lsl #2]
 800042c:	1c5b      	adds	r3, r3, #1
 800042e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000432:	dbc2      	blt.n	80003ba <PDM_Filter_Init+0xe2>
 8000434:	2001      	movs	r0, #1
 8000436:	7008      	strb	r0, [r1, #0]
 8000438:	e047      	b.n	80004ca <PDM_Filter_Init+0x1f2>
 800043a:	f8df 0aec 	ldr.w	r0, [pc, #2796]	; 8000f28 <.text_26>
 800043e:	7801      	ldrb	r1, [r0, #0]
 8000440:	2901      	cmp	r1, #1
 8000442:	d142      	bne.n	80004ca <PDM_Filter_Init+0x1f2>
 8000444:	2300      	movs	r3, #0
 8000446:	f8df 1ae4 	ldr.w	r1, [pc, #2788]	; 8000f2c <.text_27>
 800044a:	f8df 2ae4 	ldr.w	r2, [pc, #2788]	; 8000f30 <.text_28>
 800044e:	1d06      	adds	r6, r0, #4
 8000450:	f856 6023 	ldr.w	r6, [r6, r3, lsl #2]
 8000454:	ea02 5706 	and.w	r7, r2, r6, lsl #20
 8000458:	ea01 0c06 	and.w	ip, r1, r6
 800045c:	f3c6 5609 	ubfx	r6, r6, #20, #10
 8000460:	4467      	add	r7, ip
 8000462:	19f7      	adds	r7, r6, r7
 8000464:	1d06      	adds	r6, r0, #4
 8000466:	f846 7023 	str.w	r7, [r6, r3, lsl #2]
 800046a:	1c5b      	adds	r3, r3, #1
 800046c:	1d07      	adds	r7, r0, #4
 800046e:	f857 6023 	ldr.w	r6, [r7, r3, lsl #2]
 8000472:	ea02 5c06 	and.w	ip, r2, r6, lsl #20
 8000476:	ea01 0e06 	and.w	lr, r1, r6
 800047a:	f3c6 5609 	ubfx	r6, r6, #20, #10
 800047e:	44f4      	add	ip, lr
 8000480:	44b4      	add	ip, r6
 8000482:	1d06      	adds	r6, r0, #4
 8000484:	f846 c023 	str.w	ip, [r6, r3, lsl #2]
 8000488:	1c5b      	adds	r3, r3, #1
 800048a:	f857 6023 	ldr.w	r6, [r7, r3, lsl #2]
 800048e:	ea02 5c06 	and.w	ip, r2, r6, lsl #20
 8000492:	ea01 0e06 	and.w	lr, r1, r6
 8000496:	f3c6 5609 	ubfx	r6, r6, #20, #10
 800049a:	44f4      	add	ip, lr
 800049c:	44b4      	add	ip, r6
 800049e:	1d06      	adds	r6, r0, #4
 80004a0:	f846 c023 	str.w	ip, [r6, r3, lsl #2]
 80004a4:	1c5b      	adds	r3, r3, #1
 80004a6:	f857 6023 	ldr.w	r6, [r7, r3, lsl #2]
 80004aa:	ea02 5c06 	and.w	ip, r2, r6, lsl #20
 80004ae:	ea01 0e06 	and.w	lr, r1, r6
 80004b2:	f3c6 5609 	ubfx	r6, r6, #20, #10
 80004b6:	44f4      	add	ip, lr
 80004b8:	44b4      	add	ip, r6
 80004ba:	1d06      	adds	r6, r0, #4
 80004bc:	f846 c023 	str.w	ip, [r6, r3, lsl #2]
 80004c0:	1c5b      	adds	r3, r3, #1
 80004c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80004c6:	dbc2      	blt.n	800044e <PDM_Filter_Init+0x176>
 80004c8:	7004      	strb	r4, [r0, #0]
 80004ca:	8868      	ldrh	r0, [r5, #2]
 80004cc:	b130      	cbz	r0, 80004dc <PDM_Filter_Init+0x204>
 80004ce:	2801      	cmp	r0, #1
 80004d0:	bf11      	iteee	ne
 80004d2:	1c64      	addne	r4, r4, #1
 80004d4:	6c28      	ldreq	r0, [r5, #64]	; 0x40
 80004d6:	f040 0020 	orreq.w	r0, r0, #32
 80004da:	6428      	streq	r0, [r5, #64]	; 0x40
 80004dc:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 80004de:	2901      	cmp	r1, #1
 80004e0:	bf04      	itt	eq
 80004e2:	8ee8      	ldrheq	r0, [r5, #54]	; 0x36
 80004e4:	2801      	cmpeq	r0, #1
 80004e6:	d103      	bne.n	80004f0 <PDM_Filter_Init+0x218>
 80004e8:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80004ea:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80004ee:	6429      	str	r1, [r5, #64]	; 0x40
 80004f0:	6868      	ldr	r0, [r5, #4]
 80004f2:	b128      	cbz	r0, 8000500 <PDM_Filter_Init+0x228>
 80004f4:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80004f6:	6868      	ldr	r0, [r5, #4]
 80004f8:	62e8      	str	r0, [r5, #44]	; 0x2c
 80004fa:	f041 0110 	orr.w	r1, r1, #16
 80004fe:	6429      	str	r1, [r5, #64]	; 0x40
 8000500:	2100      	movs	r1, #0
 8000502:	8729      	strh	r1, [r5, #56]	; 0x38
 8000504:	b914      	cbnz	r4, 800050c <PDM_Filter_Init+0x234>
 8000506:	6c28      	ldr	r0, [r5, #64]	; 0x40
 8000508:	3080      	adds	r0, #128	; 0x80
 800050a:	6428      	str	r0, [r5, #64]	; 0x40
 800050c:	4620      	mov	r0, r4
 800050e:	b001      	add	sp, #4
 8000510:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000514 <PDM_Filter_setConfig>:
 8000514:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000516:	b081      	sub	sp, #4
 8000518:	4605      	mov	r5, r0
 800051a:	460e      	mov	r6, r1
 800051c:	2400      	movs	r4, #0
 800051e:	ed2d 8b02 	vpush	{d8}
 8000522:	6c68      	ldr	r0, [r5, #68]	; 0x44
 8000524:	f8df 19f8 	ldr.w	r1, [pc, #2552]	; 8000f20 <.text_24>
 8000528:	4288      	cmp	r0, r1
 800052a:	bf18      	it	ne
 800052c:	2004      	movne	r0, #4
 800052e:	f040 80e3 	bne.w	80006f8 <PDM_Filter_setConfig+0x1e4>
 8000532:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000534:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8000538:	6429      	str	r1, [r5, #64]	; 0x40
 800053a:	8832      	ldrh	r2, [r6, #0]
 800053c:	2a05      	cmp	r2, #5
 800053e:	bf18      	it	ne
 8000540:	2a06      	cmpne	r2, #6
 8000542:	d01d      	beq.n	8000580 <PDM_Filter_setConfig+0x6c>
 8000544:	2a07      	cmp	r2, #7
 8000546:	bf18      	it	ne
 8000548:	2a01      	cmpne	r2, #1
 800054a:	d019      	beq.n	8000580 <PDM_Filter_setConfig+0x6c>
 800054c:	2a02      	cmp	r2, #2
 800054e:	bf1c      	itt	ne
 8000550:	2a03      	cmpne	r2, #3
 8000552:	2a04      	cmpne	r2, #4
 8000554:	d014      	beq.n	8000580 <PDM_Filter_setConfig+0x6c>
 8000556:	2408      	movs	r4, #8
 8000558:	f9b5 0038 	ldrsh.w	r0, [r5, #56]	; 0x38
 800055c:	f9b6 1004 	ldrsh.w	r1, [r6, #4]
 8000560:	4288      	cmp	r0, r1
 8000562:	bf04      	itt	eq
 8000564:	8e2b      	ldrheq	r3, [r5, #48]	; 0x30
 8000566:	4293      	cmpeq	r3, r2
 8000568:	f000 80be 	beq.w	80006e8 <PDM_Filter_setConfig+0x1d4>
 800056c:	f9b6 7004 	ldrsh.w	r7, [r6, #4]
 8000570:	f117 0f0c 	cmn.w	r7, #12
 8000574:	da5d      	bge.n	8000632 <PDM_Filter_setConfig+0x11e>
 8000576:	f06f 000b 	mvn.w	r0, #11
 800057a:	3440      	adds	r4, #64	; 0x40
 800057c:	80b0      	strh	r0, [r6, #4]
 800057e:	e0b1      	b.n	80006e4 <PDM_Filter_setConfig+0x1d0>
 8000580:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
 8000582:	4293      	cmp	r3, r2
 8000584:	d0e8      	beq.n	8000558 <PDM_Filter_setConfig+0x44>
 8000586:	0909      	lsrs	r1, r1, #4
 8000588:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
 800058c:	6429      	str	r1, [r5, #64]	; 0x40
 800058e:	f001 000f 	and.w	r0, r1, #15
 8000592:	f001 0170 	and.w	r1, r1, #112	; 0x70
 8000596:	2970      	cmp	r1, #112	; 0x70
 8000598:	d125      	bne.n	80005e6 <PDM_Filter_setConfig+0xd2>
 800059a:	1e40      	subs	r0, r0, #1
 800059c:	2806      	cmp	r0, #6
 800059e:	d8db      	bhi.n	8000558 <PDM_Filter_setConfig+0x44>
 80005a0:	e8df f000 	tbb	[pc, r0]
 80005a4:	1d191511 	.word	0x1d191511
 80005a8:	000d0905 	.word	0x000d0905
 80005ac:	e7d4      	b.n	8000558 <PDM_Filter_setConfig+0x44>
 80005ae:	f8df 0c08 	ldr.w	r0, [pc, #3080]	; 80011b8 <.text_30>
 80005b2:	64a8      	str	r0, [r5, #72]	; 0x48
 80005b4:	e7da      	b.n	800056c <PDM_Filter_setConfig+0x58>
 80005b6:	f8df 1c04 	ldr.w	r1, [pc, #3076]	; 80011bc <.text_31>
 80005ba:	64a9      	str	r1, [r5, #72]	; 0x48
 80005bc:	e7d6      	b.n	800056c <PDM_Filter_setConfig+0x58>
 80005be:	f8df 0c00 	ldr.w	r0, [pc, #3072]	; 80011c0 <.text_32>
 80005c2:	64a8      	str	r0, [r5, #72]	; 0x48
 80005c4:	e7d2      	b.n	800056c <PDM_Filter_setConfig+0x58>
 80005c6:	f8df 1bfc 	ldr.w	r1, [pc, #3068]	; 80011c4 <.text_33>
 80005ca:	64a9      	str	r1, [r5, #72]	; 0x48
 80005cc:	e7ce      	b.n	800056c <PDM_Filter_setConfig+0x58>
 80005ce:	f8df 0bf8 	ldr.w	r0, [pc, #3064]	; 80011c8 <.text_34>
 80005d2:	64a8      	str	r0, [r5, #72]	; 0x48
 80005d4:	e7ca      	b.n	800056c <PDM_Filter_setConfig+0x58>
 80005d6:	f8df 1bf4 	ldr.w	r1, [pc, #3060]	; 80011cc <.text_35>
 80005da:	64a9      	str	r1, [r5, #72]	; 0x48
 80005dc:	e7c6      	b.n	800056c <PDM_Filter_setConfig+0x58>
 80005de:	f8df 0bf0 	ldr.w	r0, [pc, #3056]	; 80011d0 <.text_36>
 80005e2:	64a8      	str	r0, [r5, #72]	; 0x48
 80005e4:	e7c2      	b.n	800056c <PDM_Filter_setConfig+0x58>
 80005e6:	1e40      	subs	r0, r0, #1
 80005e8:	2806      	cmp	r0, #6
 80005ea:	d8b5      	bhi.n	8000558 <PDM_Filter_setConfig+0x44>
 80005ec:	e8df f000 	tbb	[pc, r0]
 80005f0:	1d191511 	.word	0x1d191511
 80005f4:	000d0905 	.word	0x000d0905
 80005f8:	e7ae      	b.n	8000558 <PDM_Filter_setConfig+0x44>
 80005fa:	f20f 1159 	addw	r1, pc, #345	; 0x159
 80005fe:	64a9      	str	r1, [r5, #72]	; 0x48
 8000600:	e7b4      	b.n	800056c <PDM_Filter_setConfig+0x58>
 8000602:	f20f 2069 	addw	r0, pc, #617	; 0x269
 8000606:	64a8      	str	r0, [r5, #72]	; 0x48
 8000608:	e7b0      	b.n	800056c <PDM_Filter_setConfig+0x58>
 800060a:	f20f 31d1 	addw	r1, pc, #977	; 0x3d1
 800060e:	64a9      	str	r1, [r5, #72]	; 0x48
 8000610:	e7ac      	b.n	800056c <PDM_Filter_setConfig+0x58>
 8000612:	f20f 5035 	addw	r0, pc, #1333	; 0x535
 8000616:	64a8      	str	r0, [r5, #72]	; 0x48
 8000618:	e7a8      	b.n	800056c <PDM_Filter_setConfig+0x58>
 800061a:	f20f 61ed 	addw	r1, pc, #1773	; 0x6ed
 800061e:	64a9      	str	r1, [r5, #72]	; 0x48
 8000620:	e7a4      	b.n	800056c <PDM_Filter_setConfig+0x58>
 8000622:	f60f 1011 	addw	r0, pc, #2321	; 0x911
 8000626:	64a8      	str	r0, [r5, #72]	; 0x48
 8000628:	e7a0      	b.n	800056c <PDM_Filter_setConfig+0x58>
 800062a:	f60f 31b1 	addw	r1, pc, #2993	; 0xbb1
 800062e:	64a9      	str	r1, [r5, #72]	; 0x48
 8000630:	e79c      	b.n	800056c <PDM_Filter_setConfig+0x58>
 8000632:	2f34      	cmp	r7, #52	; 0x34
 8000634:	db03      	blt.n	800063e <PDM_Filter_setConfig+0x12a>
 8000636:	2033      	movs	r0, #51	; 0x33
 8000638:	3440      	adds	r4, #64	; 0x40
 800063a:	80b0      	strh	r0, [r6, #4]
 800063c:	e052      	b.n	80006e4 <PDM_Filter_setConfig+0x1d0>
 800063e:	f895 0040 	ldrb.w	r0, [r5, #64]	; 0x40
 8000642:	ed9f 8a86 	vldr	s16, [pc, #536]	; 800085c <.text_8>
 8000646:	eddf 8a85 	vldr	s17, [pc, #532]	; 800085c <.text_8>
 800064a:	f000 000f 	and.w	r0, r0, #15
 800064e:	1e40      	subs	r0, r0, #1
 8000650:	2806      	cmp	r0, #6
 8000652:	d827      	bhi.n	80006a4 <PDM_Filter_setConfig+0x190>
 8000654:	e8df f000 	tbb	[pc, r0]
 8000658:	221d1813 	.word	0x221d1813
 800065c:	000e0904 	.word	0x000e0904
 8000660:	eeb3 8a00 	vmov.f32	s16, #48	; 0x41800000  16.0
 8000664:	eddf 8a7e 	vldr	s17, [pc, #504]	; 8000860 <.text_9>
 8000668:	e01c      	b.n	80006a4 <PDM_Filter_setConfig+0x190>
 800066a:	eeb2 8a0c 	vmov.f32	s16, #44	; 0x41600000  14.0
 800066e:	eddf 8a7d 	vldr	s17, [pc, #500]	; 8000864 <.text_10>
 8000672:	e017      	b.n	80006a4 <PDM_Filter_setConfig+0x190>
 8000674:	eeb2 8a0a 	vmov.f32	s16, #42	; 0x41500000  13.0
 8000678:	eef2 8a00 	vmov.f32	s17, #32	; 0x41000000  8.0
 800067c:	e012      	b.n	80006a4 <PDM_Filter_setConfig+0x190>
 800067e:	eeb2 8a06 	vmov.f32	s16, #38	; 0x41300000  11.0
 8000682:	eddf 8a79 	vldr	s17, [pc, #484]	; 8000868 <.text_11>
 8000686:	e00d      	b.n	80006a4 <PDM_Filter_setConfig+0x190>
 8000688:	eeb2 8a04 	vmov.f32	s16, #36	; 0x41200000  10.0
 800068c:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8000690:	e008      	b.n	80006a4 <PDM_Filter_setConfig+0x190>
 8000692:	eeb2 8a02 	vmov.f32	s16, #34	; 0x41100000  9.0
 8000696:	eddf 8acf 	vldr	s17, [pc, #828]	; 80009d4 <.text_13>
 800069a:	e003      	b.n	80006a4 <PDM_Filter_setConfig+0x190>
 800069c:	eeb1 8a0c 	vmov.f32	s16, #28	; 0x40e00000  7.0
 80006a0:	eef4 8a00 	vmov.f32	s17, #64	; 0x3e000000  0.125
 80006a4:	4638      	mov	r0, r7
 80006a6:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 80006aa:	ee00 0a10 	vmov	s0, r0
 80006ae:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80006b2:	eec0 0a20 	vdiv.f32	s1, s0, s1
 80006b6:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80006ba:	f014 ff09 	bl	80154d0 <powf>
 80006be:	ee60 8a28 	vmul.f32	s17, s0, s17
 80006c2:	ed9f 1ac5 	vldr	s2, [pc, #788]	; 80009d8 <.text_14>
 80006c6:	ee71 0a48 	vsub.f32	s1, s2, s16
 80006ca:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80006ce:	f014 feff 	bl	80154d0 <powf>
 80006d2:	ee28 0a80 	vmul.f32	s0, s17, s0
 80006d6:	f015 f85f 	bl	8015798 <roundf>
 80006da:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 80006de:	872f      	strh	r7, [r5, #56]	; 0x38
 80006e0:	ed85 0a0f 	vstr	s0, [r5, #60]	; 0x3c
 80006e4:	8830      	ldrh	r0, [r6, #0]
 80006e6:	8628      	strh	r0, [r5, #48]	; 0x30
 80006e8:	8871      	ldrh	r1, [r6, #2]
 80006ea:	8669      	strh	r1, [r5, #50]	; 0x32
 80006ec:	b91c      	cbnz	r4, 80006f6 <PDM_Filter_setConfig+0x1e2>
 80006ee:	6c28      	ldr	r0, [r5, #64]	; 0x40
 80006f0:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 80006f4:	6428      	str	r0, [r5, #64]	; 0x40
 80006f6:	4620      	mov	r0, r4
 80006f8:	ecbd 8b02 	vpop	{d8}
 80006fc:	b001      	add	sp, #4
 80006fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000700 <PDM_Filter_getConfig>:
 8000700:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8000702:	f8df 381c 	ldr.w	r3, [pc, #2076]	; 8000f20 <.text_24>
 8000706:	429a      	cmp	r2, r3
 8000708:	d001      	beq.n	800070e <PDM_Filter_getConfig+0xe>
 800070a:	2004      	movs	r0, #4
 800070c:	4770      	bx	lr
 800070e:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8000710:	804a      	strh	r2, [r1, #2]
 8000712:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8000714:	800b      	strh	r3, [r1, #0]
 8000716:	8f00      	ldrh	r0, [r0, #56]	; 0x38
 8000718:	8088      	strh	r0, [r1, #4]
 800071a:	2000      	movs	r0, #0
 800071c:	4770      	bx	lr

0800071e <PDM_Filter>:
 800071e:	b410      	push	{r4}
 8000720:	b081      	sub	sp, #4
 8000722:	4613      	mov	r3, r2
 8000724:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000726:	f8df 47f8 	ldr.w	r4, [pc, #2040]	; 8000f20 <.text_24>
 800072a:	42a2      	cmp	r2, r4
 800072c:	bf18      	it	ne
 800072e:	2004      	movne	r0, #4
 8000730:	d106      	bne.n	8000740 <PDM_Filter+0x22>
 8000732:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000734:	05d4      	lsls	r4, r2, #23
 8000736:	d406      	bmi.n	8000746 <PDM_Filter+0x28>
 8000738:	2020      	movs	r0, #32
 800073a:	0613      	lsls	r3, r2, #24
 800073c:	bf58      	it	pl
 800073e:	2030      	movpl	r0, #48	; 0x30
 8000740:	b001      	add	sp, #4
 8000742:	bc10      	pop	{r4}
 8000744:	4770      	bx	lr
 8000746:	f103 020c 	add.w	r2, r3, #12
 800074a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800074c:	b001      	add	sp, #4
 800074e:	bc10      	pop	{r4}

08000750 <__iar_annotation$$tailcall>:
 8000750:	4718      	bx	r3
	...

08000754 <D16_GENERIC>:
 8000754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000758:	b086      	sub	sp, #24
 800075a:	4613      	mov	r3, r2
 800075c:	4682      	mov	sl, r0
 800075e:	f8d3 e010 	ldr.w	lr, [r3, #16]
 8000762:	f8d3 8014 	ldr.w	r8, [r3, #20]
 8000766:	6998      	ldr	r0, [r3, #24]
 8000768:	460c      	mov	r4, r1
 800076a:	9004      	str	r0, [sp, #16]
 800076c:	69df      	ldr	r7, [r3, #28]
 800076e:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8000772:	68d9      	ldr	r1, [r3, #12]
 8000774:	2500      	movs	r5, #0
 8000776:	9103      	str	r1, [sp, #12]
 8000778:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800077a:	f8d3 9030 	ldr.w	r9, [r3, #48]	; 0x30
 800077e:	f8df 0a54 	ldr.w	r0, [pc, #2644]	; 80011d4 <.text_37>
 8000782:	f8df 1a54 	ldr.w	r1, [pc, #2644]	; 80011d8 <.text_38>
 8000786:	f002 0610 	and.w	r6, r2, #16
 800078a:	f002 0220 	and.w	r2, r2, #32
 800078e:	9602      	str	r6, [sp, #8]
 8000790:	9201      	str	r2, [sp, #4]
 8000792:	8cde      	ldrh	r6, [r3, #38]	; 0x26
 8000794:	f8df 2790 	ldr.w	r2, [pc, #1936]	; 8000f28 <.text_26>
 8000798:	2e00      	cmp	r6, #0
 800079a:	d04f      	beq.n	800083c <D16_GENERIC+0xe8>
 800079c:	9405      	str	r4, [sp, #20]
 800079e:	8d5c      	ldrh	r4, [r3, #42]	; 0x2a
 80007a0:	2c01      	cmp	r4, #1
 80007a2:	d105      	bne.n	80007b0 <D16_GENERIC+0x5c>
 80007a4:	9c01      	ldr	r4, [sp, #4]
 80007a6:	f85a 6b02 	ldr.w	r6, [sl], #2
 80007aa:	b154      	cbz	r4, 80007c2 <D16_GENERIC+0x6e>
 80007ac:	ba76      	rev16	r6, r6
 80007ae:	e008      	b.n	80007c2 <D16_GENERIC+0x6e>
 80007b0:	f89a b000 	ldrb.w	fp, [sl]
 80007b4:	b2e4      	uxtb	r4, r4
 80007b6:	f81a 6004 	ldrb.w	r6, [sl, r4]
 80007ba:	eb0a 0a44 	add.w	sl, sl, r4, lsl #1
 80007be:	eb0b 2606 	add.w	r6, fp, r6, lsl #8
 80007c2:	1d14      	adds	r4, r2, #4
 80007c4:	f006 0bff 	and.w	fp, r6, #255	; 0xff
 80007c8:	f854 402b 	ldr.w	r4, [r4, fp, lsl #2]
 80007cc:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80007d0:	19e7      	adds	r7, r4, r7
 80007d2:	f3c7 0409 	ubfx	r4, r7, #0, #10
 80007d6:	46bb      	mov	fp, r7
 80007d8:	1d17      	adds	r7, r2, #4
 80007da:	f857 7026 	ldr.w	r7, [r7, r6, lsl #2]
 80007de:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 80007e2:	f3c7 0609 	ubfx	r6, r7, #0, #10
 80007e6:	0abf      	lsrs	r7, r7, #10
 80007e8:	ea46 4604 	orr.w	r6, r6, r4, lsl #16
 80007ec:	9c02      	ldr	r4, [sp, #8]
 80007ee:	fb26 cb01 	smlad	fp, r6, r1, ip
 80007f2:	fb26 fc00 	smuad	ip, r6, r0
 80007f6:	f5ab 6b00 	sub.w	fp, fp, #2048	; 0x800
 80007fa:	b14c      	cbz	r4, 8000810 <D16_GENERIC+0xbc>
 80007fc:	6a1e      	ldr	r6, [r3, #32]
 80007fe:	44de      	add	lr, fp
 8000800:	ebae 0e08 	sub.w	lr, lr, r8
 8000804:	46d8      	mov	r8, fp
 8000806:	fb5e fe16 	smmulr	lr, lr, r6
 800080a:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 800080e:	46f3      	mov	fp, lr
 8000810:	9e05      	ldr	r6, [sp, #20]
 8000812:	ea4f 4b0b 	mov.w	fp, fp, lsl #16
 8000816:	9600      	str	r6, [sp, #0]
 8000818:	fb5b f419 	smmulr	r4, fp, r9
 800081c:	8d1e      	ldrh	r6, [r3, #40]	; 0x28
 800081e:	fa1f fb85 	uxth.w	fp, r5
 8000822:	1c6d      	adds	r5, r5, #1
 8000824:	f324 048f 	ssat	r4, #16, r4, asr #2
 8000828:	fb06 f60b 	mul.w	r6, r6, fp
 800082c:	f8dd b000 	ldr.w	fp, [sp]
 8000830:	f82b 4016 	strh.w	r4, [fp, r6, lsl #1]
 8000834:	8cde      	ldrh	r6, [r3, #38]	; 0x26
 8000836:	b2ac      	uxth	r4, r5
 8000838:	42b4      	cmp	r4, r6
 800083a:	d3b0      	bcc.n	800079e <D16_GENERIC+0x4a>
 800083c:	f8c3 c008 	str.w	ip, [r3, #8]
 8000840:	9803      	ldr	r0, [sp, #12]
 8000842:	60d8      	str	r0, [r3, #12]
 8000844:	61df      	str	r7, [r3, #28]
 8000846:	f8c3 e010 	str.w	lr, [r3, #16]
 800084a:	f8c3 8014 	str.w	r8, [r3, #20]
 800084e:	9804      	ldr	r0, [sp, #16]
 8000850:	6198      	str	r0, [r3, #24]
 8000852:	2000      	movs	r0, #0
 8000854:	b006      	add	sp, #24
 8000856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800085c <.text_8>:
 800085c:	00000000 	.word	0x00000000

08000860 <.text_9>:
 8000860:	42800000 	.word	0x42800000

08000864 <.text_10>:
 8000864:	4197b426 	.word	0x4197b426

08000868 <.text_11>:
 8000868:	4017b426 	.word	0x4017b426

0800086c <D24_GENERIC>:
 800086c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000870:	b084      	sub	sp, #16
 8000872:	4607      	mov	r7, r0
 8000874:	4688      	mov	r8, r1
 8000876:	6910      	ldr	r0, [r2, #16]
 8000878:	6951      	ldr	r1, [r2, #20]
 800087a:	6993      	ldr	r3, [r2, #24]
 800087c:	9302      	str	r3, [sp, #8]
 800087e:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8000880:	69d3      	ldr	r3, [r2, #28]
 8000882:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8000886:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 800088a:	f8d2 e030 	ldr.w	lr, [r2, #48]	; 0x30
 800088e:	f006 0b10 	and.w	fp, r6, #16
 8000892:	f006 0620 	and.w	r6, r6, #32
 8000896:	f8cd b004 	str.w	fp, [sp, #4]
 800089a:	2500      	movs	r5, #0
 800089c:	9600      	str	r6, [sp, #0]
 800089e:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 80008a0:	f8df a684 	ldr.w	sl, [pc, #1668]	; 8000f28 <.text_26>
 80008a4:	2e00      	cmp	r6, #0
 80008a6:	f000 8087 	beq.w	80009b8 <D24_GENERIC+0x14c>
 80008aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80008ae:	46a8      	mov	r8, r5
 80008b0:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 80008b2:	2d01      	cmp	r5, #1
 80008b4:	d122      	bne.n	80008fc <D24_GENERIC+0x90>
 80008b6:	9d00      	ldr	r5, [sp, #0]
 80008b8:	783c      	ldrb	r4, [r7, #0]
 80008ba:	b1bd      	cbz	r5, 80008ec <D24_GENERIC+0x80>
 80008bc:	eb08 7bd8 	add.w	fp, r8, r8, lsr #31
 80008c0:	78fe      	ldrb	r6, [r7, #3]
 80008c2:	ea4f 0b6b 	mov.w	fp, fp, asr #1
 80008c6:	ebb8 054b 	subs.w	r5, r8, fp, lsl #1
 80008ca:	d107      	bne.n	80008dc <D24_GENERIC+0x70>
 80008cc:	0224      	lsls	r4, r4, #8
 80008ce:	787d      	ldrb	r5, [r7, #1]
 80008d0:	eb04 4406 	add.w	r4, r4, r6, lsl #16
 80008d4:	1cbf      	adds	r7, r7, #2
 80008d6:	1964      	adds	r4, r4, r5
 80008d8:	e01e      	b.n	8000918 <D24_GENERIC+0xac>
 80008da:	bf00      	nop
 80008dc:	f897 b002 	ldrb.w	fp, [r7, #2]
 80008e0:	0236      	lsls	r6, r6, #8
 80008e2:	eb06 460b 	add.w	r6, r6, fp, lsl #16
 80008e6:	1d3f      	adds	r7, r7, #4
 80008e8:	19a4      	adds	r4, r4, r6
 80008ea:	e015      	b.n	8000918 <D24_GENERIC+0xac>
 80008ec:	787e      	ldrb	r6, [r7, #1]
 80008ee:	78bd      	ldrb	r5, [r7, #2]
 80008f0:	1cff      	adds	r7, r7, #3
 80008f2:	0236      	lsls	r6, r6, #8
 80008f4:	eb06 4605 	add.w	r6, r6, r5, lsl #16
 80008f8:	19a4      	adds	r4, r4, r6
 80008fa:	e00d      	b.n	8000918 <D24_GENERIC+0xac>
 80008fc:	b2ed      	uxtb	r5, r5
 80008fe:	f897 b000 	ldrb.w	fp, [r7]
 8000902:	5d7e      	ldrb	r6, [r7, r5]
 8000904:	f817 4015 	ldrb.w	r4, [r7, r5, lsl #1]
 8000908:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800090c:	0236      	lsls	r6, r6, #8
 800090e:	eb06 4604 	add.w	r6, r6, r4, lsl #16
 8000912:	442f      	add	r7, r5
 8000914:	eb06 040b 	add.w	r4, r6, fp
 8000918:	f10a 0504 	add.w	r5, sl, #4
 800091c:	f004 06ff 	and.w	r6, r4, #255	; 0xff
 8000920:	0a24      	lsrs	r4, r4, #8
 8000922:	f855 5026 	ldr.w	r5, [r5, r6, lsl #2]
 8000926:	f10a 0b04 	add.w	fp, sl, #4
 800092a:	f004 06ff 	and.w	r6, r4, #255	; 0xff
 800092e:	f85b 6026 	ldr.w	r6, [fp, r6, lsl #2]
 8000932:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8000936:	0a24      	lsrs	r4, r4, #8
 8000938:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 800093c:	f3c5 0309 	ubfx	r3, r5, #0, #10
 8000940:	f3c6 0509 	ubfx	r5, r6, #0, #10
 8000944:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000948:	f85b 3024 	ldr.w	r3, [fp, r4, lsl #2]
 800094c:	f8df 4888 	ldr.w	r4, [pc, #2184]	; 80011d8 <.text_38>
 8000950:	f04f 0b01 	mov.w	fp, #1
 8000954:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 8000958:	fb25 c404 	smlad	r4, r5, r4, ip
 800095c:	f8df cdf8 	ldr.w	ip, [pc, #3576]	; 8001758 <.text_42>
 8000960:	f3c3 0609 	ubfx	r6, r3, #0, #10
 8000964:	fb25 9c0c 	smlad	ip, r5, ip, r9
 8000968:	eb06 0946 	add.w	r9, r6, r6, lsl #1
 800096c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8000970:	f5a4 54d8 	sub.w	r4, r4, #6912	; 0x1b00
 8000974:	eb0c 0c49 	add.w	ip, ip, r9, lsl #1
 8000978:	fb25 f90b 	smuad	r9, r5, fp
 800097c:	9d01      	ldr	r5, [sp, #4]
 800097e:	44b1      	add	r9, r6
 8000980:	b13d      	cbz	r5, 8000992 <D24_GENERIC+0x126>
 8000982:	6a16      	ldr	r6, [r2, #32]
 8000984:	1820      	adds	r0, r4, r0
 8000986:	1a40      	subs	r0, r0, r1
 8000988:	4621      	mov	r1, r4
 800098a:	fb50 f016 	smmulr	r0, r0, r6
 800098e:	0040      	lsls	r0, r0, #1
 8000990:	4604      	mov	r4, r0
 8000992:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 8000994:	03a4      	lsls	r4, r4, #14
 8000996:	fb54 f51e 	smmulr	r5, r4, lr
 800099a:	9c03      	ldr	r4, [sp, #12]
 800099c:	fb06 f608 	mul.w	r6, r6, r8
 80009a0:	f108 0801 	add.w	r8, r8, #1
 80009a4:	fa1f f888 	uxth.w	r8, r8
 80009a8:	f325 058f 	ssat	r5, #16, r5, asr #2
 80009ac:	f824 5016 	strh.w	r5, [r4, r6, lsl #1]
 80009b0:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 80009b2:	45a8      	cmp	r8, r5
 80009b4:	f6ff af7c 	blt.w	80008b0 <D24_GENERIC+0x44>
 80009b8:	f8c2 9008 	str.w	r9, [r2, #8]
 80009bc:	f8c2 c00c 	str.w	ip, [r2, #12]
 80009c0:	61d3      	str	r3, [r2, #28]
 80009c2:	6110      	str	r0, [r2, #16]
 80009c4:	6151      	str	r1, [r2, #20]
 80009c6:	9802      	ldr	r0, [sp, #8]
 80009c8:	6190      	str	r0, [r2, #24]
 80009ca:	2000      	movs	r0, #0
 80009cc:	b004      	add	sp, #16
 80009ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080009d4 <.text_13>:
 80009d4:	3f03126f 	.word	0x3f03126f

080009d8 <.text_14>:
 80009d8:	42000000 	.word	0x42000000

080009dc <D32_GENERIC>:
 80009dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009e0:	b084      	sub	sp, #16
 80009e2:	4682      	mov	sl, r0
 80009e4:	4688      	mov	r8, r1
 80009e6:	6910      	ldr	r0, [r2, #16]
 80009e8:	6951      	ldr	r1, [r2, #20]
 80009ea:	6993      	ldr	r3, [r2, #24]
 80009ec:	9302      	str	r3, [sp, #8]
 80009ee:	6b57      	ldr	r7, [r2, #52]	; 0x34
 80009f0:	69d3      	ldr	r3, [r2, #28]
 80009f2:	6894      	ldr	r4, [r2, #8]
 80009f4:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 80009f8:	f8d2 e030 	ldr.w	lr, [r2, #48]	; 0x30
 80009fc:	f007 0b10 	and.w	fp, r7, #16
 8000a00:	f007 0720 	and.w	r7, r7, #32
 8000a04:	f8cd b004 	str.w	fp, [sp, #4]
 8000a08:	2600      	movs	r6, #0
 8000a0a:	9700      	str	r7, [sp, #0]
 8000a0c:	8cd7      	ldrh	r7, [r2, #38]	; 0x26
 8000a0e:	f8df 9518 	ldr.w	r9, [pc, #1304]	; 8000f28 <.text_26>
 8000a12:	2f00      	cmp	r7, #0
 8000a14:	f000 808b 	beq.w	8000b2e <D32_GENERIC+0x152>
 8000a18:	f8cd 800c 	str.w	r8, [sp, #12]
 8000a1c:	46f0      	mov	r8, lr
 8000a1e:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 8000a20:	2d01      	cmp	r5, #1
 8000a22:	d106      	bne.n	8000a32 <D32_GENERIC+0x56>
 8000a24:	9d00      	ldr	r5, [sp, #0]
 8000a26:	f85a eb04 	ldr.w	lr, [sl], #4
 8000a2a:	b1bd      	cbz	r5, 8000a5c <D32_GENERIC+0x80>
 8000a2c:	fa9e fe9e 	rev16.w	lr, lr
 8000a30:	e014      	b.n	8000a5c <D32_GENERIC+0x80>
 8000a32:	b2ed      	uxtb	r5, r5
 8000a34:	f81a e015 	ldrb.w	lr, [sl, r5, lsl #1]
 8000a38:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 8000a3c:	f81a b007 	ldrb.w	fp, [sl, r7]
 8000a40:	f81a 7005 	ldrb.w	r7, [sl, r5]
 8000a44:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 8000a48:	eb0e 6e0b 	add.w	lr, lr, fp, lsl #24
 8000a4c:	f89a b000 	ldrb.w	fp, [sl]
 8000a50:	eb0a 0a85 	add.w	sl, sl, r5, lsl #2
 8000a54:	eb0e 2e07 	add.w	lr, lr, r7, lsl #8
 8000a58:	eb0e 0e0b 	add.w	lr, lr, fp
 8000a5c:	f109 0504 	add.w	r5, r9, #4
 8000a60:	f00e 07ff 	and.w	r7, lr, #255	; 0xff
 8000a64:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8000a68:	f855 5027 	ldr.w	r5, [r5, r7, lsl #2]
 8000a6c:	f109 0b04 	add.w	fp, r9, #4
 8000a70:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8000a74:	f00e 03ff 	and.w	r3, lr, #255	; 0xff
 8000a78:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 8000a7c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8000a80:	f00e 0bff 	and.w	fp, lr, #255	; 0xff
 8000a84:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8000a88:	eb03 2395 	add.w	r3, r3, r5, lsr #10
 8000a8c:	f3c5 0709 	ubfx	r7, r5, #0, #10
 8000a90:	f3c3 0509 	ubfx	r5, r3, #0, #10
 8000a94:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 8000a98:	f109 0704 	add.w	r7, r9, #4
 8000a9c:	f857 b02b 	ldr.w	fp, [r7, fp, lsl #2]
 8000aa0:	eb0b 2b93 	add.w	fp, fp, r3, lsr #10
 8000aa4:	f109 0304 	add.w	r3, r9, #4
 8000aa8:	f853 302e 	ldr.w	r3, [r3, lr, lsl #2]
 8000aac:	eb03 239b 	add.w	r3, r3, fp, lsr #10
 8000ab0:	f3cb 0709 	ubfx	r7, fp, #0, #10
 8000ab4:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
 8000ab8:	f3c3 0e09 	ubfx	lr, r3, #0, #10
 8000abc:	ea4e 4e07 	orr.w	lr, lr, r7, lsl #16
 8000ac0:	f8df 7c98 	ldr.w	r7, [pc, #3224]	; 800175c <.text_43>
 8000ac4:	fb25 cc07 	smlad	ip, r5, r7, ip
 8000ac8:	fb2e c70b 	smlad	r7, lr, fp, ip
 8000acc:	f8df cc90 	ldr.w	ip, [pc, #3216]	; 8001760 <.text_44>
 8000ad0:	f8df bc90 	ldr.w	fp, [pc, #3216]	; 8001764 <.text_45>
 8000ad4:	fb25 440c 	smlad	r4, r5, ip, r4
 8000ad8:	f8df cd90 	ldr.w	ip, [pc, #3472]	; 800186c <.text_47>
 8000adc:	f5a7 4780 	sub.w	r7, r7, #16384	; 0x4000
 8000ae0:	fb2e 4c0c 	smlad	ip, lr, ip, r4
 8000ae4:	2401      	movs	r4, #1
 8000ae6:	fb25 f404 	smuad	r4, r5, r4
 8000aea:	9d01      	ldr	r5, [sp, #4]
 8000aec:	fb2e 440b 	smlad	r4, lr, fp, r4
 8000af0:	b145      	cbz	r5, 8000b04 <D32_GENERIC+0x128>
 8000af2:	f8d2 e020 	ldr.w	lr, [r2, #32]
 8000af6:	1838      	adds	r0, r7, r0
 8000af8:	1a40      	subs	r0, r0, r1
 8000afa:	4639      	mov	r1, r7
 8000afc:	fb50 f01e 	smmulr	r0, r0, lr
 8000b00:	0040      	lsls	r0, r0, #1
 8000b02:	4607      	mov	r7, r0
 8000b04:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 8000b08:	037f      	lsls	r7, r7, #13
 8000b0a:	fb57 f518 	smmulr	r5, r7, r8
 8000b0e:	b2b7      	uxth	r7, r6
 8000b10:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8000b14:	1c76      	adds	r6, r6, #1
 8000b16:	fb0b f707 	mul.w	r7, fp, r7
 8000b1a:	f325 058f 	ssat	r5, #16, r5, asr #2
 8000b1e:	f82e 5017 	strh.w	r5, [lr, r7, lsl #1]
 8000b22:	f8b2 e026 	ldrh.w	lr, [r2, #38]	; 0x26
 8000b26:	b2b5      	uxth	r5, r6
 8000b28:	4575      	cmp	r5, lr
 8000b2a:	f4ff af78 	bcc.w	8000a1e <D32_GENERIC+0x42>
 8000b2e:	6094      	str	r4, [r2, #8]
 8000b30:	f8c2 c00c 	str.w	ip, [r2, #12]
 8000b34:	61d3      	str	r3, [r2, #28]
 8000b36:	6110      	str	r0, [r2, #16]
 8000b38:	6151      	str	r1, [r2, #20]
 8000b3a:	9802      	ldr	r0, [sp, #8]
 8000b3c:	6190      	str	r0, [r2, #24]
 8000b3e:	2000      	movs	r0, #0
 8000b40:	b004      	add	sp, #16
 8000b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08000b48 <D48_GENERIC>:
 8000b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b4c:	b085      	sub	sp, #20
 8000b4e:	4607      	mov	r7, r0
 8000b50:	4688      	mov	r8, r1
 8000b52:	6910      	ldr	r0, [r2, #16]
 8000b54:	6951      	ldr	r1, [r2, #20]
 8000b56:	6993      	ldr	r3, [r2, #24]
 8000b58:	9303      	str	r3, [sp, #12]
 8000b5a:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8000b5c:	69d3      	ldr	r3, [r2, #28]
 8000b5e:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8000b62:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 8000b66:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8000b68:	f006 0b10 	and.w	fp, r6, #16
 8000b6c:	f006 0620 	and.w	r6, r6, #32
 8000b70:	f8cd b004 	str.w	fp, [sp, #4]
 8000b74:	f04f 0e00 	mov.w	lr, #0
 8000b78:	9600      	str	r6, [sp, #0]
 8000b7a:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 8000b7c:	f8df a3a8 	ldr.w	sl, [pc, #936]	; 8000f28 <.text_26>
 8000b80:	2e00      	cmp	r6, #0
 8000b82:	f000 80b4 	beq.w	8000cee <D48_GENERIC+0x1a6>
 8000b86:	f8cd 8010 	str.w	r8, [sp, #16]
 8000b8a:	46f0      	mov	r8, lr
 8000b8c:	9502      	str	r5, [sp, #8]
 8000b8e:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 8000b90:	2d01      	cmp	r5, #1
 8000b92:	d10a      	bne.n	8000baa <D48_GENERIC+0x62>
 8000b94:	683c      	ldr	r4, [r7, #0]
 8000b96:	1d3d      	adds	r5, r7, #4
 8000b98:	f8d5 e000 	ldr.w	lr, [r5]
 8000b9c:	1caf      	adds	r7, r5, #2
 8000b9e:	9d00      	ldr	r5, [sp, #0]
 8000ba0:	b305      	cbz	r5, 8000be4 <D48_GENERIC+0x9c>
 8000ba2:	ba64      	rev16	r4, r4
 8000ba4:	fa9e fe9e 	rev16.w	lr, lr
 8000ba8:	e01c      	b.n	8000be4 <D48_GENERIC+0x9c>
 8000baa:	b2ed      	uxtb	r5, r5
 8000bac:	f817 6015 	ldrb.w	r6, [r7, r5, lsl #1]
 8000bb0:	eb05 0e45 	add.w	lr, r5, r5, lsl #1
 8000bb4:	f817 400e 	ldrb.w	r4, [r7, lr]
 8000bb8:	f817 e005 	ldrb.w	lr, [r7, r5]
 8000bbc:	eb05 0b85 	add.w	fp, r5, r5, lsl #2
 8000bc0:	0436      	lsls	r6, r6, #16
 8000bc2:	eb06 6604 	add.w	r6, r6, r4, lsl #24
 8000bc6:	783c      	ldrb	r4, [r7, #0]
 8000bc8:	eb06 260e 	add.w	r6, r6, lr, lsl #8
 8000bcc:	f817 e025 	ldrb.w	lr, [r7, r5, lsl #2]
 8000bd0:	eb16 0404 	adds.w	r4, r6, r4
 8000bd4:	f817 600b 	ldrb.w	r6, [r7, fp]
 8000bd8:	eb0e 2e06 	add.w	lr, lr, r6, lsl #8
 8000bdc:	eb05 0645 	add.w	r6, r5, r5, lsl #1
 8000be0:	eb07 0746 	add.w	r7, r7, r6, lsl #1
 8000be4:	f10a 0b04 	add.w	fp, sl, #4
 8000be8:	f004 05ff 	and.w	r5, r4, #255	; 0xff
 8000bec:	0a24      	lsrs	r4, r4, #8
 8000bee:	f85b 5025 	ldr.w	r5, [fp, r5, lsl #2]
 8000bf2:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8000bf6:	f004 03ff 	and.w	r3, r4, #255	; 0xff
 8000bfa:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 8000bfe:	0a24      	lsrs	r4, r4, #8
 8000c00:	f004 0bff 	and.w	fp, r4, #255	; 0xff
 8000c04:	0a24      	lsrs	r4, r4, #8
 8000c06:	eb03 2395 	add.w	r3, r3, r5, lsr #10
 8000c0a:	f3c5 0609 	ubfx	r6, r5, #0, #10
 8000c0e:	f3c3 0509 	ubfx	r5, r3, #0, #10
 8000c12:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
 8000c16:	f10a 0604 	add.w	r6, sl, #4
 8000c1a:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 8000c1e:	f856 6024 	ldr.w	r6, [r6, r4, lsl #2]
 8000c22:	eb0b 2b93 	add.w	fp, fp, r3, lsr #10
 8000c26:	eb06 269b 	add.w	r6, r6, fp, lsr #10
 8000c2a:	f3cb 0309 	ubfx	r3, fp, #0, #10
 8000c2e:	f10a 0b04 	add.w	fp, sl, #4
 8000c32:	f3c6 0409 	ubfx	r4, r6, #0, #10
 8000c36:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c3a:	f00e 03ff 	and.w	r3, lr, #255	; 0xff
 8000c3e:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 8000c42:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8000c46:	f85b e02e 	ldr.w	lr, [fp, lr, lsl #2]
 8000c4a:	f8df bb10 	ldr.w	fp, [pc, #2832]	; 800175c <.text_43>
 8000c4e:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 8000c52:	f3c3 0609 	ubfx	r6, r3, #0, #10
 8000c56:	eb0e 2393 	add.w	r3, lr, r3, lsr #10
 8000c5a:	f3c3 0e09 	ubfx	lr, r3, #0, #10
 8000c5e:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
 8000c62:	f8df 6c0c 	ldr.w	r6, [pc, #3084]	; 8001870 <.text_48>
 8000c66:	fb25 cc06 	smlad	ip, r5, r6, ip
 8000c6a:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 8000c6e:	fb24 cc0b 	smlad	ip, r4, fp, ip
 8000c72:	f04f 1b1b 	mov.w	fp, #1769499	; 0x1b001b
 8000c76:	fb2e c606 	smlad	r6, lr, r6, ip
 8000c7a:	f8df cbf8 	ldr.w	ip, [pc, #3064]	; 8001874 <.text_49>
 8000c7e:	fb25 990c 	smlad	r9, r5, ip, r9
 8000c82:	f8df cbf4 	ldr.w	ip, [pc, #3060]	; 8001878 <.text_50>
 8000c86:	fb24 990b 	smlad	r9, r4, fp, r9
 8000c8a:	f5a6 4658 	sub.w	r6, r6, #55296	; 0xd800
 8000c8e:	fb2e 9c0c 	smlad	ip, lr, ip, r9
 8000c92:	f04f 0901 	mov.w	r9, #1
 8000c96:	fb25 f909 	smuad	r9, r5, r9
 8000c9a:	f8df 5ac8 	ldr.w	r5, [pc, #2760]	; 8001764 <.text_45>
 8000c9e:	fb24 9905 	smlad	r9, r4, r5, r9
 8000ca2:	f8df 4d30 	ldr.w	r4, [pc, #3376]	; 80019d4 <.text_52>
 8000ca6:	9d01      	ldr	r5, [sp, #4]
 8000ca8:	fb2e 9904 	smlad	r9, lr, r4, r9
 8000cac:	b145      	cbz	r5, 8000cc0 <D48_GENERIC+0x178>
 8000cae:	f8d2 e020 	ldr.w	lr, [r2, #32]
 8000cb2:	1830      	adds	r0, r6, r0
 8000cb4:	1a40      	subs	r0, r0, r1
 8000cb6:	4631      	mov	r1, r6
 8000cb8:	fb50 f01e 	smmulr	r0, r0, lr
 8000cbc:	0040      	lsls	r0, r0, #1
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	9d02      	ldr	r5, [sp, #8]
 8000cc2:	02f6      	lsls	r6, r6, #11
 8000cc4:	fa1f f488 	uxth.w	r4, r8
 8000cc8:	f8dd e010 	ldr.w	lr, [sp, #16]
 8000ccc:	f108 0801 	add.w	r8, r8, #1
 8000cd0:	fb56 f515 	smmulr	r5, r6, r5
 8000cd4:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 8000cd6:	4374      	muls	r4, r6
 8000cd8:	f325 058f 	ssat	r5, #16, r5, asr #2
 8000cdc:	f82e 5014 	strh.w	r5, [lr, r4, lsl #1]
 8000ce0:	f8b2 e026 	ldrh.w	lr, [r2, #38]	; 0x26
 8000ce4:	fa1f f588 	uxth.w	r5, r8
 8000ce8:	4575      	cmp	r5, lr
 8000cea:	f4ff af50 	bcc.w	8000b8e <D48_GENERIC+0x46>
 8000cee:	f8c2 9008 	str.w	r9, [r2, #8]
 8000cf2:	f8c2 c00c 	str.w	ip, [r2, #12]
 8000cf6:	61d3      	str	r3, [r2, #28]
 8000cf8:	6110      	str	r0, [r2, #16]
 8000cfa:	6151      	str	r1, [r2, #20]
 8000cfc:	9803      	ldr	r0, [sp, #12]
 8000cfe:	6190      	str	r0, [r2, #24]
 8000d00:	2000      	movs	r0, #0
 8000d02:	b005      	add	sp, #20
 8000d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000d08 <D64_GENERIC>:
 8000d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d0c:	b084      	sub	sp, #16
 8000d0e:	4613      	mov	r3, r2
 8000d10:	4686      	mov	lr, r0
 8000d12:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8000d16:	f8d3 9014 	ldr.w	r9, [r3, #20]
 8000d1a:	6998      	ldr	r0, [r3, #24]
 8000d1c:	9002      	str	r0, [sp, #8]
 8000d1e:	8cde      	ldrh	r6, [r3, #38]	; 0x26
 8000d20:	69dc      	ldr	r4, [r3, #28]
 8000d22:	f8d3 a008 	ldr.w	sl, [r3, #8]
 8000d26:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 8000d2a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000d2c:	f04f 0c00 	mov.w	ip, #0
 8000d30:	4a7d      	ldr	r2, [pc, #500]	; (8000f28 <.text_26>)
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80d8 	beq.w	8000ee8 <D64_GENERIC+0x1e0>
 8000d38:	9103      	str	r1, [sp, #12]
 8000d3a:	9001      	str	r0, [sp, #4]
 8000d3c:	8d59      	ldrh	r1, [r3, #42]	; 0x2a
 8000d3e:	2901      	cmp	r1, #1
 8000d40:	d10a      	bne.n	8000d58 <D64_GENERIC+0x50>
 8000d42:	f893 6034 	ldrb.w	r6, [r3, #52]	; 0x34
 8000d46:	e8fe 0102 	ldrd	r0, r1, [lr], #8
 8000d4a:	460d      	mov	r5, r1
 8000d4c:	06b7      	lsls	r7, r6, #26
 8000d4e:	d52a      	bpl.n	8000da6 <D64_GENERIC+0x9e>
 8000d50:	ba40      	rev16	r0, r0
 8000d52:	ba6d      	rev16	r5, r5
 8000d54:	e027      	b.n	8000da6 <D64_GENERIC+0x9e>
 8000d56:	bf00      	nop
 8000d58:	f81e 6011 	ldrb.w	r6, [lr, r1, lsl #1]
 8000d5c:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8000d60:	f81e 5000 	ldrb.w	r5, [lr, r0]
 8000d64:	f81e 0001 	ldrb.w	r0, [lr, r1]
 8000d68:	f89e 7000 	ldrb.w	r7, [lr]
 8000d6c:	0436      	lsls	r6, r6, #16
 8000d6e:	eb06 6605 	add.w	r6, r6, r5, lsl #24
 8000d72:	ebc1 05c1 	rsb	r5, r1, r1, lsl #3
 8000d76:	eb06 2600 	add.w	r6, r6, r0, lsl #8
 8000d7a:	19f0      	adds	r0, r6, r7
 8000d7c:	eb01 0641 	add.w	r6, r1, r1, lsl #1
 8000d80:	eb01 0781 	add.w	r7, r1, r1, lsl #2
 8000d84:	f81e 5005 	ldrb.w	r5, [lr, r5]
 8000d88:	0076      	lsls	r6, r6, #1
 8000d8a:	f81e 6006 	ldrb.w	r6, [lr, r6]
 8000d8e:	0436      	lsls	r6, r6, #16
 8000d90:	eb06 6605 	add.w	r6, r6, r5, lsl #24
 8000d94:	f81e 5007 	ldrb.w	r5, [lr, r7]
 8000d98:	eb06 2605 	add.w	r6, r6, r5, lsl #8
 8000d9c:	f81e 5021 	ldrb.w	r5, [lr, r1, lsl #2]
 8000da0:	eb0e 0ec1 	add.w	lr, lr, r1, lsl #3
 8000da4:	1975      	adds	r5, r6, r5
 8000da6:	1d11      	adds	r1, r2, #4
 8000da8:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 8000dac:	f851 7026 	ldr.w	r7, [r1, r6, lsl #2]
 8000db0:	0a00      	lsrs	r0, r0, #8
 8000db2:	193c      	adds	r4, r7, r4
 8000db4:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 8000db8:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8000dbc:	f3c4 0609 	ubfx	r6, r4, #0, #10
 8000dc0:	eb01 2494 	add.w	r4, r1, r4, lsr #10
 8000dc4:	0a01      	lsrs	r1, r0, #8
 8000dc6:	f001 07ff 	and.w	r7, r1, #255	; 0xff
 8000dca:	0a09      	lsrs	r1, r1, #8
 8000dcc:	f3c4 0009 	ubfx	r0, r4, #0, #10
 8000dd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd4:	1d16      	adds	r6, r2, #4
 8000dd6:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 8000dda:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 8000dde:	1d14      	adds	r4, r2, #4
 8000de0:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 8000de4:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 8000de8:	f3c7 0609 	ubfx	r6, r7, #0, #10
 8000dec:	1d17      	adds	r7, r2, #4
 8000dee:	f3c4 0109 	ubfx	r1, r4, #0, #10
 8000df2:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
 8000df6:	f005 06ff 	and.w	r6, r5, #255	; 0xff
 8000dfa:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 8000dfe:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 8000e02:	0a2c      	lsrs	r4, r5, #8
 8000e04:	9600      	str	r6, [sp, #0]
 8000e06:	f3c6 0509 	ubfx	r5, r6, #0, #10
 8000e0a:	f004 06ff 	and.w	r6, r4, #255	; 0xff
 8000e0e:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 8000e12:	9f00      	ldr	r7, [sp, #0]
 8000e14:	0a24      	lsrs	r4, r4, #8
 8000e16:	eb06 2697 	add.w	r6, r6, r7, lsr #10
 8000e1a:	9600      	str	r6, [sp, #0]
 8000e1c:	f3c6 0709 	ubfx	r7, r6, #0, #10
 8000e20:	f004 06ff 	and.w	r6, r4, #255	; 0xff
 8000e24:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 8000e28:	1d17      	adds	r7, r2, #4
 8000e2a:	f857 7026 	ldr.w	r7, [r7, r6, lsl #2]
 8000e2e:	9e00      	ldr	r6, [sp, #0]
 8000e30:	0a24      	lsrs	r4, r4, #8
 8000e32:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8000e36:	9700      	str	r7, [sp, #0]
 8000e38:	f3c7 0609 	ubfx	r6, r7, #0, #10
 8000e3c:	1d17      	adds	r7, r2, #4
 8000e3e:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 8000e42:	9f00      	ldr	r7, [sp, #0]
 8000e44:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 8000e48:	f3c4 0709 	ubfx	r7, r4, #0, #10
 8000e4c:	0aa4      	lsrs	r4, r4, #10
 8000e4e:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 8000e52:	f8df 7b84 	ldr.w	r7, [pc, #2948]	; 80019d8 <.text_53>
 8000e56:	fb20 bb07 	smlad	fp, r0, r7, fp
 8000e5a:	f8df 7a14 	ldr.w	r7, [pc, #2580]	; 8001870 <.text_48>
 8000e5e:	fb21 bb07 	smlad	fp, r1, r7, fp
 8000e62:	f8df 78f8 	ldr.w	r7, [pc, #2296]	; 800175c <.text_43>
 8000e66:	fb25 bb07 	smlad	fp, r5, r7, fp
 8000e6a:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 8000e6e:	fb26 b707 	smlad	r7, r6, r7, fp
 8000e72:	f8df bb68 	ldr.w	fp, [pc, #2920]	; 80019dc <.text_54>
 8000e76:	fb20 aa0b 	smlad	sl, r0, fp, sl
 8000e7a:	fb26 aa1b 	smladx	sl, r6, fp, sl
 8000e7e:	f8df bb60 	ldr.w	fp, [pc, #2912]	; 80019e0 <.text_55>
 8000e82:	f5a7 3700 	sub.w	r7, r7, #131072	; 0x20000
 8000e86:	fb21 aa0b 	smlad	sl, r1, fp, sl
 8000e8a:	fb25 ab1b 	smladx	fp, r5, fp, sl
 8000e8e:	f04f 0a01 	mov.w	sl, #1
 8000e92:	fb20 fa0a 	smuad	sl, r0, sl
 8000e96:	f8df 08cc 	ldr.w	r0, [pc, #2252]	; 8001764 <.text_45>
 8000e9a:	fb21 a000 	smlad	r0, r1, r0, sl
 8000e9e:	f8df 1b34 	ldr.w	r1, [pc, #2868]	; 80019d4 <.text_52>
 8000ea2:	fb25 0001 	smlad	r0, r5, r1, r0
 8000ea6:	f8df 5cdc 	ldr.w	r5, [pc, #3292]	; 8001b84 <.text_57>
 8000eaa:	fb26 0a05 	smlad	sl, r6, r5, r0
 8000eae:	6a18      	ldr	r0, [r3, #32]
 8000eb0:	b140      	cbz	r0, 8000ec4 <D64_GENERIC+0x1bc>
 8000eb2:	44b8      	add	r8, r7
 8000eb4:	eba8 0809 	sub.w	r8, r8, r9
 8000eb8:	fb58 f810 	smmulr	r8, r8, r0
 8000ebc:	46b9      	mov	r9, r7
 8000ebe:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8000ec2:	4647      	mov	r7, r8
 8000ec4:	9801      	ldr	r0, [sp, #4]
 8000ec6:	8d1d      	ldrh	r5, [r3, #40]	; 0x28
 8000ec8:	02bf      	lsls	r7, r7, #10
 8000eca:	9903      	ldr	r1, [sp, #12]
 8000ecc:	fb57 f010 	smmulr	r0, r7, r0
 8000ed0:	fb05 f50c 	mul.w	r5, r5, ip
 8000ed4:	f10c 0c01 	add.w	ip, ip, #1
 8000ed8:	f320 008f 	ssat	r0, #16, r0, asr #2
 8000edc:	f821 0015 	strh.w	r0, [r1, r5, lsl #1]
 8000ee0:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
 8000ee2:	4584      	cmp	ip, r0
 8000ee4:	f6ff af2a 	blt.w	8000d3c <D64_GENERIC+0x34>
 8000ee8:	f8c3 a008 	str.w	sl, [r3, #8]
 8000eec:	f8c3 b00c 	str.w	fp, [r3, #12]
 8000ef0:	61dc      	str	r4, [r3, #28]
 8000ef2:	f8c3 8010 	str.w	r8, [r3, #16]
 8000ef6:	f8c3 9014 	str.w	r9, [r3, #20]
 8000efa:	9802      	ldr	r0, [sp, #8]
 8000efc:	6198      	str	r0, [r3, #24]
 8000efe:	2000      	movs	r0, #0
 8000f00:	b004      	add	sp, #16
 8000f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08000f08 <.text_18>:
 8000f08:	e0002000 	.word	0xe0002000

08000f0c <.text_19>:
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <.text_20>:
 8000f10:	e0042000 	.word	0xe0042000

08000f14 <.text_21>:
 8000f14:	5c001000 	.word	0x5c001000

08000f18 <.text_22>:
 8000f18:	58024c00 	.word	0x58024c00

08000f1c <.text_23>:
 8000f1c:	f407a5c2 	.word	0xf407a5c2

08000f20 <.text_24>:
 8000f20:	b5e8b5cd 	.word	0xb5e8b5cd

08000f24 <.text_25>:
 8000f24:	40023000 	.word	0x40023000

08000f28 <.text_26>:
 8000f28:	24000194 	.word	0x24000194

08000f2c <.text_27>:
 8000f2c:	000ffc00 	.word	0x000ffc00

08000f30 <.text_28>:
 8000f30:	3ff00000 	.word	0x3ff00000

08000f34 <D80_GENERIC>:
 8000f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f38:	460c      	mov	r4, r1
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	4611      	mov	r1, r2
 8000f3e:	f04f 0b00 	mov.w	fp, #0
 8000f42:	690b      	ldr	r3, [r1, #16]
 8000f44:	f8d1 8014 	ldr.w	r8, [r1, #20]
 8000f48:	698a      	ldr	r2, [r1, #24]
 8000f4a:	9202      	str	r2, [sp, #8]
 8000f4c:	f8b1 c026 	ldrh.w	ip, [r1, #38]	; 0x26
 8000f50:	69ca      	ldr	r2, [r1, #28]
 8000f52:	f8d1 9008 	ldr.w	r9, [r1, #8]
 8000f56:	f8d1 a00c 	ldr.w	sl, [r1, #12]
 8000f5a:	f8d1 e030 	ldr.w	lr, [r1, #48]	; 0x30
 8000f5e:	f1bc 0f00 	cmp.w	ip, #0
 8000f62:	f000 811a 	beq.w	800119a <D80_GENERIC+0x266>
 8000f66:	9403      	str	r4, [sp, #12]
 8000f68:	4684      	mov	ip, r0
 8000f6a:	9100      	str	r1, [sp, #0]
 8000f6c:	f8cd e004 	str.w	lr, [sp, #4]
 8000f70:	f8dd e000 	ldr.w	lr, [sp]
 8000f74:	f8be 402a 	ldrh.w	r4, [lr, #42]	; 0x2a
 8000f78:	2c01      	cmp	r4, #1
 8000f7a:	d112      	bne.n	8000fa2 <D80_GENERIC+0x6e>
 8000f7c:	9c00      	ldr	r4, [sp, #0]
 8000f7e:	f8dc e000 	ldr.w	lr, [ip]
 8000f82:	f10c 0004 	add.w	r0, ip, #4
 8000f86:	f100 0c04 	add.w	ip, r0, #4
 8000f8a:	6801      	ldr	r1, [r0, #0]
 8000f8c:	f85c 0b02 	ldr.w	r0, [ip], #2
 8000f90:	f894 5034 	ldrb.w	r5, [r4, #52]	; 0x34
 8000f94:	06ae      	lsls	r6, r5, #26
 8000f96:	d537      	bpl.n	8001008 <D80_GENERIC+0xd4>
 8000f98:	fa9e fe9e 	rev16.w	lr, lr
 8000f9c:	ba49      	rev16	r1, r1
 8000f9e:	ba40      	rev16	r0, r0
 8000fa0:	e032      	b.n	8001008 <D80_GENERIC+0xd4>
 8000fa2:	b2e4      	uxtb	r4, r4
 8000fa4:	f81c e014 	ldrb.w	lr, [ip, r4, lsl #1]
 8000fa8:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 8000fac:	f81c 1000 	ldrb.w	r1, [ip, r0]
 8000fb0:	f81c 0004 	ldrb.w	r0, [ip, r4]
 8000fb4:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 8000fb8:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 8000fbc:	eb0e 6e01 	add.w	lr, lr, r1, lsl #24
 8000fc0:	f89c 1000 	ldrb.w	r1, [ip]
 8000fc4:	f81c 6005 	ldrb.w	r6, [ip, r5]
 8000fc8:	eb0e 2e00 	add.w	lr, lr, r0, lsl #8
 8000fcc:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 8000fd0:	0040      	lsls	r0, r0, #1
 8000fd2:	f81c 7000 	ldrb.w	r7, [ip, r0]
 8000fd6:	448e      	add	lr, r1
 8000fd8:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8000fdc:	f81c 0024 	ldrb.w	r0, [ip, r4, lsl #2]
 8000fe0:	043f      	lsls	r7, r7, #16
 8000fe2:	eb07 6706 	add.w	r7, r7, r6, lsl #24
 8000fe6:	f81c 5001 	ldrb.w	r5, [ip, r1]
 8000fea:	eb04 06c4 	add.w	r6, r4, r4, lsl #3
 8000fee:	eb07 2705 	add.w	r7, r7, r5, lsl #8
 8000ff2:	f81c 5034 	ldrb.w	r5, [ip, r4, lsl #3]
 8000ff6:	1839      	adds	r1, r7, r0
 8000ff8:	f81c 7006 	ldrb.w	r7, [ip, r6]
 8000ffc:	eb05 2007 	add.w	r0, r5, r7, lsl #8
 8001000:	eb04 0584 	add.w	r5, r4, r4, lsl #2
 8001004:	eb0c 0c45 	add.w	ip, ip, r5, lsl #1
 8001008:	f8df 6b7c 	ldr.w	r6, [pc, #2940]	; 8001b88 <.text_58>
 800100c:	f00e 07ff 	and.w	r7, lr, #255	; 0xff
 8001010:	f856 4027 	ldr.w	r4, [r6, r7, lsl #2]
 8001014:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8001018:	f00e 07ff 	and.w	r7, lr, #255	; 0xff
 800101c:	18a2      	adds	r2, r4, r2
 800101e:	f856 4027 	ldr.w	r4, [r6, r7, lsl #2]
 8001022:	f3c2 0509 	ubfx	r5, r2, #0, #10
 8001026:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 800102a:	ea4f 221e 	mov.w	r2, lr, lsr #8
 800102e:	f3c4 0e09 	ubfx	lr, r4, #0, #10
 8001032:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
 8001036:	4635      	mov	r5, r6
 8001038:	f002 06ff 	and.w	r6, r2, #255	; 0xff
 800103c:	0a12      	lsrs	r2, r2, #8
 800103e:	f855 7026 	ldr.w	r7, [r5, r6, lsl #2]
 8001042:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8001046:	f8df 2b40 	ldr.w	r2, [pc, #2880]	; 8001b88 <.text_58>
 800104a:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800104e:	eb05 2597 	add.w	r5, r5, r7, lsr #10
 8001052:	f3c7 0609 	ubfx	r6, r7, #0, #10
 8001056:	f8df 7b30 	ldr.w	r7, [pc, #2864]	; 8001b88 <.text_58>
 800105a:	f3c5 0409 	ubfx	r4, r5, #0, #10
 800105e:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8001062:	f001 06ff 	and.w	r6, r1, #255	; 0xff
 8001066:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 800106a:	0a09      	lsrs	r1, r1, #8
 800106c:	f001 06ff 	and.w	r6, r1, #255	; 0xff
 8001070:	eb02 2295 	add.w	r2, r2, r5, lsr #10
 8001074:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 8001078:	f3c2 0509 	ubfx	r5, r2, #0, #10
 800107c:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 8001080:	0a0a      	lsrs	r2, r1, #8
 8001082:	f3c6 0109 	ubfx	r1, r6, #0, #10
 8001086:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800108a:	f002 05ff 	and.w	r5, r2, #255	; 0xff
 800108e:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8001092:	0a12      	lsrs	r2, r2, #8
 8001094:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 8001098:	f8df 6aec 	ldr.w	r6, [pc, #2796]	; 8001b88 <.text_58>
 800109c:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 80010a0:	f8df 2ae4 	ldr.w	r2, [pc, #2788]	; 8001b88 <.text_58>
 80010a4:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 80010a8:	f3c5 0709 	ubfx	r7, r5, #0, #10
 80010ac:	f3c6 0509 	ubfx	r5, r6, #0, #10
 80010b0:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 80010b4:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 80010b8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80010bc:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
 80010c0:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 80010c4:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 80010c8:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 80010cc:	f3c7 0609 	ubfx	r6, r7, #0, #10
 80010d0:	f8df 7904 	ldr.w	r7, [pc, #2308]	; 80019d8 <.text_53>
 80010d4:	f3c2 0009 	ubfx	r0, r2, #0, #10
 80010d8:	0a92      	lsrs	r2, r2, #10
 80010da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80010de:	f8df 6aac 	ldr.w	r6, [pc, #2732]	; 8001b8c <.text_59>
 80010e2:	fb2e aa06 	smlad	sl, lr, r6, sl
 80010e6:	f8df 6788 	ldr.w	r6, [pc, #1928]	; 8001870 <.text_48>
 80010ea:	fb24 aa07 	smlad	sl, r4, r7, sl
 80010ee:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 80010f2:	fb21 aa06 	smlad	sl, r1, r6, sl
 80010f6:	f8df 6664 	ldr.w	r6, [pc, #1636]	; 800175c <.text_43>
 80010fa:	fb25 aa06 	smlad	sl, r5, r6, sl
 80010fe:	fb20 a607 	smlad	r6, r0, r7, sl
 8001102:	f8df aa8c 	ldr.w	sl, [pc, #2700]	; 8001b90 <.text_60>
 8001106:	f04f 174b 	mov.w	r7, #4915275	; 0x4b004b
 800110a:	fb2e 990a 	smlad	r9, lr, sl, r9
 800110e:	f8df aca4 	ldr.w	sl, [pc, #3236]	; 8001db4 <.text_62>
 8001112:	f5a6 367a 	sub.w	r6, r6, #256000	; 0x3e800
 8001116:	fb24 990a 	smlad	r9, r4, sl, r9
 800111a:	f8df ac9c 	ldr.w	sl, [pc, #3228]	; 8001db8 <.text_63>
 800111e:	fb21 9907 	smlad	r9, r1, r7, r9
 8001122:	fb25 990a 	smlad	r9, r5, sl, r9
 8001126:	f8df ac94 	ldr.w	sl, [pc, #3220]	; 8001dbc <.text_64>
 800112a:	fb20 9a0a 	smlad	sl, r0, sl, r9
 800112e:	f04f 0901 	mov.w	r9, #1
 8001132:	fb2e f909 	smuad	r9, lr, r9
 8001136:	f8df e62c 	ldr.w	lr, [pc, #1580]	; 8001764 <.text_45>
 800113a:	fb24 990e 	smlad	r9, r4, lr, r9
 800113e:	f8df 4894 	ldr.w	r4, [pc, #2196]	; 80019d4 <.text_52>
 8001142:	f8df ec7c 	ldr.w	lr, [pc, #3196]	; 8001dc0 <.text_65>
 8001146:	fb21 9104 	smlad	r1, r1, r4, r9
 800114a:	f8df 9a38 	ldr.w	r9, [pc, #2616]	; 8001b84 <.text_57>
 800114e:	fb25 1109 	smlad	r1, r5, r9, r1
 8001152:	fb20 190e 	smlad	r9, r0, lr, r1
 8001156:	9800      	ldr	r0, [sp, #0]
 8001158:	6a00      	ldr	r0, [r0, #32]
 800115a:	b138      	cbz	r0, 800116c <D80_GENERIC+0x238>
 800115c:	18f3      	adds	r3, r6, r3
 800115e:	eba3 0308 	sub.w	r3, r3, r8
 8001162:	fb53 f310 	smmulr	r3, r3, r0
 8001166:	46b0      	mov	r8, r6
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	461e      	mov	r6, r3
 800116c:	f8dd e000 	ldr.w	lr, [sp]
 8001170:	9801      	ldr	r0, [sp, #4]
 8001172:	0276      	lsls	r6, r6, #9
 8001174:	9903      	ldr	r1, [sp, #12]
 8001176:	f8be 4028 	ldrh.w	r4, [lr, #40]	; 0x28
 800117a:	fb56 f010 	smmulr	r0, r6, r0
 800117e:	fb04 f40b 	mul.w	r4, r4, fp
 8001182:	f10b 0b01 	add.w	fp, fp, #1
 8001186:	f320 008f 	ssat	r0, #16, r0, asr #2
 800118a:	f821 0014 	strh.w	r0, [r1, r4, lsl #1]
 800118e:	9800      	ldr	r0, [sp, #0]
 8001190:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
 8001192:	458b      	cmp	fp, r1
 8001194:	f6ff aeec 	blt.w	8000f70 <D80_GENERIC+0x3c>
 8001198:	4601      	mov	r1, r0
 800119a:	f8c1 9008 	str.w	r9, [r1, #8]
 800119e:	f8c1 a00c 	str.w	sl, [r1, #12]
 80011a2:	61ca      	str	r2, [r1, #28]
 80011a4:	610b      	str	r3, [r1, #16]
 80011a6:	f8c1 8014 	str.w	r8, [r1, #20]
 80011aa:	9802      	ldr	r0, [sp, #8]
 80011ac:	6188      	str	r0, [r1, #24]
 80011ae:	2000      	movs	r0, #0
 80011b0:	b004      	add	sp, #16
 80011b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080011b8 <.text_30>:
 80011b8:	08001581 	.word	0x08001581

080011bc <.text_31>:
 80011bc:	08001639 	.word	0x08001639

080011c0 <.text_32>:
 80011c0:	08001769 	.word	0x08001769

080011c4 <.text_33>:
 80011c4:	0800187d 	.word	0x0800187d

080011c8 <.text_34>:
 80011c8:	080019e5 	.word	0x080019e5

080011cc <.text_35>:
 80011cc:	08001b95 	.word	0x08001b95

080011d0 <.text_36>:
 80011d0:	08001dd5 	.word	0x08001dd5

080011d4 <.text_37>:
 80011d4:	00010003 	.word	0x00010003

080011d8 <.text_38>:
 80011d8:	00030001 	.word	0x00030001

080011dc <D128_GENERIC>:
 80011dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011e0:	b089      	sub	sp, #36	; 0x24
 80011e2:	4681      	mov	r9, r0
 80011e4:	f8d2 a010 	ldr.w	sl, [r2, #16]
 80011e8:	f8d2 b014 	ldr.w	fp, [r2, #20]
 80011ec:	6990      	ldr	r0, [r2, #24]
 80011ee:	f04f 0800 	mov.w	r8, #0
 80011f2:	9007      	str	r0, [sp, #28]
 80011f4:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 80011f6:	69d5      	ldr	r5, [r2, #28]
 80011f8:	f8d2 c008 	ldr.w	ip, [r2, #8]
 80011fc:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8001200:	6b10      	ldr	r0, [r2, #48]	; 0x30
 8001202:	f8df 4bc0 	ldr.w	r4, [pc, #3008]	; 8001dc4 <.text_66>
 8001206:	2e00      	cmp	r6, #0
 8001208:	f000 81aa 	beq.w	8001560 <D128_GENERIC+0x384>
 800120c:	9108      	str	r1, [sp, #32]
 800120e:	9201      	str	r2, [sp, #4]
 8001210:	9006      	str	r0, [sp, #24]
 8001212:	9801      	ldr	r0, [sp, #4]
 8001214:	8d46      	ldrh	r6, [r0, #42]	; 0x2a
 8001216:	2e01      	cmp	r6, #1
 8001218:	d10d      	bne.n	8001236 <D128_GENERIC+0x5a>
 800121a:	9e01      	ldr	r6, [sp, #4]
 800121c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8001220:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8001224:	f896 7034 	ldrb.w	r7, [r6, #52]	; 0x34
 8001228:	06be      	lsls	r6, r7, #26
 800122a:	d55b      	bpl.n	80012e4 <D128_GENERIC+0x108>
 800122c:	ba40      	rev16	r0, r0
 800122e:	ba49      	rev16	r1, r1
 8001230:	ba52      	rev16	r2, r2
 8001232:	ba5b      	rev16	r3, r3
 8001234:	e056      	b.n	80012e4 <D128_GENERIC+0x108>
 8001236:	b2f6      	uxtb	r6, r6
 8001238:	f899 3000 	ldrb.w	r3, [r9]
 800123c:	f819 2016 	ldrb.w	r2, [r9, r6, lsl #1]
 8001240:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8001244:	f819 1000 	ldrb.w	r1, [r9, r0]
 8001248:	f819 0006 	ldrb.w	r0, [r9, r6]
 800124c:	ebc6 07c6 	rsb	r7, r6, r6, lsl #3
 8001250:	0412      	lsls	r2, r2, #16
 8001252:	eb02 6201 	add.w	r2, r2, r1, lsl #24
 8001256:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 800125a:	eb02 2200 	add.w	r2, r2, r0, lsl #8
 800125e:	0049      	lsls	r1, r1, #1
 8001260:	f819 1001 	ldrb.w	r1, [r9, r1]
 8001264:	18d0      	adds	r0, r2, r3
 8001266:	eb06 0386 	add.w	r3, r6, r6, lsl #2
 800126a:	f819 2007 	ldrb.w	r2, [r9, r7]
 800126e:	0409      	lsls	r1, r1, #16
 8001270:	eb01 6102 	add.w	r1, r1, r2, lsl #24
 8001274:	f819 7003 	ldrb.w	r7, [r9, r3]
 8001278:	f819 2026 	ldrb.w	r2, [r9, r6, lsl #2]
 800127c:	eb01 2107 	add.w	r1, r1, r7, lsl #8
 8001280:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 8001284:	1889      	adds	r1, r1, r2
 8001286:	220b      	movs	r2, #11
 8001288:	fb12 f206 	smulbb	r2, r2, r6
 800128c:	007f      	lsls	r7, r7, #1
 800128e:	f819 3007 	ldrb.w	r3, [r9, r7]
 8001292:	f819 7036 	ldrb.w	r7, [r9, r6, lsl #3]
 8001296:	f819 2002 	ldrb.w	r2, [r9, r2]
 800129a:	041b      	lsls	r3, r3, #16
 800129c:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 80012a0:	eb06 02c6 	add.w	r2, r6, r6, lsl #3
 80012a4:	f819 2002 	ldrb.w	r2, [r9, r2]
 80012a8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80012ac:	19da      	adds	r2, r3, r7
 80012ae:	ebc6 07c6 	rsb	r7, r6, r6, lsl #3
 80012b2:	ebc6 1306 	rsb	r3, r6, r6, lsl #4
 80012b6:	007f      	lsls	r7, r7, #1
 80012b8:	f819 7007 	ldrb.w	r7, [r9, r7]
 80012bc:	f819 3003 	ldrb.w	r3, [r9, r3]
 80012c0:	043f      	lsls	r7, r7, #16
 80012c2:	eb07 6703 	add.w	r7, r7, r3, lsl #24
 80012c6:	230d      	movs	r3, #13
 80012c8:	fb13 f306 	smulbb	r3, r3, r6
 80012cc:	f819 3003 	ldrb.w	r3, [r9, r3]
 80012d0:	eb07 2703 	add.w	r7, r7, r3, lsl #8
 80012d4:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	f819 3003 	ldrb.w	r3, [r9, r3]
 80012de:	eb09 1906 	add.w	r9, r9, r6, lsl #4
 80012e2:	18fb      	adds	r3, r7, r3
 80012e4:	1d26      	adds	r6, r4, #4
 80012e6:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 80012ea:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 80012ee:	0a00      	lsrs	r0, r0, #8
 80012f0:	197e      	adds	r6, r7, r5
 80012f2:	f3c6 0509 	ubfx	r5, r6, #0, #10
 80012f6:	9600      	str	r6, [sp, #0]
 80012f8:	1d27      	adds	r7, r4, #4
 80012fa:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 80012fe:	0a00      	lsrs	r0, r0, #8
 8001300:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 8001304:	9f00      	ldr	r7, [sp, #0]
 8001306:	eb06 2697 	add.w	r6, r6, r7, lsr #10
 800130a:	f3c6 0709 	ubfx	r7, r6, #0, #10
 800130e:	ea47 4705 	orr.w	r7, r7, r5, lsl #16
 8001312:	1d25      	adds	r5, r4, #4
 8001314:	9705      	str	r7, [sp, #20]
 8001316:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 800131a:	f855 5027 	ldr.w	r5, [r5, r7, lsl #2]
 800131e:	0a00      	lsrs	r0, r0, #8
 8001320:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 8001324:	1d26      	adds	r6, r4, #4
 8001326:	f856 6020 	ldr.w	r6, [r6, r0, lsl #2]
 800132a:	f001 00ff 	and.w	r0, r1, #255	; 0xff
 800132e:	0a09      	lsrs	r1, r1, #8
 8001330:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 8001334:	f3c5 0709 	ubfx	r7, r5, #0, #10
 8001338:	f3c6 0509 	ubfx	r5, r6, #0, #10
 800133c:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 8001340:	1d27      	adds	r7, r4, #4
 8001342:	9504      	str	r5, [sp, #16]
 8001344:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8001348:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 800134c:	f001 06ff 	and.w	r6, r1, #255	; 0xff
 8001350:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 8001354:	0a09      	lsrs	r1, r1, #8
 8001356:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 800135a:	f3c0 0509 	ubfx	r5, r0, #0, #10
 800135e:	f001 00ff 	and.w	r0, r1, #255	; 0xff
 8001362:	0a09      	lsrs	r1, r1, #8
 8001364:	f3c6 0709 	ubfx	r7, r6, #0, #10
 8001368:	ea47 4705 	orr.w	r7, r7, r5, lsl #16
 800136c:	1d25      	adds	r5, r4, #4
 800136e:	9703      	str	r7, [sp, #12]
 8001370:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8001374:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 8001378:	1d26      	adds	r6, r4, #4
 800137a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800137e:	f002 06ff 	and.w	r6, r2, #255	; 0xff
 8001382:	0a12      	lsrs	r2, r2, #8
 8001384:	eb01 2190 	add.w	r1, r1, r0, lsr #10
 8001388:	f3c0 0509 	ubfx	r5, r0, #0, #10
 800138c:	f3c1 0709 	ubfx	r7, r1, #0, #10
 8001390:	ea47 4705 	orr.w	r7, r7, r5, lsl #16
 8001394:	1d25      	adds	r5, r4, #4
 8001396:	9702      	str	r7, [sp, #8]
 8001398:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
 800139c:	f002 06ff 	and.w	r6, r2, #255	; 0xff
 80013a0:	0a12      	lsrs	r2, r2, #8
 80013a2:	eb00 2091 	add.w	r0, r0, r1, lsr #10
 80013a6:	1d21      	adds	r1, r4, #4
 80013a8:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 80013ac:	f002 06ff 	and.w	r6, r2, #255	; 0xff
 80013b0:	0a12      	lsrs	r2, r2, #8
 80013b2:	eb01 2190 	add.w	r1, r1, r0, lsr #10
 80013b6:	f3c0 0509 	ubfx	r5, r0, #0, #10
 80013ba:	f3c1 0709 	ubfx	r7, r1, #0, #10
 80013be:	ea47 4705 	orr.w	r7, r7, r5, lsl #16
 80013c2:	1d25      	adds	r5, r4, #4
 80013c4:	9700      	str	r7, [sp, #0]
 80013c6:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
 80013ca:	1d27      	adds	r7, r4, #4
 80013cc:	eb00 2091 	add.w	r0, r0, r1, lsr #10
 80013d0:	1d21      	adds	r1, r4, #4
 80013d2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80013d6:	1d22      	adds	r2, r4, #4
 80013d8:	eb01 2190 	add.w	r1, r1, r0, lsr #10
 80013dc:	f3c0 0509 	ubfx	r5, r0, #0, #10
 80013e0:	f3c1 0009 	ubfx	r0, r1, #0, #10
 80013e4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80013e8:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80013ec:	0a1b      	lsrs	r3, r3, #8
 80013ee:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
 80013f2:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 80013f6:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 80013fa:	f857 2021 	ldr.w	r2, [r7, r1, lsl #2]
 80013fe:	0a1b      	lsrs	r3, r3, #8
 8001400:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 8001404:	f3c6 0509 	ubfx	r5, r6, #0, #10
 8001408:	f003 06ff 	and.w	r6, r3, #255	; 0xff
 800140c:	0a1b      	lsrs	r3, r3, #8
 800140e:	f3c2 0109 	ubfx	r1, r2, #0, #10
 8001412:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8001416:	1d25      	adds	r5, r4, #4
 8001418:	f855 7026 	ldr.w	r7, [r5, r6, lsl #2]
 800141c:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 8001420:	1d22      	adds	r2, r4, #4
 8001422:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8001426:	f8df 39a0 	ldr.w	r3, [pc, #2464]	; 8001dc8 <.text_67>
 800142a:	eb05 2597 	add.w	r5, r5, r7, lsr #10
 800142e:	f3c7 0609 	ubfx	r6, r7, #0, #10
 8001432:	9f04      	ldr	r7, [sp, #16]
 8001434:	f3c5 0209 	ubfx	r2, r5, #0, #10
 8001438:	0aad      	lsrs	r5, r5, #10
 800143a:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800143e:	9e05      	ldr	r6, [sp, #20]
 8001440:	fb26 e303 	smlad	r3, r6, r3, lr
 8001444:	f8df e984 	ldr.w	lr, [pc, #2436]	; 8001dcc <.text_68>
 8001448:	f8df 6984 	ldr.w	r6, [pc, #2436]	; 8001dd0 <.text_69>
 800144c:	fb27 330e 	smlad	r3, r7, lr, r3
 8001450:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8001454:	f8df 7734 	ldr.w	r7, [pc, #1844]	; 8001b8c <.text_59>
 8001458:	fb2e 3306 	smlad	r3, lr, r6, r3
 800145c:	9e02      	ldr	r6, [sp, #8]
 800145e:	f8df e578 	ldr.w	lr, [pc, #1400]	; 80019d8 <.text_53>
 8001462:	fb26 3307 	smlad	r3, r6, r7, r3
 8001466:	9f00      	ldr	r7, [sp, #0]
 8001468:	f8df 6404 	ldr.w	r6, [pc, #1028]	; 8001870 <.text_48>
 800146c:	fb27 330e 	smlad	r3, r7, lr, r3
 8001470:	f8df e2e8 	ldr.w	lr, [pc, #744]	; 800175c <.text_43>
 8001474:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 8001478:	fb20 3306 	smlad	r3, r0, r6, r3
 800147c:	f8df 6c2c 	ldr.w	r6, [pc, #3116]	; 80020ac <.text_71>
 8001480:	fb21 330e 	smlad	r3, r1, lr, r3
 8001484:	f8dd e014 	ldr.w	lr, [sp, #20]
 8001488:	fb22 3307 	smlad	r3, r2, r7, r3
 800148c:	f8df 7c20 	ldr.w	r7, [pc, #3104]	; 80020b0 <.text_72>
 8001490:	fb2e cc06 	smlad	ip, lr, r6, ip
 8001494:	9e04      	ldr	r6, [sp, #16]
 8001496:	f8df ec1c 	ldr.w	lr, [pc, #3100]	; 80020b4 <.text_73>
 800149a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800149e:	fb26 cc07 	smlad	ip, r6, r7, ip
 80014a2:	9f03      	ldr	r7, [sp, #12]
 80014a4:	f8df 6c10 	ldr.w	r6, [pc, #3088]	; 80020b8 <.text_74>
 80014a8:	fb27 cc0e 	smlad	ip, r7, lr, ip
 80014ac:	f8dd e008 	ldr.w	lr, [sp, #8]
 80014b0:	f8df 7c08 	ldr.w	r7, [pc, #3080]	; 80020bc <.text_75>
 80014b4:	fb2e cc06 	smlad	ip, lr, r6, ip
 80014b8:	9e00      	ldr	r6, [sp, #0]
 80014ba:	f8df ec04 	ldr.w	lr, [pc, #3076]	; 80020c0 <.text_76>
 80014be:	fb26 cc07 	smlad	ip, r6, r7, ip
 80014c2:	f8df 7c00 	ldr.w	r7, [pc, #3072]	; 80020c4 <.text_77>
 80014c6:	f8df 6c00 	ldr.w	r6, [pc, #3072]	; 80020c8 <.text_78>
 80014ca:	fb20 cc0e 	smlad	ip, r0, lr, ip
 80014ce:	fb21 cc07 	smlad	ip, r1, r7, ip
 80014d2:	9f05      	ldr	r7, [sp, #20]
 80014d4:	fb22 ce06 	smlad	lr, r2, r6, ip
 80014d8:	f04f 0c01 	mov.w	ip, #1
 80014dc:	4ea1      	ldr	r6, [pc, #644]	; (8001764 <.text_45>)
 80014de:	fb27 fc0c 	smuad	ip, r7, ip
 80014e2:	9f04      	ldr	r7, [sp, #16]
 80014e4:	fb27 cc06 	smlad	ip, r7, r6, ip
 80014e8:	9f03      	ldr	r7, [sp, #12]
 80014ea:	f8df 64e8 	ldr.w	r6, [pc, #1256]	; 80019d4 <.text_52>
 80014ee:	fb27 cc06 	smlad	ip, r7, r6, ip
 80014f2:	9f02      	ldr	r7, [sp, #8]
 80014f4:	f8df 668c 	ldr.w	r6, [pc, #1676]	; 8001b84 <.text_57>
 80014f8:	fb27 cc06 	smlad	ip, r7, r6, ip
 80014fc:	9f00      	ldr	r7, [sp, #0]
 80014fe:	f8df 68c0 	ldr.w	r6, [pc, #2240]	; 8001dc0 <.text_65>
 8001502:	fb27 cc06 	smlad	ip, r7, r6, ip
 8001506:	f8df 6bc4 	ldr.w	r6, [pc, #3012]	; 80020cc <.text_79>
 800150a:	fb20 c006 	smlad	r0, r0, r6, ip
 800150e:	f8df cbc0 	ldr.w	ip, [pc, #3008]	; 80020d0 <.text_80>
 8001512:	fb21 000c 	smlad	r0, r1, ip, r0
 8001516:	f8df 1bbc 	ldr.w	r1, [pc, #3004]	; 80020d4 <.text_81>
 800151a:	fb22 0c01 	smlad	ip, r2, r1, r0
 800151e:	9801      	ldr	r0, [sp, #4]
 8001520:	6a00      	ldr	r0, [r0, #32]
 8001522:	b140      	cbz	r0, 8001536 <D128_GENERIC+0x35a>
 8001524:	449a      	add	sl, r3
 8001526:	ebaa 0a0b 	sub.w	sl, sl, fp
 800152a:	fb5a fa10 	smmulr	sl, sl, r0
 800152e:	469b      	mov	fp, r3
 8001530:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 8001534:	4653      	mov	r3, sl
 8001536:	9a01      	ldr	r2, [sp, #4]
 8001538:	9806      	ldr	r0, [sp, #24]
 800153a:	01db      	lsls	r3, r3, #7
 800153c:	9908      	ldr	r1, [sp, #32]
 800153e:	fb53 f010 	smmulr	r0, r3, r0
 8001542:	8d13      	ldrh	r3, [r2, #40]	; 0x28
 8001544:	fb03 f308 	mul.w	r3, r3, r8
 8001548:	f108 0801 	add.w	r8, r8, #1
 800154c:	f320 008f 	ssat	r0, #16, r0, asr #2
 8001550:	f821 0013 	strh.w	r0, [r1, r3, lsl #1]
 8001554:	9801      	ldr	r0, [sp, #4]
 8001556:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
 8001558:	4588      	cmp	r8, r1
 800155a:	f6ff ae5a 	blt.w	8001212 <D128_GENERIC+0x36>
 800155e:	4602      	mov	r2, r0
 8001560:	f8c2 c008 	str.w	ip, [r2, #8]
 8001564:	f8c2 e00c 	str.w	lr, [r2, #12]
 8001568:	61d5      	str	r5, [r2, #28]
 800156a:	f8c2 a010 	str.w	sl, [r2, #16]
 800156e:	f8c2 b014 	str.w	fp, [r2, #20]
 8001572:	9807      	ldr	r0, [sp, #28]
 8001574:	6190      	str	r0, [r2, #24]
 8001576:	2000      	movs	r0, #0
 8001578:	b009      	add	sp, #36	; 0x24
 800157a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08001580 <D16_1CH_HTONS_VOL_HP>:
 8001580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001584:	b083      	sub	sp, #12
 8001586:	4616      	mov	r6, r2
 8001588:	4681      	mov	r9, r0
 800158a:	6934      	ldr	r4, [r6, #16]
 800158c:	6975      	ldr	r5, [r6, #20]
 800158e:	69b0      	ldr	r0, [r6, #24]
 8001590:	4688      	mov	r8, r1
 8001592:	9002      	str	r0, [sp, #8]
 8001594:	69f1      	ldr	r1, [r6, #28]
 8001596:	68b3      	ldr	r3, [r6, #8]
 8001598:	68f0      	ldr	r0, [r6, #12]
 800159a:	9001      	str	r0, [sp, #4]
 800159c:	8cf0      	ldrh	r0, [r6, #38]	; 0x26
 800159e:	f8d6 c030 	ldr.w	ip, [r6, #48]	; 0x30
 80015a2:	f8d6 e020 	ldr.w	lr, [r6, #32]
 80015a6:	2801      	cmp	r0, #1
 80015a8:	db39      	blt.n	800161e <D16_1CH_HTONS_VOL_HP+0x9e>
 80015aa:	f8df 7b2c 	ldr.w	r7, [pc, #2860]	; 80020d8 <.text_82>
 80015ae:	464a      	mov	r2, r9
 80015b0:	9700      	str	r7, [sp, #0]
 80015b2:	f8df 7810 	ldr.w	r7, [pc, #2064]	; 8001dc4 <.text_66>
 80015b6:	46e1      	mov	r9, ip
 80015b8:	f852 cb02 	ldr.w	ip, [r2], #2
 80015bc:	fa9c fb9c 	rev16.w	fp, ip
 80015c0:	f107 0c04 	add.w	ip, r7, #4
 80015c4:	f00b 0aff 	and.w	sl, fp, #255	; 0xff
 80015c8:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 80015cc:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
 80015d0:	eb0a 0c01 	add.w	ip, sl, r1
 80015d4:	1d39      	adds	r1, r7, #4
 80015d6:	f851 102b 	ldr.w	r1, [r1, fp, lsl #2]
 80015da:	f3cc 0a09 	ubfx	sl, ip, #0, #10
 80015de:	eb01 219c 	add.w	r1, r1, ip, lsr #10
 80015e2:	f3c1 0c09 	ubfx	ip, r1, #0, #10
 80015e6:	0a89      	lsrs	r1, r1, #10
 80015e8:	ea4c 4c0a 	orr.w	ip, ip, sl, lsl #16
 80015ec:	f8df aaec 	ldr.w	sl, [pc, #2796]	; 80020dc <.text_83>
 80015f0:	fb2c 3a0a 	smlad	sl, ip, sl, r3
 80015f4:	9b00      	ldr	r3, [sp, #0]
 80015f6:	f5aa 6a00 	sub.w	sl, sl, #2048	; 0x800
 80015fa:	4454      	add	r4, sl
 80015fc:	1b64      	subs	r4, r4, r5
 80015fe:	4655      	mov	r5, sl
 8001600:	fb54 f41e 	smmulr	r4, r4, lr
 8001604:	fb2c f303 	smuad	r3, ip, r3
 8001608:	0064      	lsls	r4, r4, #1
 800160a:	ea4f 4c04 	mov.w	ip, r4, lsl #16
 800160e:	fb5c fc19 	smmulr	ip, ip, r9
 8001612:	1e40      	subs	r0, r0, #1
 8001614:	f32c 0c8f 	ssat	ip, #16, ip, asr #2
 8001618:	f828 cb02 	strh.w	ip, [r8], #2
 800161c:	d1cc      	bne.n	80015b8 <D16_1CH_HTONS_VOL_HP+0x38>
 800161e:	60b3      	str	r3, [r6, #8]
 8001620:	9801      	ldr	r0, [sp, #4]
 8001622:	60f0      	str	r0, [r6, #12]
 8001624:	61f1      	str	r1, [r6, #28]
 8001626:	6134      	str	r4, [r6, #16]
 8001628:	6175      	str	r5, [r6, #20]
 800162a:	9802      	ldr	r0, [sp, #8]
 800162c:	61b0      	str	r0, [r6, #24]
 800162e:	2000      	movs	r0, #0
 8001630:	b003      	add	sp, #12
 8001632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08001638 <D24_1CH_HTONS_VOL_HP>:
 8001638:	e92d 4ff4 	stmdb	sp!, {r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800163c:	b082      	sub	sp, #8
 800163e:	4686      	mov	lr, r0
 8001640:	468c      	mov	ip, r1
 8001642:	9d02      	ldr	r5, [sp, #8]
 8001644:	6910      	ldr	r0, [r2, #16]
 8001646:	6951      	ldr	r1, [r2, #20]
 8001648:	6994      	ldr	r4, [r2, #24]
 800164a:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800164e:	9401      	str	r4, [sp, #4]
 8001650:	69ee      	ldr	r6, [r5, #28]
 8001652:	68aa      	ldr	r2, [r5, #8]
 8001654:	68eb      	ldr	r3, [r5, #12]
 8001656:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8001658:	8ced      	ldrh	r5, [r5, #38]	; 0x26
 800165a:	f8d8 8020 	ldr.w	r8, [r8, #32]
 800165e:	f04f 0a00 	mov.w	sl, #0
 8001662:	2d00      	cmp	r5, #0
 8001664:	f340 8067 	ble.w	8001736 <D24_1CH_HTONS_VOL_HP+0xfe>
 8001668:	eb0a 79da 	add.w	r9, sl, sl, lsr #31
 800166c:	f89e 7003 	ldrb.w	r7, [lr, #3]
 8001670:	f89e b000 	ldrb.w	fp, [lr]
 8001674:	ea4f 0969 	mov.w	r9, r9, asr #1
 8001678:	ebba 0949 	subs.w	r9, sl, r9, lsl #1
 800167c:	d10a      	bne.n	8001694 <D24_1CH_HTONS_VOL_HP+0x5c>
 800167e:	ea4f 2b0b 	mov.w	fp, fp, lsl #8
 8001682:	f89e 9001 	ldrb.w	r9, [lr, #1]
 8001686:	eb0b 4b07 	add.w	fp, fp, r7, lsl #16
 800168a:	f10e 0e02 	add.w	lr, lr, #2
 800168e:	eb0b 0709 	add.w	r7, fp, r9
 8001692:	e007      	b.n	80016a4 <D24_1CH_HTONS_VOL_HP+0x6c>
 8001694:	f89e 9002 	ldrb.w	r9, [lr, #2]
 8001698:	023f      	lsls	r7, r7, #8
 800169a:	eb07 4709 	add.w	r7, r7, r9, lsl #16
 800169e:	f10e 0e04 	add.w	lr, lr, #4
 80016a2:	445f      	add	r7, fp
 80016a4:	f8df 94e0 	ldr.w	r9, [pc, #1248]	; 8001b88 <.text_58>
 80016a8:	f007 0bff 	and.w	fp, r7, #255	; 0xff
 80016ac:	f859 b02b 	ldr.w	fp, [r9, fp, lsl #2]
 80016b0:	f10a 0a01 	add.w	sl, sl, #1
 80016b4:	eb0b 2b96 	add.w	fp, fp, r6, lsr #10
 80016b8:	0a3e      	lsrs	r6, r7, #8
 80016ba:	f8cd b000 	str.w	fp, [sp]
 80016be:	f006 07ff 	and.w	r7, r6, #255	; 0xff
 80016c2:	0a36      	lsrs	r6, r6, #8
 80016c4:	f3cb 0909 	ubfx	r9, fp, #0, #10
 80016c8:	f8df b4bc 	ldr.w	fp, [pc, #1212]	; 8001b88 <.text_58>
 80016cc:	f85b 7027 	ldr.w	r7, [fp, r7, lsl #2]
 80016d0:	f8dd b000 	ldr.w	fp, [sp]
 80016d4:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 80016d8:	f3c7 0b09 	ubfx	fp, r7, #0, #10
 80016dc:	ea4b 4909 	orr.w	r9, fp, r9, lsl #16
 80016e0:	f8df b4a4 	ldr.w	fp, [pc, #1188]	; 8001b88 <.text_58>
 80016e4:	f85b 6026 	ldr.w	r6, [fp, r6, lsl #2]
 80016e8:	f8df b9f0 	ldr.w	fp, [pc, #2544]	; 80020dc <.text_83>
 80016ec:	eb06 2697 	add.w	r6, r6, r7, lsr #10
 80016f0:	fb29 3b0b 	smlad	fp, r9, fp, r3
 80016f4:	4b18      	ldr	r3, [pc, #96]	; (8001758 <.text_42>)
 80016f6:	f5ab 5bd8 	sub.w	fp, fp, #6912	; 0x1b00
 80016fa:	4458      	add	r0, fp
 80016fc:	f3c6 0709 	ubfx	r7, r6, #0, #10
 8001700:	1a40      	subs	r0, r0, r1
 8001702:	fb29 2303 	smlad	r3, r9, r3, r2
 8001706:	eb07 0247 	add.w	r2, r7, r7, lsl #1
 800170a:	fb50 f018 	smmulr	r0, r0, r8
 800170e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8001712:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8001716:	2201      	movs	r2, #1
 8001718:	fb29 f202 	smuad	r2, r9, r2
 800171c:	4659      	mov	r1, fp
 800171e:	0040      	lsls	r0, r0, #1
 8001720:	ea4f 3980 	mov.w	r9, r0, lsl #14
 8001724:	fb59 f914 	smmulr	r9, r9, r4
 8001728:	18ba      	adds	r2, r7, r2
 800172a:	45aa      	cmp	sl, r5
 800172c:	f329 098f 	ssat	r9, #16, r9, asr #2
 8001730:	f82c 9b02 	strh.w	r9, [ip], #2
 8001734:	db98      	blt.n	8001668 <D24_1CH_HTONS_VOL_HP+0x30>
 8001736:	9c02      	ldr	r4, [sp, #8]
 8001738:	60a2      	str	r2, [r4, #8]
 800173a:	9a02      	ldr	r2, [sp, #8]
 800173c:	60d3      	str	r3, [r2, #12]
 800173e:	9b02      	ldr	r3, [sp, #8]
 8001740:	61de      	str	r6, [r3, #28]
 8001742:	9a02      	ldr	r2, [sp, #8]
 8001744:	6110      	str	r0, [r2, #16]
 8001746:	9802      	ldr	r0, [sp, #8]
 8001748:	6141      	str	r1, [r0, #20]
 800174a:	9a02      	ldr	r2, [sp, #8]
 800174c:	9901      	ldr	r1, [sp, #4]
 800174e:	2000      	movs	r0, #0
 8001750:	6191      	str	r1, [r2, #24]
 8001752:	b003      	add	sp, #12
 8001754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001758 <.text_42>:
 8001758:	00060007 	.word	0x00060007

0800175c <.text_43>:
 800175c:	00060003 	.word	0x00060003

08001760 <.text_44>:
 8001760:	000a000c 	.word	0x000a000c

08001764 <.text_45>:
 8001764:	00030006 	.word	0x00030006

08001768 <D32_1CH_HTONS_VOL_HP>:
 8001768:	e92d 4ff4 	stmdb	sp!, {r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800176c:	b083      	sub	sp, #12
 800176e:	4684      	mov	ip, r0
 8001770:	4689      	mov	r9, r1
 8001772:	9d03      	ldr	r5, [sp, #12]
 8001774:	6910      	ldr	r0, [r2, #16]
 8001776:	6951      	ldr	r1, [r2, #20]
 8001778:	6994      	ldr	r4, [r2, #24]
 800177a:	9402      	str	r4, [sp, #8]
 800177c:	69ea      	ldr	r2, [r5, #28]
 800177e:	68ab      	ldr	r3, [r5, #8]
 8001780:	f8d5 e00c 	ldr.w	lr, [r5, #12]
 8001784:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8001786:	8cee      	ldrh	r6, [r5, #38]	; 0x26
 8001788:	6a2d      	ldr	r5, [r5, #32]
 800178a:	2e01      	cmp	r6, #1
 800178c:	db5c      	blt.n	8001848 <D32_1CH_HTONS_VOL_HP+0xe0>
 800178e:	9401      	str	r4, [sp, #4]
 8001790:	f8df 894c 	ldr.w	r8, [pc, #2380]	; 80020e0 <.text_84>
 8001794:	f8df 762c 	ldr.w	r7, [pc, #1580]	; 8001dc4 <.text_66>
 8001798:	9500      	str	r5, [sp, #0]
 800179a:	4634      	mov	r4, r6
 800179c:	f85c 5b04 	ldr.w	r5, [ip], #4
 80017a0:	1d3e      	adds	r6, r7, #4
 80017a2:	f107 0b04 	add.w	fp, r7, #4
 80017a6:	ba6d      	rev16	r5, r5
 80017a8:	f005 0aff 	and.w	sl, r5, #255	; 0xff
 80017ac:	0a2d      	lsrs	r5, r5, #8
 80017ae:	f856 602a 	ldr.w	r6, [r6, sl, lsl #2]
 80017b2:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 80017b6:	f005 02ff 	and.w	r2, r5, #255	; 0xff
 80017ba:	f85b 2022 	ldr.w	r2, [fp, r2, lsl #2]
 80017be:	0a2d      	lsrs	r5, r5, #8
 80017c0:	f005 0bff 	and.w	fp, r5, #255	; 0xff
 80017c4:	0a2d      	lsrs	r5, r5, #8
 80017c6:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 80017ca:	f3c6 0a09 	ubfx	sl, r6, #0, #10
 80017ce:	f3c2 0609 	ubfx	r6, r2, #0, #10
 80017d2:	ea46 460a 	orr.w	r6, r6, sl, lsl #16
 80017d6:	f107 0a04 	add.w	sl, r7, #4
 80017da:	f85a b02b 	ldr.w	fp, [sl, fp, lsl #2]
 80017de:	eb0b 2b92 	add.w	fp, fp, r2, lsr #10
 80017e2:	1d3a      	adds	r2, r7, #4
 80017e4:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 80017e8:	fb26 ee08 	smlad	lr, r6, r8, lr
 80017ec:	eb02 229b 	add.w	r2, r2, fp, lsr #10
 80017f0:	f3cb 0a09 	ubfx	sl, fp, #0, #10
 80017f4:	f8df b074 	ldr.w	fp, [pc, #116]	; 800186c <.text_47>
 80017f8:	f3c2 0509 	ubfx	r5, r2, #0, #10
 80017fc:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 8001800:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 8001804:	fb25 ea0a 	smlad	sl, r5, sl, lr
 8001808:	f8df e8d8 	ldr.w	lr, [pc, #2264]	; 80020e4 <.text_85>
 800180c:	fb26 330e 	smlad	r3, r6, lr, r3
 8001810:	fb25 3e0b 	smlad	lr, r5, fp, r3
 8001814:	2301      	movs	r3, #1
 8001816:	f5aa 4a80 	sub.w	sl, sl, #16384	; 0x4000
 800181a:	4450      	add	r0, sl
 800181c:	1a40      	subs	r0, r0, r1
 800181e:	4651      	mov	r1, sl
 8001820:	fb26 f303 	smuad	r3, r6, r3
 8001824:	f8df 68c0 	ldr.w	r6, [pc, #2240]	; 80020e8 <.text_86>
 8001828:	fb25 3306 	smlad	r3, r5, r6, r3
 800182c:	9d00      	ldr	r5, [sp, #0]
 800182e:	9e01      	ldr	r6, [sp, #4]
 8001830:	fb50 f015 	smmulr	r0, r0, r5
 8001834:	0040      	lsls	r0, r0, #1
 8001836:	0345      	lsls	r5, r0, #13
 8001838:	fb55 f516 	smmulr	r5, r5, r6
 800183c:	1e64      	subs	r4, r4, #1
 800183e:	f325 058f 	ssat	r5, #16, r5, asr #2
 8001842:	f829 5b02 	strh.w	r5, [r9], #2
 8001846:	d1a9      	bne.n	800179c <D32_1CH_HTONS_VOL_HP+0x34>
 8001848:	9c03      	ldr	r4, [sp, #12]
 800184a:	60a3      	str	r3, [r4, #8]
 800184c:	9b03      	ldr	r3, [sp, #12]
 800184e:	f8c3 e00c 	str.w	lr, [r3, #12]
 8001852:	9c03      	ldr	r4, [sp, #12]
 8001854:	61e2      	str	r2, [r4, #28]
 8001856:	9a03      	ldr	r2, [sp, #12]
 8001858:	6110      	str	r0, [r2, #16]
 800185a:	9803      	ldr	r0, [sp, #12]
 800185c:	6141      	str	r1, [r0, #20]
 800185e:	9a03      	ldr	r2, [sp, #12]
 8001860:	9902      	ldr	r1, [sp, #8]
 8001862:	2000      	movs	r0, #0
 8001864:	6191      	str	r1, [r2, #24]
 8001866:	b004      	add	sp, #16
 8001868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800186c <.text_47>:
 800186c:	000c000a 	.word	0x000c000a

08001870 <.text_48>:
 8001870:	000f000a 	.word	0x000f000a

08001874 <.text_49>:
 8001874:	00150019 	.word	0x00150019

08001878 <.text_50>:
 8001878:	00190015 	.word	0x00190015

0800187c <D48_1CH_HTONS_VOL_HP>:
 800187c:	e92d 4ff4 	stmdb	sp!, {r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001880:	b083      	sub	sp, #12
 8001882:	4684      	mov	ip, r0
 8001884:	4688      	mov	r8, r1
 8001886:	9d03      	ldr	r5, [sp, #12]
 8001888:	6910      	ldr	r0, [r2, #16]
 800188a:	6951      	ldr	r1, [r2, #20]
 800188c:	6994      	ldr	r4, [r2, #24]
 800188e:	9402      	str	r4, [sp, #8]
 8001890:	69ea      	ldr	r2, [r5, #28]
 8001892:	68ab      	ldr	r3, [r5, #8]
 8001894:	f8d5 e00c 	ldr.w	lr, [r5, #12]
 8001898:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 800189a:	8cee      	ldrh	r6, [r5, #38]	; 0x26
 800189c:	6a2d      	ldr	r5, [r5, #32]
 800189e:	2e01      	cmp	r6, #1
 80018a0:	f2c0 8085 	blt.w	80019ae <D48_1CH_HTONS_VOL_HP+0x132>
 80018a4:	f8df 951c 	ldr.w	r9, [pc, #1308]	; 8001dc4 <.text_66>
 80018a8:	9401      	str	r4, [sp, #4]
 80018aa:	9500      	str	r5, [sp, #0]
 80018ac:	f10c 0404 	add.w	r4, ip, #4
 80018b0:	f8dc 5000 	ldr.w	r5, [ip]
 80018b4:	6827      	ldr	r7, [r4, #0]
 80018b6:	f104 0c02 	add.w	ip, r4, #2
 80018ba:	ba6d      	rev16	r5, r5
 80018bc:	f005 0aff 	and.w	sl, r5, #255	; 0xff
 80018c0:	0a2d      	lsrs	r5, r5, #8
 80018c2:	ba7c      	rev16	r4, r7
 80018c4:	f109 0704 	add.w	r7, r9, #4
 80018c8:	f857 b02a 	ldr.w	fp, [r7, sl, lsl #2]
 80018cc:	f005 0aff 	and.w	sl, r5, #255	; 0xff
 80018d0:	eb0b 2b92 	add.w	fp, fp, r2, lsr #10
 80018d4:	f109 0204 	add.w	r2, r9, #4
 80018d8:	f852 a02a 	ldr.w	sl, [r2, sl, lsl #2]
 80018dc:	0a2a      	lsrs	r2, r5, #8
 80018de:	eb0a 2a9b 	add.w	sl, sl, fp, lsr #10
 80018e2:	f3cb 0709 	ubfx	r7, fp, #0, #10
 80018e6:	f109 0b04 	add.w	fp, r9, #4
 80018ea:	f3ca 0509 	ubfx	r5, sl, #0, #10
 80018ee:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 80018f2:	f002 07ff 	and.w	r7, r2, #255	; 0xff
 80018f6:	f85b 7027 	ldr.w	r7, [fp, r7, lsl #2]
 80018fa:	0a12      	lsrs	r2, r2, #8
 80018fc:	eb07 279a 	add.w	r7, r7, sl, lsr #10
 8001900:	f109 0a04 	add.w	sl, r9, #4
 8001904:	f85a a022 	ldr.w	sl, [sl, r2, lsl #2]
 8001908:	f004 02ff 	and.w	r2, r4, #255	; 0xff
 800190c:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8001910:	eb0a 2a97 	add.w	sl, sl, r7, lsr #10
 8001914:	f3c7 0b09 	ubfx	fp, r7, #0, #10
 8001918:	f3ca 0709 	ubfx	r7, sl, #0, #10
 800191c:	ea47 470b 	orr.w	r7, r7, fp, lsl #16
 8001920:	f109 0b04 	add.w	fp, r9, #4
 8001924:	f85b 2022 	ldr.w	r2, [fp, r2, lsl #2]
 8001928:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
 800192c:	f8df b7b0 	ldr.w	fp, [pc, #1968]	; 80020e0 <.text_84>
 8001930:	eb02 229a 	add.w	r2, r2, sl, lsr #10
 8001934:	f3c2 0a09 	ubfx	sl, r2, #0, #10
 8001938:	eb04 2292 	add.w	r2, r4, r2, lsr #10
 800193c:	f3c2 0409 	ubfx	r4, r2, #0, #10
 8001940:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8001944:	f8df a7a4 	ldr.w	sl, [pc, #1956]	; 80020ec <.text_87>
 8001948:	fb25 ee0a 	smlad	lr, r5, sl, lr
 800194c:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 8001950:	fb27 ee0b 	smlad	lr, r7, fp, lr
 8001954:	f04f 1b1b 	mov.w	fp, #1769499	; 0x1b001b
 8001958:	fb24 ea0a 	smlad	sl, r4, sl, lr
 800195c:	f8df e790 	ldr.w	lr, [pc, #1936]	; 80020f0 <.text_88>
 8001960:	fb25 330e 	smlad	r3, r5, lr, r3
 8001964:	f8df e78c 	ldr.w	lr, [pc, #1932]	; 80020f4 <.text_89>
 8001968:	fb27 330b 	smlad	r3, r7, fp, r3
 800196c:	f5aa 4a58 	sub.w	sl, sl, #55296	; 0xd800
 8001970:	4450      	add	r0, sl
 8001972:	1a40      	subs	r0, r0, r1
 8001974:	4651      	mov	r1, sl
 8001976:	fb24 3e0e 	smlad	lr, r4, lr, r3
 800197a:	2301      	movs	r3, #1
 800197c:	fb25 f303 	smuad	r3, r5, r3
 8001980:	f8df 5764 	ldr.w	r5, [pc, #1892]	; 80020e8 <.text_86>
 8001984:	fb27 3305 	smlad	r3, r7, r5, r3
 8001988:	f8df 776c 	ldr.w	r7, [pc, #1900]	; 80020f8 <.text_90>
 800198c:	9d01      	ldr	r5, [sp, #4]
 800198e:	fb24 3307 	smlad	r3, r4, r7, r3
 8001992:	9c00      	ldr	r4, [sp, #0]
 8001994:	fb50 f014 	smmulr	r0, r0, r4
 8001998:	0040      	lsls	r0, r0, #1
 800199a:	02c4      	lsls	r4, r0, #11
 800199c:	fb54 f415 	smmulr	r4, r4, r5
 80019a0:	1e76      	subs	r6, r6, #1
 80019a2:	f324 048f 	ssat	r4, #16, r4, asr #2
 80019a6:	f828 4b02 	strh.w	r4, [r8], #2
 80019aa:	f47f af7f 	bne.w	80018ac <D48_1CH_HTONS_VOL_HP+0x30>
 80019ae:	9c03      	ldr	r4, [sp, #12]
 80019b0:	60a3      	str	r3, [r4, #8]
 80019b2:	9b03      	ldr	r3, [sp, #12]
 80019b4:	f8c3 e00c 	str.w	lr, [r3, #12]
 80019b8:	9c03      	ldr	r4, [sp, #12]
 80019ba:	61e2      	str	r2, [r4, #28]
 80019bc:	9a03      	ldr	r2, [sp, #12]
 80019be:	6110      	str	r0, [r2, #16]
 80019c0:	9803      	ldr	r0, [sp, #12]
 80019c2:	6141      	str	r1, [r0, #20]
 80019c4:	9a03      	ldr	r2, [sp, #12]
 80019c6:	9902      	ldr	r1, [sp, #8]
 80019c8:	2000      	movs	r0, #0
 80019ca:	6191      	str	r1, [r2, #24]
 80019cc:	b004      	add	sp, #16
 80019ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080019d4 <.text_52>:
 80019d4:	000a000f 	.word	0x000a000f

080019d8 <.text_53>:
 80019d8:	001c0015 	.word	0x001c0015

080019dc <.text_54>:
 80019dc:	0024002a 	.word	0x0024002a

080019e0 <.text_55>:
 80019e0:	002e0030 	.word	0x002e0030

080019e4 <D64_1CH_HTONS_VOL_HP>:
 80019e4:	e92d 4ff4 	stmdb	sp!, {r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019e8:	b084      	sub	sp, #16
 80019ea:	468e      	mov	lr, r1
 80019ec:	6916      	ldr	r6, [r2, #16]
 80019ee:	f8d2 b014 	ldr.w	fp, [r2, #20]
 80019f2:	6991      	ldr	r1, [r2, #24]
 80019f4:	9a04      	ldr	r2, [sp, #16]
 80019f6:	4604      	mov	r4, r0
 80019f8:	9102      	str	r1, [sp, #8]
 80019fa:	69d1      	ldr	r1, [r2, #28]
 80019fc:	4610      	mov	r0, r2
 80019fe:	f8d2 800c 	ldr.w	r8, [r2, #12]
 8001a02:	6885      	ldr	r5, [r0, #8]
 8001a04:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8001a06:	4603      	mov	r3, r0
 8001a08:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
 8001a0a:	6a1b      	ldr	r3, [r3, #32]
 8001a0c:	2801      	cmp	r0, #1
 8001a0e:	f2c0 80a6 	blt.w	8001b5e <D64_1CH_HTONS_VOL_HP+0x17a>
 8001a12:	9403      	str	r4, [sp, #12]
 8001a14:	f8df c3ac 	ldr.w	ip, [pc, #940]	; 8001dc4 <.text_66>
 8001a18:	9201      	str	r2, [sp, #4]
 8001a1a:	9300      	str	r3, [sp, #0]
 8001a1c:	9f03      	ldr	r7, [sp, #12]
 8001a1e:	f10c 0904 	add.w	r9, ip, #4
 8001a22:	3708      	adds	r7, #8
 8001a24:	9703      	str	r7, [sp, #12]
 8001a26:	3f08      	subs	r7, #8
 8001a28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a2c:	ba54      	rev16	r4, r2
 8001a2e:	ba5a      	rev16	r2, r3
 8001a30:	f10c 0304 	add.w	r3, ip, #4
 8001a34:	f004 0aff 	and.w	sl, r4, #255	; 0xff
 8001a38:	0a24      	lsrs	r4, r4, #8
 8001a3a:	f859 702a 	ldr.w	r7, [r9, sl, lsl #2]
 8001a3e:	f004 09ff 	and.w	r9, r4, #255	; 0xff
 8001a42:	0a24      	lsrs	r4, r4, #8
 8001a44:	f853 9029 	ldr.w	r9, [r3, r9, lsl #2]
 8001a48:	1879      	adds	r1, r7, r1
 8001a4a:	f3c1 0a09 	ubfx	sl, r1, #0, #10
 8001a4e:	eb09 2991 	add.w	r9, r9, r1, lsr #10
 8001a52:	f10c 0104 	add.w	r1, ip, #4
 8001a56:	f10c 0704 	add.w	r7, ip, #4
 8001a5a:	f3c9 0309 	ubfx	r3, r9, #0, #10
 8001a5e:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8001a62:	f004 0aff 	and.w	sl, r4, #255	; 0xff
 8001a66:	0a24      	lsrs	r4, r4, #8
 8001a68:	f851 a02a 	ldr.w	sl, [r1, sl, lsl #2]
 8001a6c:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 8001a70:	eb0a 2a99 	add.w	sl, sl, r9, lsr #10
 8001a74:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 8001a78:	f3ca 0909 	ubfx	r9, sl, #0, #10
 8001a7c:	f002 0aff 	and.w	sl, r2, #255	; 0xff
 8001a80:	0a12      	lsrs	r2, r2, #8
 8001a82:	f3c1 0409 	ubfx	r4, r1, #0, #10
 8001a86:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
 8001a8a:	f10c 0904 	add.w	r9, ip, #4
 8001a8e:	f859 902a 	ldr.w	r9, [r9, sl, lsl #2]
 8001a92:	eb09 2991 	add.w	r9, r9, r1, lsr #10
 8001a96:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 8001a9a:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8001a9e:	0a12      	lsrs	r2, r2, #8
 8001aa0:	f002 07ff 	and.w	r7, r2, #255	; 0xff
 8001aa4:	0a12      	lsrs	r2, r2, #8
 8001aa6:	eb01 2199 	add.w	r1, r1, r9, lsr #10
 8001aaa:	f3c9 0a09 	ubfx	sl, r9, #0, #10
 8001aae:	f3c1 0909 	ubfx	r9, r1, #0, #10
 8001ab2:	ea49 490a 	orr.w	r9, r9, sl, lsl #16
 8001ab6:	f10c 0a04 	add.w	sl, ip, #4
 8001aba:	f85a 7027 	ldr.w	r7, [sl, r7, lsl #2]
 8001abe:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 8001ac2:	f10c 0104 	add.w	r1, ip, #4
 8001ac6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8001aca:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 8001ace:	f3c7 0a09 	ubfx	sl, r7, #0, #10
 8001ad2:	f8df 7618 	ldr.w	r7, [pc, #1560]	; 80020ec <.text_87>
 8001ad6:	f3c1 0209 	ubfx	r2, r1, #0, #10
 8001ada:	0a89      	lsrs	r1, r1, #10
 8001adc:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 8001ae0:	f8df a618 	ldr.w	sl, [pc, #1560]	; 80020fc <.text_91>
 8001ae4:	fb23 880a 	smlad	r8, r3, sl, r8
 8001ae8:	f8df a5f4 	ldr.w	sl, [pc, #1524]	; 80020e0 <.text_84>
 8001aec:	fb24 8807 	smlad	r8, r4, r7, r8
 8001af0:	f8df 760c 	ldr.w	r7, [pc, #1548]	; 8002100 <.text_92>
 8001af4:	fb29 880a 	smlad	r8, r9, sl, r8
 8001af8:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 8001afc:	fb22 8a0a 	smlad	sl, r2, sl, r8
 8001b00:	f8df 8600 	ldr.w	r8, [pc, #1536]	; 8002104 <.text_93>
 8001b04:	fb23 5808 	smlad	r8, r3, r8, r5
 8001b08:	f8df 55f8 	ldr.w	r5, [pc, #1528]	; 8002104 <.text_93>
 8001b0c:	fb22 8815 	smladx	r8, r2, r5, r8
 8001b10:	2501      	movs	r5, #1
 8001b12:	f5aa 3a00 	sub.w	sl, sl, #131072	; 0x20000
 8001b16:	4456      	add	r6, sl
 8001b18:	eba6 060b 	sub.w	r6, r6, fp
 8001b1c:	46d3      	mov	fp, sl
 8001b1e:	fb24 8807 	smlad	r8, r4, r7, r8
 8001b22:	fb29 8817 	smladx	r8, r9, r7, r8
 8001b26:	f8df 75c0 	ldr.w	r7, [pc, #1472]	; 80020e8 <.text_86>
 8001b2a:	fb23 f305 	smuad	r3, r3, r5
 8001b2e:	4d15      	ldr	r5, [pc, #84]	; (8001b84 <.text_57>)
 8001b30:	fb24 3307 	smlad	r3, r4, r7, r3
 8001b34:	f8df 45c0 	ldr.w	r4, [pc, #1472]	; 80020f8 <.text_90>
 8001b38:	fb29 3304 	smlad	r3, r9, r4, r3
 8001b3c:	fb22 3505 	smlad	r5, r2, r5, r3
 8001b40:	9a00      	ldr	r2, [sp, #0]
 8001b42:	9b01      	ldr	r3, [sp, #4]
 8001b44:	fb56 f612 	smmulr	r6, r6, r2
 8001b48:	0076      	lsls	r6, r6, #1
 8001b4a:	02b2      	lsls	r2, r6, #10
 8001b4c:	fb52 f213 	smmulr	r2, r2, r3
 8001b50:	1e40      	subs	r0, r0, #1
 8001b52:	f322 028f 	ssat	r2, #16, r2, asr #2
 8001b56:	f82e 2b02 	strh.w	r2, [lr], #2
 8001b5a:	f47f af5f 	bne.w	8001a1c <D64_1CH_HTONS_VOL_HP+0x38>
 8001b5e:	9804      	ldr	r0, [sp, #16]
 8001b60:	6085      	str	r5, [r0, #8]
 8001b62:	9a04      	ldr	r2, [sp, #16]
 8001b64:	f8c2 800c 	str.w	r8, [r2, #12]
 8001b68:	9804      	ldr	r0, [sp, #16]
 8001b6a:	61c1      	str	r1, [r0, #28]
 8001b6c:	9904      	ldr	r1, [sp, #16]
 8001b6e:	610e      	str	r6, [r1, #16]
 8001b70:	9804      	ldr	r0, [sp, #16]
 8001b72:	f8c0 b014 	str.w	fp, [r0, #20]
 8001b76:	9a04      	ldr	r2, [sp, #16]
 8001b78:	9902      	ldr	r1, [sp, #8]
 8001b7a:	2000      	movs	r0, #0
 8001b7c:	6191      	str	r1, [r2, #24]
 8001b7e:	b005      	add	sp, #20
 8001b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001b84 <.text_57>:
 8001b84:	0015001c 	.word	0x0015001c

08001b88 <.text_58>:
 8001b88:	24000198 	.word	0x24000198

08001b8c <.text_59>:
 8001b8c:	002d0024 	.word	0x002d0024

08001b90 <.text_60>:
 8001b90:	0037003f 	.word	0x0037003f

08001b94 <D80_1CH_HTONS_VOL_HP>:
 8001b94:	e92d 4ff4 	stmdb	sp!, {r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b98:	4683      	mov	fp, r0
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	4610      	mov	r0, r2
 8001b9e:	f8dd a014 	ldr.w	sl, [sp, #20]
 8001ba2:	9f05      	ldr	r7, [sp, #20]
 8001ba4:	6902      	ldr	r2, [r0, #16]
 8001ba6:	6943      	ldr	r3, [r0, #20]
 8001ba8:	6984      	ldr	r4, [r0, #24]
 8001baa:	9404      	str	r4, [sp, #16]
 8001bac:	4650      	mov	r0, sl
 8001bae:	f8da 501c 	ldr.w	r5, [sl, #28]
 8001bb2:	6884      	ldr	r4, [r0, #8]
 8001bb4:	f8b7 e026 	ldrh.w	lr, [r7, #38]	; 0x26
 8001bb8:	f8da a00c 	ldr.w	sl, [sl, #12]
 8001bbc:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8001bbe:	6a3f      	ldr	r7, [r7, #32]
 8001bc0:	f1be 0f01 	cmp.w	lr, #1
 8001bc4:	f2c0 80e4 	blt.w	8001d90 <D80_1CH_HTONS_VOL_HP+0x1fc>
 8001bc8:	468c      	mov	ip, r1
 8001bca:	9003      	str	r0, [sp, #12]
 8001bcc:	497d      	ldr	r1, [pc, #500]	; (8001dc4 <.text_66>)
 8001bce:	9702      	str	r7, [sp, #8]
 8001bd0:	f8cd c004 	str.w	ip, [sp, #4]
 8001bd4:	ea4f 000e 	mov.w	r0, lr
 8001bd8:	f8db 7000 	ldr.w	r7, [fp]
 8001bdc:	f8db c004 	ldr.w	ip, [fp, #4]
 8001be0:	f8db 8008 	ldr.w	r8, [fp, #8]
 8001be4:	f10b 0b0a 	add.w	fp, fp, #10
 8001be8:	fa97 fe97 	rev16.w	lr, r7
 8001bec:	fa9c f99c 	rev16.w	r9, ip
 8001bf0:	f101 0c04 	add.w	ip, r1, #4
 8001bf4:	fa98 f798 	rev16.w	r7, r8
 8001bf8:	f00e 08ff 	and.w	r8, lr, #255	; 0xff
 8001bfc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8001c00:	f85c 6028 	ldr.w	r6, [ip, r8, lsl #2]
 8001c04:	f101 0804 	add.w	r8, r1, #4
 8001c08:	1975      	adds	r5, r6, r5
 8001c0a:	f00e 06ff 	and.w	r6, lr, #255	; 0xff
 8001c0e:	f858 8026 	ldr.w	r8, [r8, r6, lsl #2]
 8001c12:	f3c5 0c09 	ubfx	ip, r5, #0, #10
 8001c16:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8001c1a:	f00e 06ff 	and.w	r6, lr, #255	; 0xff
 8001c1e:	eb08 2895 	add.w	r8, r8, r5, lsr #10
 8001c22:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8001c26:	f3c8 0509 	ubfx	r5, r8, #0, #10
 8001c2a:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
 8001c2e:	1d0d      	adds	r5, r1, #4
 8001c30:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8001c34:	eb06 2698 	add.w	r6, r6, r8, lsr #10
 8001c38:	f101 0804 	add.w	r8, r1, #4
 8001c3c:	f858 802e 	ldr.w	r8, [r8, lr, lsl #2]
 8001c40:	eb08 2896 	add.w	r8, r8, r6, lsr #10
 8001c44:	f3c6 0509 	ubfx	r5, r6, #0, #10
 8001c48:	1d0e      	adds	r6, r1, #4
 8001c4a:	f3c8 0e09 	ubfx	lr, r8, #0, #10
 8001c4e:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
 8001c52:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 8001c56:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 8001c5a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8001c5e:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 8001c62:	9500      	str	r5, [sp, #0]
 8001c64:	f3c5 0809 	ubfx	r8, r5, #0, #10
 8001c68:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 8001c6c:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 8001c70:	9e00      	ldr	r6, [sp, #0]
 8001c72:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8001c76:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 8001c7a:	9500      	str	r5, [sp, #0]
 8001c7c:	f3c5 0609 	ubfx	r6, r5, #0, #10
 8001c80:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 8001c84:	ea46 4808 	orr.w	r8, r6, r8, lsl #16
 8001c88:	1d0e      	adds	r6, r1, #4
 8001c8a:	f856 6025 	ldr.w	r6, [r6, r5, lsl #2]
 8001c8e:	9d00      	ldr	r5, [sp, #0]
 8001c90:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8001c94:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 8001c98:	9600      	str	r6, [sp, #0]
 8001c9a:	f3c6 0509 	ubfx	r5, r6, #0, #10
 8001c9e:	1d0e      	adds	r6, r1, #4
 8001ca0:	f856 6029 	ldr.w	r6, [r6, r9, lsl #2]
 8001ca4:	f8dd 9000 	ldr.w	r9, [sp]
 8001ca8:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 8001cac:	9600      	str	r6, [sp, #0]
 8001cae:	f3c6 0909 	ubfx	r9, r6, #0, #10
 8001cb2:	1d0e      	adds	r6, r1, #4
 8001cb4:	ea49 4905 	orr.w	r9, r9, r5, lsl #16
 8001cb8:	f007 05ff 	and.w	r5, r7, #255	; 0xff
 8001cbc:	f856 6025 	ldr.w	r6, [r6, r5, lsl #2]
 8001cc0:	9d00      	ldr	r5, [sp, #0]
 8001cc2:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8001cc6:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 8001cca:	9600      	str	r6, [sp, #0]
 8001ccc:	f3c6 0509 	ubfx	r5, r6, #0, #10
 8001cd0:	1d0e      	adds	r6, r1, #4
 8001cd2:	f856 6027 	ldr.w	r6, [r6, r7, lsl #2]
 8001cd6:	9f00      	ldr	r7, [sp, #0]
 8001cd8:	eb06 2697 	add.w	r6, r6, r7, lsr #10
 8001cdc:	f3c6 0709 	ubfx	r7, r6, #0, #10
 8001ce0:	ea47 4705 	orr.w	r7, r7, r5, lsl #16
 8001ce4:	0ab5      	lsrs	r5, r6, #10
 8001ce6:	f8df 6420 	ldr.w	r6, [pc, #1056]	; 8002108 <.text_94>
 8001cea:	fb2c aa06 	smlad	sl, ip, r6, sl
 8001cee:	f8df 640c 	ldr.w	r6, [pc, #1036]	; 80020fc <.text_91>
 8001cf2:	fb2e aa06 	smlad	sl, lr, r6, sl
 8001cf6:	f8df 63f4 	ldr.w	r6, [pc, #1012]	; 80020ec <.text_87>
 8001cfa:	fb28 aa06 	smlad	sl, r8, r6, sl
 8001cfe:	f8df 63e0 	ldr.w	r6, [pc, #992]	; 80020e0 <.text_84>
 8001d02:	fb29 aa06 	smlad	sl, r9, r6, sl
 8001d06:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 8001d0a:	fb27 a606 	smlad	r6, r7, r6, sl
 8001d0e:	f8df a3fc 	ldr.w	sl, [pc, #1020]	; 800210c <.text_95>
 8001d12:	fb2c 440a 	smlad	r4, ip, sl, r4
 8001d16:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8001db4 <.text_62>
 8001d1a:	fb2e 440a 	smlad	r4, lr, sl, r4
 8001d1e:	f04f 1a4b 	mov.w	sl, #4915275	; 0x4b004b
 8001d22:	f5a6 367a 	sub.w	r6, r6, #256000	; 0x3e800
 8001d26:	18b2      	adds	r2, r6, r2
 8001d28:	1ad2      	subs	r2, r2, r3
 8001d2a:	4633      	mov	r3, r6
 8001d2c:	fb28 440a 	smlad	r4, r8, sl, r4
 8001d30:	f8df a084 	ldr.w	sl, [pc, #132]	; 8001db8 <.text_63>
 8001d34:	fb29 440a 	smlad	r4, r9, sl, r4
 8001d38:	f8df a080 	ldr.w	sl, [pc, #128]	; 8001dbc <.text_64>
 8001d3c:	fb27 4a0a 	smlad	sl, r7, sl, r4
 8001d40:	2401      	movs	r4, #1
 8001d42:	fb2c fc04 	smuad	ip, ip, r4
 8001d46:	4ce8      	ldr	r4, [pc, #928]	; (80020e8 <.text_86>)
 8001d48:	fb2e c404 	smlad	r4, lr, r4, ip
 8001d4c:	f8df c3a8 	ldr.w	ip, [pc, #936]	; 80020f8 <.text_90>
 8001d50:	f8df e06c 	ldr.w	lr, [pc, #108]	; 8001dc0 <.text_65>
 8001d54:	fb28 440c 	smlad	r4, r8, ip, r4
 8001d58:	f8df 83b4 	ldr.w	r8, [pc, #948]	; 8002110 <.text_96>
 8001d5c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8001d60:	fb29 4408 	smlad	r4, r9, r8, r4
 8001d64:	fb27 440e 	smlad	r4, r7, lr, r4
 8001d68:	9f02      	ldr	r7, [sp, #8]
 8001d6a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001d6e:	fb52 f217 	smmulr	r2, r2, r7
 8001d72:	0052      	lsls	r2, r2, #1
 8001d74:	0257      	lsls	r7, r2, #9
 8001d76:	fb57 f71c 	smmulr	r7, r7, ip
 8001d7a:	f10e 0e02 	add.w	lr, lr, #2
 8001d7e:	1e40      	subs	r0, r0, #1
 8001d80:	f8cd e004 	str.w	lr, [sp, #4]
 8001d84:	f327 078f 	ssat	r7, #16, r7, asr #2
 8001d88:	f82e 7d02 	strh.w	r7, [lr, #-2]!
 8001d8c:	f47f af24 	bne.w	8001bd8 <D80_1CH_HTONS_VOL_HP+0x44>
 8001d90:	9805      	ldr	r0, [sp, #20]
 8001d92:	6084      	str	r4, [r0, #8]
 8001d94:	9905      	ldr	r1, [sp, #20]
 8001d96:	f8c1 a00c 	str.w	sl, [r1, #12]
 8001d9a:	9805      	ldr	r0, [sp, #20]
 8001d9c:	61c5      	str	r5, [r0, #28]
 8001d9e:	9905      	ldr	r1, [sp, #20]
 8001da0:	610a      	str	r2, [r1, #16]
 8001da2:	9805      	ldr	r0, [sp, #20]
 8001da4:	6143      	str	r3, [r0, #20]
 8001da6:	9a05      	ldr	r2, [sp, #20]
 8001da8:	9904      	ldr	r1, [sp, #16]
 8001daa:	2000      	movs	r0, #0
 8001dac:	6191      	str	r1, [r2, #24]
 8001dae:	b006      	add	sp, #24
 8001db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001db4 <.text_62>:
 8001db4:	00450049 	.word	0x00450049

08001db8 <.text_63>:
 8001db8:	00490045 	.word	0x00490045

08001dbc <.text_64>:
 8001dbc:	003f0037 	.word	0x003f0037

08001dc0 <.text_65>:
 8001dc0:	0024002d 	.word	0x0024002d

08001dc4 <.text_66>:
 8001dc4:	24000194 	.word	0x24000194

08001dc8 <.text_67>:
 8001dc8:	00780069 	.word	0x00780069

08001dcc <.text_68>:
 8001dcc:	005b004e 	.word	0x005b004e

08001dd0 <.text_69>:
 8001dd0:	00420037 	.word	0x00420037

08001dd4 <D128_1CH_HTONS_VOL_HP>:
 8001dd4:	e92d 4ff4 	stmdb	sp!, {r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001dd8:	b088      	sub	sp, #32
 8001dda:	460c      	mov	r4, r1
 8001ddc:	9b08      	ldr	r3, [sp, #32]
 8001dde:	f8d2 b010 	ldr.w	fp, [r2, #16]
 8001de2:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8001de6:	6991      	ldr	r1, [r2, #24]
 8001de8:	4681      	mov	r9, r0
 8001dea:	9107      	str	r1, [sp, #28]
 8001dec:	69d9      	ldr	r1, [r3, #28]
 8001dee:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8001df2:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8001df6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001df8:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
 8001dfa:	6a1b      	ldr	r3, [r3, #32]
 8001dfc:	2801      	cmp	r0, #1
 8001dfe:	f2c0 813f 	blt.w	8002080 <D128_1CH_HTONS_VOL_HP+0x2ac>
 8001e02:	f8df a310 	ldr.w	sl, [pc, #784]	; 8002114 <.text_97>
 8001e06:	f8cd 900c 	str.w	r9, [sp, #12]
 8001e0a:	9206      	str	r2, [sp, #24]
 8001e0c:	9305      	str	r3, [sp, #20]
 8001e0e:	9404      	str	r4, [sp, #16]
 8001e10:	9c03      	ldr	r4, [sp, #12]
 8001e12:	f10a 0604 	add.w	r6, sl, #4
 8001e16:	3408      	adds	r4, #8
 8001e18:	9403      	str	r4, [sp, #12]
 8001e1a:	3c08      	subs	r4, #8
 8001e1c:	9d03      	ldr	r5, [sp, #12]
 8001e1e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8001e22:	3508      	adds	r5, #8
 8001e24:	9503      	str	r5, [sp, #12]
 8001e26:	3d08      	subs	r5, #8
 8001e28:	e9d5 4900 	ldrd	r4, r9, [r5]
 8001e2c:	ba55      	rev16	r5, r2
 8001e2e:	ba5a      	rev16	r2, r3
 8001e30:	ba63      	rev16	r3, r4
 8001e32:	fa99 f499 	rev16.w	r4, r9
 8001e36:	f005 07ff 	and.w	r7, r5, #255	; 0xff
 8001e3a:	0a2d      	lsrs	r5, r5, #8
 8001e3c:	f856 9027 	ldr.w	r9, [r6, r7, lsl #2]
 8001e40:	f005 07ff 	and.w	r7, r5, #255	; 0xff
 8001e44:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 8001e48:	0a2d      	lsrs	r5, r5, #8
 8001e4a:	4449      	add	r1, r9
 8001e4c:	f3c1 0909 	ubfx	r9, r1, #0, #10
 8001e50:	eb07 2191 	add.w	r1, r7, r1, lsr #10
 8001e54:	f005 07ff 	and.w	r7, r5, #255	; 0xff
 8001e58:	0a2d      	lsrs	r5, r5, #8
 8001e5a:	f3c1 0609 	ubfx	r6, r1, #0, #10
 8001e5e:	ea46 4909 	orr.w	r9, r6, r9, lsl #16
 8001e62:	f10a 0604 	add.w	r6, sl, #4
 8001e66:	f856 6027 	ldr.w	r6, [r6, r7, lsl #2]
 8001e6a:	f10a 0704 	add.w	r7, sl, #4
 8001e6e:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8001e72:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 8001e76:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 8001e7a:	f3c6 0109 	ubfx	r1, r6, #0, #10
 8001e7e:	f3c5 0609 	ubfx	r6, r5, #0, #10
 8001e82:	ea46 4601 	orr.w	r6, r6, r1, lsl #16
 8001e86:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 8001e8a:	0a12      	lsrs	r2, r2, #8
 8001e8c:	9602      	str	r6, [sp, #8]
 8001e8e:	f002 06ff 	and.w	r6, r2, #255	; 0xff
 8001e92:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8001e96:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 8001e9a:	0a12      	lsrs	r2, r2, #8
 8001e9c:	eb01 2195 	add.w	r1, r1, r5, lsr #10
 8001ea0:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 8001ea4:	f3c1 0509 	ubfx	r5, r1, #0, #10
 8001ea8:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 8001eac:	0a12      	lsrs	r2, r2, #8
 8001eae:	f3c6 0709 	ubfx	r7, r6, #0, #10
 8001eb2:	ea47 4705 	orr.w	r7, r7, r5, lsl #16
 8001eb6:	f10a 0504 	add.w	r5, sl, #4
 8001eba:	9701      	str	r7, [sp, #4]
 8001ebc:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8001ec0:	eb01 2196 	add.w	r1, r1, r6, lsr #10
 8001ec4:	f10a 0604 	add.w	r6, sl, #4
 8001ec8:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8001ecc:	f003 06ff 	and.w	r6, r3, #255	; 0xff
 8001ed0:	0a1b      	lsrs	r3, r3, #8
 8001ed2:	eb02 2291 	add.w	r2, r2, r1, lsr #10
 8001ed6:	f3c1 0509 	ubfx	r5, r1, #0, #10
 8001eda:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8001ede:	0a1b      	lsrs	r3, r3, #8
 8001ee0:	f3c2 0709 	ubfx	r7, r2, #0, #10
 8001ee4:	ea47 4705 	orr.w	r7, r7, r5, lsl #16
 8001ee8:	f10a 0504 	add.w	r5, sl, #4
 8001eec:	9700      	str	r7, [sp, #0]
 8001eee:	f10a 0704 	add.w	r7, sl, #4
 8001ef2:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8001ef6:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8001efa:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 8001efe:	eb01 2196 	add.w	r1, r1, r6, lsr #10
 8001f02:	f3c6 0509 	ubfx	r5, r6, #0, #10
 8001f06:	f003 06ff 	and.w	r6, r3, #255	; 0xff
 8001f0a:	0a1b      	lsrs	r3, r3, #8
 8001f0c:	f3c1 0209 	ubfx	r2, r1, #0, #10
 8001f10:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8001f14:	f10a 0504 	add.w	r5, sl, #4
 8001f18:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8001f1c:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 8001f20:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 8001f24:	eb01 2196 	add.w	r1, r1, r6, lsr #10
 8001f28:	f3c6 0509 	ubfx	r5, r6, #0, #10
 8001f2c:	f004 06ff 	and.w	r6, r4, #255	; 0xff
 8001f30:	0a24      	lsrs	r4, r4, #8
 8001f32:	f3c1 0309 	ubfx	r3, r1, #0, #10
 8001f36:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8001f3a:	f10a 0504 	add.w	r5, sl, #4
 8001f3e:	f855 5026 	ldr.w	r5, [r5, r6, lsl #2]
 8001f42:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 8001f46:	f004 01ff 	and.w	r1, r4, #255	; 0xff
 8001f4a:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8001f4e:	0a24      	lsrs	r4, r4, #8
 8001f50:	f004 07ff 	and.w	r7, r4, #255	; 0xff
 8001f54:	0a24      	lsrs	r4, r4, #8
 8001f56:	eb01 2195 	add.w	r1, r1, r5, lsr #10
 8001f5a:	f3c5 0609 	ubfx	r6, r5, #0, #10
 8001f5e:	f3c1 0509 	ubfx	r5, r1, #0, #10
 8001f62:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
 8001f66:	f10a 0604 	add.w	r6, sl, #4
 8001f6a:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 8001f6e:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 8001f72:	f10a 0104 	add.w	r1, sl, #4
 8001f76:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
 8001f7a:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 8001f7e:	f3c7 0609 	ubfx	r6, r7, #0, #10
 8001f82:	4f65      	ldr	r7, [pc, #404]	; (8002118 <.text_98>)
 8001f84:	f3c1 0409 	ubfx	r4, r1, #0, #10
 8001f88:	0a89      	lsrs	r1, r1, #10
 8001f8a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8001f8e:	4e63      	ldr	r6, [pc, #396]	; (800211c <.text_99>)
 8001f90:	fb29 8806 	smlad	r8, r9, r6, r8
 8001f94:	9e02      	ldr	r6, [sp, #8]
 8001f96:	fb26 8807 	smlad	r8, r6, r7, r8
 8001f9a:	9f01      	ldr	r7, [sp, #4]
 8001f9c:	4e60      	ldr	r6, [pc, #384]	; (8002120 <.text_100>)
 8001f9e:	fb27 8806 	smlad	r8, r7, r6, r8
 8001fa2:	9f00      	ldr	r7, [sp, #0]
 8001fa4:	4e58      	ldr	r6, [pc, #352]	; (8002108 <.text_94>)
 8001fa6:	fb27 8806 	smlad	r8, r7, r6, r8
 8001faa:	4e54      	ldr	r6, [pc, #336]	; (80020fc <.text_91>)
 8001fac:	4f4c      	ldr	r7, [pc, #304]	; (80020e0 <.text_84>)
 8001fae:	fb22 8806 	smlad	r8, r2, r6, r8
 8001fb2:	4e4e      	ldr	r6, [pc, #312]	; (80020ec <.text_87>)
 8001fb4:	fb23 8806 	smlad	r8, r3, r6, r8
 8001fb8:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 8001fbc:	fb25 8807 	smlad	r8, r5, r7, r8
 8001fc0:	fb24 8606 	smlad	r6, r4, r6, r8
 8001fc4:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 80020ac <.text_71>
 8001fc8:	4f39      	ldr	r7, [pc, #228]	; (80020b0 <.text_72>)
 8001fca:	fb29 ee08 	smlad	lr, r9, r8, lr
 8001fce:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8001fd2:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 8001fd6:	44b3      	add	fp, r6
 8001fd8:	ebab 0b0c 	sub.w	fp, fp, ip
 8001fdc:	46b4      	mov	ip, r6
 8001fde:	fb28 ee07 	smlad	lr, r8, r7, lr
 8001fe2:	9f01      	ldr	r7, [sp, #4]
 8001fe4:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 80020b4 <.text_73>
 8001fe8:	fb27 ee08 	smlad	lr, r7, r8, lr
 8001fec:	9f00      	ldr	r7, [sp, #0]
 8001fee:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 80020b8 <.text_74>
 8001ff2:	fb27 ee08 	smlad	lr, r7, r8, lr
 8001ff6:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 80020bc <.text_75>
 8001ffa:	4f32      	ldr	r7, [pc, #200]	; (80020c4 <.text_77>)
 8001ffc:	fb22 ee08 	smlad	lr, r2, r8, lr
 8002000:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80020c0 <.text_76>
 8002004:	fb23 ee08 	smlad	lr, r3, r8, lr
 8002008:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80020c8 <.text_78>
 800200c:	fb25 ee07 	smlad	lr, r5, r7, lr
 8002010:	4f35      	ldr	r7, [pc, #212]	; (80020e8 <.text_86>)
 8002012:	fb24 e808 	smlad	r8, r4, r8, lr
 8002016:	f04f 0e01 	mov.w	lr, #1
 800201a:	fb29 f90e 	smuad	r9, r9, lr
 800201e:	f8dd e008 	ldr.w	lr, [sp, #8]
 8002022:	fb2e 9907 	smlad	r9, lr, r7, r9
 8002026:	9f01      	ldr	r7, [sp, #4]
 8002028:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 80020f8 <.text_90>
 800202c:	fb27 990e 	smlad	r9, r7, lr, r9
 8002030:	9f00      	ldr	r7, [sp, #0]
 8002032:	f8df e0dc 	ldr.w	lr, [pc, #220]	; 8002110 <.text_96>
 8002036:	fb27 990e 	smlad	r9, r7, lr, r9
 800203a:	f8df e0e8 	ldr.w	lr, [pc, #232]	; 8002124 <.text_101>
 800203e:	fb22 920e 	smlad	r2, r2, lr, r9
 8002042:	f8df 9088 	ldr.w	r9, [pc, #136]	; 80020cc <.text_79>
 8002046:	f8df e08c 	ldr.w	lr, [pc, #140]	; 80020d4 <.text_81>
 800204a:	fb23 2209 	smlad	r2, r3, r9, r2
 800204e:	4b20      	ldr	r3, [pc, #128]	; (80020d0 <.text_80>)
 8002050:	fb25 2203 	smlad	r2, r5, r3, r2
 8002054:	9b06      	ldr	r3, [sp, #24]
 8002056:	fb24 2e0e 	smlad	lr, r4, lr, r2
 800205a:	9a05      	ldr	r2, [sp, #20]
 800205c:	9c04      	ldr	r4, [sp, #16]
 800205e:	fb5b fb12 	smmulr	fp, fp, r2
 8002062:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8002066:	ea4f 12cb 	mov.w	r2, fp, lsl #7
 800206a:	fb52 f213 	smmulr	r2, r2, r3
 800206e:	1ca4      	adds	r4, r4, #2
 8002070:	1e40      	subs	r0, r0, #1
 8002072:	9404      	str	r4, [sp, #16]
 8002074:	f322 028f 	ssat	r2, #16, r2, asr #2
 8002078:	f824 2d02 	strh.w	r2, [r4, #-2]!
 800207c:	f47f aec8 	bne.w	8001e10 <D128_1CH_HTONS_VOL_HP+0x3c>
 8002080:	9808      	ldr	r0, [sp, #32]
 8002082:	f8c0 e008 	str.w	lr, [r0, #8]
 8002086:	9a08      	ldr	r2, [sp, #32]
 8002088:	f8c2 800c 	str.w	r8, [r2, #12]
 800208c:	9808      	ldr	r0, [sp, #32]
 800208e:	61c1      	str	r1, [r0, #28]
 8002090:	9908      	ldr	r1, [sp, #32]
 8002092:	f8c1 b010 	str.w	fp, [r1, #16]
 8002096:	9808      	ldr	r0, [sp, #32]
 8002098:	f8c0 c014 	str.w	ip, [r0, #20]
 800209c:	9a08      	ldr	r2, [sp, #32]
 800209e:	9907      	ldr	r1, [sp, #28]
 80020a0:	2000      	movs	r0, #0
 80020a2:	6191      	str	r1, [r2, #24]
 80020a4:	b009      	add	sp, #36	; 0x24
 80020a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080020ac <.text_71>:
 80020ac:	00880096 	.word	0x00880096

080020b0 <.text_72>:
 80020b0:	00a200ac 	.word	0x00a200ac

080020b4 <.text_73>:
 80020b4:	00b400ba 	.word	0x00b400ba

080020b8 <.text_74>:
 80020b8:	00be00c0 	.word	0x00be00c0

080020bc <.text_75>:
 80020bc:	00c000be 	.word	0x00c000be

080020c0 <.text_76>:
 80020c0:	00ba00b4 	.word	0x00ba00b4

080020c4 <.text_77>:
 80020c4:	00ac00a2 	.word	0x00ac00a2

080020c8 <.text_78>:
 80020c8:	00960088 	.word	0x00960088

080020cc <.text_79>:
 80020cc:	00370042 	.word	0x00370042

080020d0 <.text_80>:
 80020d0:	004e005b 	.word	0x004e005b

080020d4 <.text_81>:
 80020d4:	00690078 	.word	0x00690078

080020d8 <.text_82>:
 80020d8:	00010003 	.word	0x00010003

080020dc <.text_83>:
 80020dc:	00030001 	.word	0x00030001

080020e0 <.text_84>:
 80020e0:	00060003 	.word	0x00060003

080020e4 <.text_85>:
 80020e4:	000a000c 	.word	0x000a000c

080020e8 <.text_86>:
 80020e8:	00030006 	.word	0x00030006

080020ec <.text_87>:
 80020ec:	000f000a 	.word	0x000f000a

080020f0 <.text_88>:
 80020f0:	00150019 	.word	0x00150019

080020f4 <.text_89>:
 80020f4:	00190015 	.word	0x00190015

080020f8 <.text_90>:
 80020f8:	000a000f 	.word	0x000a000f

080020fc <.text_91>:
 80020fc:	001c0015 	.word	0x001c0015

08002100 <.text_92>:
 8002100:	002e0030 	.word	0x002e0030

08002104 <.text_93>:
 8002104:	0024002a 	.word	0x0024002a

08002108 <.text_94>:
 8002108:	002d0024 	.word	0x002d0024

0800210c <.text_95>:
 800210c:	0037003f 	.word	0x0037003f

08002110 <.text_96>:
 8002110:	0015001c 	.word	0x0015001c

08002114 <.text_97>:
 8002114:	24000194 	.word	0x24000194

08002118 <.text_98>:
 8002118:	005b004e 	.word	0x005b004e

0800211c <.text_99>:
 800211c:	00780069 	.word	0x00780069

08002120 <.text_100>:
 8002120:	00420037 	.word	0x00420037

08002124 <.text_101>:
 8002124:	0024002d 	.word	0x0024002d

08002128 <__aeabi_memset>:
 8002128:	b470      	push	{r4, r5, r6}
 800212a:	0784      	lsls	r4, r0, #30
 800212c:	d046      	beq.n	80021bc <__aeabi_memset+0x94>
 800212e:	1e4c      	subs	r4, r1, #1
 8002130:	2900      	cmp	r1, #0
 8002132:	d041      	beq.n	80021b8 <__aeabi_memset+0x90>
 8002134:	b2d5      	uxtb	r5, r2
 8002136:	4603      	mov	r3, r0
 8002138:	e002      	b.n	8002140 <__aeabi_memset+0x18>
 800213a:	1e61      	subs	r1, r4, #1
 800213c:	b3e4      	cbz	r4, 80021b8 <__aeabi_memset+0x90>
 800213e:	460c      	mov	r4, r1
 8002140:	f803 5b01 	strb.w	r5, [r3], #1
 8002144:	0799      	lsls	r1, r3, #30
 8002146:	d1f8      	bne.n	800213a <__aeabi_memset+0x12>
 8002148:	2c03      	cmp	r4, #3
 800214a:	d92e      	bls.n	80021aa <__aeabi_memset+0x82>
 800214c:	b2d5      	uxtb	r5, r2
 800214e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8002152:	2c0f      	cmp	r4, #15
 8002154:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8002158:	d919      	bls.n	800218e <__aeabi_memset+0x66>
 800215a:	4626      	mov	r6, r4
 800215c:	f103 0110 	add.w	r1, r3, #16
 8002160:	3e10      	subs	r6, #16
 8002162:	2e0f      	cmp	r6, #15
 8002164:	f841 5c10 	str.w	r5, [r1, #-16]
 8002168:	f841 5c0c 	str.w	r5, [r1, #-12]
 800216c:	f841 5c08 	str.w	r5, [r1, #-8]
 8002170:	f841 5c04 	str.w	r5, [r1, #-4]
 8002174:	f101 0110 	add.w	r1, r1, #16
 8002178:	d8f2      	bhi.n	8002160 <__aeabi_memset+0x38>
 800217a:	f1a4 0110 	sub.w	r1, r4, #16
 800217e:	f021 010f 	bic.w	r1, r1, #15
 8002182:	f004 040f 	and.w	r4, r4, #15
 8002186:	3110      	adds	r1, #16
 8002188:	2c03      	cmp	r4, #3
 800218a:	440b      	add	r3, r1
 800218c:	d90d      	bls.n	80021aa <__aeabi_memset+0x82>
 800218e:	461e      	mov	r6, r3
 8002190:	4621      	mov	r1, r4
 8002192:	3904      	subs	r1, #4
 8002194:	2903      	cmp	r1, #3
 8002196:	f846 5b04 	str.w	r5, [r6], #4
 800219a:	d8fa      	bhi.n	8002192 <__aeabi_memset+0x6a>
 800219c:	1f21      	subs	r1, r4, #4
 800219e:	f021 0103 	bic.w	r1, r1, #3
 80021a2:	3104      	adds	r1, #4
 80021a4:	440b      	add	r3, r1
 80021a6:	f004 0403 	and.w	r4, r4, #3
 80021aa:	b12c      	cbz	r4, 80021b8 <__aeabi_memset+0x90>
 80021ac:	b2d2      	uxtb	r2, r2
 80021ae:	441c      	add	r4, r3
 80021b0:	f803 2b01 	strb.w	r2, [r3], #1
 80021b4:	42a3      	cmp	r3, r4
 80021b6:	d1fb      	bne.n	80021b0 <__aeabi_memset+0x88>
 80021b8:	bc70      	pop	{r4, r5, r6}
 80021ba:	4770      	bx	lr
 80021bc:	460c      	mov	r4, r1
 80021be:	4603      	mov	r3, r0
 80021c0:	e7c2      	b.n	8002148 <__aeabi_memset+0x20>

080021c2 <IS42S32800J_Init>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800J_Init(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b084      	sub	sp, #16
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
 80021ca:	6039      	str	r1, [r7, #0]
  int32_t ret = IS42S32800J_ERROR;
 80021cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021d0:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4619      	mov	r1, r3
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f000 f831 	bl	8002240 <IS42S32800J_ClockEnable>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d128      	bne.n	8002236 <IS42S32800J_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)IS42S32800J_Delay(1);
 80021e4:	2001      	movs	r0, #1
 80021e6:	f000 f8e1 	bl	80023ac <IS42S32800J_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(IS42S32800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4619      	mov	r1, r3
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f000 f849 	bl	8002288 <IS42S32800J_Precharge>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d11c      	bne.n	8002236 <IS42S32800J_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(IS42S32800J_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800J_OK)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	6819      	ldr	r1, [r3, #0]
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	461a      	mov	r2, r3
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f000 f896 	bl	8002338 <IS42S32800J_RefreshMode>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d111      	bne.n	8002236 <IS42S32800J_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(IS42S32800J_ModeRegConfig(Ctx, pRegMode) == IS42S32800J_OK)
 8002212:	6839      	ldr	r1, [r7, #0]
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f000 f85b 	bl	80022d0 <IS42S32800J_ModeRegConfig>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d10a      	bne.n	8002236 <IS42S32800J_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(IS42S32800J_RefreshRate(Ctx, pRegMode->RefreshRate) == IS42S32800J_OK)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	4619      	mov	r1, r3
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 f8ac 	bl	8002384 <IS42S32800J_RefreshRate>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d101      	bne.n	8002236 <IS42S32800J_Init+0x74>
          {
            ret = IS42S32800J_OK;
 8002232:	2300      	movs	r3, #0
 8002234:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
 8002236:	68fb      	ldr	r3, [r7, #12]
}
 8002238:	4618      	mov	r0, r3
 800223a:	3710      	adds	r7, #16
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <IS42S32800J_ClockEnable>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 800224a:	4b0e      	ldr	r3, [pc, #56]	; (8002284 <IS42S32800J_ClockEnable+0x44>)
 800224c:	2201      	movs	r2, #1
 800224e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 8002250:	4a0c      	ldr	r2, [pc, #48]	; (8002284 <IS42S32800J_ClockEnable+0x44>)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8002256:	4b0b      	ldr	r3, [pc, #44]	; (8002284 <IS42S32800J_ClockEnable+0x44>)
 8002258:	2201      	movs	r2, #1
 800225a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800225c:	4b09      	ldr	r3, [pc, #36]	; (8002284 <IS42S32800J_ClockEnable+0x44>)
 800225e:	2200      	movs	r2, #0
 8002260:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8002262:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002266:	4907      	ldr	r1, [pc, #28]	; (8002284 <IS42S32800J_ClockEnable+0x44>)
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f011 fc53 	bl	8013b14 <HAL_SDRAM_SendCommand>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d002      	beq.n	800227a <IS42S32800J_ClockEnable+0x3a>
  {
    return IS42S32800J_ERROR;
 8002274:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002278:	e000      	b.n	800227c <IS42S32800J_ClockEnable+0x3c>
  }
  else
  {
    return IS42S32800J_OK;
 800227a:	2300      	movs	r3, #0
  }
}
 800227c:	4618      	mov	r0, r3
 800227e:	3708      	adds	r7, #8
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	2400061c 	.word	0x2400061c

08002288 <IS42S32800J_Precharge>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 8002292:	4b0e      	ldr	r3, [pc, #56]	; (80022cc <IS42S32800J_Precharge+0x44>)
 8002294:	2202      	movs	r2, #2
 8002296:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 8002298:	4a0c      	ldr	r2, [pc, #48]	; (80022cc <IS42S32800J_Precharge+0x44>)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800229e:	4b0b      	ldr	r3, [pc, #44]	; (80022cc <IS42S32800J_Precharge+0x44>)
 80022a0:	2201      	movs	r2, #1
 80022a2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80022a4:	4b09      	ldr	r3, [pc, #36]	; (80022cc <IS42S32800J_Precharge+0x44>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80022aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022ae:	4907      	ldr	r1, [pc, #28]	; (80022cc <IS42S32800J_Precharge+0x44>)
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f011 fc2f 	bl	8013b14 <HAL_SDRAM_SendCommand>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d002      	beq.n	80022c2 <IS42S32800J_Precharge+0x3a>
  {
    return IS42S32800J_ERROR;
 80022bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022c0:	e000      	b.n	80022c4 <IS42S32800J_Precharge+0x3c>
  }
  else
  {
    return IS42S32800J_OK;
 80022c2:	2300      	movs	r3, #0
  }
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3708      	adds	r7, #8
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	2400061c 	.word	0x2400061c

080022d0 <IS42S32800J_ModeRegConfig>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800J_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80022e2:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
 80022e8:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
 80022ee:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80022f4:	4313      	orrs	r3, r2
 80022f6:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 80022f8:	4b0e      	ldr	r3, [pc, #56]	; (8002334 <IS42S32800J_ModeRegConfig+0x64>)
 80022fa:	2204      	movs	r2, #4
 80022fc:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a0c      	ldr	r2, [pc, #48]	; (8002334 <IS42S32800J_ModeRegConfig+0x64>)
 8002304:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8002306:	4b0b      	ldr	r3, [pc, #44]	; (8002334 <IS42S32800J_ModeRegConfig+0x64>)
 8002308:	2201      	movs	r2, #1
 800230a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800230c:	4a09      	ldr	r2, [pc, #36]	; (8002334 <IS42S32800J_ModeRegConfig+0x64>)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8002312:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002316:	4907      	ldr	r1, [pc, #28]	; (8002334 <IS42S32800J_ModeRegConfig+0x64>)
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f011 fbfb 	bl	8013b14 <HAL_SDRAM_SendCommand>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d002      	beq.n	800232a <IS42S32800J_ModeRegConfig+0x5a>
  {
    return IS42S32800J_ERROR;
 8002324:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002328:	e000      	b.n	800232c <IS42S32800J_ModeRegConfig+0x5c>
  }
  else
  {
    return IS42S32800J_OK;
 800232a:	2300      	movs	r3, #0
  }
}
 800232c:	4618      	mov	r0, r3
 800232e:	3710      	adds	r7, #16
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	2400061c 	.word	0x2400061c

08002338 <IS42S32800J_RefreshMode>:
  * @param  RefreshMode Could be IS42S32800J_CMD_AUTOREFRESH_MODE or
  *                      IS42S32800J_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t IS42S32800J_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
 8002344:	4a0e      	ldr	r2, [pc, #56]	; (8002380 <IS42S32800J_RefreshMode+0x48>)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
 800234a:	4a0d      	ldr	r2, [pc, #52]	; (8002380 <IS42S32800J_RefreshMode+0x48>)
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
 8002350:	4b0b      	ldr	r3, [pc, #44]	; (8002380 <IS42S32800J_RefreshMode+0x48>)
 8002352:	2208      	movs	r2, #8
 8002354:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002356:	4b0a      	ldr	r3, [pc, #40]	; (8002380 <IS42S32800J_RefreshMode+0x48>)
 8002358:	2200      	movs	r2, #0
 800235a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800235c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002360:	4907      	ldr	r1, [pc, #28]	; (8002380 <IS42S32800J_RefreshMode+0x48>)
 8002362:	68f8      	ldr	r0, [r7, #12]
 8002364:	f011 fbd6 	bl	8013b14 <HAL_SDRAM_SendCommand>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d002      	beq.n	8002374 <IS42S32800J_RefreshMode+0x3c>
  {
    return IS42S32800J_ERROR;
 800236e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002372:	e000      	b.n	8002376 <IS42S32800J_RefreshMode+0x3e>
  }
  else
  {
    return IS42S32800J_OK;
 8002374:	2300      	movs	r3, #0
  }
}
 8002376:	4618      	mov	r0, r3
 8002378:	3710      	adds	r7, #16
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	2400061c 	.word	0x2400061c

08002384 <IS42S32800J_RefreshRate>:
  * @param  Ctx Component object pointer
  * @param  RefreshCount The refresh rate to be programmed
  * @retval error status
  */
int32_t IS42S32800J_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 800238e:	6839      	ldr	r1, [r7, #0]
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f011 fbf4 	bl	8013b7e <HAL_SDRAM_ProgramRefreshRate>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d002      	beq.n	80023a2 <IS42S32800J_RefreshRate+0x1e>
  {
    return IS42S32800J_ERROR;
 800239c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023a0:	e000      	b.n	80023a4 <IS42S32800J_RefreshRate+0x20>
  }
  else
  {
    return IS42S32800J_OK;
 80023a2:	2300      	movs	r3, #0
  }
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3708      	adds	r7, #8
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <IS42S32800J_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay : specifies the delay time length, in milliseconds
  * @retval IS42S32800J_OK
  */
static int32_t IS42S32800J_Delay(uint32_t Delay)
{  
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 80023b4:	f006 fe1e 	bl	8008ff4 <HAL_GetTick>
 80023b8:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 80023ba:	bf00      	nop
 80023bc:	f006 fe1a 	bl	8008ff4 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d8f7      	bhi.n	80023bc <IS42S32800J_Delay+0x10>
  {
  }
  return IS42S32800J_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3710      	adds	r7, #16
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
	...

080023d8 <OTM8009A_RegisterBusIO>:
  * @brief  Register component IO bus
  * @param  Component object pointer
  * @retval Component status
  */
int32_t OTM8009A_RegisterBusIO (OTM8009A_Object_t *pObj, OTM8009A_IO_t *pIO)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  int32_t ret = OTM8009A_OK;
 80023e2:	2300      	movs	r3, #0
 80023e4:	60fb      	str	r3, [r7, #12]

  if(pObj == NULL)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d103      	bne.n	80023f4 <OTM8009A_RegisterBusIO+0x1c>
  {
    ret = OTM8009A_ERROR;
 80023ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023f0:	60fb      	str	r3, [r7, #12]
 80023f2:	e014      	b.n	800241e <OTM8009A_RegisterBusIO+0x46>
  }
  else
  {
    pObj->IO.WriteReg  = pIO->WriteReg;
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685a      	ldr	r2, [r3, #4]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	605a      	str	r2, [r3, #4]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	689a      	ldr	r2, [r3, #8]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	609a      	str	r2, [r3, #8]
    pObj->IO.GetTick   = pIO->GetTick;
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	68da      	ldr	r2, [r3, #12]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	60da      	str	r2, [r3, #12]
    
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a07      	ldr	r2, [pc, #28]	; (800242c <OTM8009A_RegisterBusIO+0x54>)
 8002410:	615a      	str	r2, [r3, #20]
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a06      	ldr	r2, [pc, #24]	; (8002430 <OTM8009A_RegisterBusIO+0x58>)
 8002416:	611a      	str	r2, [r3, #16]
    pObj->Ctx.handle   = pObj;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	619a      	str	r2, [r3, #24]
  }
  
  return ret;
 800241e:	68fb      	ldr	r3, [r7, #12]
}
 8002420:	4618      	mov	r0, r3
 8002422:	3714      	adds	r7, #20
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr
 800242c:	08003393 	.word	0x08003393
 8002430:	080033c5 	.word	0x080033c5

08002434 <OTM8009A_Init>:
  * @param  ColorCoding   Color Code
  * @param  Orientation   Display orientation
  * @retval Component status
  */
int32_t OTM8009A_Init(OTM8009A_Object_t *pObj, uint32_t ColorCoding, uint32_t Orientation)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
    0xE0,0xF0,0x00,OTM8009A_COLMOD_RGB565,OTM8009A_COLMOD_RGB888,0x7F,0x2C,0x02,0xFF,0x00,
    0x00,0x00,0x66,0xB6,0x06,0xB1,0x06};
  
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */ 
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f103 0010 	add.w	r0, r3, #16
 8002446:	2300      	movs	r3, #0
 8002448:	4abf      	ldr	r2, [pc, #764]	; (8002748 <OTM8009A_Init+0x314>)
 800244a:	2100      	movs	r1, #0
 800244c:	f001 f804 	bl	8003458 <otm8009a_write_reg>
 8002450:	6178      	str	r0, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f103 0010 	add.w	r0, r3, #16
 8002458:	2303      	movs	r3, #3
 800245a:	4abc      	ldr	r2, [pc, #752]	; (800274c <OTM8009A_Init+0x318>)
 800245c:	21ff      	movs	r1, #255	; 0xff
 800245e:	f000 fffb 	bl	8003458 <otm8009a_write_reg>
 8002462:	4602      	mov	r2, r0
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	4413      	add	r3, r2
 8002468:	617b      	str	r3, [r7, #20]
  
  /* Enter ORISE Command 2 */
  /* Shift address to 0x80 */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f103 0010 	add.w	r0, r3, #16
 8002470:	2300      	movs	r3, #0
 8002472:	4ab7      	ldr	r2, [pc, #732]	; (8002750 <OTM8009A_Init+0x31c>)
 8002474:	2100      	movs	r1, #0
 8002476:	f000 ffef 	bl	8003458 <otm8009a_write_reg>
 800247a:	4602      	mov	r2, r0
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	4413      	add	r3, r2
 8002480:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f103 0010 	add.w	r0, r3, #16
 8002488:	2302      	movs	r3, #2
 800248a:	4ab2      	ldr	r2, [pc, #712]	; (8002754 <OTM8009A_Init+0x320>)
 800248c:	21ff      	movs	r1, #255	; 0xff
 800248e:	f000 ffe3 	bl	8003458 <otm8009a_write_reg>
 8002492:	4602      	mov	r2, r0
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	4413      	add	r3, r2
 8002498:	617b      	str	r3, [r7, #20]
  
  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f103 0010 	add.w	r0, r3, #16
 80024a0:	2300      	movs	r3, #0
 80024a2:	4aab      	ldr	r2, [pc, #684]	; (8002750 <OTM8009A_Init+0x31c>)
 80024a4:	2100      	movs	r1, #0
 80024a6:	f000 ffd7 	bl	8003458 <otm8009a_write_reg>
 80024aa:	4602      	mov	r2, r0
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	4413      	add	r3, r2
 80024b0:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f103 0010 	add.w	r0, r3, #16
 80024b8:	2300      	movs	r3, #0
 80024ba:	4aa7      	ldr	r2, [pc, #668]	; (8002758 <OTM8009A_Init+0x324>)
 80024bc:	21c4      	movs	r1, #196	; 0xc4
 80024be:	f000 ffcb 	bl	8003458 <otm8009a_write_reg>
 80024c2:	4602      	mov	r2, r0
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	4413      	add	r3, r2
 80024c8:	617b      	str	r3, [r7, #20]
  
  (void)OTM8009A_IO_Delay(pObj, 10);
 80024ca:	210a      	movs	r1, #10
 80024cc:	68f8      	ldr	r0, [r7, #12]
 80024ce:	f000 ff92 	bl	80033f6 <OTM8009A_IO_Delay>
  /* Not documented */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f103 0010 	add.w	r0, r3, #16
 80024d8:	2300      	movs	r3, #0
 80024da:	4aa0      	ldr	r2, [pc, #640]	; (800275c <OTM8009A_Init+0x328>)
 80024dc:	2100      	movs	r1, #0
 80024de:	f000 ffbb 	bl	8003458 <otm8009a_write_reg>
 80024e2:	4602      	mov	r2, r0
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	4413      	add	r3, r2
 80024e8:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f103 0010 	add.w	r0, r3, #16
 80024f0:	2300      	movs	r3, #0
 80024f2:	4a9b      	ldr	r2, [pc, #620]	; (8002760 <OTM8009A_Init+0x32c>)
 80024f4:	21c4      	movs	r1, #196	; 0xc4
 80024f6:	f000 ffaf 	bl	8003458 <otm8009a_write_reg>
 80024fa:	4602      	mov	r2, r0
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	4413      	add	r3, r2
 8002500:	617b      	str	r3, [r7, #20]
  (void)OTM8009A_IO_Delay(pObj, 10);
 8002502:	210a      	movs	r1, #10
 8002504:	68f8      	ldr	r0, [r7, #12]
 8002506:	f000 ff76 	bl	80033f6 <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////
  
  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f103 0010 	add.w	r0, r3, #16
 8002510:	2300      	movs	r3, #0
 8002512:	4a94      	ldr	r2, [pc, #592]	; (8002764 <OTM8009A_Init+0x330>)
 8002514:	2100      	movs	r1, #0
 8002516:	f000 ff9f 	bl	8003458 <otm8009a_write_reg>
 800251a:	4602      	mov	r2, r0
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	4413      	add	r3, r2
 8002520:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	f103 0010 	add.w	r0, r3, #16
 8002528:	2300      	movs	r3, #0
 800252a:	4a8f      	ldr	r2, [pc, #572]	; (8002768 <OTM8009A_Init+0x334>)
 800252c:	21c5      	movs	r1, #197	; 0xc5
 800252e:	f000 ff93 	bl	8003458 <otm8009a_write_reg>
 8002532:	4602      	mov	r2, r0
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	4413      	add	r3, r2
 8002538:	617b      	str	r3, [r7, #20]
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f103 0010 	add.w	r0, r3, #16
 8002540:	2300      	movs	r3, #0
 8002542:	4a8a      	ldr	r2, [pc, #552]	; (800276c <OTM8009A_Init+0x338>)
 8002544:	2100      	movs	r1, #0
 8002546:	f000 ff87 	bl	8003458 <otm8009a_write_reg>
 800254a:	4602      	mov	r2, r0
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	4413      	add	r3, r2
 8002550:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f103 0010 	add.w	r0, r3, #16
 8002558:	2300      	movs	r3, #0
 800255a:	4a85      	ldr	r2, [pc, #532]	; (8002770 <OTM8009A_Init+0x33c>)
 800255c:	21c5      	movs	r1, #197	; 0xc5
 800255e:	f000 ff7b 	bl	8003458 <otm8009a_write_reg>
 8002562:	4602      	mov	r2, r0
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	4413      	add	r3, r2
 8002568:	617b      	str	r3, [r7, #20]
  
  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	f103 0010 	add.w	r0, r3, #16
 8002570:	2300      	movs	r3, #0
 8002572:	4a80      	ldr	r2, [pc, #512]	; (8002774 <OTM8009A_Init+0x340>)
 8002574:	2100      	movs	r1, #0
 8002576:	f000 ff6f 	bl	8003458 <otm8009a_write_reg>
 800257a:	4602      	mov	r2, r0
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	4413      	add	r3, r2
 8002580:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f103 0010 	add.w	r0, r3, #16
 8002588:	2300      	movs	r3, #0
 800258a:	4a7b      	ldr	r2, [pc, #492]	; (8002778 <OTM8009A_Init+0x344>)
 800258c:	21c0      	movs	r1, #192	; 0xc0
 800258e:	f000 ff63 	bl	8003458 <otm8009a_write_reg>
 8002592:	4602      	mov	r2, r0
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	4413      	add	r3, r2
 8002598:	617b      	str	r3, [r7, #20]
  
  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f103 0010 	add.w	r0, r3, #16
 80025a0:	2300      	movs	r3, #0
 80025a2:	4a69      	ldr	r2, [pc, #420]	; (8002748 <OTM8009A_Init+0x314>)
 80025a4:	2100      	movs	r1, #0
 80025a6:	f000 ff57 	bl	8003458 <otm8009a_write_reg>
 80025aa:	4602      	mov	r2, r0
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	4413      	add	r3, r2
 80025b0:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	f103 0010 	add.w	r0, r3, #16
 80025b8:	2300      	movs	r3, #0
 80025ba:	4a70      	ldr	r2, [pc, #448]	; (800277c <OTM8009A_Init+0x348>)
 80025bc:	21d9      	movs	r1, #217	; 0xd9
 80025be:	f000 ff4b 	bl	8003458 <otm8009a_write_reg>
 80025c2:	4602      	mov	r2, r0
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	4413      	add	r3, r2
 80025c8:	617b      	str	r3, [r7, #20]
  
  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f103 0010 	add.w	r0, r3, #16
 80025d0:	2300      	movs	r3, #0
 80025d2:	4a6b      	ldr	r2, [pc, #428]	; (8002780 <OTM8009A_Init+0x34c>)
 80025d4:	2100      	movs	r1, #0
 80025d6:	f000 ff3f 	bl	8003458 <otm8009a_write_reg>
 80025da:	4602      	mov	r2, r0
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	4413      	add	r3, r2
 80025e0:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	f103 0010 	add.w	r0, r3, #16
 80025e8:	2300      	movs	r3, #0
 80025ea:	4a66      	ldr	r2, [pc, #408]	; (8002784 <OTM8009A_Init+0x350>)
 80025ec:	21c1      	movs	r1, #193	; 0xc1
 80025ee:	f000 ff33 	bl	8003458 <otm8009a_write_reg>
 80025f2:	4602      	mov	r2, r0
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	4413      	add	r3, r2
 80025f8:	617b      	str	r3, [r7, #20]
  
  /* Video mode internal */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f103 0010 	add.w	r0, r3, #16
 8002600:	2300      	movs	r3, #0
 8002602:	4a61      	ldr	r2, [pc, #388]	; (8002788 <OTM8009A_Init+0x354>)
 8002604:	2100      	movs	r1, #0
 8002606:	f000 ff27 	bl	8003458 <otm8009a_write_reg>
 800260a:	4602      	mov	r2, r0
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	4413      	add	r3, r2
 8002610:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f103 0010 	add.w	r0, r3, #16
 8002618:	2300      	movs	r3, #0
 800261a:	4a5c      	ldr	r2, [pc, #368]	; (800278c <OTM8009A_Init+0x358>)
 800261c:	21c1      	movs	r1, #193	; 0xc1
 800261e:	f000 ff1b 	bl	8003458 <otm8009a_write_reg>
 8002622:	4602      	mov	r2, r0
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	4413      	add	r3, r2
 8002628:	617b      	str	r3, [r7, #20]
  
  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f103 0010 	add.w	r0, r3, #16
 8002630:	2300      	movs	r3, #0
 8002632:	4a57      	ldr	r2, [pc, #348]	; (8002790 <OTM8009A_Init+0x35c>)
 8002634:	2100      	movs	r1, #0
 8002636:	f000 ff0f 	bl	8003458 <otm8009a_write_reg>
 800263a:	4602      	mov	r2, r0
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	4413      	add	r3, r2
 8002640:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f103 0010 	add.w	r0, r3, #16
 8002648:	2300      	movs	r3, #0
 800264a:	4a52      	ldr	r2, [pc, #328]	; (8002794 <OTM8009A_Init+0x360>)
 800264c:	21c5      	movs	r1, #197	; 0xc5
 800264e:	f000 ff03 	bl	8003458 <otm8009a_write_reg>
 8002652:	4602      	mov	r2, r0
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	4413      	add	r3, r2
 8002658:	617b      	str	r3, [r7, #20]
  
  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f103 0010 	add.w	r0, r3, #16
 8002660:	2300      	movs	r3, #0
 8002662:	4a4d      	ldr	r2, [pc, #308]	; (8002798 <OTM8009A_Init+0x364>)
 8002664:	2100      	movs	r1, #0
 8002666:	f000 fef7 	bl	8003458 <otm8009a_write_reg>
 800266a:	4602      	mov	r2, r0
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	4413      	add	r3, r2
 8002670:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f103 0010 	add.w	r0, r3, #16
 8002678:	2300      	movs	r3, #0
 800267a:	4a3d      	ldr	r2, [pc, #244]	; (8002770 <OTM8009A_Init+0x33c>)
 800267c:	21c5      	movs	r1, #197	; 0xc5
 800267e:	f000 feeb 	bl	8003458 <otm8009a_write_reg>
 8002682:	4602      	mov	r2, r0
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	4413      	add	r3, r2
 8002688:	617b      	str	r3, [r7, #20]
  
  /* GVDD/NGVDD settings */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f103 0010 	add.w	r0, r3, #16
 8002690:	2300      	movs	r3, #0
 8002692:	4a2d      	ldr	r2, [pc, #180]	; (8002748 <OTM8009A_Init+0x314>)
 8002694:	2100      	movs	r1, #0
 8002696:	f000 fedf 	bl	8003458 <otm8009a_write_reg>
 800269a:	4602      	mov	r2, r0
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	4413      	add	r3, r2
 80026a0:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f103 0010 	add.w	r0, r3, #16
 80026a8:	2302      	movs	r3, #2
 80026aa:	4a3c      	ldr	r2, [pc, #240]	; (800279c <OTM8009A_Init+0x368>)
 80026ac:	21d8      	movs	r1, #216	; 0xd8
 80026ae:	f000 fed3 	bl	8003458 <otm8009a_write_reg>
 80026b2:	4602      	mov	r2, r0
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	4413      	add	r3, r2
 80026b8:	617b      	str	r3, [r7, #20]
  
  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f103 0010 	add.w	r0, r3, #16
 80026c0:	2300      	movs	r3, #0
 80026c2:	4a37      	ldr	r2, [pc, #220]	; (80027a0 <OTM8009A_Init+0x36c>)
 80026c4:	2100      	movs	r1, #0
 80026c6:	f000 fec7 	bl	8003458 <otm8009a_write_reg>
 80026ca:	4602      	mov	r2, r0
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	4413      	add	r3, r2
 80026d0:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f103 0010 	add.w	r0, r3, #16
 80026d8:	2300      	movs	r3, #0
 80026da:	4a32      	ldr	r2, [pc, #200]	; (80027a4 <OTM8009A_Init+0x370>)
 80026dc:	21c5      	movs	r1, #197	; 0xc5
 80026de:	f000 febb 	bl	8003458 <otm8009a_write_reg>
 80026e2:	4602      	mov	r2, r0
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	4413      	add	r3, r2
 80026e8:	617b      	str	r3, [r7, #20]
  
  /* Panel display timing Setting 3 */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	f103 0010 	add.w	r0, r3, #16
 80026f0:	2300      	movs	r3, #0
 80026f2:	4a2d      	ldr	r2, [pc, #180]	; (80027a8 <OTM8009A_Init+0x374>)
 80026f4:	2100      	movs	r1, #0
 80026f6:	f000 feaf 	bl	8003458 <otm8009a_write_reg>
 80026fa:	4602      	mov	r2, r0
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	4413      	add	r3, r2
 8002700:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f103 0010 	add.w	r0, r3, #16
 8002708:	2300      	movs	r3, #0
 800270a:	4a28      	ldr	r2, [pc, #160]	; (80027ac <OTM8009A_Init+0x378>)
 800270c:	21c0      	movs	r1, #192	; 0xc0
 800270e:	f000 fea3 	bl	8003458 <otm8009a_write_reg>
 8002712:	4602      	mov	r2, r0
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	4413      	add	r3, r2
 8002718:	617b      	str	r3, [r7, #20]
  
  /* Power control 1 */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f103 0010 	add.w	r0, r3, #16
 8002720:	2300      	movs	r3, #0
 8002722:	4a23      	ldr	r2, [pc, #140]	; (80027b0 <OTM8009A_Init+0x37c>)
 8002724:	2100      	movs	r1, #0
 8002726:	f000 fe97 	bl	8003458 <otm8009a_write_reg>
 800272a:	4602      	mov	r2, r0
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	4413      	add	r3, r2
 8002730:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f103 0010 	add.w	r0, r3, #16
 8002738:	2300      	movs	r3, #0
 800273a:	4a1e      	ldr	r2, [pc, #120]	; (80027b4 <OTM8009A_Init+0x380>)
 800273c:	21c5      	movs	r1, #197	; 0xc5
 800273e:	f000 fe8b 	bl	8003458 <otm8009a_write_reg>
 8002742:	4602      	mov	r2, r0
 8002744:	e038      	b.n	80027b8 <OTM8009A_Init+0x384>
 8002746:	bf00      	nop
 8002748:	080158f1 	.word	0x080158f1
 800274c:	08015924 	.word	0x08015924
 8002750:	080158f2 	.word	0x080158f2
 8002754:	08015928 	.word	0x08015928
 8002758:	080158f3 	.word	0x080158f3
 800275c:	080158f4 	.word	0x080158f4
 8002760:	080158f5 	.word	0x080158f5
 8002764:	080158f6 	.word	0x080158f6
 8002768:	080158f7 	.word	0x080158f7
 800276c:	080158f8 	.word	0x080158f8
 8002770:	080158f9 	.word	0x080158f9
 8002774:	080158fa 	.word	0x080158fa
 8002778:	080158fb 	.word	0x080158fb
 800277c:	080158fc 	.word	0x080158fc
 8002780:	080158fd 	.word	0x080158fd
 8002784:	080158fe 	.word	0x080158fe
 8002788:	080158ff 	.word	0x080158ff
 800278c:	08015900 	.word	0x08015900
 8002790:	08015901 	.word	0x08015901
 8002794:	08015902 	.word	0x08015902
 8002798:	08015903 	.word	0x08015903
 800279c:	0801592c 	.word	0x0801592c
 80027a0:	08015904 	.word	0x08015904
 80027a4:	08015905 	.word	0x08015905
 80027a8:	08015906 	.word	0x08015906
 80027ac:	08015907 	.word	0x08015907
 80027b0:	08015908 	.word	0x08015908
 80027b4:	08015909 	.word	0x08015909
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	4413      	add	r3, r2
 80027bc:	617b      	str	r3, [r7, #20]
  
  /* Source driver precharge */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f103 0010 	add.w	r0, r3, #16
 80027c4:	2300      	movs	r3, #0
 80027c6:	4abe      	ldr	r2, [pc, #760]	; (8002ac0 <OTM8009A_Init+0x68c>)
 80027c8:	2100      	movs	r1, #0
 80027ca:	f000 fe45 	bl	8003458 <otm8009a_write_reg>
 80027ce:	4602      	mov	r2, r0
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	4413      	add	r3, r2
 80027d4:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f103 0010 	add.w	r0, r3, #16
 80027dc:	2300      	movs	r3, #0
 80027de:	4ab9      	ldr	r2, [pc, #740]	; (8002ac4 <OTM8009A_Init+0x690>)
 80027e0:	21c4      	movs	r1, #196	; 0xc4
 80027e2:	f000 fe39 	bl	8003458 <otm8009a_write_reg>
 80027e6:	4602      	mov	r2, r0
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	4413      	add	r3, r2
 80027ec:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f103 0010 	add.w	r0, r3, #16
 80027f4:	2300      	movs	r3, #0
 80027f6:	4ab4      	ldr	r2, [pc, #720]	; (8002ac8 <OTM8009A_Init+0x694>)
 80027f8:	2100      	movs	r1, #0
 80027fa:	f000 fe2d 	bl	8003458 <otm8009a_write_reg>
 80027fe:	4602      	mov	r2, r0
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	4413      	add	r3, r2
 8002804:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f103 0010 	add.w	r0, r3, #16
 800280c:	2300      	movs	r3, #0
 800280e:	4aaf      	ldr	r2, [pc, #700]	; (8002acc <OTM8009A_Init+0x698>)
 8002810:	21c1      	movs	r1, #193	; 0xc1
 8002812:	f000 fe21 	bl	8003458 <otm8009a_write_reg>
 8002816:	4602      	mov	r2, r0
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	4413      	add	r3, r2
 800281c:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f103 0010 	add.w	r0, r3, #16
 8002824:	2300      	movs	r3, #0
 8002826:	4aaa      	ldr	r2, [pc, #680]	; (8002ad0 <OTM8009A_Init+0x69c>)
 8002828:	2100      	movs	r1, #0
 800282a:	f000 fe15 	bl	8003458 <otm8009a_write_reg>
 800282e:	4602      	mov	r2, r0
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	4413      	add	r3, r2
 8002834:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f103 0010 	add.w	r0, r3, #16
 800283c:	2302      	movs	r3, #2
 800283e:	4aa5      	ldr	r2, [pc, #660]	; (8002ad4 <OTM8009A_Init+0x6a0>)
 8002840:	21b3      	movs	r1, #179	; 0xb3
 8002842:	f000 fe09 	bl	8003458 <otm8009a_write_reg>
 8002846:	4602      	mov	r2, r0
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	4413      	add	r3, r2
 800284c:	617b      	str	r3, [r7, #20]
  
  /* GOAVST */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f103 0010 	add.w	r0, r3, #16
 8002854:	2300      	movs	r3, #0
 8002856:	4aa0      	ldr	r2, [pc, #640]	; (8002ad8 <OTM8009A_Init+0x6a4>)
 8002858:	2100      	movs	r1, #0
 800285a:	f000 fdfd 	bl	8003458 <otm8009a_write_reg>
 800285e:	4602      	mov	r2, r0
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	4413      	add	r3, r2
 8002864:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f103 0010 	add.w	r0, r3, #16
 800286c:	2306      	movs	r3, #6
 800286e:	4a9b      	ldr	r2, [pc, #620]	; (8002adc <OTM8009A_Init+0x6a8>)
 8002870:	21ce      	movs	r1, #206	; 0xce
 8002872:	f000 fdf1 	bl	8003458 <otm8009a_write_reg>
 8002876:	4602      	mov	r2, r0
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	4413      	add	r3, r2
 800287c:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f103 0010 	add.w	r0, r3, #16
 8002884:	2300      	movs	r3, #0
 8002886:	4a96      	ldr	r2, [pc, #600]	; (8002ae0 <OTM8009A_Init+0x6ac>)
 8002888:	2100      	movs	r1, #0
 800288a:	f000 fde5 	bl	8003458 <otm8009a_write_reg>
 800288e:	4602      	mov	r2, r0
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	4413      	add	r3, r2
 8002894:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f103 0010 	add.w	r0, r3, #16
 800289c:	230e      	movs	r3, #14
 800289e:	4a91      	ldr	r2, [pc, #580]	; (8002ae4 <OTM8009A_Init+0x6b0>)
 80028a0:	21ce      	movs	r1, #206	; 0xce
 80028a2:	f000 fdd9 	bl	8003458 <otm8009a_write_reg>
 80028a6:	4602      	mov	r2, r0
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	4413      	add	r3, r2
 80028ac:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f103 0010 	add.w	r0, r3, #16
 80028b4:	2300      	movs	r3, #0
 80028b6:	4a8c      	ldr	r2, [pc, #560]	; (8002ae8 <OTM8009A_Init+0x6b4>)
 80028b8:	2100      	movs	r1, #0
 80028ba:	f000 fdcd 	bl	8003458 <otm8009a_write_reg>
 80028be:	4602      	mov	r2, r0
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	4413      	add	r3, r2
 80028c4:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f103 0010 	add.w	r0, r3, #16
 80028cc:	230e      	movs	r3, #14
 80028ce:	4a87      	ldr	r2, [pc, #540]	; (8002aec <OTM8009A_Init+0x6b8>)
 80028d0:	21ce      	movs	r1, #206	; 0xce
 80028d2:	f000 fdc1 	bl	8003458 <otm8009a_write_reg>
 80028d6:	4602      	mov	r2, r0
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	4413      	add	r3, r2
 80028dc:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f103 0010 	add.w	r0, r3, #16
 80028e4:	2300      	movs	r3, #0
 80028e6:	4a82      	ldr	r2, [pc, #520]	; (8002af0 <OTM8009A_Init+0x6bc>)
 80028e8:	2100      	movs	r1, #0
 80028ea:	f000 fdb5 	bl	8003458 <otm8009a_write_reg>
 80028ee:	4602      	mov	r2, r0
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	4413      	add	r3, r2
 80028f4:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f103 0010 	add.w	r0, r3, #16
 80028fc:	230a      	movs	r3, #10
 80028fe:	4a7d      	ldr	r2, [pc, #500]	; (8002af4 <OTM8009A_Init+0x6c0>)
 8002900:	21cf      	movs	r1, #207	; 0xcf
 8002902:	f000 fda9 	bl	8003458 <otm8009a_write_reg>
 8002906:	4602      	mov	r2, r0
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	4413      	add	r3, r2
 800290c:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f103 0010 	add.w	r0, r3, #16
 8002914:	2300      	movs	r3, #0
 8002916:	4a78      	ldr	r2, [pc, #480]	; (8002af8 <OTM8009A_Init+0x6c4>)
 8002918:	2100      	movs	r1, #0
 800291a:	f000 fd9d 	bl	8003458 <otm8009a_write_reg>
 800291e:	4602      	mov	r2, r0
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	4413      	add	r3, r2
 8002924:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f103 0010 	add.w	r0, r3, #16
 800292c:	2300      	movs	r3, #0
 800292e:	4a73      	ldr	r2, [pc, #460]	; (8002afc <OTM8009A_Init+0x6c8>)
 8002930:	21cf      	movs	r1, #207	; 0xcf
 8002932:	f000 fd91 	bl	8003458 <otm8009a_write_reg>
 8002936:	4602      	mov	r2, r0
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	4413      	add	r3, r2
 800293c:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f103 0010 	add.w	r0, r3, #16
 8002944:	2300      	movs	r3, #0
 8002946:	4a64      	ldr	r2, [pc, #400]	; (8002ad8 <OTM8009A_Init+0x6a4>)
 8002948:	2100      	movs	r1, #0
 800294a:	f000 fd85 	bl	8003458 <otm8009a_write_reg>
 800294e:	4602      	mov	r2, r0
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	4413      	add	r3, r2
 8002954:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f103 0010 	add.w	r0, r3, #16
 800295c:	230a      	movs	r3, #10
 800295e:	4a68      	ldr	r2, [pc, #416]	; (8002b00 <OTM8009A_Init+0x6cc>)
 8002960:	21cb      	movs	r1, #203	; 0xcb
 8002962:	f000 fd79 	bl	8003458 <otm8009a_write_reg>
 8002966:	4602      	mov	r2, r0
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	4413      	add	r3, r2
 800296c:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f103 0010 	add.w	r0, r3, #16
 8002974:	2300      	movs	r3, #0
 8002976:	4a63      	ldr	r2, [pc, #396]	; (8002b04 <OTM8009A_Init+0x6d0>)
 8002978:	2100      	movs	r1, #0
 800297a:	f000 fd6d 	bl	8003458 <otm8009a_write_reg>
 800297e:	4602      	mov	r2, r0
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	4413      	add	r3, r2
 8002984:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f103 0010 	add.w	r0, r3, #16
 800298c:	230f      	movs	r3, #15
 800298e:	4a5e      	ldr	r2, [pc, #376]	; (8002b08 <OTM8009A_Init+0x6d4>)
 8002990:	21cb      	movs	r1, #203	; 0xcb
 8002992:	f000 fd61 	bl	8003458 <otm8009a_write_reg>
 8002996:	4602      	mov	r2, r0
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	4413      	add	r3, r2
 800299c:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f103 0010 	add.w	r0, r3, #16
 80029a4:	2300      	movs	r3, #0
 80029a6:	4a4e      	ldr	r2, [pc, #312]	; (8002ae0 <OTM8009A_Init+0x6ac>)
 80029a8:	2100      	movs	r1, #0
 80029aa:	f000 fd55 	bl	8003458 <otm8009a_write_reg>
 80029ae:	4602      	mov	r2, r0
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	4413      	add	r3, r2
 80029b4:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f103 0010 	add.w	r0, r3, #16
 80029bc:	230f      	movs	r3, #15
 80029be:	4a53      	ldr	r2, [pc, #332]	; (8002b0c <OTM8009A_Init+0x6d8>)
 80029c0:	21cb      	movs	r1, #203	; 0xcb
 80029c2:	f000 fd49 	bl	8003458 <otm8009a_write_reg>
 80029c6:	4602      	mov	r2, r0
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	4413      	add	r3, r2
 80029cc:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f103 0010 	add.w	r0, r3, #16
 80029d4:	2300      	movs	r3, #0
 80029d6:	4a44      	ldr	r2, [pc, #272]	; (8002ae8 <OTM8009A_Init+0x6b4>)
 80029d8:	2100      	movs	r1, #0
 80029da:	f000 fd3d 	bl	8003458 <otm8009a_write_reg>
 80029de:	4602      	mov	r2, r0
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	4413      	add	r3, r2
 80029e4:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f103 0010 	add.w	r0, r3, #16
 80029ec:	230a      	movs	r3, #10
 80029ee:	4a48      	ldr	r2, [pc, #288]	; (8002b10 <OTM8009A_Init+0x6dc>)
 80029f0:	21cb      	movs	r1, #203	; 0xcb
 80029f2:	f000 fd31 	bl	8003458 <otm8009a_write_reg>
 80029f6:	4602      	mov	r2, r0
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	4413      	add	r3, r2
 80029fc:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f103 0010 	add.w	r0, r3, #16
 8002a04:	2300      	movs	r3, #0
 8002a06:	4a3a      	ldr	r2, [pc, #232]	; (8002af0 <OTM8009A_Init+0x6bc>)
 8002a08:	2100      	movs	r1, #0
 8002a0a:	f000 fd25 	bl	8003458 <otm8009a_write_reg>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	4413      	add	r3, r2
 8002a14:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f103 0010 	add.w	r0, r3, #16
 8002a1c:	230f      	movs	r3, #15
 8002a1e:	4a3d      	ldr	r2, [pc, #244]	; (8002b14 <OTM8009A_Init+0x6e0>)
 8002a20:	21cb      	movs	r1, #203	; 0xcb
 8002a22:	f000 fd19 	bl	8003458 <otm8009a_write_reg>
 8002a26:	4602      	mov	r2, r0
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f103 0010 	add.w	r0, r3, #16
 8002a34:	2300      	movs	r3, #0
 8002a36:	4a30      	ldr	r2, [pc, #192]	; (8002af8 <OTM8009A_Init+0x6c4>)
 8002a38:	2100      	movs	r1, #0
 8002a3a:	f000 fd0d 	bl	8003458 <otm8009a_write_reg>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	4413      	add	r3, r2
 8002a44:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	f103 0010 	add.w	r0, r3, #16
 8002a4c:	230f      	movs	r3, #15
 8002a4e:	4a32      	ldr	r2, [pc, #200]	; (8002b18 <OTM8009A_Init+0x6e4>)
 8002a50:	21cb      	movs	r1, #203	; 0xcb
 8002a52:	f000 fd01 	bl	8003458 <otm8009a_write_reg>
 8002a56:	4602      	mov	r2, r0
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f103 0010 	add.w	r0, r3, #16
 8002a64:	2300      	movs	r3, #0
 8002a66:	4a2d      	ldr	r2, [pc, #180]	; (8002b1c <OTM8009A_Init+0x6e8>)
 8002a68:	2100      	movs	r1, #0
 8002a6a:	f000 fcf5 	bl	8003458 <otm8009a_write_reg>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	4413      	add	r3, r2
 8002a74:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f103 0010 	add.w	r0, r3, #16
 8002a7c:	230a      	movs	r3, #10
 8002a7e:	4a28      	ldr	r2, [pc, #160]	; (8002b20 <OTM8009A_Init+0x6ec>)
 8002a80:	21cb      	movs	r1, #203	; 0xcb
 8002a82:	f000 fce9 	bl	8003458 <otm8009a_write_reg>
 8002a86:	4602      	mov	r2, r0
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f103 0010 	add.w	r0, r3, #16
 8002a94:	2300      	movs	r3, #0
 8002a96:	4a23      	ldr	r2, [pc, #140]	; (8002b24 <OTM8009A_Init+0x6f0>)
 8002a98:	2100      	movs	r1, #0
 8002a9a:	f000 fcdd 	bl	8003458 <otm8009a_write_reg>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f103 0010 	add.w	r0, r3, #16
 8002aac:	230a      	movs	r3, #10
 8002aae:	4a1e      	ldr	r2, [pc, #120]	; (8002b28 <OTM8009A_Init+0x6f4>)
 8002ab0:	21cb      	movs	r1, #203	; 0xcb
 8002ab2:	f000 fcd1 	bl	8003458 <otm8009a_write_reg>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	4413      	add	r3, r2
 8002abc:	617b      	str	r3, [r7, #20]
 8002abe:	e035      	b.n	8002b2c <OTM8009A_Init+0x6f8>
 8002ac0:	080158fd 	.word	0x080158fd
 8002ac4:	0801590a 	.word	0x0801590a
 8002ac8:	080158ff 	.word	0x080158ff
 8002acc:	0801590b 	.word	0x0801590b
 8002ad0:	0801590c 	.word	0x0801590c
 8002ad4:	08015930 	.word	0x08015930
 8002ad8:	080158f2 	.word	0x080158f2
 8002adc:	08015934 	.word	0x08015934
 8002ae0:	0801590d 	.word	0x0801590d
 8002ae4:	0801593c 	.word	0x0801593c
 8002ae8:	0801590e 	.word	0x0801590e
 8002aec:	0801594c 	.word	0x0801594c
 8002af0:	0801590f 	.word	0x0801590f
 8002af4:	0801595c 	.word	0x0801595c
 8002af8:	08015910 	.word	0x08015910
 8002afc:	0801591d 	.word	0x0801591d
 8002b00:	08015968 	.word	0x08015968
 8002b04:	08015911 	.word	0x08015911
 8002b08:	08015974 	.word	0x08015974
 8002b0c:	08015984 	.word	0x08015984
 8002b10:	08015994 	.word	0x08015994
 8002b14:	080159a0 	.word	0x080159a0
 8002b18:	080159b0 	.word	0x080159b0
 8002b1c:	08015912 	.word	0x08015912
 8002b20:	080159c0 	.word	0x080159c0
 8002b24:	08015913 	.word	0x08015913
 8002b28:	080159cc 	.word	0x080159cc
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f103 0010 	add.w	r0, r3, #16
 8002b32:	2300      	movs	r3, #0
 8002b34:	4aae      	ldr	r2, [pc, #696]	; (8002df0 <OTM8009A_Init+0x9bc>)
 8002b36:	2100      	movs	r1, #0
 8002b38:	f000 fc8e 	bl	8003458 <otm8009a_write_reg>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	4413      	add	r3, r2
 8002b42:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f103 0010 	add.w	r0, r3, #16
 8002b4a:	230a      	movs	r3, #10
 8002b4c:	4aa9      	ldr	r2, [pc, #676]	; (8002df4 <OTM8009A_Init+0x9c0>)
 8002b4e:	21cc      	movs	r1, #204	; 0xcc
 8002b50:	f000 fc82 	bl	8003458 <otm8009a_write_reg>
 8002b54:	4602      	mov	r2, r0
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	4413      	add	r3, r2
 8002b5a:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f103 0010 	add.w	r0, r3, #16
 8002b62:	2300      	movs	r3, #0
 8002b64:	4aa4      	ldr	r2, [pc, #656]	; (8002df8 <OTM8009A_Init+0x9c4>)
 8002b66:	2100      	movs	r1, #0
 8002b68:	f000 fc76 	bl	8003458 <otm8009a_write_reg>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	4413      	add	r3, r2
 8002b72:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f103 0010 	add.w	r0, r3, #16
 8002b7a:	230f      	movs	r3, #15
 8002b7c:	4a9f      	ldr	r2, [pc, #636]	; (8002dfc <OTM8009A_Init+0x9c8>)
 8002b7e:	21cc      	movs	r1, #204	; 0xcc
 8002b80:	f000 fc6a 	bl	8003458 <otm8009a_write_reg>
 8002b84:	4602      	mov	r2, r0
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	4413      	add	r3, r2
 8002b8a:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f103 0010 	add.w	r0, r3, #16
 8002b92:	2300      	movs	r3, #0
 8002b94:	4a9a      	ldr	r2, [pc, #616]	; (8002e00 <OTM8009A_Init+0x9cc>)
 8002b96:	2100      	movs	r1, #0
 8002b98:	f000 fc5e 	bl	8003458 <otm8009a_write_reg>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f103 0010 	add.w	r0, r3, #16
 8002baa:	230f      	movs	r3, #15
 8002bac:	4a95      	ldr	r2, [pc, #596]	; (8002e04 <OTM8009A_Init+0x9d0>)
 8002bae:	21cc      	movs	r1, #204	; 0xcc
 8002bb0:	f000 fc52 	bl	8003458 <otm8009a_write_reg>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	4413      	add	r3, r2
 8002bba:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f103 0010 	add.w	r0, r3, #16
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	4a90      	ldr	r2, [pc, #576]	; (8002e08 <OTM8009A_Init+0x9d4>)
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	f000 fc46 	bl	8003458 <otm8009a_write_reg>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f103 0010 	add.w	r0, r3, #16
 8002bda:	230a      	movs	r3, #10
 8002bdc:	4a8b      	ldr	r2, [pc, #556]	; (8002e0c <OTM8009A_Init+0x9d8>)
 8002bde:	21cc      	movs	r1, #204	; 0xcc
 8002be0:	f000 fc3a 	bl	8003458 <otm8009a_write_reg>
 8002be4:	4602      	mov	r2, r0
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	4413      	add	r3, r2
 8002bea:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f103 0010 	add.w	r0, r3, #16
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	4a86      	ldr	r2, [pc, #536]	; (8002e10 <OTM8009A_Init+0x9dc>)
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	f000 fc2e 	bl	8003458 <otm8009a_write_reg>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	4413      	add	r3, r2
 8002c02:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f103 0010 	add.w	r0, r3, #16
 8002c0a:	230f      	movs	r3, #15
 8002c0c:	4a81      	ldr	r2, [pc, #516]	; (8002e14 <OTM8009A_Init+0x9e0>)
 8002c0e:	21cc      	movs	r1, #204	; 0xcc
 8002c10:	f000 fc22 	bl	8003458 <otm8009a_write_reg>
 8002c14:	4602      	mov	r2, r0
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	4413      	add	r3, r2
 8002c1a:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f103 0010 	add.w	r0, r3, #16
 8002c22:	2300      	movs	r3, #0
 8002c24:	4a7c      	ldr	r2, [pc, #496]	; (8002e18 <OTM8009A_Init+0x9e4>)
 8002c26:	2100      	movs	r1, #0
 8002c28:	f000 fc16 	bl	8003458 <otm8009a_write_reg>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	4413      	add	r3, r2
 8002c32:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f103 0010 	add.w	r0, r3, #16
 8002c3a:	230f      	movs	r3, #15
 8002c3c:	4a77      	ldr	r2, [pc, #476]	; (8002e1c <OTM8009A_Init+0x9e8>)
 8002c3e:	21cc      	movs	r1, #204	; 0xcc
 8002c40:	f000 fc0a 	bl	8003458 <otm8009a_write_reg>
 8002c44:	4602      	mov	r2, r0
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	4413      	add	r3, r2
 8002c4a:	617b      	str	r3, [r7, #20]
  
  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f103 0010 	add.w	r0, r3, #16
 8002c52:	2300      	movs	r3, #0
 8002c54:	4a72      	ldr	r2, [pc, #456]	; (8002e20 <OTM8009A_Init+0x9ec>)
 8002c56:	2100      	movs	r1, #0
 8002c58:	f000 fbfe 	bl	8003458 <otm8009a_write_reg>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	4413      	add	r3, r2
 8002c62:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f103 0010 	add.w	r0, r3, #16
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	4a6d      	ldr	r2, [pc, #436]	; (8002e24 <OTM8009A_Init+0x9f0>)
 8002c6e:	21c5      	movs	r1, #197	; 0xc5
 8002c70:	f000 fbf2 	bl	8003458 <otm8009a_write_reg>
 8002c74:	4602      	mov	r2, r0
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	4413      	add	r3, r2
 8002c7a:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f103 0010 	add.w	r0, r3, #16
 8002c82:	2300      	movs	r3, #0
 8002c84:	4a68      	ldr	r2, [pc, #416]	; (8002e28 <OTM8009A_Init+0x9f4>)
 8002c86:	2100      	movs	r1, #0
 8002c88:	f000 fbe6 	bl	8003458 <otm8009a_write_reg>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	4413      	add	r3, r2
 8002c92:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f103 0010 	add.w	r0, r3, #16
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	4a63      	ldr	r2, [pc, #396]	; (8002e2c <OTM8009A_Init+0x9f8>)
 8002c9e:	21f5      	movs	r1, #245	; 0xf5
 8002ca0:	f000 fbda 	bl	8003458 <otm8009a_write_reg>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	4413      	add	r3, r2
 8002caa:	617b      	str	r3, [r7, #20]
  /////////////////////////////////////////////////////////////////////////////
  
  /* CABC LEDPWM frequency adjusted to 19,5kHz */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f103 0010 	add.w	r0, r3, #16
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	4a5e      	ldr	r2, [pc, #376]	; (8002e30 <OTM8009A_Init+0x9fc>)
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	f000 fbce 	bl	8003458 <otm8009a_write_reg>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f103 0010 	add.w	r0, r3, #16
 8002cca:	2300      	movs	r3, #0
 8002ccc:	4a59      	ldr	r2, [pc, #356]	; (8002e34 <OTM8009A_Init+0xa00>)
 8002cce:	21c6      	movs	r1, #198	; 0xc6
 8002cd0:	f000 fbc2 	bl	8003458 <otm8009a_write_reg>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	4413      	add	r3, r2
 8002cda:	617b      	str	r3, [r7, #20]
  
  /* Exit CMD2 mode */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f103 0010 	add.w	r0, r3, #16
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	4a54      	ldr	r2, [pc, #336]	; (8002e38 <OTM8009A_Init+0xa04>)
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	f000 fbb6 	bl	8003458 <otm8009a_write_reg>
 8002cec:	4602      	mov	r2, r0
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f103 0010 	add.w	r0, r3, #16
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	4a4f      	ldr	r2, [pc, #316]	; (8002e3c <OTM8009A_Init+0xa08>)
 8002cfe:	21ff      	movs	r1, #255	; 0xff
 8002d00:	f000 fbaa 	bl	8003458 <otm8009a_write_reg>
 8002d04:	4602      	mov	r2, r0
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	4413      	add	r3, r2
 8002d0a:	617b      	str	r3, [r7, #20]
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */
  
  /* NOP - goes back to DCS std command ? */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f103 0010 	add.w	r0, r3, #16
 8002d12:	2300      	movs	r3, #0
 8002d14:	4a48      	ldr	r2, [pc, #288]	; (8002e38 <OTM8009A_Init+0xa04>)
 8002d16:	2100      	movs	r1, #0
 8002d18:	f000 fb9e 	bl	8003458 <otm8009a_write_reg>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	4413      	add	r3, r2
 8002d22:	617b      	str	r3, [r7, #20]
  
  /* Gamma correction 2.2+ table (HSDT possible) */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f103 0010 	add.w	r0, r3, #16
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	4a42      	ldr	r2, [pc, #264]	; (8002e38 <OTM8009A_Init+0xa04>)
 8002d2e:	2100      	movs	r1, #0
 8002d30:	f000 fb92 	bl	8003458 <otm8009a_write_reg>
 8002d34:	4602      	mov	r2, r0
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	4413      	add	r3, r2
 8002d3a:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f103 0010 	add.w	r0, r3, #16
 8002d42:	2310      	movs	r3, #16
 8002d44:	4a3e      	ldr	r2, [pc, #248]	; (8002e40 <OTM8009A_Init+0xa0c>)
 8002d46:	21e1      	movs	r1, #225	; 0xe1
 8002d48:	f000 fb86 	bl	8003458 <otm8009a_write_reg>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	4413      	add	r3, r2
 8002d52:	617b      	str	r3, [r7, #20]
  
  /* Gamma correction 2.2- table (HSDT possible) */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f103 0010 	add.w	r0, r3, #16
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	4a36      	ldr	r2, [pc, #216]	; (8002e38 <OTM8009A_Init+0xa04>)
 8002d5e:	2100      	movs	r1, #0
 8002d60:	f000 fb7a 	bl	8003458 <otm8009a_write_reg>
 8002d64:	4602      	mov	r2, r0
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	4413      	add	r3, r2
 8002d6a:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f103 0010 	add.w	r0, r3, #16
 8002d72:	2310      	movs	r3, #16
 8002d74:	4a33      	ldr	r2, [pc, #204]	; (8002e44 <OTM8009A_Init+0xa10>)
 8002d76:	21e2      	movs	r1, #226	; 0xe2
 8002d78:	f000 fb6e 	bl	8003458 <otm8009a_write_reg>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	4413      	add	r3, r2
 8002d82:	617b      	str	r3, [r7, #20]
  
  /* Send Sleep Out command to display : no parameter */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f103 0010 	add.w	r0, r3, #16
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	4a2e      	ldr	r2, [pc, #184]	; (8002e48 <OTM8009A_Init+0xa14>)
 8002d8e:	2111      	movs	r1, #17
 8002d90:	f000 fb62 	bl	8003458 <otm8009a_write_reg>
 8002d94:	4602      	mov	r2, r0
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	4413      	add	r3, r2
 8002d9a:	617b      	str	r3, [r7, #20]
  
  /* Wait for sleep out exit */
  (void)OTM8009A_IO_Delay(pObj, 120);
 8002d9c:	2178      	movs	r1, #120	; 0x78
 8002d9e:	68f8      	ldr	r0, [r7, #12]
 8002da0:	f000 fb29 	bl	80033f6 <OTM8009A_IO_Delay>
  
  switch(ColorCoding)
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d012      	beq.n	8002dd0 <OTM8009A_Init+0x99c>
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d153      	bne.n	8002e58 <OTM8009A_Init+0xa24>
  {
  case OTM8009A_FORMAT_RBG565 :
    /* Set Pixel color format to RGB565 */
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[37], 0);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f103 0010 	add.w	r0, r3, #16
 8002db6:	2300      	movs	r3, #0
 8002db8:	4a24      	ldr	r2, [pc, #144]	; (8002e4c <OTM8009A_Init+0xa18>)
 8002dba:	213a      	movs	r1, #58	; 0x3a
 8002dbc:	f000 fb4c 	bl	8003458 <otm8009a_write_reg>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	617b      	str	r3, [r7, #20]
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RBG565;
 8002dc8:	4b21      	ldr	r3, [pc, #132]	; (8002e50 <OTM8009A_Init+0xa1c>)
 8002dca:	2202      	movs	r2, #2
 8002dcc:	605a      	str	r2, [r3, #4]
    break;
 8002dce:	e044      	b.n	8002e5a <OTM8009A_Init+0xa26>
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f103 0010 	add.w	r0, r3, #16
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	4a1e      	ldr	r2, [pc, #120]	; (8002e54 <OTM8009A_Init+0xa20>)
 8002dda:	213a      	movs	r1, #58	; 0x3a
 8002ddc:	f000 fb3c 	bl	8003458 <otm8009a_write_reg>
 8002de0:	4602      	mov	r2, r0
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	4413      	add	r3, r2
 8002de6:	617b      	str	r3, [r7, #20]
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 8002de8:	4b19      	ldr	r3, [pc, #100]	; (8002e50 <OTM8009A_Init+0xa1c>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	605a      	str	r2, [r3, #4]
    break;
 8002dee:	e034      	b.n	8002e5a <OTM8009A_Init+0xa26>
 8002df0:	080158f2 	.word	0x080158f2
 8002df4:	080159d8 	.word	0x080159d8
 8002df8:	08015911 	.word	0x08015911
 8002dfc:	080159e4 	.word	0x080159e4
 8002e00:	0801590d 	.word	0x0801590d
 8002e04:	080159f4 	.word	0x080159f4
 8002e08:	0801590e 	.word	0x0801590e
 8002e0c:	08015a04 	.word	0x08015a04
 8002e10:	0801590f 	.word	0x0801590f
 8002e14:	08015a10 	.word	0x08015a10
 8002e18:	08015910 	.word	0x08015910
 8002e1c:	08015a20 	.word	0x08015a20
 8002e20:	080158fd 	.word	0x080158fd
 8002e24:	0801591e 	.word	0x0801591e
 8002e28:	0801591f 	.word	0x0801591f
 8002e2c:	08015920 	.word	0x08015920
 8002e30:	08015921 	.word	0x08015921
 8002e34:	08015922 	.word	0x08015922
 8002e38:	080158f1 	.word	0x080158f1
 8002e3c:	08015a30 	.word	0x08015a30
 8002e40:	08015a34 	.word	0x08015a34
 8002e44:	08015a44 	.word	0x08015a44
 8002e48:	08015914 	.word	0x08015914
 8002e4c:	08015915 	.word	0x08015915
 8002e50:	2400062c 	.word	0x2400062c
 8002e54:	08015916 	.word	0x08015916
  default :
    break;
 8002e58:	bf00      	nop
  }
  
  /* Send command to configure display in landscape orientation mode. By default
  the orientation mode is portrait  */
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d12a      	bne.n	8002eb6 <OTM8009A_Init+0xa82>
  {
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8002e60:	2360      	movs	r3, #96	; 0x60
 8002e62:	74fb      	strb	r3, [r7, #19]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f103 0010 	add.w	r0, r3, #16
 8002e6a:	f107 0213 	add.w	r2, r7, #19
 8002e6e:	2300      	movs	r3, #0
 8002e70:	2136      	movs	r1, #54	; 0x36
 8002e72:	f000 faf1 	bl	8003458 <otm8009a_write_reg>
 8002e76:	4602      	mov	r2, r0
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	617b      	str	r3, [r7, #20]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f103 0010 	add.w	r0, r3, #16
 8002e84:	2304      	movs	r3, #4
 8002e86:	4a44      	ldr	r2, [pc, #272]	; (8002f98 <OTM8009A_Init+0xb64>)
 8002e88:	212a      	movs	r1, #42	; 0x2a
 8002e8a:	f000 fae5 	bl	8003458 <otm8009a_write_reg>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	4413      	add	r3, r2
 8002e94:	617b      	str	r3, [r7, #20]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f103 0010 	add.w	r0, r3, #16
 8002e9c:	2304      	movs	r3, #4
 8002e9e:	4a3f      	ldr	r2, [pc, #252]	; (8002f9c <OTM8009A_Init+0xb68>)
 8002ea0:	212b      	movs	r1, #43	; 0x2b
 8002ea2:	f000 fad9 	bl	8003458 <otm8009a_write_reg>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	4413      	add	r3, r2
 8002eac:	617b      	str	r3, [r7, #20]
    
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8002eae:	4b3c      	ldr	r3, [pc, #240]	; (8002fa0 <OTM8009A_Init+0xb6c>)
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	601a      	str	r2, [r3, #0]
 8002eb4:	e002      	b.n	8002ebc <OTM8009A_Init+0xa88>
  }
  else
  {
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 8002eb6:	4b3a      	ldr	r3, [pc, #232]	; (8002fa0 <OTM8009A_Init+0xb6c>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	601a      	str	r2, [r3, #0]
  }
  
  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness], 0xFF is highest Brightness, try 0x7F : intermediate value */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f103 0010 	add.w	r0, r3, #16
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	4a37      	ldr	r2, [pc, #220]	; (8002fa4 <OTM8009A_Init+0xb70>)
 8002ec6:	2151      	movs	r1, #81	; 0x51
 8002ec8:	f000 fac6 	bl	8003458 <otm8009a_write_reg>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	617b      	str	r3, [r7, #20]
  /* Store default brightness */
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8002ed4:	4b34      	ldr	r3, [pc, #208]	; (8002fa8 <OTM8009A_Init+0xb74>)
 8002ed6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002eda:	4a34      	ldr	r2, [pc, #208]	; (8002fac <OTM8009A_Init+0xb78>)
 8002edc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee0:	09db      	lsrs	r3, r3, #7
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	2364      	movs	r3, #100	; 0x64
 8002ee8:	fb03 f302 	mul.w	r3, r3, r2
 8002eec:	4a2c      	ldr	r2, [pc, #176]	; (8002fa0 <OTM8009A_Init+0xb6c>)
 8002eee:	6093      	str	r3, [r2, #8]
  
  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f103 0010 	add.w	r0, r3, #16
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	4a2d      	ldr	r2, [pc, #180]	; (8002fb0 <OTM8009A_Init+0xb7c>)
 8002efa:	2153      	movs	r1, #83	; 0x53
 8002efc:	f000 faac 	bl	8003458 <otm8009a_write_reg>
 8002f00:	4602      	mov	r2, r0
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	4413      	add	r3, r2
 8002f06:	617b      	str	r3, [r7, #20]
  
  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f103 0010 	add.w	r0, r3, #16
 8002f0e:	2300      	movs	r3, #0
 8002f10:	4a28      	ldr	r2, [pc, #160]	; (8002fb4 <OTM8009A_Init+0xb80>)
 8002f12:	2155      	movs	r1, #85	; 0x55
 8002f14:	f000 faa0 	bl	8003458 <otm8009a_write_reg>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	617b      	str	r3, [r7, #20]
  
  /* defaut is 0 (lowest Brightness], 0xFF is highest Brightness */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f103 0010 	add.w	r0, r3, #16
 8002f26:	2300      	movs	r3, #0
 8002f28:	4a23      	ldr	r2, [pc, #140]	; (8002fb8 <OTM8009A_Init+0xb84>)
 8002f2a:	215e      	movs	r1, #94	; 0x5e
 8002f2c:	f000 fa94 	bl	8003458 <otm8009a_write_reg>
 8002f30:	4602      	mov	r2, r0
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	4413      	add	r3, r2
 8002f36:	617b      	str	r3, [r7, #20]
  
  /** CABC : Content Adaptive Backlight Control section end << */
  
  /* Send Command Display On */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f103 0010 	add.w	r0, r3, #16
 8002f3e:	2300      	movs	r3, #0
 8002f40:	4a1e      	ldr	r2, [pc, #120]	; (8002fbc <OTM8009A_Init+0xb88>)
 8002f42:	2129      	movs	r1, #41	; 0x29
 8002f44:	f000 fa88 	bl	8003458 <otm8009a_write_reg>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	617b      	str	r3, [r7, #20]
  
  /* NOP command */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f103 0010 	add.w	r0, r3, #16
 8002f56:	2300      	movs	r3, #0
 8002f58:	4a19      	ldr	r2, [pc, #100]	; (8002fc0 <OTM8009A_Init+0xb8c>)
 8002f5a:	2100      	movs	r1, #0
 8002f5c:	f000 fa7c 	bl	8003458 <otm8009a_write_reg>
 8002f60:	4602      	mov	r2, r0
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	4413      	add	r3, r2
 8002f66:	617b      	str	r3, [r7, #20]
  
  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f103 0010 	add.w	r0, r3, #16
 8002f6e:	2300      	movs	r3, #0
 8002f70:	4a14      	ldr	r2, [pc, #80]	; (8002fc4 <OTM8009A_Init+0xb90>)
 8002f72:	212c      	movs	r1, #44	; 0x2c
 8002f74:	f000 fa70 	bl	8003458 <otm8009a_write_reg>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	617b      	str	r3, [r7, #20]
  
  if(ret != OTM8009A_OK)
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d002      	beq.n	8002f8c <OTM8009A_Init+0xb58>
  {
    ret = OTM8009A_ERROR;
 8002f86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f8a:	617b      	str	r3, [r7, #20]
  }
  
  return ret;
 8002f8c:	697b      	ldr	r3, [r7, #20]
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3718      	adds	r7, #24
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	080158e8 	.word	0x080158e8
 8002f9c:	080158ec 	.word	0x080158ec
 8002fa0:	2400062c 	.word	0x2400062c
 8002fa4:	08015917 	.word	0x08015917
 8002fa8:	080158f0 	.word	0x080158f0
 8002fac:	80808081 	.word	0x80808081
 8002fb0:	08015918 	.word	0x08015918
 8002fb4:	08015919 	.word	0x08015919
 8002fb8:	0801591a 	.word	0x0801591a
 8002fbc:	0801591b 	.word	0x0801591b
 8002fc0:	080158f1 	.word	0x080158f1
 8002fc4:	0801591c 	.word	0x0801591c

08002fc8 <OTM8009A_DeInit>:
  * @brief  De-Initializes the component
  * @param  pObj Component object
  * @retval Component status
  */
int32_t OTM8009A_DeInit(OTM8009A_Object_t *pObj)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  return OTM8009A_ERROR;
 8002fd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <OTM8009A_ReadID>:
  * @param  pObj Component object
  * @param  Id   Component ID
  * @retval Component status
  */
int32_t OTM8009A_ReadID(OTM8009A_Object_t *pObj, uint32_t *Id)
{ 
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  if(otm8009a_read_reg(&pObj->Ctx, OTM8009A_CMD_ID1, (uint8_t *)Id, 0)!= OTM8009A_OK)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f103 0010 	add.w	r0, r3, #16
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	683a      	ldr	r2, [r7, #0]
 8002ff4:	21da      	movs	r1, #218	; 0xda
 8002ff6:	f000 fa18 	bl	800342a <otm8009a_read_reg>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d003      	beq.n	8003008 <OTM8009A_ReadID+0x28>
  {
    ret = OTM8009A_ERROR;
 8003000:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003004:	60fb      	str	r3, [r7, #12]
 8003006:	e001      	b.n	800300c <OTM8009A_ReadID+0x2c>
  }
  else
  {
    ret = OTM8009A_OK;
 8003008:	2300      	movs	r3, #0
 800300a:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;  
 800300c:	68fb      	ldr	r3, [r7, #12]
}  
 800300e:	4618      	mov	r0, r3
 8003010:	3710      	adds	r7, #16
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
	...

08003018 <OTM8009A_SetBrightness>:
  * @param  pObj Component object
  * @param  Brightness   display brightness to be set
  * @retval Component status
  */
int32_t OTM8009A_SetBrightness(OTM8009A_Object_t *pObj, uint32_t Brightness)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 8003022:	683a      	ldr	r2, [r7, #0]
 8003024:	4613      	mov	r3, r2
 8003026:	021b      	lsls	r3, r3, #8
 8003028:	1a9b      	subs	r3, r3, r2
 800302a:	4a10      	ldr	r2, [pc, #64]	; (800306c <OTM8009A_SetBrightness+0x54>)
 800302c:	fba2 2303 	umull	r2, r3, r2, r3
 8003030:	095b      	lsrs	r3, r3, #5
 8003032:	b2db      	uxtb	r3, r3
 8003034:	72fb      	strb	r3, [r7, #11]
  
  /* Send Display on DCS command to display */
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f103 0010 	add.w	r0, r3, #16
 800303c:	f107 020b 	add.w	r2, r7, #11
 8003040:	2300      	movs	r3, #0
 8003042:	2151      	movs	r1, #81	; 0x51
 8003044:	f000 fa08 	bl	8003458 <otm8009a_write_reg>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d003      	beq.n	8003056 <OTM8009A_SetBrightness+0x3e>
  {
    ret = OTM8009A_ERROR;
 800304e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003052:	60fb      	str	r3, [r7, #12]
 8003054:	e004      	b.n	8003060 <OTM8009A_SetBrightness+0x48>
  }
  else
  {
    OTM8009ACtx.Brightness = Brightness;
 8003056:	4a06      	ldr	r2, [pc, #24]	; (8003070 <OTM8009A_SetBrightness+0x58>)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	6093      	str	r3, [r2, #8]
    ret = OTM8009A_OK;
 800305c:	2300      	movs	r3, #0
 800305e:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;  
 8003060:	68fb      	ldr	r3, [r7, #12]
}
 8003062:	4618      	mov	r0, r3
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	51eb851f 	.word	0x51eb851f
 8003070:	2400062c 	.word	0x2400062c

08003074 <OTM8009A_GetBrightness>:
  * @param  pObj Component object
  * @param  Brightness   display brightness to be returned
  * @retval Component status
  */
int32_t OTM8009A_GetBrightness(OTM8009A_Object_t *pObj, uint32_t *Brightness)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
  *Brightness = OTM8009ACtx.Brightness;
 800307e:	4b05      	ldr	r3, [pc, #20]	; (8003094 <OTM8009A_GetBrightness+0x20>)
 8003080:	689a      	ldr	r2, [r3, #8]
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	601a      	str	r2, [r3, #0]
  return OTM8009A_OK;  
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr
 8003094:	2400062c 	.word	0x2400062c

08003098 <OTM8009A_DisplayOn>:
  * @brief  Set the display On.
  * @param  pObj Component object
  * @retval Component status
  */
int32_t OTM8009A_DisplayOn(OTM8009A_Object_t *pObj)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t display = 0;
 80030a0:	2300      	movs	r3, #0
 80030a2:	72fb      	strb	r3, [r7, #11]
  
  /* Send Display on DCS command to display */
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &display, 0) != OTM8009A_OK)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f103 0010 	add.w	r0, r3, #16
 80030aa:	f107 020b 	add.w	r2, r7, #11
 80030ae:	2300      	movs	r3, #0
 80030b0:	2129      	movs	r1, #41	; 0x29
 80030b2:	f000 f9d1 	bl	8003458 <otm8009a_write_reg>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d003      	beq.n	80030c4 <OTM8009A_DisplayOn+0x2c>
  {
    ret = OTM8009A_ERROR;
 80030bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80030c0:	60fb      	str	r3, [r7, #12]
 80030c2:	e001      	b.n	80030c8 <OTM8009A_DisplayOn+0x30>
  }
  else
  {
    ret = OTM8009A_OK;
 80030c4:	2300      	movs	r3, #0
 80030c6:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 80030c8:	68fb      	ldr	r3, [r7, #12]
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3710      	adds	r7, #16
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <OTM8009A_DisplayOff>:
  * @brief  Set the display Off.
  * @param  pObj Component object
  * @retval Component status
  */
int32_t OTM8009A_DisplayOff(OTM8009A_Object_t *pObj)
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b084      	sub	sp, #16
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t display = 0;
 80030da:	2300      	movs	r3, #0
 80030dc:	72fb      	strb	r3, [r7, #11]
  
  /* Send Display on DCS command to display */
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPOFF, &display, 0) != OTM8009A_OK)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f103 0010 	add.w	r0, r3, #16
 80030e4:	f107 020b 	add.w	r2, r7, #11
 80030e8:	2300      	movs	r3, #0
 80030ea:	2128      	movs	r1, #40	; 0x28
 80030ec:	f000 f9b4 	bl	8003458 <otm8009a_write_reg>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d003      	beq.n	80030fe <OTM8009A_DisplayOff+0x2c>
  {
    ret = OTM8009A_ERROR;
 80030f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80030fa:	60fb      	str	r3, [r7, #12]
 80030fc:	e001      	b.n	8003102 <OTM8009A_DisplayOff+0x30>
  }
  else
  {
    ret = OTM8009A_OK;
 80030fe:	2300      	movs	r3, #0
 8003100:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8003102:	68fb      	ldr	r3, [r7, #12]
}
 8003104:	4618      	mov	r0, r3
 8003106:	3710      	adds	r7, #16
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <OTM8009A_SetOrientation>:
* @param  pObj Component object
* @param  Orientation   display Orientation to be set
* @retval Component status
*/
int32_t OTM8009A_SetOrientation(OTM8009A_Object_t *pObj, uint32_t Orientation)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8003116:	2360      	movs	r3, #96	; 0x60
 8003118:	72fb      	strb	r3, [r7, #11]
  uint8_t tmp1 = OTM8009A_MADCTR_MODE_PORTRAIT;
 800311a:	2300      	movs	r3, #0
 800311c:	72bb      	strb	r3, [r7, #10]
  
  if((Orientation != OTM8009A_ORIENTATION_LANDSCAPE) && (Orientation != OTM8009A_ORIENTATION_PORTRAIT))
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d006      	beq.n	8003132 <OTM8009A_SetOrientation+0x26>
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d003      	beq.n	8003132 <OTM8009A_SetOrientation+0x26>
  {
    ret = OTM8009A_ERROR;
 800312a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800312e:	60fb      	str	r3, [r7, #12]
 8003130:	e04d      	b.n	80031ce <OTM8009A_SetOrientation+0xc2>
  }/* Send command to configure display orientation mode  */
  else if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d125      	bne.n	8003184 <OTM8009A_SetOrientation+0x78>
  {
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f103 0010 	add.w	r0, r3, #16
 800313e:	f107 020b 	add.w	r2, r7, #11
 8003142:	2300      	movs	r3, #0
 8003144:	2136      	movs	r1, #54	; 0x36
 8003146:	f000 f987 	bl	8003458 <otm8009a_write_reg>
 800314a:	60f8      	str	r0, [r7, #12]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f103 0010 	add.w	r0, r3, #16
 8003152:	2304      	movs	r3, #4
 8003154:	4a23      	ldr	r2, [pc, #140]	; (80031e4 <OTM8009A_SetOrientation+0xd8>)
 8003156:	212a      	movs	r1, #42	; 0x2a
 8003158:	f000 f97e 	bl	8003458 <otm8009a_write_reg>
 800315c:	4602      	mov	r2, r0
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	4413      	add	r3, r2
 8003162:	60fb      	str	r3, [r7, #12]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f103 0010 	add.w	r0, r3, #16
 800316a:	2304      	movs	r3, #4
 800316c:	4a1e      	ldr	r2, [pc, #120]	; (80031e8 <OTM8009A_SetOrientation+0xdc>)
 800316e:	212b      	movs	r1, #43	; 0x2b
 8003170:	f000 f972 	bl	8003458 <otm8009a_write_reg>
 8003174:	4602      	mov	r2, r0
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	4413      	add	r3, r2
 800317a:	60fb      	str	r3, [r7, #12]
    
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 800317c:	4b1b      	ldr	r3, [pc, #108]	; (80031ec <OTM8009A_SetOrientation+0xe0>)
 800317e:	2201      	movs	r2, #1
 8003180:	601a      	str	r2, [r3, #0]
 8003182:	e024      	b.n	80031ce <OTM8009A_SetOrientation+0xc2>
  }
  else
  {
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp1, 0);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f103 0010 	add.w	r0, r3, #16
 800318a:	f107 020a 	add.w	r2, r7, #10
 800318e:	2300      	movs	r3, #0
 8003190:	2136      	movs	r1, #54	; 0x36
 8003192:	f000 f961 	bl	8003458 <otm8009a_write_reg>
 8003196:	60f8      	str	r0, [r7, #12]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f103 0010 	add.w	r0, r3, #16
 800319e:	2304      	movs	r3, #4
 80031a0:	4a10      	ldr	r2, [pc, #64]	; (80031e4 <OTM8009A_SetOrientation+0xd8>)
 80031a2:	212a      	movs	r1, #42	; 0x2a
 80031a4:	f000 f958 	bl	8003458 <otm8009a_write_reg>
 80031a8:	4602      	mov	r2, r0
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	4413      	add	r3, r2
 80031ae:	60fb      	str	r3, [r7, #12]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f103 0010 	add.w	r0, r3, #16
 80031b6:	2304      	movs	r3, #4
 80031b8:	4a0b      	ldr	r2, [pc, #44]	; (80031e8 <OTM8009A_SetOrientation+0xdc>)
 80031ba:	212b      	movs	r1, #43	; 0x2b
 80031bc:	f000 f94c 	bl	8003458 <otm8009a_write_reg>
 80031c0:	4602      	mov	r2, r0
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	4413      	add	r3, r2
 80031c6:	60fb      	str	r3, [r7, #12]
    
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 80031c8:	4b08      	ldr	r3, [pc, #32]	; (80031ec <OTM8009A_SetOrientation+0xe0>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	601a      	str	r2, [r3, #0]
  }
  
  if(ret != OTM8009A_OK)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d002      	beq.n	80031da <OTM8009A_SetOrientation+0xce>
  {
    ret = OTM8009A_ERROR;
 80031d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031d8:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 80031da:	68fb      	ldr	r3, [r7, #12]
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3710      	adds	r7, #16
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	080158e8 	.word	0x080158e8
 80031e8:	080158ec 	.word	0x080158ec
 80031ec:	2400062c 	.word	0x2400062c

080031f0 <OTM8009A_GetOrientation>:
  * @param  pObj Component object
  * @param  Orientation   display Orientation to be returned
  * @retval Component status
  */
int32_t OTM8009A_GetOrientation(OTM8009A_Object_t *pObj, uint32_t *Orientation)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  *Orientation = OTM8009ACtx.Orientation;
 80031fa:	4b05      	ldr	r3, [pc, #20]	; (8003210 <OTM8009A_GetOrientation+0x20>)
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	601a      	str	r2, [r3, #0]
  
  return OTM8009A_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr
 8003210:	2400062c 	.word	0x2400062c

08003214 <OTM8009A_GetXSize>:
  * @param  pObj Component object
  * @param  Xsize   display Width to be set
  * @retval Component status
  */
int32_t OTM8009A_GetXSize(OTM8009A_Object_t *pObj, uint32_t *Xsize)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  switch(OTM8009ACtx.Orientation)
 800321e:	4b0e      	ldr	r3, [pc, #56]	; (8003258 <OTM8009A_GetXSize+0x44>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d002      	beq.n	800322c <OTM8009A_GetXSize+0x18>
 8003226:	2b01      	cmp	r3, #1
 8003228:	d005      	beq.n	8003236 <OTM8009A_GetXSize+0x22>
 800322a:	e009      	b.n	8003240 <OTM8009A_GetXSize+0x2c>
  {
  case OTM8009A_ORIENTATION_PORTRAIT:
    *Xsize = OTM8009A_480X800_WIDTH;
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003232:	601a      	str	r2, [r3, #0]
    break;
 8003234:	e009      	b.n	800324a <OTM8009A_GetXSize+0x36>
  case OTM8009A_ORIENTATION_LANDSCAPE:
    *Xsize = OTM8009A_800X480_WIDTH;
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	f44f 7248 	mov.w	r2, #800	; 0x320
 800323c:	601a      	str	r2, [r3, #0]
    break;
 800323e:	e004      	b.n	800324a <OTM8009A_GetXSize+0x36>
  default:
    *Xsize = OTM8009A_800X480_WIDTH;
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003246:	601a      	str	r2, [r3, #0]
    break;
 8003248:	bf00      	nop
  }
  
  return OTM8009A_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr
 8003258:	2400062c 	.word	0x2400062c

0800325c <OTM8009A_GetYSize>:
  * @param  pObj Component object
  * @param  Ysize   display Height to be set
  * @retval Component status
  */
int32_t OTM8009A_GetYSize(OTM8009A_Object_t *pObj, uint32_t *Ysize)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  switch(OTM8009ACtx.Orientation)
 8003266:	4b0e      	ldr	r3, [pc, #56]	; (80032a0 <OTM8009A_GetYSize+0x44>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d002      	beq.n	8003274 <OTM8009A_GetYSize+0x18>
 800326e:	2b01      	cmp	r3, #1
 8003270:	d005      	beq.n	800327e <OTM8009A_GetYSize+0x22>
 8003272:	e009      	b.n	8003288 <OTM8009A_GetYSize+0x2c>
  {
  case OTM8009A_ORIENTATION_PORTRAIT:
    *Ysize = OTM8009A_480X800_HEIGHT;
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	f44f 7248 	mov.w	r2, #800	; 0x320
 800327a:	601a      	str	r2, [r3, #0]
    break;
 800327c:	e009      	b.n	8003292 <OTM8009A_GetYSize+0x36>
  case OTM8009A_ORIENTATION_LANDSCAPE:
    *Ysize = OTM8009A_800X480_HEIGHT;
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003284:	601a      	str	r2, [r3, #0]
    break;
 8003286:	e004      	b.n	8003292 <OTM8009A_GetYSize+0x36>
  default:
    *Ysize = OTM8009A_800X480_HEIGHT;
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800328e:	601a      	str	r2, [r3, #0]
    break;
 8003290:	bf00      	nop
  }
  
  return OTM8009A_OK;
 8003292:	2300      	movs	r3, #0
}
 8003294:	4618      	mov	r0, r3
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr
 80032a0:	2400062c 	.word	0x2400062c

080032a4 <OTM8009A_SetCursor>:
  * @param  Xpos X position
  * @param  Ypos Y position
  * @retval Component status
  */
int32_t OTM8009A_SetCursor(OTM8009A_Object_t *pObj, uint32_t Xpos, uint32_t Ypos)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
 80032b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3714      	adds	r7, #20
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <OTM8009A_DrawBitmap>:
  * @param  Ypos Y position
  * @param  pBmp pointer to bmp data
  * @retval Component status
  */
int32_t OTM8009A_DrawBitmap(OTM8009A_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b085      	sub	sp, #20
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	607a      	str	r2, [r7, #4]
 80032cc:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
 80032ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3714      	adds	r7, #20
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr

080032de <OTM8009A_FillRGBRect>:

int32_t OTM8009A_FillRGBRect(OTM8009A_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 80032de:	b480      	push	{r7}
 80032e0:	b085      	sub	sp, #20
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	60f8      	str	r0, [r7, #12]
 80032e6:	60b9      	str	r1, [r7, #8]
 80032e8:	607a      	str	r2, [r7, #4]
 80032ea:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
 80032ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3714      	adds	r7, #20
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <OTM8009A_DrawHLine>:
  * @param  Length Line length
  * @param  Color Draw color
  * @retval Component status
  */
int32_t OTM8009A_DrawHLine(OTM8009A_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]
 8003308:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
 800330a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800330e:	4618      	mov	r0, r3
 8003310:	3714      	adds	r7, #20
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr

0800331a <OTM8009A_DrawVLine>:
  * @param  Length Line length
  * @param  Color Draw color
  * @retval Component status
  */
int32_t OTM8009A_DrawVLine(OTM8009A_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 800331a:	b480      	push	{r7}
 800331c:	b085      	sub	sp, #20
 800331e:	af00      	add	r7, sp, #0
 8003320:	60f8      	str	r0, [r7, #12]
 8003322:	60b9      	str	r1, [r7, #8]
 8003324:	607a      	str	r2, [r7, #4]
 8003326:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
 8003328:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800332c:	4618      	mov	r0, r3
 800332e:	3714      	adds	r7, #20
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <OTM8009A_FillRect>:
  * @param  Height Rectangle height
  * @param  Color Draw color
  * @retval Component status
  */
int32_t OTM8009A_FillRect(OTM8009A_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	607a      	str	r2, [r7, #4]
 8003344:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
 8003346:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800334a:	4618      	mov	r0, r3
 800334c:	3714      	adds	r7, #20
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr

08003356 <OTM8009A_GetPixel>:
  * @param  Ypos Y position
  * @param  Color Color to be returned
  * @retval Component status
  */
int32_t OTM8009A_GetPixel(OTM8009A_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 8003356:	b480      	push	{r7}
 8003358:	b085      	sub	sp, #20
 800335a:	af00      	add	r7, sp, #0
 800335c:	60f8      	str	r0, [r7, #12]
 800335e:	60b9      	str	r1, [r7, #8]
 8003360:	607a      	str	r2, [r7, #4]
 8003362:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
 8003364:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003368:	4618      	mov	r0, r3
 800336a:	3714      	adds	r7, #20
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <OTM8009A_SetPixel>:
  * @param  Ypos Y position
  * @param  Color Color to be returned
  * @retval Component status
  */
int32_t OTM8009A_SetPixel(OTM8009A_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]
 8003380:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
 8003382:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003386:	4618      	mov	r0, r3
 8003388:	3714      	adds	r7, #20
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr

08003392 <OTM8009A_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8003392:	b590      	push	{r4, r7, lr}
 8003394:	b087      	sub	sp, #28
 8003396:	af00      	add	r7, sp, #0
 8003398:	60f8      	str	r0, [r7, #12]
 800339a:	607a      	str	r2, [r7, #4]
 800339c:	461a      	mov	r2, r3
 800339e:	460b      	mov	r3, r1
 80033a0:	817b      	strh	r3, [r7, #10]
 80033a2:	4613      	mov	r3, r2
 80033a4:	813b      	strh	r3, [r7, #8]
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	689c      	ldr	r4, [r3, #8]
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	8818      	ldrh	r0, [r3, #0]
 80033b2:	893b      	ldrh	r3, [r7, #8]
 80033b4:	8979      	ldrh	r1, [r7, #10]
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	47a0      	blx	r4
 80033ba:	4603      	mov	r3, r0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	371c      	adds	r7, #28
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd90      	pop	{r4, r7, pc}

080033c4 <OTM8009A_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80033c4:	b590      	push	{r4, r7, lr}
 80033c6:	b087      	sub	sp, #28
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	607a      	str	r2, [r7, #4]
 80033ce:	461a      	mov	r2, r3
 80033d0:	460b      	mov	r3, r1
 80033d2:	817b      	strh	r3, [r7, #10]
 80033d4:	4613      	mov	r3, r2
 80033d6:	813b      	strh	r3, [r7, #8]
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	685c      	ldr	r4, [r3, #4]
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	8818      	ldrh	r0, [r3, #0]
 80033e4:	893b      	ldrh	r3, [r7, #8]
 80033e6:	8979      	ldrh	r1, [r7, #10]
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	47a0      	blx	r4
 80033ec:	4603      	mov	r3, r0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	371c      	adds	r7, #28
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd90      	pop	{r4, r7, pc}

080033f6 <OTM8009A_IO_Delay>:
/**
  * @brief  OTM8009A delay
  * @param  Delay  Delay in ms
  */
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
{
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b084      	sub	sp, #16
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
 80033fe:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	4798      	blx	r3
 8003406:	4603      	mov	r3, r0
 8003408:	60fb      	str	r3, [r7, #12]
  while((pObj->IO.GetTick() - tickstart) < Delay)
 800340a:	bf00      	nop
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	4798      	blx	r3
 8003412:	4603      	mov	r3, r0
 8003414:	461a      	mov	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	683a      	ldr	r2, [r7, #0]
 800341c:	429a      	cmp	r2, r3
 800341e:	d8f5      	bhi.n	800340c <OTM8009A_IO_Delay+0x16>
  {
  }
  return OTM8009A_OK;
 8003420:	2300      	movs	r3, #0
}
 8003422:	4618      	mov	r0, r3
 8003424:	3710      	adds	r7, #16
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <otm8009a_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : Data Read
*******************************************************************************/
int32_t otm8009a_read_reg(otm8009a_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 800342a:	b590      	push	{r4, r7, lr}
 800342c:	b085      	sub	sp, #20
 800342e:	af00      	add	r7, sp, #0
 8003430:	60f8      	str	r0, [r7, #12]
 8003432:	607a      	str	r2, [r7, #4]
 8003434:	461a      	mov	r2, r3
 8003436:	460b      	mov	r3, r1
 8003438:	817b      	strh	r3, [r7, #10]
 800343a:	4613      	mov	r3, r2
 800343c:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	685c      	ldr	r4, [r3, #4]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6898      	ldr	r0, [r3, #8]
 8003446:	893b      	ldrh	r3, [r7, #8]
 8003448:	8979      	ldrh	r1, [r7, #10]
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	47a0      	blx	r4
 800344e:	4603      	mov	r3, r0
}
 8003450:	4618      	mov	r0, r3
 8003452:	3714      	adds	r7, #20
 8003454:	46bd      	mov	sp, r7
 8003456:	bd90      	pop	{r4, r7, pc}

08003458 <otm8009a_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t otm8009a_write_reg(otm8009a_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 8003458:	b590      	push	{r4, r7, lr}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	607a      	str	r2, [r7, #4]
 8003462:	461a      	mov	r2, r3
 8003464:	460b      	mov	r3, r1
 8003466:	817b      	strh	r3, [r7, #10]
 8003468:	4613      	mov	r3, r2
 800346a:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681c      	ldr	r4, [r3, #0]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6898      	ldr	r0, [r3, #8]
 8003474:	893b      	ldrh	r3, [r7, #8]
 8003476:	8979      	ldrh	r1, [r7, #10]
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	47a0      	blx	r4
 800347c:	4603      	mov	r3, r0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3714      	adds	r7, #20
 8003482:	46bd      	mov	sp, r7
 8003484:	bd90      	pop	{r4, r7, pc}
	...

08003488 <WM8994_Init>:
  * @param pObj pointer to component object
  * @param pInit pointer de component init structure
  * @retval 0 if correct communication, else wrong communication
  */
int32_t WM8994_Init(WM8994_Object_t *pObj, WM8994_Init_t *pInit)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  int32_t ret;
  static uint8_t ColdStartup = 1;
  uint16_t tmp;
  
  /* wm8994 Errata Work-Arounds */
  tmp = 0x0003;
 8003492:	2303      	movs	r3, #3
 8003494:	817b      	strh	r3, [r7, #10]
  ret = wm8994_write_reg(&pObj->Ctx, 0x102, &tmp, 2);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f103 0018 	add.w	r0, r3, #24
 800349c:	f107 020a 	add.w	r2, r7, #10
 80034a0:	2302      	movs	r3, #2
 80034a2:	f44f 7181 	mov.w	r1, #258	; 0x102
 80034a6:	f001 fdb9 	bl	800501c <wm8994_write_reg>
 80034aa:	60f8      	str	r0, [r7, #12]
  tmp = 0x0000;
 80034ac:	2300      	movs	r3, #0
 80034ae:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, 0x817, &tmp, 2);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f103 0018 	add.w	r0, r3, #24
 80034b6:	f107 020a 	add.w	r2, r7, #10
 80034ba:	2302      	movs	r3, #2
 80034bc:	f640 0117 	movw	r1, #2071	; 0x817
 80034c0:	f001 fdac 	bl	800501c <wm8994_write_reg>
 80034c4:	4602      	mov	r2, r0
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	4413      	add	r3, r2
 80034ca:	60fb      	str	r3, [r7, #12]
  ret += wm8994_write_reg(&pObj->Ctx, 0x102, &tmp, 2);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f103 0018 	add.w	r0, r3, #24
 80034d2:	f107 020a 	add.w	r2, r7, #10
 80034d6:	2302      	movs	r3, #2
 80034d8:	f44f 7181 	mov.w	r1, #258	; 0x102
 80034dc:	f001 fd9e 	bl	800501c <wm8994_write_reg>
 80034e0:	4602      	mov	r2, r0
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	4413      	add	r3, r2
 80034e6:	60fb      	str	r3, [r7, #12]
  
  /* Enable VMID soft start (fast), Start-up Bias Current Enabled: 0x006C at reg 0x39 */
  /* Bias Enable */
  tmp = 0x006C;
 80034e8:	236c      	movs	r3, #108	; 0x6c
 80034ea:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANTIPOP2, &tmp, 2);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f103 0018 	add.w	r0, r3, #24
 80034f2:	f107 020a 	add.w	r2, r7, #10
 80034f6:	2302      	movs	r3, #2
 80034f8:	2139      	movs	r1, #57	; 0x39
 80034fa:	f001 fd8f 	bl	800501c <wm8994_write_reg>
 80034fe:	4602      	mov	r2, r0
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	4413      	add	r3, r2
 8003504:	60fb      	str	r3, [r7, #12]
  
  /* Enable bias generator, Enable VMID */
  if (pInit->InputDevice != WM8994_IN_NONE)
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00f      	beq.n	800352e <WM8994_Init+0xa6>
  {
    tmp = 0x0013;
 800350e:	2313      	movs	r3, #19
 8003510:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);  
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f103 0018 	add.w	r0, r3, #24
 8003518:	f107 020a 	add.w	r2, r7, #10
 800351c:	2302      	movs	r3, #2
 800351e:	2101      	movs	r1, #1
 8003520:	f001 fd7c 	bl	800501c <wm8994_write_reg>
 8003524:	4602      	mov	r2, r0
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	4413      	add	r3, r2
 800352a:	60fb      	str	r3, [r7, #12]
 800352c:	e00e      	b.n	800354c <WM8994_Init+0xc4>
  }
  else
  { 
    tmp = 0x0003;
 800352e:	2303      	movs	r3, #3
 8003530:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f103 0018 	add.w	r0, r3, #24
 8003538:	f107 020a 	add.w	r2, r7, #10
 800353c:	2302      	movs	r3, #2
 800353e:	2101      	movs	r1, #1
 8003540:	f001 fd6c 	bl	800501c <wm8994_write_reg>
 8003544:	4602      	mov	r2, r0
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	4413      	add	r3, r2
 800354a:	60fb      	str	r3, [r7, #12]
  }
  
  /* Add Delay */
  (void)WM8994_Delay(pObj, 50);
 800354c:	2132      	movs	r1, #50	; 0x32
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f001 fcec 	bl	8004f2c <WM8994_Delay>
  
  /* Path Configurations for output */
  switch (pInit->OutputDevice)
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	2b03      	cmp	r3, #3
 800355a:	f200 8141 	bhi.w	80037e0 <WM8994_Init+0x358>
 800355e:	a201      	add	r2, pc, #4	; (adr r2, 8003564 <WM8994_Init+0xdc>)
 8003560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003564:	0800387b 	.word	0x0800387b
 8003568:	08003575 	.word	0x08003575
 800356c:	0800360f 	.word	0x0800360f
 8003570:	080036a9 	.word	0x080036a9
  {
  case WM8994_OUT_SPEAKER: 
    /* Enable DAC1 (Left), Enable DAC1 (Right),
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    tmp = 0x0C0C;
 8003574:	f640 430c 	movw	r3, #3084	; 0xc0c
 8003578:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f103 0018 	add.w	r0, r3, #24
 8003580:	f107 020a 	add.w	r2, r7, #10
 8003584:	2302      	movs	r3, #2
 8003586:	2105      	movs	r1, #5
 8003588:	f001 fd48 	bl	800501c <wm8994_write_reg>
 800358c:	4602      	mov	r2, r0
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	4413      	add	r3, r2
 8003592:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    tmp = 0x0000;
 8003594:	2300      	movs	r3, #0
 8003596:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f103 0018 	add.w	r0, r3, #24
 800359e:	f107 020a 	add.w	r2, r7, #10
 80035a2:	2302      	movs	r3, #2
 80035a4:	f240 6101 	movw	r1, #1537	; 0x601
 80035a8:	f001 fd38 	bl	800501c <wm8994_write_reg>
 80035ac:	4602      	mov	r2, r0
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	4413      	add	r3, r2
 80035b2:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f103 0018 	add.w	r0, r3, #24
 80035ba:	f107 020a 	add.w	r2, r7, #10
 80035be:	2302      	movs	r3, #2
 80035c0:	f240 6102 	movw	r1, #1538	; 0x602
 80035c4:	f001 fd2a 	bl	800501c <wm8994_write_reg>
 80035c8:	4602      	mov	r2, r0
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	4413      	add	r3, r2
 80035ce:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    tmp = 0x0002;
 80035d0:	2302      	movs	r3, #2
 80035d2:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f103 0018 	add.w	r0, r3, #24
 80035da:	f107 020a 	add.w	r2, r7, #10
 80035de:	2302      	movs	r3, #2
 80035e0:	f240 6104 	movw	r1, #1540	; 0x604
 80035e4:	f001 fd1a 	bl	800501c <wm8994_write_reg>
 80035e8:	4602      	mov	r2, r0
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	4413      	add	r3, r2
 80035ee:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f103 0018 	add.w	r0, r3, #24
 80035f6:	f107 020a 	add.w	r2, r7, #10
 80035fa:	2302      	movs	r3, #2
 80035fc:	f240 6105 	movw	r1, #1541	; 0x605
 8003600:	f001 fd0c 	bl	800501c <wm8994_write_reg>
 8003604:	4602      	mov	r2, r0
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	4413      	add	r3, r2
 800360a:	60fb      	str	r3, [r7, #12]
    break;
 800360c:	e136      	b.n	800387c <WM8994_Init+0x3f4>
    
  case WM8994_OUT_HEADPHONE:    
    /* Disable DAC1 (Left), Disable DAC1 (Right),
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    tmp = 0x0303;
 800360e:	f240 3303 	movw	r3, #771	; 0x303
 8003612:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f103 0018 	add.w	r0, r3, #24
 800361a:	f107 020a 	add.w	r2, r7, #10
 800361e:	2302      	movs	r3, #2
 8003620:	2105      	movs	r1, #5
 8003622:	f001 fcfb 	bl	800501c <wm8994_write_reg>
 8003626:	4602      	mov	r2, r0
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	4413      	add	r3, r2
 800362c:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    tmp = 0x0001;
 800362e:	2301      	movs	r3, #1
 8003630:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f103 0018 	add.w	r0, r3, #24
 8003638:	f107 020a 	add.w	r2, r7, #10
 800363c:	2302      	movs	r3, #2
 800363e:	f240 6101 	movw	r1, #1537	; 0x601
 8003642:	f001 fceb 	bl	800501c <wm8994_write_reg>
 8003646:	4602      	mov	r2, r0
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	4413      	add	r3, r2
 800364c:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f103 0018 	add.w	r0, r3, #24
 8003654:	f107 020a 	add.w	r2, r7, #10
 8003658:	2302      	movs	r3, #2
 800365a:	f240 6102 	movw	r1, #1538	; 0x602
 800365e:	f001 fcdd 	bl	800501c <wm8994_write_reg>
 8003662:	4602      	mov	r2, r0
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	4413      	add	r3, r2
 8003668:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    tmp = 0x0000;
 800366a:	2300      	movs	r3, #0
 800366c:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f103 0018 	add.w	r0, r3, #24
 8003674:	f107 020a 	add.w	r2, r7, #10
 8003678:	2302      	movs	r3, #2
 800367a:	f240 6104 	movw	r1, #1540	; 0x604
 800367e:	f001 fccd 	bl	800501c <wm8994_write_reg>
 8003682:	4602      	mov	r2, r0
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	4413      	add	r3, r2
 8003688:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f103 0018 	add.w	r0, r3, #24
 8003690:	f107 020a 	add.w	r2, r7, #10
 8003694:	2302      	movs	r3, #2
 8003696:	f240 6105 	movw	r1, #1541	; 0x605
 800369a:	f001 fcbf 	bl	800501c <wm8994_write_reg>
 800369e:	4602      	mov	r2, r0
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	4413      	add	r3, r2
 80036a4:	60fb      	str	r3, [r7, #12]
    break;
 80036a6:	e0e9      	b.n	800387c <WM8994_Init+0x3f4>
    
  case WM8994_OUT_BOTH:
    if (pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2b05      	cmp	r3, #5
 80036ae:	d14a      	bne.n	8003746 <WM8994_Init+0x2be>
    {
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      also Enable DAC2 (Left), Enable DAC2 (Right)*/
      tmp = 0x0F0F;
 80036b0:	f640 730f 	movw	r3, #3855	; 0xf0f
 80036b4:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f103 0018 	add.w	r0, r3, #24
 80036bc:	f107 020a 	add.w	r2, r7, #10
 80036c0:	2302      	movs	r3, #2
 80036c2:	2105      	movs	r1, #5
 80036c4:	f001 fcaa 	bl	800501c <wm8994_write_reg>
 80036c8:	4602      	mov	r2, r0
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	4413      	add	r3, r2
 80036ce:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
      Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
      tmp = 0x0003;
 80036d0:	2303      	movs	r3, #3
 80036d2:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f103 0018 	add.w	r0, r3, #24
 80036da:	f107 020a 	add.w	r2, r7, #10
 80036de:	2302      	movs	r3, #2
 80036e0:	f240 6101 	movw	r1, #1537	; 0x601
 80036e4:	f001 fc9a 	bl	800501c <wm8994_write_reg>
 80036e8:	4602      	mov	r2, r0
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	4413      	add	r3, r2
 80036ee:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
      Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f103 0018 	add.w	r0, r3, #24
 80036f6:	f107 020a 	add.w	r2, r7, #10
 80036fa:	2302      	movs	r3, #2
 80036fc:	f240 6102 	movw	r1, #1538	; 0x602
 8003700:	f001 fc8c 	bl	800501c <wm8994_write_reg>
 8003704:	4602      	mov	r2, r0
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	4413      	add	r3, r2
 800370a:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
      Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f103 0018 	add.w	r0, r3, #24
 8003712:	f107 020a 	add.w	r2, r7, #10
 8003716:	2302      	movs	r3, #2
 8003718:	f240 6104 	movw	r1, #1540	; 0x604
 800371c:	f001 fc7e 	bl	800501c <wm8994_write_reg>
 8003720:	4602      	mov	r2, r0
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	4413      	add	r3, r2
 8003726:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
      Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */       
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f103 0018 	add.w	r0, r3, #24
 800372e:	f107 020a 	add.w	r2, r7, #10
 8003732:	2302      	movs	r3, #2
 8003734:	f240 6105 	movw	r1, #1541	; 0x605
 8003738:	f001 fc70 	bl	800501c <wm8994_write_reg>
 800373c:	4602      	mov	r2, r0
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	4413      	add	r3, r2
 8003742:	60fb      	str	r3, [r7, #12]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
      
      /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
    }
    break;
 8003744:	e09a      	b.n	800387c <WM8994_Init+0x3f4>
      tmp = 0x0F0F;
 8003746:	f640 730f 	movw	r3, #3855	; 0xf0f
 800374a:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f103 0018 	add.w	r0, r3, #24
 8003752:	f107 020a 	add.w	r2, r7, #10
 8003756:	2302      	movs	r3, #2
 8003758:	2105      	movs	r1, #5
 800375a:	f001 fc5f 	bl	800501c <wm8994_write_reg>
 800375e:	4602      	mov	r2, r0
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	4413      	add	r3, r2
 8003764:	60fb      	str	r3, [r7, #12]
      tmp = 0x0001;
 8003766:	2301      	movs	r3, #1
 8003768:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f103 0018 	add.w	r0, r3, #24
 8003770:	f107 020a 	add.w	r2, r7, #10
 8003774:	2302      	movs	r3, #2
 8003776:	f240 6101 	movw	r1, #1537	; 0x601
 800377a:	f001 fc4f 	bl	800501c <wm8994_write_reg>
 800377e:	4602      	mov	r2, r0
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	4413      	add	r3, r2
 8003784:	60fb      	str	r3, [r7, #12]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f103 0018 	add.w	r0, r3, #24
 800378c:	f107 020a 	add.w	r2, r7, #10
 8003790:	2302      	movs	r3, #2
 8003792:	f240 6102 	movw	r1, #1538	; 0x602
 8003796:	f001 fc41 	bl	800501c <wm8994_write_reg>
 800379a:	4602      	mov	r2, r0
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	4413      	add	r3, r2
 80037a0:	60fb      	str	r3, [r7, #12]
      tmp = 0x0002;
 80037a2:	2302      	movs	r3, #2
 80037a4:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f103 0018 	add.w	r0, r3, #24
 80037ac:	f107 020a 	add.w	r2, r7, #10
 80037b0:	2302      	movs	r3, #2
 80037b2:	f240 6104 	movw	r1, #1540	; 0x604
 80037b6:	f001 fc31 	bl	800501c <wm8994_write_reg>
 80037ba:	4602      	mov	r2, r0
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	4413      	add	r3, r2
 80037c0:	60fb      	str	r3, [r7, #12]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f103 0018 	add.w	r0, r3, #24
 80037c8:	f107 020a 	add.w	r2, r7, #10
 80037cc:	2302      	movs	r3, #2
 80037ce:	f240 6105 	movw	r1, #1541	; 0x605
 80037d2:	f001 fc23 	bl	800501c <wm8994_write_reg>
 80037d6:	4602      	mov	r2, r0
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	4413      	add	r3, r2
 80037dc:	60fb      	str	r3, [r7, #12]
    break;
 80037de:	e04d      	b.n	800387c <WM8994_Init+0x3f4>
    break;
  case WM8994_OUT_AUTO :
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right),
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    tmp = 0x0303;
 80037e0:	f240 3303 	movw	r3, #771	; 0x303
 80037e4:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f103 0018 	add.w	r0, r3, #24
 80037ec:	f107 020a 	add.w	r2, r7, #10
 80037f0:	2302      	movs	r3, #2
 80037f2:	2105      	movs	r1, #5
 80037f4:	f001 fc12 	bl	800501c <wm8994_write_reg>
 80037f8:	4602      	mov	r2, r0
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	4413      	add	r3, r2
 80037fe:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    tmp = 0x0001;
 8003800:	2301      	movs	r3, #1
 8003802:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f103 0018 	add.w	r0, r3, #24
 800380a:	f107 020a 	add.w	r2, r7, #10
 800380e:	2302      	movs	r3, #2
 8003810:	f240 6101 	movw	r1, #1537	; 0x601
 8003814:	f001 fc02 	bl	800501c <wm8994_write_reg>
 8003818:	4602      	mov	r2, r0
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	4413      	add	r3, r2
 800381e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f103 0018 	add.w	r0, r3, #24
 8003826:	f107 020a 	add.w	r2, r7, #10
 800382a:	2302      	movs	r3, #2
 800382c:	f240 6102 	movw	r1, #1538	; 0x602
 8003830:	f001 fbf4 	bl	800501c <wm8994_write_reg>
 8003834:	4602      	mov	r2, r0
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	4413      	add	r3, r2
 800383a:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    tmp = 0x0000;
 800383c:	2300      	movs	r3, #0
 800383e:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f103 0018 	add.w	r0, r3, #24
 8003846:	f107 020a 	add.w	r2, r7, #10
 800384a:	2302      	movs	r3, #2
 800384c:	f240 6104 	movw	r1, #1540	; 0x604
 8003850:	f001 fbe4 	bl	800501c <wm8994_write_reg>
 8003854:	4602      	mov	r2, r0
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	4413      	add	r3, r2
 800385a:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f103 0018 	add.w	r0, r3, #24
 8003862:	f107 020a 	add.w	r2, r7, #10
 8003866:	2302      	movs	r3, #2
 8003868:	f240 6105 	movw	r1, #1541	; 0x605
 800386c:	f001 fbd6 	bl	800501c <wm8994_write_reg>
 8003870:	4602      	mov	r2, r0
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	4413      	add	r3, r2
 8003876:	60fb      	str	r3, [r7, #12]
    break;
 8003878:	e000      	b.n	800387c <WM8994_Init+0x3f4>
    break;
 800387a:	bf00      	nop
  }
  
  /* Path Configurations for input */
  switch (pInit->InputDevice)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	3b01      	subs	r3, #1
 8003882:	2b04      	cmp	r3, #4
 8003884:	f200 81e0 	bhi.w	8003c48 <WM8994_Init+0x7c0>
 8003888:	a201      	add	r2, pc, #4	; (adr r2, 8003890 <WM8994_Init+0x408>)
 800388a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800388e:	bf00      	nop
 8003890:	08003a79 	.word	0x08003a79
 8003894:	080038a5 	.word	0x080038a5
 8003898:	08003963 	.word	0x08003963
 800389c:	08003c49 	.word	0x08003c49
 80038a0:	08003b37 	.word	0x08003b37
  {
  case WM8994_IN_MIC2 :
    /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
    * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
    * Enable Left ADC, Enable Right ADC */
    tmp = 0x0C30;
 80038a4:	f44f 6343 	mov.w	r3, #3120	; 0xc30
 80038a8:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f103 0018 	add.w	r0, r3, #24
 80038b0:	f107 020a 	add.w	r2, r7, #10
 80038b4:	2302      	movs	r3, #2
 80038b6:	2104      	movs	r1, #4
 80038b8:	f001 fbb0 	bl	800501c <wm8994_write_reg>
 80038bc:	4602      	mov	r2, r0
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	4413      	add	r3, r2
 80038c2:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
    tmp = 0x00DB;
 80038c4:	23db      	movs	r3, #219	; 0xdb
 80038c6:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC2, &tmp, 2);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f103 0018 	add.w	r0, r3, #24
 80038ce:	f107 020a 	add.w	r2, r7, #10
 80038d2:	2302      	movs	r3, #2
 80038d4:	f44f 618a 	mov.w	r1, #1104	; 0x450
 80038d8:	f001 fba0 	bl	800501c <wm8994_write_reg>
 80038dc:	4602      	mov	r2, r0
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	4413      	add	r3, r2
 80038e2:	60fb      	str	r3, [r7, #12]
    
    /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
    tmp = 0x6000;
 80038e4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80038e8:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f103 0018 	add.w	r0, r3, #24
 80038f0:	f107 020a 	add.w	r2, r7, #10
 80038f4:	2302      	movs	r3, #2
 80038f6:	2102      	movs	r1, #2
 80038f8:	f001 fb90 	bl	800501c <wm8994_write_reg>
 80038fc:	4602      	mov	r2, r0
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	4413      	add	r3, r2
 8003902:	60fb      	str	r3, [r7, #12]
    
    /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
    tmp = 0x0002;
 8003904:	2302      	movs	r3, #2
 8003906:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_LMR, &tmp, 2);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f103 0018 	add.w	r0, r3, #24
 800390e:	f107 020a 	add.w	r2, r7, #10
 8003912:	2302      	movs	r3, #2
 8003914:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8003918:	f001 fb80 	bl	800501c <wm8994_write_reg>
 800391c:	4602      	mov	r2, r0
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	4413      	add	r3, r2
 8003922:	60fb      	str	r3, [r7, #12]
    
    /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_RMR, &tmp, 2);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f103 0018 	add.w	r0, r3, #24
 800392a:	f107 020a 	add.w	r2, r7, #10
 800392e:	2302      	movs	r3, #2
 8003930:	f240 6109 	movw	r1, #1545	; 0x609
 8003934:	f001 fb72 	bl	800501c <wm8994_write_reg>
 8003938:	4602      	mov	r2, r0
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	4413      	add	r3, r2
 800393e:	60fb      	str	r3, [r7, #12]
    
    /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
    tmp = 0x000E;
 8003940:	230e      	movs	r3, #14
 8003942:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_GPIO1, &tmp, 2);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f103 0018 	add.w	r0, r3, #24
 800394a:	f107 020a 	add.w	r2, r7, #10
 800394e:	2302      	movs	r3, #2
 8003950:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8003954:	f001 fb62 	bl	800501c <wm8994_write_reg>
 8003958:	4602      	mov	r2, r0
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	4413      	add	r3, r2
 800395e:	60fb      	str	r3, [r7, #12]
    break;
 8003960:	e173      	b.n	8003c4a <WM8994_Init+0x7c2>
    
  case WM8994_IN_LINE1 :
    /* IN1LN_TO_IN1L, IN1RN_TO_IN1R */
    tmp = 0x0011;
 8003962:	2311      	movs	r3, #17
 8003964:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_INPUT_MIXER_2, &tmp, 2);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f103 0018 	add.w	r0, r3, #24
 800396c:	f107 020a 	add.w	r2, r7, #10
 8003970:	2302      	movs	r3, #2
 8003972:	2128      	movs	r1, #40	; 0x28
 8003974:	f001 fb52 	bl	800501c <wm8994_write_reg>
 8003978:	4602      	mov	r2, r0
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	4413      	add	r3, r2
 800397e:	60fb      	str	r3, [r7, #12]
    
    /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
    tmp = 0x0035;
 8003980:	2335      	movs	r3, #53	; 0x35
 8003982:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_INPUT_MIXER_3, &tmp, 2);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f103 0018 	add.w	r0, r3, #24
 800398a:	f107 020a 	add.w	r2, r7, #10
 800398e:	2302      	movs	r3, #2
 8003990:	2129      	movs	r1, #41	; 0x29
 8003992:	f001 fb43 	bl	800501c <wm8994_write_reg>
 8003996:	4602      	mov	r2, r0
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	4413      	add	r3, r2
 800399c:	60fb      	str	r3, [r7, #12]
    
    /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_INPUT_MIXER_4, &tmp, 2);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f103 0018 	add.w	r0, r3, #24
 80039a4:	f107 020a 	add.w	r2, r7, #10
 80039a8:	2302      	movs	r3, #2
 80039aa:	212a      	movs	r1, #42	; 0x2a
 80039ac:	f001 fb36 	bl	800501c <wm8994_write_reg>
 80039b0:	4602      	mov	r2, r0
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	4413      	add	r3, r2
 80039b6:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
    * Enable Left ADC, Enable Right ADC */
    tmp = 0x0303;
 80039b8:	f240 3303 	movw	r3, #771	; 0x303
 80039bc:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f103 0018 	add.w	r0, r3, #24
 80039c4:	f107 020a 	add.w	r2, r7, #10
 80039c8:	2302      	movs	r3, #2
 80039ca:	2104      	movs	r1, #4
 80039cc:	f001 fb26 	bl	800501c <wm8994_write_reg>
 80039d0:	4602      	mov	r2, r0
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	4413      	add	r3, r2
 80039d6:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
    tmp = 0x00DB;
 80039d8:	23db      	movs	r3, #219	; 0xdb
 80039da:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC1, &tmp, 2);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f103 0018 	add.w	r0, r3, #24
 80039e2:	f107 020a 	add.w	r2, r7, #10
 80039e6:	2302      	movs	r3, #2
 80039e8:	f44f 6188 	mov.w	r1, #1088	; 0x440
 80039ec:	f001 fb16 	bl	800501c <wm8994_write_reg>
 80039f0:	4602      	mov	r2, r0
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	4413      	add	r3, r2
 80039f6:	60fb      	str	r3, [r7, #12]
    
    /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
    tmp = 0x6350;
 80039f8:	f246 3350 	movw	r3, #25424	; 0x6350
 80039fc:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f103 0018 	add.w	r0, r3, #24
 8003a04:	f107 020a 	add.w	r2, r7, #10
 8003a08:	2302      	movs	r3, #2
 8003a0a:	2102      	movs	r1, #2
 8003a0c:	f001 fb06 	bl	800501c <wm8994_write_reg>
 8003a10:	4602      	mov	r2, r0
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	4413      	add	r3, r2
 8003a16:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
    tmp = 0x0002;
 8003a18:	2302      	movs	r3, #2
 8003a1a:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LMR, &tmp, 2);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f103 0018 	add.w	r0, r3, #24
 8003a22:	f107 020a 	add.w	r2, r7, #10
 8003a26:	2302      	movs	r3, #2
 8003a28:	f240 6106 	movw	r1, #1542	; 0x606
 8003a2c:	f001 faf6 	bl	800501c <wm8994_write_reg>
 8003a30:	4602      	mov	r2, r0
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	4413      	add	r3, r2
 8003a36:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RMR, &tmp, 2);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f103 0018 	add.w	r0, r3, #24
 8003a3e:	f107 020a 	add.w	r2, r7, #10
 8003a42:	2302      	movs	r3, #2
 8003a44:	f240 6107 	movw	r1, #1543	; 0x607
 8003a48:	f001 fae8 	bl	800501c <wm8994_write_reg>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	4413      	add	r3, r2
 8003a52:	60fb      	str	r3, [r7, #12]
    
    /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
    tmp = 0x800D;
 8003a54:	f248 030d 	movw	r3, #32781	; 0x800d
 8003a58:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_GPIO1, &tmp, 2);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f103 0018 	add.w	r0, r3, #24
 8003a60:	f107 020a 	add.w	r2, r7, #10
 8003a64:	2302      	movs	r3, #2
 8003a66:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8003a6a:	f001 fad7 	bl	800501c <wm8994_write_reg>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	4413      	add	r3, r2
 8003a74:	60fb      	str	r3, [r7, #12]
    break;
 8003a76:	e0e8      	b.n	8003c4a <WM8994_Init+0x7c2>
    
  case WM8994_IN_MIC1 :
    /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
    * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
    * Enable Left ADC, Enable Right ADC */
    tmp = 0x030C;
 8003a78:	f44f 7343 	mov.w	r3, #780	; 0x30c
 8003a7c:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f103 0018 	add.w	r0, r3, #24
 8003a84:	f107 020a 	add.w	r2, r7, #10
 8003a88:	2302      	movs	r3, #2
 8003a8a:	2104      	movs	r1, #4
 8003a8c:	f001 fac6 	bl	800501c <wm8994_write_reg>
 8003a90:	4602      	mov	r2, r0
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	4413      	add	r3, r2
 8003a96:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
    tmp = 0x00DB;
 8003a98:	23db      	movs	r3, #219	; 0xdb
 8003a9a:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC1, &tmp, 2);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f103 0018 	add.w	r0, r3, #24
 8003aa2:	f107 020a 	add.w	r2, r7, #10
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8003aac:	f001 fab6 	bl	800501c <wm8994_write_reg>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	60fb      	str	r3, [r7, #12]
    
    /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
    tmp = 0x6350;
 8003ab8:	f246 3350 	movw	r3, #25424	; 0x6350
 8003abc:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f103 0018 	add.w	r0, r3, #24
 8003ac4:	f107 020a 	add.w	r2, r7, #10
 8003ac8:	2302      	movs	r3, #2
 8003aca:	2102      	movs	r1, #2
 8003acc:	f001 faa6 	bl	800501c <wm8994_write_reg>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
    tmp = 0x0002;
 8003ad8:	2302      	movs	r3, #2
 8003ada:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LMR, &tmp, 2);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f103 0018 	add.w	r0, r3, #24
 8003ae2:	f107 020a 	add.w	r2, r7, #10
 8003ae6:	2302      	movs	r3, #2
 8003ae8:	f240 6106 	movw	r1, #1542	; 0x606
 8003aec:	f001 fa96 	bl	800501c <wm8994_write_reg>
 8003af0:	4602      	mov	r2, r0
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	4413      	add	r3, r2
 8003af6:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RMR, &tmp, 2);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f103 0018 	add.w	r0, r3, #24
 8003afe:	f107 020a 	add.w	r2, r7, #10
 8003b02:	2302      	movs	r3, #2
 8003b04:	f240 6107 	movw	r1, #1543	; 0x607
 8003b08:	f001 fa88 	bl	800501c <wm8994_write_reg>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	4413      	add	r3, r2
 8003b12:	60fb      	str	r3, [r7, #12]
    
    /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
    tmp = 0x000D;
 8003b14:	230d      	movs	r3, #13
 8003b16:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_GPIO1, &tmp, 2);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f103 0018 	add.w	r0, r3, #24
 8003b1e:	f107 020a 	add.w	r2, r7, #10
 8003b22:	2302      	movs	r3, #2
 8003b24:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8003b28:	f001 fa78 	bl	800501c <wm8994_write_reg>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	4413      	add	r3, r2
 8003b32:	60fb      	str	r3, [r7, #12]
    break;
 8003b34:	e089      	b.n	8003c4a <WM8994_Init+0x7c2>
    
  case WM8994_IN_MIC1_MIC2 :
    /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
    * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
    * Enable Left ADC, Enable Right ADC */
    tmp = 0x0F3C;
 8003b36:	f640 733c 	movw	r3, #3900	; 0xf3c
 8003b3a:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f103 0018 	add.w	r0, r3, #24
 8003b42:	f107 020a 	add.w	r2, r7, #10
 8003b46:	2302      	movs	r3, #2
 8003b48:	2104      	movs	r1, #4
 8003b4a:	f001 fa67 	bl	800501c <wm8994_write_reg>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	4413      	add	r3, r2
 8003b54:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
    tmp = 0x00DB;
 8003b56:	23db      	movs	r3, #219	; 0xdb
 8003b58:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC2, &tmp, 2);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f103 0018 	add.w	r0, r3, #24
 8003b60:	f107 020a 	add.w	r2, r7, #10
 8003b64:	2302      	movs	r3, #2
 8003b66:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8003b6a:	f001 fa57 	bl	800501c <wm8994_write_reg>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	4413      	add	r3, r2
 8003b74:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC1, &tmp, 2);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f103 0018 	add.w	r0, r3, #24
 8003b7c:	f107 020a 	add.w	r2, r7, #10
 8003b80:	2302      	movs	r3, #2
 8003b82:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8003b86:	f001 fa49 	bl	800501c <wm8994_write_reg>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	4413      	add	r3, r2
 8003b90:	60fb      	str	r3, [r7, #12]
    
    /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
    tmp = 0x63A0;
 8003b92:	f246 33a0 	movw	r3, #25504	; 0x63a0
 8003b96:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f103 0018 	add.w	r0, r3, #24
 8003b9e:	f107 020a 	add.w	r2, r7, #10
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	2102      	movs	r1, #2
 8003ba6:	f001 fa39 	bl	800501c <wm8994_write_reg>
 8003baa:	4602      	mov	r2, r0
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	4413      	add	r3, r2
 8003bb0:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
    tmp = 0x0002;
 8003bb2:	2302      	movs	r3, #2
 8003bb4:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LMR, &tmp, 2);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f103 0018 	add.w	r0, r3, #24
 8003bbc:	f107 020a 	add.w	r2, r7, #10
 8003bc0:	2302      	movs	r3, #2
 8003bc2:	f240 6106 	movw	r1, #1542	; 0x606
 8003bc6:	f001 fa29 	bl	800501c <wm8994_write_reg>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	4413      	add	r3, r2
 8003bd0:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RMR, &tmp, 2);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f103 0018 	add.w	r0, r3, #24
 8003bd8:	f107 020a 	add.w	r2, r7, #10
 8003bdc:	2302      	movs	r3, #2
 8003bde:	f240 6107 	movw	r1, #1543	; 0x607
 8003be2:	f001 fa1b 	bl	800501c <wm8994_write_reg>
 8003be6:	4602      	mov	r2, r0
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	4413      	add	r3, r2
 8003bec:	60fb      	str	r3, [r7, #12]
    
    /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_LMR, &tmp, 2);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f103 0018 	add.w	r0, r3, #24
 8003bf4:	f107 020a 	add.w	r2, r7, #10
 8003bf8:	2302      	movs	r3, #2
 8003bfa:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8003bfe:	f001 fa0d 	bl	800501c <wm8994_write_reg>
 8003c02:	4602      	mov	r2, r0
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	4413      	add	r3, r2
 8003c08:	60fb      	str	r3, [r7, #12]
    
    /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_RMR, &tmp, 2);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f103 0018 	add.w	r0, r3, #24
 8003c10:	f107 020a 	add.w	r2, r7, #10
 8003c14:	2302      	movs	r3, #2
 8003c16:	f240 6109 	movw	r1, #1545	; 0x609
 8003c1a:	f001 f9ff 	bl	800501c <wm8994_write_reg>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	4413      	add	r3, r2
 8003c24:	60fb      	str	r3, [r7, #12]
    
    /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
    tmp = 0x000D;
 8003c26:	230d      	movs	r3, #13
 8003c28:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_GPIO1, &tmp, 2);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f103 0018 	add.w	r0, r3, #24
 8003c30:	f107 020a 	add.w	r2, r7, #10
 8003c34:	2302      	movs	r3, #2
 8003c36:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8003c3a:	f001 f9ef 	bl	800501c <wm8994_write_reg>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	4413      	add	r3, r2
 8003c44:	60fb      	str	r3, [r7, #12]
    
    break;    
 8003c46:	e000      	b.n	8003c4a <WM8994_Init+0x7c2>
  case WM8994_IN_LINE2 :
  case WM8994_IN_NONE:      
  default:
    /* Actually, no other input devices supported */
    break;
 8003c48:	bf00      	nop
  }
  
  /*  Clock Configurations */
  ret += WM8994_SetFrequency(pObj, pInit->Frequency);
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	4619      	mov	r1, r3
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f000 fff9 	bl	8004c48 <WM8994_SetFrequency>
 8003c56:	4602      	mov	r2, r0
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	60fb      	str	r3, [r7, #12]
  
  if(pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2b05      	cmp	r3, #5
 8003c64:	d11a      	bne.n	8003c9c <WM8994_Init+0x814>
  {
    /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
    ret += WM8994_SetResolution(pObj, WM8994_RESOLUTION_16b);
 8003c66:	2100      	movs	r1, #0
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 ff59 	bl	8004b20 <WM8994_SetResolution>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	4413      	add	r3, r2
 8003c74:	60fb      	str	r3, [r7, #12]
    ret += WM8994_SetProtocol(pObj, WM8994_PROTOCOL_DSP);
 8003c76:	2103      	movs	r1, #3
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f000 ffab 	bl	8004bd4 <WM8994_SetProtocol>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	4413      	add	r3, r2
 8003c84:	60fb      	str	r3, [r7, #12]
    ret += wm8994_aif1_control1_adcr_src(&pObj->Ctx, 1);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	3318      	adds	r3, #24
 8003c8a:	2101      	movs	r1, #1
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f001 faf3 	bl	8005278 <wm8994_aif1_control1_adcr_src>
 8003c92:	4602      	mov	r2, r0
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	4413      	add	r3, r2
 8003c98:	60fb      	str	r3, [r7, #12]
 8003c9a:	e01b      	b.n	8003cd4 <WM8994_Init+0x84c>
  }
  else
  {
    /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
    ret += WM8994_SetResolution(pObj, pInit->Resolution);
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 ff3c 	bl	8004b20 <WM8994_SetResolution>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	4413      	add	r3, r2
 8003cae:	60fb      	str	r3, [r7, #12]
    ret += WM8994_SetProtocol(pObj, WM8994_PROTOCOL_I2S);
 8003cb0:	2102      	movs	r1, #2
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 ff8e 	bl	8004bd4 <WM8994_SetProtocol>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	60fb      	str	r3, [r7, #12]
    ret += wm8994_aif1_control1_adcr_src(&pObj->Ctx, 1);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	3318      	adds	r3, #24
 8003cc4:	2101      	movs	r1, #1
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f001 fad6 	bl	8005278 <wm8994_aif1_control1_adcr_src>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	60fb      	str	r3, [r7, #12]
  }
  
  /* slave mode */
  tmp = 0x0000;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_MASTER_SLAVE, &tmp, 2);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f103 0018 	add.w	r0, r3, #24
 8003cde:	f107 020a 	add.w	r2, r7, #10
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	f240 3102 	movw	r1, #770	; 0x302
 8003ce8:	f001 f998 	bl	800501c <wm8994_write_reg>
 8003cec:	4602      	mov	r2, r0
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	60fb      	str	r3, [r7, #12]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  tmp = 0x000A;
 8003cf4:	230a      	movs	r3, #10
 8003cf6:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLOCKING1, &tmp, 2);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f103 0018 	add.w	r0, r3, #24
 8003cfe:	f107 020a 	add.w	r2, r7, #10
 8003d02:	2302      	movs	r3, #2
 8003d04:	f44f 7102 	mov.w	r1, #520	; 0x208
 8003d08:	f001 f988 	bl	800501c <wm8994_write_reg>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	4413      	add	r3, r2
 8003d12:	60fb      	str	r3, [r7, #12]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  tmp = 0x0001;
 8003d14:	2301      	movs	r3, #1
 8003d16:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_CLOCKING1, &tmp, 2);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f103 0018 	add.w	r0, r3, #24
 8003d1e:	f107 020a 	add.w	r2, r7, #10
 8003d22:	2302      	movs	r3, #2
 8003d24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003d28:	f001 f978 	bl	800501c <wm8994_write_reg>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	4413      	add	r3, r2
 8003d32:	60fb      	str	r3, [r7, #12]
  
  if (pInit->OutputDevice != WM8994_OUT_NONE)  /* Audio output selected */  
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	f000 81c6 	beq.w	80040ca <WM8994_Init+0xc42>
  {  
    if ((pInit->OutputDevice == WM8994_OUT_HEADPHONE) && (pInit->InputDevice == WM8994_IN_NONE))
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d164      	bne.n	8003e10 <WM8994_Init+0x988>
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d160      	bne.n	8003e10 <WM8994_Init+0x988>
    {    
      tmp = 0x0100;
 8003d4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d52:	817b      	strh	r3, [r7, #10]
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f103 0018 	add.w	r0, r3, #24
 8003d5a:	f107 020a 	add.w	r2, r7, #10
 8003d5e:	2302      	movs	r3, #2
 8003d60:	212d      	movs	r1, #45	; 0x2d
 8003d62:	f001 f95b 	bl	800501c <wm8994_write_reg>
 8003d66:	4602      	mov	r2, r0
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	60fb      	str	r3, [r7, #12]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f103 0018 	add.w	r0, r3, #24
 8003d74:	f107 020a 	add.w	r2, r7, #10
 8003d78:	2302      	movs	r3, #2
 8003d7a:	212e      	movs	r1, #46	; 0x2e
 8003d7c:	f001 f94e 	bl	800501c <wm8994_write_reg>
 8003d80:	4602      	mov	r2, r0
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	4413      	add	r3, r2
 8003d86:	60fb      	str	r3, [r7, #12]
      
      /* Startup sequence for Headphone */
      if(ColdStartup == 1U)
 8003d88:	4b52      	ldr	r3, [pc, #328]	; (8003ed4 <WM8994_Init+0xa4c>)
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d119      	bne.n	8003dc4 <WM8994_Init+0x93c>
      {
        /* Enable/Start the write sequencer */
        tmp = 0x8100;
 8003d90:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8003d94:	817b      	strh	r3, [r7, #10]
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_WRITE_SEQ_CTRL1, &tmp, 2);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f103 0018 	add.w	r0, r3, #24
 8003d9c:	f107 020a 	add.w	r2, r7, #10
 8003da0:	2302      	movs	r3, #2
 8003da2:	f44f 7188 	mov.w	r1, #272	; 0x110
 8003da6:	f001 f939 	bl	800501c <wm8994_write_reg>
 8003daa:	4602      	mov	r2, r0
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	4413      	add	r3, r2
 8003db0:	60fb      	str	r3, [r7, #12]
        
        ColdStartup=0;
 8003db2:	4b48      	ldr	r3, [pc, #288]	; (8003ed4 <WM8994_Init+0xa4c>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        (void)WM8994_Delay(pObj, 325);
 8003db8:	f240 1145 	movw	r1, #325	; 0x145
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f001 f8b5 	bl	8004f2c <WM8994_Delay>
 8003dc2:	e014      	b.n	8003dee <WM8994_Init+0x966>
      }
      else 
      { 
        /* Headphone Warm Start-Up */
        tmp = 0x8108;
 8003dc4:	f248 1308 	movw	r3, #33032	; 0x8108
 8003dc8:	817b      	strh	r3, [r7, #10]
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_WRITE_SEQ_CTRL1, &tmp, 2);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f103 0018 	add.w	r0, r3, #24
 8003dd0:	f107 020a 	add.w	r2, r7, #10
 8003dd4:	2302      	movs	r3, #2
 8003dd6:	f44f 7188 	mov.w	r1, #272	; 0x110
 8003dda:	f001 f91f 	bl	800501c <wm8994_write_reg>
 8003dde:	4602      	mov	r2, r0
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	4413      	add	r3, r2
 8003de4:	60fb      	str	r3, [r7, #12]
        
        /* Add Delay */
        (void)WM8994_Delay(pObj, 50);
 8003de6:	2132      	movs	r1, #50	; 0x32
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f001 f89f 	bl	8004f2c <WM8994_Delay>
      }
      
      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      tmp = 0x0000;
 8003dee:	2300      	movs	r3, #0
 8003df0:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f103 0018 	add.w	r0, r3, #24
 8003df8:	f107 020a 	add.w	r2, r7, #10
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8003e02:	f001 f90b 	bl	800501c <wm8994_write_reg>
 8003e06:	4602      	mov	r2, r0
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	60fb      	str	r3, [r7, #12]
 8003e0e:	e0f4      	b.n	8003ffa <WM8994_Init+0xb72>
    else
    {
      /* Analog Output Configuration */
      
      /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
      tmp = 0x0300;
 8003e10:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003e14:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f103 0018 	add.w	r0, r3, #24
 8003e1c:	f107 020a 	add.w	r2, r7, #10
 8003e20:	2302      	movs	r3, #2
 8003e22:	2103      	movs	r1, #3
 8003e24:	f001 f8fa 	bl	800501c <wm8994_write_reg>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	60fb      	str	r3, [r7, #12]
      
      /* Left Speaker Mixer Volume = 0dB */
      tmp = 0x0000;
 8003e30:	2300      	movs	r3, #0
 8003e32:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPKMIXL_ATT, &tmp, 2);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f103 0018 	add.w	r0, r3, #24
 8003e3a:	f107 020a 	add.w	r2, r7, #10
 8003e3e:	2302      	movs	r3, #2
 8003e40:	2122      	movs	r1, #34	; 0x22
 8003e42:	f001 f8eb 	bl	800501c <wm8994_write_reg>
 8003e46:	4602      	mov	r2, r0
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	60fb      	str	r3, [r7, #12]
      
      /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPKMIXR_ATT, &tmp, 2);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f103 0018 	add.w	r0, r3, #24
 8003e54:	f107 020a 	add.w	r2, r7, #10
 8003e58:	2302      	movs	r3, #2
 8003e5a:	2123      	movs	r1, #35	; 0x23
 8003e5c:	f001 f8de 	bl	800501c <wm8994_write_reg>
 8003e60:	4602      	mov	r2, r0
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	4413      	add	r3, r2
 8003e66:	60fb      	str	r3, [r7, #12]
      
      /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
      Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
      tmp = 0x0300;
 8003e68:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003e6c:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPEAKER_MIXER, &tmp, 2);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f103 0018 	add.w	r0, r3, #24
 8003e74:	f107 020a 	add.w	r2, r7, #10
 8003e78:	2302      	movs	r3, #2
 8003e7a:	2136      	movs	r1, #54	; 0x36
 8003e7c:	f001 f8ce 	bl	800501c <wm8994_write_reg>
 8003e80:	4602      	mov	r2, r0
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	4413      	add	r3, r2
 8003e86:	60fb      	str	r3, [r7, #12]
      
      /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
      tmp = 0x3003;
 8003e88:	f243 0303 	movw	r3, #12291	; 0x3003
 8003e8c:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f103 0018 	add.w	r0, r3, #24
 8003e94:	f107 020a 	add.w	r2, r7, #10
 8003e98:	2302      	movs	r3, #2
 8003e9a:	2101      	movs	r1, #1
 8003e9c:	f001 f8be 	bl	800501c <wm8994_write_reg>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	60fb      	str	r3, [r7, #12]
      /* Headphone/Speaker Enable */
      
      if (pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2b05      	cmp	r3, #5
 8003eae:	d113      	bne.n	8003ed8 <WM8994_Init+0xa50>
      {
        /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
        tmp = 0x0205;
 8003eb0:	f240 2305 	movw	r3, #517	; 0x205
 8003eb4:	817b      	strh	r3, [r7, #10]
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLASS_W, &tmp, 2); 
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f103 0018 	add.w	r0, r3, #24
 8003ebc:	f107 020a 	add.w	r2, r7, #10
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	2151      	movs	r1, #81	; 0x51
 8003ec4:	f001 f8aa 	bl	800501c <wm8994_write_reg>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	4413      	add	r3, r2
 8003ece:	60fb      	str	r3, [r7, #12]
 8003ed0:	e011      	b.n	8003ef6 <WM8994_Init+0xa6e>
 8003ed2:	bf00      	nop
 8003ed4:	24000094 	.word	0x24000094
      }
      else
      {
        /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
        tmp = 0x0005;
 8003ed8:	2305      	movs	r3, #5
 8003eda:	817b      	strh	r3, [r7, #10]
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLASS_W, &tmp, 2);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f103 0018 	add.w	r0, r3, #24
 8003ee2:	f107 020a 	add.w	r2, r7, #10
 8003ee6:	2302      	movs	r3, #2
 8003ee8:	2151      	movs	r1, #81	; 0x51
 8003eea:	f001 f897 	bl	800501c <wm8994_write_reg>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	60fb      	str	r3, [r7, #12]
      }
      
      /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
      /* idem for Speaker */
      tmp = 0x3303;
 8003ef6:	f243 3303 	movw	r3, #13059	; 0x3303
 8003efa:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f103 0018 	add.w	r0, r3, #24
 8003f02:	f107 020a 	add.w	r2, r7, #10
 8003f06:	2302      	movs	r3, #2
 8003f08:	2101      	movs	r1, #1
 8003f0a:	f001 f887 	bl	800501c <wm8994_write_reg>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	4413      	add	r3, r2
 8003f14:	60fb      	str	r3, [r7, #12]
      
      /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
      tmp = 0x0022;
 8003f16:	2322      	movs	r3, #34	; 0x22
 8003f18:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANALOG_HP, &tmp, 2);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f103 0018 	add.w	r0, r3, #24
 8003f20:	f107 020a 	add.w	r2, r7, #10
 8003f24:	2302      	movs	r3, #2
 8003f26:	2160      	movs	r1, #96	; 0x60
 8003f28:	f001 f878 	bl	800501c <wm8994_write_reg>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	4413      	add	r3, r2
 8003f32:	60fb      	str	r3, [r7, #12]
      
      /* Enable Charge Pump */
      tmp = 0x9F25;
 8003f34:	f649 7325 	movw	r3, #40741	; 0x9f25
 8003f38:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_CHARGE_PUMP1, &tmp, 2);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f103 0018 	add.w	r0, r3, #24
 8003f40:	f107 020a 	add.w	r2, r7, #10
 8003f44:	2302      	movs	r3, #2
 8003f46:	214c      	movs	r1, #76	; 0x4c
 8003f48:	f001 f868 	bl	800501c <wm8994_write_reg>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	4413      	add	r3, r2
 8003f52:	60fb      	str	r3, [r7, #12]
      
      /* Add Delay */
      (void)WM8994_Delay(pObj, 15);
 8003f54:	210f      	movs	r1, #15
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 ffe8 	bl	8004f2c <WM8994_Delay>
      
      tmp = 0x0001;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	817b      	strh	r3, [r7, #10]
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f103 0018 	add.w	r0, r3, #24
 8003f66:	f107 020a 	add.w	r2, r7, #10
 8003f6a:	2302      	movs	r3, #2
 8003f6c:	212d      	movs	r1, #45	; 0x2d
 8003f6e:	f001 f855 	bl	800501c <wm8994_write_reg>
 8003f72:	4602      	mov	r2, r0
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	4413      	add	r3, r2
 8003f78:	60fb      	str	r3, [r7, #12]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f103 0018 	add.w	r0, r3, #24
 8003f80:	f107 020a 	add.w	r2, r7, #10
 8003f84:	2302      	movs	r3, #2
 8003f86:	212e      	movs	r1, #46	; 0x2e
 8003f88:	f001 f848 	bl	800501c <wm8994_write_reg>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	4413      	add	r3, r2
 8003f92:	60fb      	str	r3, [r7, #12]
      
      /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
      /* idem for SPKOUTL and SPKOUTR */
      tmp = 0x0330;
 8003f94:	f44f 734c 	mov.w	r3, #816	; 0x330
 8003f98:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f103 0018 	add.w	r0, r3, #24
 8003fa0:	f107 020a 	add.w	r2, r7, #10
 8003fa4:	2302      	movs	r3, #2
 8003fa6:	2103      	movs	r1, #3
 8003fa8:	f001 f838 	bl	800501c <wm8994_write_reg>
 8003fac:	4602      	mov	r2, r0
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	4413      	add	r3, r2
 8003fb2:	60fb      	str	r3, [r7, #12]
      
      /* Enable DC Servo and trigger start-up mode on left and right channels */
      tmp = 0x0033;
 8003fb4:	2333      	movs	r3, #51	; 0x33
 8003fb6:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_DC_SERVO1, &tmp, 2);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f103 0018 	add.w	r0, r3, #24
 8003fbe:	f107 020a 	add.w	r2, r7, #10
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	2154      	movs	r1, #84	; 0x54
 8003fc6:	f001 f829 	bl	800501c <wm8994_write_reg>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	4413      	add	r3, r2
 8003fd0:	60fb      	str	r3, [r7, #12]
      
      /* Add Delay */
      (void)WM8994_Delay(pObj, 257);
 8003fd2:	f240 1101 	movw	r1, #257	; 0x101
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 ffa8 	bl	8004f2c <WM8994_Delay>
      
      /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
      tmp = 0x00EE;
 8003fdc:	23ee      	movs	r3, #238	; 0xee
 8003fde:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANALOG_HP, &tmp, 2);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f103 0018 	add.w	r0, r3, #24
 8003fe6:	f107 020a 	add.w	r2, r7, #10
 8003fea:	2302      	movs	r3, #2
 8003fec:	2160      	movs	r1, #96	; 0x60
 8003fee:	f001 f815 	bl	800501c <wm8994_write_reg>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	60fb      	str	r3, [r7, #12]
    }
    
    /* Unmutes */
    
    /* Unmute DAC 1 (Left) */
    tmp = 0x00C0;
 8003ffa:	23c0      	movs	r3, #192	; 0xc0
 8003ffc:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC1_LEFT_VOL, &tmp, 2);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f103 0018 	add.w	r0, r3, #24
 8004004:	f107 020a 	add.w	r2, r7, #10
 8004008:	2302      	movs	r3, #2
 800400a:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 800400e:	f001 f805 	bl	800501c <wm8994_write_reg>
 8004012:	4602      	mov	r2, r0
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	4413      	add	r3, r2
 8004018:	60fb      	str	r3, [r7, #12]
    
    /* Unmute DAC 1 (Right) */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC1_RIGHT_VOL, &tmp, 2);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f103 0018 	add.w	r0, r3, #24
 8004020:	f107 020a 	add.w	r2, r7, #10
 8004024:	2302      	movs	r3, #2
 8004026:	f240 6111 	movw	r1, #1553	; 0x611
 800402a:	f000 fff7 	bl	800501c <wm8994_write_reg>
 800402e:	4602      	mov	r2, r0
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	4413      	add	r3, r2
 8004034:	60fb      	str	r3, [r7, #12]
    
    /* Unmute the AIF1 Timeslot 0 DAC path */
    tmp = 0x0010;
 8004036:	2310      	movs	r3, #16
 8004038:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f103 0018 	add.w	r0, r3, #24
 8004040:	f107 020a 	add.w	r2, r7, #10
 8004044:	2302      	movs	r3, #2
 8004046:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800404a:	f000 ffe7 	bl	800501c <wm8994_write_reg>
 800404e:	4602      	mov	r2, r0
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	4413      	add	r3, r2
 8004054:	60fb      	str	r3, [r7, #12]
    
    /* Unmute DAC 2 (Left) */
    tmp = 0x00C0;
 8004056:	23c0      	movs	r3, #192	; 0xc0
 8004058:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC2_LEFT_VOL, &tmp, 2);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f103 0018 	add.w	r0, r3, #24
 8004060:	f107 020a 	add.w	r2, r7, #10
 8004064:	2302      	movs	r3, #2
 8004066:	f240 6112 	movw	r1, #1554	; 0x612
 800406a:	f000 ffd7 	bl	800501c <wm8994_write_reg>
 800406e:	4602      	mov	r2, r0
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	4413      	add	r3, r2
 8004074:	60fb      	str	r3, [r7, #12]
    
    /* Unmute DAC 2 (Right) */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC2_RIGHT_VOL, &tmp, 2);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f103 0018 	add.w	r0, r3, #24
 800407c:	f107 020a 	add.w	r2, r7, #10
 8004080:	2302      	movs	r3, #2
 8004082:	f240 6113 	movw	r1, #1555	; 0x613
 8004086:	f000 ffc9 	bl	800501c <wm8994_write_reg>
 800408a:	4602      	mov	r2, r0
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	4413      	add	r3, r2
 8004090:	60fb      	str	r3, [r7, #12]
    
    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    tmp = 0x0010;
 8004092:	2310      	movs	r3, #16
 8004094:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f103 0018 	add.w	r0, r3, #24
 800409c:	f107 020a 	add.w	r2, r7, #10
 80040a0:	2302      	movs	r3, #2
 80040a2:	f240 4122 	movw	r1, #1058	; 0x422
 80040a6:	f000 ffb9 	bl	800501c <wm8994_write_reg>
 80040aa:	4602      	mov	r2, r0
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	4413      	add	r3, r2
 80040b0:	60fb      	str	r3, [r7, #12]
    
    /* Volume Control */
    ret += WM8994_SetVolume(pObj, VOLUME_OUTPUT, (uint8_t)pInit->Volume); 
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	461a      	mov	r2, r3
 80040ba:	2101      	movs	r1, #1
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f000 f99f 	bl	8004400 <WM8994_SetVolume>
 80040c2:	4602      	mov	r2, r0
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	4413      	add	r3, r2
 80040c8:	60fb      	str	r3, [r7, #12]
  }
  
  if (pInit->InputDevice != WM8994_IN_NONE) /* Audio input selected */
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	f000 80b5 	beq.w	800423e <WM8994_Init+0xdb6>
  {
    if ((pInit->InputDevice == WM8994_IN_MIC1) || (pInit->InputDevice == WM8994_IN_MIC2))
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d003      	beq.n	80040e4 <WM8994_Init+0xc5c>
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d130      	bne.n	8004146 <WM8994_Init+0xcbe>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      tmp = 0x0013;
 80040e4:	2313      	movs	r3, #19
 80040e6:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f103 0018 	add.w	r0, r3, #24
 80040ee:	f107 020a 	add.w	r2, r7, #10
 80040f2:	2302      	movs	r3, #2
 80040f4:	2101      	movs	r1, #1
 80040f6:	f000 ff91 	bl	800501c <wm8994_write_reg>
 80040fa:	4602      	mov	r2, r0
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	4413      	add	r3, r2
 8004100:	60fb      	str	r3, [r7, #12]
      
      /* ADC oversample enable */
      tmp = 0x0002;
 8004102:	2302      	movs	r3, #2
 8004104:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OVERSAMPLING, &tmp, 2);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f103 0018 	add.w	r0, r3, #24
 800410c:	f107 020a 	add.w	r2, r7, #10
 8004110:	2302      	movs	r3, #2
 8004112:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8004116:	f000 ff81 	bl	800501c <wm8994_write_reg>
 800411a:	4602      	mov	r2, r0
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	4413      	add	r3, r2
 8004120:	60fb      	str	r3, [r7, #12]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      tmp = 0x3800;
 8004122:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004126:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_FILTERS, &tmp, 2);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f103 0018 	add.w	r0, r3, #24
 800412e:	f107 020a 	add.w	r2, r7, #10
 8004132:	2302      	movs	r3, #2
 8004134:	f240 4111 	movw	r1, #1041	; 0x411
 8004138:	f000 ff70 	bl	800501c <wm8994_write_reg>
 800413c:	4602      	mov	r2, r0
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	4413      	add	r3, r2
 8004142:	60fb      	str	r3, [r7, #12]
 8004144:	e06f      	b.n	8004226 <WM8994_Init+0xd9e>
    }
    else if(pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2b05      	cmp	r3, #5
 800414c:	d13e      	bne.n	80041cc <WM8994_Init+0xd44>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      tmp = 0x0013;
 800414e:	2313      	movs	r3, #19
 8004150:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f103 0018 	add.w	r0, r3, #24
 8004158:	f107 020a 	add.w	r2, r7, #10
 800415c:	2302      	movs	r3, #2
 800415e:	2101      	movs	r1, #1
 8004160:	f000 ff5c 	bl	800501c <wm8994_write_reg>
 8004164:	4602      	mov	r2, r0
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	4413      	add	r3, r2
 800416a:	60fb      	str	r3, [r7, #12]
      
      /* ADC oversample enable */
      tmp = 0x0002;
 800416c:	2302      	movs	r3, #2
 800416e:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OVERSAMPLING, &tmp, 2);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f103 0018 	add.w	r0, r3, #24
 8004176:	f107 020a 	add.w	r2, r7, #10
 800417a:	2302      	movs	r3, #2
 800417c:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8004180:	f000 ff4c 	bl	800501c <wm8994_write_reg>
 8004184:	4602      	mov	r2, r0
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	4413      	add	r3, r2
 800418a:	60fb      	str	r3, [r7, #12]
      
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      tmp = 0x1800;
 800418c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004190:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_FILTERS, &tmp, 2);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f103 0018 	add.w	r0, r3, #24
 8004198:	f107 020a 	add.w	r2, r7, #10
 800419c:	2302      	movs	r3, #2
 800419e:	f44f 6182 	mov.w	r1, #1040	; 0x410
 80041a2:	f000 ff3b 	bl	800501c <wm8994_write_reg>
 80041a6:	4602      	mov	r2, r0
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	4413      	add	r3, r2
 80041ac:	60fb      	str	r3, [r7, #12]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_FILTERS, &tmp, 2);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f103 0018 	add.w	r0, r3, #24
 80041b4:	f107 020a 	add.w	r2, r7, #10
 80041b8:	2302      	movs	r3, #2
 80041ba:	f240 4111 	movw	r1, #1041	; 0x411
 80041be:	f000 ff2d 	bl	800501c <wm8994_write_reg>
 80041c2:	4602      	mov	r2, r0
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	4413      	add	r3, r2
 80041c8:	60fb      	str	r3, [r7, #12]
 80041ca:	e02c      	b.n	8004226 <WM8994_Init+0xd9e>
    }    
    else /* ((pInit->InputDevice == WM8994_IN_LINE1) || (pInit->InputDevice == WM8994_IN_LINE2)) */
    {      
      /* Disable mute on IN1L, IN1L Volume = +0dB */
      tmp = 0x000B;
 80041cc:	230b      	movs	r3, #11
 80041ce:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_LEFT_LINE_IN12_VOL, &tmp, 2);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f103 0018 	add.w	r0, r3, #24
 80041d6:	f107 020a 	add.w	r2, r7, #10
 80041da:	2302      	movs	r3, #2
 80041dc:	2118      	movs	r1, #24
 80041de:	f000 ff1d 	bl	800501c <wm8994_write_reg>
 80041e2:	4602      	mov	r2, r0
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	4413      	add	r3, r2
 80041e8:	60fb      	str	r3, [r7, #12]
      
      /* Disable mute on IN1R, IN1R Volume = +0dB */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_RIGHT_LINE_IN12_VOL, &tmp, 2);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f103 0018 	add.w	r0, r3, #24
 80041f0:	f107 020a 	add.w	r2, r7, #10
 80041f4:	2302      	movs	r3, #2
 80041f6:	211a      	movs	r1, #26
 80041f8:	f000 ff10 	bl	800501c <wm8994_write_reg>
 80041fc:	4602      	mov	r2, r0
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	4413      	add	r3, r2
 8004202:	60fb      	str	r3, [r7, #12]
      
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      tmp = 0x1800;
 8004204:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004208:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_FILTERS, &tmp, 2);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f103 0018 	add.w	r0, r3, #24
 8004210:	f107 020a 	add.w	r2, r7, #10
 8004214:	2302      	movs	r3, #2
 8004216:	f44f 6182 	mov.w	r1, #1040	; 0x410
 800421a:	f000 feff 	bl	800501c <wm8994_write_reg>
 800421e:	4602      	mov	r2, r0
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	4413      	add	r3, r2
 8004224:	60fb      	str	r3, [r7, #12]
    }
    /* Volume Control */
    ret += WM8994_SetVolume(pObj, VOLUME_INPUT, (uint8_t)pInit->Volume); 
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	b2db      	uxtb	r3, r3
 800422c:	461a      	mov	r2, r3
 800422e:	2100      	movs	r1, #0
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f000 f8e5 	bl	8004400 <WM8994_SetVolume>
 8004236:	4602      	mov	r2, r0
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	4413      	add	r3, r2
 800423c:	60fb      	str	r3, [r7, #12]
  }
  
  if(ret != WM8994_OK)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d002      	beq.n	800424a <WM8994_Init+0xdc2>
  {
    ret = WM8994_ERROR;
 8004244:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004248:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 800424a:	68fb      	ldr	r3, [r7, #12]
}
 800424c:	4618      	mov	r0, r3
 800424e:	3710      	adds	r7, #16
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}

08004254 <WM8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  pObj pointer to component object
  * @retval Component status
  */
int32_t WM8994_DeInit(WM8994_Object_t *pObj)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  /* De-Initialize Audio Codec interface */
  return WM8994_Stop(pObj, WM8994_PDWN_HW);
 800425c:	2100      	movs	r1, #0
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 f861 	bl	8004326 <WM8994_Stop>
 8004264:	4603      	mov	r3, r0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3708      	adds	r7, #8
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}

0800426e <WM8994_ReadID>:
  * @param  pObj pointer to component object
  * @param  Id component ID
  * @retval Component status 
  */
int32_t WM8994_ReadID(WM8994_Object_t *pObj, uint32_t *Id)
{
 800426e:	b580      	push	{r7, lr}
 8004270:	b084      	sub	sp, #16
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
 8004276:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t wm8994_id;
  
  /* Initialize the Control interface of the Audio Codec */
  pObj->IO.Init();
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4798      	blx	r3
  /* Get ID from component */
  ret = wm8994_sw_reset_r(&pObj->Ctx, &wm8994_id);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	3318      	adds	r3, #24
 8004282:	f107 020a 	add.w	r2, r7, #10
 8004286:	4611      	mov	r1, r2
 8004288:	4618      	mov	r0, r3
 800428a:	f000 ff00 	bl	800508e <wm8994_sw_reset_r>
 800428e:	60f8      	str	r0, [r7, #12]
  
  *Id = wm8994_id;
 8004290:	897b      	ldrh	r3, [r7, #10]
 8004292:	461a      	mov	r2, r3
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	601a      	str	r2, [r3, #0]
  
  return ret;
 8004298:	68fb      	ldr	r3, [r7, #12]
}
 800429a:	4618      	mov	r0, r3
 800429c:	3710      	adds	r7, #16
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <WM8994_Play>:
  * @note For this codec no Play options are required.
  * @param  pObj pointer to component object  
  * @retval Component status
  */
int32_t WM8994_Play(WM8994_Object_t *pObj)
{ 
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b082      	sub	sp, #8
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  return WM8994_SetMute(pObj, WM8994_MUTE_OFF);
 80042aa:	2100      	movs	r1, #0
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f000 f9d3 	bl	8004658 <WM8994_SetMute>
 80042b2:	4603      	mov	r3, r0
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3708      	adds	r7, #8
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <WM8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param  pObj pointer to component object
  * @retval Component status
  */
int32_t WM8994_Pause(WM8994_Object_t *pObj)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint16_t tmp = 0x0001;
 80042c4:	2301      	movs	r3, #1
 80042c6:	817b      	strh	r3, [r7, #10]
  
  /* Pause the audio file playing */
  /* Mute the output first */
  if(WM8994_SetMute(pObj, WM8994_MUTE_ON) != WM8994_OK)
 80042c8:	2101      	movs	r1, #1
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 f9c4 	bl	8004658 <WM8994_SetMute>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d003      	beq.n	80042de <WM8994_Pause+0x22>
  {
    ret  = WM8994_ERROR;
 80042d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80042da:	60fb      	str	r3, [r7, #12]
 80042dc:	e011      	b.n	8004302 <WM8994_Pause+0x46>
  }/* Put the Codec in Power save mode */
  else if(wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2) != WM8994_OK)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f103 0018 	add.w	r0, r3, #24
 80042e4:	f107 020a 	add.w	r2, r7, #10
 80042e8:	2302      	movs	r3, #2
 80042ea:	2102      	movs	r1, #2
 80042ec:	f000 fe96 	bl	800501c <wm8994_write_reg>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d003      	beq.n	80042fe <WM8994_Pause+0x42>
  {
    ret  = WM8994_ERROR;
 80042f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80042fa:	60fb      	str	r3, [r7, #12]
 80042fc:	e001      	b.n	8004302 <WM8994_Pause+0x46>
  }
  else
  {
    ret = WM8994_OK;
 80042fe:	2300      	movs	r3, #0
 8004300:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8004302:	68fb      	ldr	r3, [r7, #12]
}
 8004304:	4618      	mov	r0, r3
 8004306:	3710      	adds	r7, #16
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <WM8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param  pObj pointer to component object 
  * @retval Component status
  */
int32_t WM8994_Resume(WM8994_Object_t *pObj)
{  
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  return WM8994_SetMute(pObj, WM8994_MUTE_OFF);
 8004314:	2100      	movs	r1, #0
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 f99e 	bl	8004658 <WM8994_SetMute>
 800431c:	4603      	mov	r3, r0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3708      	adds	r7, #8
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}

08004326 <WM8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
int32_t WM8994_Stop(WM8994_Object_t *pObj, uint32_t CodecPdwnMode)
{
 8004326:	b580      	push	{r7, lr}
 8004328:	b084      	sub	sp, #16
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
 800432e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t tmp;
  
  /* Mute the output first */
  ret = WM8994_SetMute(pObj, WM8994_MUTE_ON);
 8004330:	2101      	movs	r1, #1
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 f990 	bl	8004658 <WM8994_SetMute>
 8004338:	60f8      	str	r0, [r7, #12]
  
  if (CodecPdwnMode == WM8994_PDWN_SW)
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d054      	beq.n	80043ea <WM8994_Stop+0xc4>
  {
    /* Only output mute required*/
  }
  else /* WM8994_PDWN_HW */
  {
    tmp = 0x0200;
 8004340:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004344:	817b      	strh	r3, [r7, #10]
    /* Mute the AIF1 Timeslot 0 DAC1 path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f103 0018 	add.w	r0, r3, #24
 800434c:	f107 020a 	add.w	r2, r7, #10
 8004350:	2302      	movs	r3, #2
 8004352:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8004356:	f000 fe61 	bl	800501c <wm8994_write_reg>
 800435a:	4602      	mov	r2, r0
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	4413      	add	r3, r2
 8004360:	60fb      	str	r3, [r7, #12]
    
    /* Mute the AIF1 Timeslot 1 DAC2 path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f103 0018 	add.w	r0, r3, #24
 8004368:	f107 020a 	add.w	r2, r7, #10
 800436c:	2302      	movs	r3, #2
 800436e:	f240 4122 	movw	r1, #1058	; 0x422
 8004372:	f000 fe53 	bl	800501c <wm8994_write_reg>
 8004376:	4602      	mov	r2, r0
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	4413      	add	r3, r2
 800437c:	60fb      	str	r3, [r7, #12]
    
    tmp = 0x0000;
 800437e:	2300      	movs	r3, #0
 8004380:	817b      	strh	r3, [r7, #10]
    /* Disable DAC1L_TO_HPOUT1L */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f103 0018 	add.w	r0, r3, #24
 8004388:	f107 020a 	add.w	r2, r7, #10
 800438c:	2302      	movs	r3, #2
 800438e:	212d      	movs	r1, #45	; 0x2d
 8004390:	f000 fe44 	bl	800501c <wm8994_write_reg>
 8004394:	4602      	mov	r2, r0
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	4413      	add	r3, r2
 800439a:	60fb      	str	r3, [r7, #12]
    
    /* Disable DAC1R_TO_HPOUT1R */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f103 0018 	add.w	r0, r3, #24
 80043a2:	f107 020a 	add.w	r2, r7, #10
 80043a6:	2302      	movs	r3, #2
 80043a8:	212e      	movs	r1, #46	; 0x2e
 80043aa:	f000 fe37 	bl	800501c <wm8994_write_reg>
 80043ae:	4602      	mov	r2, r0
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	4413      	add	r3, r2
 80043b4:	60fb      	str	r3, [r7, #12]
    
    /* Disable DAC1 and DAC2 */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f103 0018 	add.w	r0, r3, #24
 80043bc:	f107 020a 	add.w	r2, r7, #10
 80043c0:	2302      	movs	r3, #2
 80043c2:	2105      	movs	r1, #5
 80043c4:	f000 fe2a 	bl	800501c <wm8994_write_reg>
 80043c8:	4602      	mov	r2, r0
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	4413      	add	r3, r2
 80043ce:	60fb      	str	r3, [r7, #12]
    
    /* Reset Codec by writing in 0x0000 address register */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_SW_RESET, &tmp, 2);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f103 0018 	add.w	r0, r3, #24
 80043d6:	f107 020a 	add.w	r2, r7, #10
 80043da:	2302      	movs	r3, #2
 80043dc:	2100      	movs	r1, #0
 80043de:	f000 fe1d 	bl	800501c <wm8994_write_reg>
 80043e2:	4602      	mov	r2, r0
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	4413      	add	r3, r2
 80043e8:	60fb      	str	r3, [r7, #12]
  }
  
  if(ret != WM8994_OK)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d002      	beq.n	80043f6 <WM8994_Stop+0xd0>
  {
    ret = WM8994_ERROR;
 80043f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043f4:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 80043f6:	68fb      	ldr	r3, [r7, #12]
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3710      	adds	r7, #16
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <WM8994_SetVolume>:
  * @param  Volume  a byte value from 0 to 63 for output and from 0 to 240 for input
  *         (refer to codec registers description for more details).
  * @retval Component status
  */
int32_t WM8994_SetVolume(WM8994_Object_t *pObj, uint32_t InputOutput, uint8_t Volume)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b086      	sub	sp, #24
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	4613      	mov	r3, r2
 800440c:	71fb      	strb	r3, [r7, #7]
  int32_t ret;  
  uint16_t tmp;
  
  /* Output volume */
  if (InputOutput == VOLUME_OUTPUT)
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	2b01      	cmp	r3, #1
 8004412:	f040 8089 	bne.w	8004528 <WM8994_SetVolume+0x128>
  {    
    if(Volume > 0x3EU)
 8004416:	79fb      	ldrb	r3, [r7, #7]
 8004418:	2b3e      	cmp	r3, #62	; 0x3e
 800441a:	d93c      	bls.n	8004496 <WM8994_SetVolume+0x96>
    {
      /* Unmute audio codec */
      ret = WM8994_SetMute(pObj, WM8994_MUTE_OFF);
 800441c:	2100      	movs	r1, #0
 800441e:	68f8      	ldr	r0, [r7, #12]
 8004420:	f000 f91a 	bl	8004658 <WM8994_SetMute>
 8004424:	6178      	str	r0, [r7, #20]
      tmp = 0x3FU | 0x140U;
 8004426:	f240 137f 	movw	r3, #383	; 0x17f
 800442a:	827b      	strh	r3, [r7, #18]
      
      /* Left Headphone Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_LEFT_OUTPUT_VOL, &tmp, 2);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f103 0018 	add.w	r0, r3, #24
 8004432:	f107 0212 	add.w	r2, r7, #18
 8004436:	2302      	movs	r3, #2
 8004438:	211c      	movs	r1, #28
 800443a:	f000 fdef 	bl	800501c <wm8994_write_reg>
 800443e:	4602      	mov	r2, r0
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	4413      	add	r3, r2
 8004444:	617b      	str	r3, [r7, #20]
      
      /* Right Headphone Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_RIGHT_OUTPUT_VOL, &tmp, 2);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f103 0018 	add.w	r0, r3, #24
 800444c:	f107 0212 	add.w	r2, r7, #18
 8004450:	2302      	movs	r3, #2
 8004452:	211d      	movs	r1, #29
 8004454:	f000 fde2 	bl	800501c <wm8994_write_reg>
 8004458:	4602      	mov	r2, r0
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	4413      	add	r3, r2
 800445e:	617b      	str	r3, [r7, #20]
      
      /* Left Speaker Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPK_LEFT_VOL, &tmp, 2);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f103 0018 	add.w	r0, r3, #24
 8004466:	f107 0212 	add.w	r2, r7, #18
 800446a:	2302      	movs	r3, #2
 800446c:	2126      	movs	r1, #38	; 0x26
 800446e:	f000 fdd5 	bl	800501c <wm8994_write_reg>
 8004472:	4602      	mov	r2, r0
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	4413      	add	r3, r2
 8004478:	617b      	str	r3, [r7, #20]
      
      /* Right Speaker Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPK_RIGHT_VOL, &tmp, 2);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f103 0018 	add.w	r0, r3, #24
 8004480:	f107 0212 	add.w	r2, r7, #18
 8004484:	2302      	movs	r3, #2
 8004486:	2127      	movs	r1, #39	; 0x27
 8004488:	f000 fdc8 	bl	800501c <wm8994_write_reg>
 800448c:	4602      	mov	r2, r0
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	4413      	add	r3, r2
 8004492:	617b      	str	r3, [r7, #20]
 8004494:	e083      	b.n	800459e <WM8994_SetVolume+0x19e>
    }
    else if (Volume == 0U)
 8004496:	79fb      	ldrb	r3, [r7, #7]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d105      	bne.n	80044a8 <WM8994_SetVolume+0xa8>
    {
      /* Mute audio codec */
      ret = WM8994_SetMute(pObj, WM8994_MUTE_ON);
 800449c:	2101      	movs	r1, #1
 800449e:	68f8      	ldr	r0, [r7, #12]
 80044a0:	f000 f8da 	bl	8004658 <WM8994_SetMute>
 80044a4:	6178      	str	r0, [r7, #20]
 80044a6:	e07a      	b.n	800459e <WM8994_SetVolume+0x19e>
    }
    else
    {
      /* Unmute audio codec */
      ret = WM8994_SetMute(pObj, WM8994_MUTE_OFF);
 80044a8:	2100      	movs	r1, #0
 80044aa:	68f8      	ldr	r0, [r7, #12]
 80044ac:	f000 f8d4 	bl	8004658 <WM8994_SetMute>
 80044b0:	6178      	str	r0, [r7, #20]
      
      tmp = Volume | 0x140U;
 80044b2:	79fb      	ldrb	r3, [r7, #7]
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	827b      	strh	r3, [r7, #18]
      
      /* Left Headphone Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_LEFT_OUTPUT_VOL, &tmp, 2);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f103 0018 	add.w	r0, r3, #24
 80044c4:	f107 0212 	add.w	r2, r7, #18
 80044c8:	2302      	movs	r3, #2
 80044ca:	211c      	movs	r1, #28
 80044cc:	f000 fda6 	bl	800501c <wm8994_write_reg>
 80044d0:	4602      	mov	r2, r0
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	4413      	add	r3, r2
 80044d6:	617b      	str	r3, [r7, #20]
      
      /* Right Headphone Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_RIGHT_OUTPUT_VOL, &tmp, 2);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f103 0018 	add.w	r0, r3, #24
 80044de:	f107 0212 	add.w	r2, r7, #18
 80044e2:	2302      	movs	r3, #2
 80044e4:	211d      	movs	r1, #29
 80044e6:	f000 fd99 	bl	800501c <wm8994_write_reg>
 80044ea:	4602      	mov	r2, r0
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	4413      	add	r3, r2
 80044f0:	617b      	str	r3, [r7, #20]
      
      /* Left Speaker Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPK_LEFT_VOL, &tmp, 2);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f103 0018 	add.w	r0, r3, #24
 80044f8:	f107 0212 	add.w	r2, r7, #18
 80044fc:	2302      	movs	r3, #2
 80044fe:	2126      	movs	r1, #38	; 0x26
 8004500:	f000 fd8c 	bl	800501c <wm8994_write_reg>
 8004504:	4602      	mov	r2, r0
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	4413      	add	r3, r2
 800450a:	617b      	str	r3, [r7, #20]
      
      /* Right Speaker Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPK_RIGHT_VOL, &tmp, 2);      
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f103 0018 	add.w	r0, r3, #24
 8004512:	f107 0212 	add.w	r2, r7, #18
 8004516:	2302      	movs	r3, #2
 8004518:	2127      	movs	r1, #39	; 0x27
 800451a:	f000 fd7f 	bl	800501c <wm8994_write_reg>
 800451e:	4602      	mov	r2, r0
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	4413      	add	r3, r2
 8004524:	617b      	str	r3, [r7, #20]
 8004526:	e03a      	b.n	800459e <WM8994_SetVolume+0x19e>
    }
  }
  else /* Input volume: VOLUME_INPUT */
  {
    tmp = Volume | 0x100U;
 8004528:	79fb      	ldrb	r3, [r7, #7]
 800452a:	b29b      	uxth	r3, r3
 800452c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004530:	b29b      	uxth	r3, r3
 8004532:	827b      	strh	r3, [r7, #18]
    
    /* Left AIF1 ADC1 volume */
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LEFT_VOL, &tmp, 2); 
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f103 0018 	add.w	r0, r3, #24
 800453a:	f107 0212 	add.w	r2, r7, #18
 800453e:	2302      	movs	r3, #2
 8004540:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004544:	f000 fd6a 	bl	800501c <wm8994_write_reg>
 8004548:	6178      	str	r0, [r7, #20]
    
    /* Right AIF1 ADC1 volume */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RIGHT_VOL, &tmp, 2); 
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f103 0018 	add.w	r0, r3, #24
 8004550:	f107 0212 	add.w	r2, r7, #18
 8004554:	2302      	movs	r3, #2
 8004556:	f240 4101 	movw	r1, #1025	; 0x401
 800455a:	f000 fd5f 	bl	800501c <wm8994_write_reg>
 800455e:	4602      	mov	r2, r0
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	4413      	add	r3, r2
 8004564:	617b      	str	r3, [r7, #20]
    
    /* Left AIF1 ADC2 volume */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_LEFT_VOL, &tmp, 2); 
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f103 0018 	add.w	r0, r3, #24
 800456c:	f107 0212 	add.w	r2, r7, #18
 8004570:	2302      	movs	r3, #2
 8004572:	f240 4104 	movw	r1, #1028	; 0x404
 8004576:	f000 fd51 	bl	800501c <wm8994_write_reg>
 800457a:	4602      	mov	r2, r0
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	4413      	add	r3, r2
 8004580:	617b      	str	r3, [r7, #20]
    
    /* Right AIF1 ADC2 volume */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_RIGHT_VOL, &tmp, 2); 
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f103 0018 	add.w	r0, r3, #24
 8004588:	f107 0212 	add.w	r2, r7, #18
 800458c:	2302      	movs	r3, #2
 800458e:	f240 4105 	movw	r1, #1029	; 0x405
 8004592:	f000 fd43 	bl	800501c <wm8994_write_reg>
 8004596:	4602      	mov	r2, r0
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	4413      	add	r3, r2
 800459c:	617b      	str	r3, [r7, #20]
  }
  
  if(ret != WM8994_OK)
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d002      	beq.n	80045aa <WM8994_SetVolume+0x1aa>
  {
    ret = WM8994_ERROR;
 80045a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80045a8:	617b      	str	r3, [r7, #20]
  }
  
  return ret;
 80045aa:	697b      	ldr	r3, [r7, #20]
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3718      	adds	r7, #24
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <WM8994_GetVolume>:
  * @param  InputOutput Input or Output volume
  * @param  Volume audio volume 
  * @retval Component status
  */
int32_t WM8994_GetVolume(WM8994_Object_t *pObj, uint32_t InputOutput, uint8_t *Volume)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b086      	sub	sp, #24
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	607a      	str	r2, [r7, #4]
  int32_t ret = WM8994_OK;  
 80045c0:	2300      	movs	r3, #0
 80045c2:	617b      	str	r3, [r7, #20]
  uint16_t invertedvol;
  
  /* Output volume */
  if (InputOutput == VOLUME_OUTPUT)
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d11e      	bne.n	8004608 <WM8994_GetVolume+0x54>
  {
    if(wm8994_lo_hpout1l_vol_r(&pObj->Ctx, &invertedvol) != WM8994_OK)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	3318      	adds	r3, #24
 80045ce:	f107 0212 	add.w	r2, r7, #18
 80045d2:	4611      	mov	r1, r2
 80045d4:	4618      	mov	r0, r3
 80045d6:	f000 fd6a 	bl	80050ae <wm8994_lo_hpout1l_vol_r>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d003      	beq.n	80045e8 <WM8994_GetVolume+0x34>
    {
      ret = WM8994_ERROR;
 80045e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80045e4:	617b      	str	r3, [r7, #20]
 80045e6:	e02d      	b.n	8004644 <WM8994_GetVolume+0x90>
    }
    else
    {
      *Volume = VOLUME_OUT_INVERT(invertedvol);
 80045e8:	8a7b      	ldrh	r3, [r7, #18]
 80045ea:	461a      	mov	r2, r3
 80045ec:	2364      	movs	r3, #100	; 0x64
 80045ee:	fb03 f302 	mul.w	r3, r3, r2
 80045f2:	4a17      	ldr	r2, [pc, #92]	; (8004650 <WM8994_GetVolume+0x9c>)
 80045f4:	fb82 1203 	smull	r1, r2, r2, r3
 80045f8:	441a      	add	r2, r3
 80045fa:	1152      	asrs	r2, r2, #5
 80045fc:	17db      	asrs	r3, r3, #31
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	b2da      	uxtb	r2, r3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	701a      	strb	r2, [r3, #0]
 8004606:	e01d      	b.n	8004644 <WM8994_GetVolume+0x90>
    }
  }
  else /* Input volume: VOLUME_INPUT */
  {
    if(wm8994_aif1_adc1_left_vol_adc1l_r(&pObj->Ctx, &invertedvol) != WM8994_OK)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	3318      	adds	r3, #24
 800460c:	f107 0212 	add.w	r2, r7, #18
 8004610:	4611      	mov	r1, r2
 8004612:	4618      	mov	r0, r3
 8004614:	f000 fe60 	bl	80052d8 <wm8994_aif1_adc1_left_vol_adc1l_r>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d003      	beq.n	8004626 <WM8994_GetVolume+0x72>
    {
      ret = WM8994_ERROR;
 800461e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004622:	617b      	str	r3, [r7, #20]
 8004624:	e00e      	b.n	8004644 <WM8994_GetVolume+0x90>
    }
    else
    {
      *Volume = VOLUME_IN_INVERT(invertedvol);
 8004626:	8a7b      	ldrh	r3, [r7, #18]
 8004628:	461a      	mov	r2, r3
 800462a:	2364      	movs	r3, #100	; 0x64
 800462c:	fb03 f302 	mul.w	r3, r3, r2
 8004630:	4a08      	ldr	r2, [pc, #32]	; (8004654 <WM8994_GetVolume+0xa0>)
 8004632:	fb82 1203 	smull	r1, r2, r2, r3
 8004636:	441a      	add	r2, r3
 8004638:	11d2      	asrs	r2, r2, #7
 800463a:	17db      	asrs	r3, r3, #31
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	b2da      	uxtb	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	701a      	strb	r2, [r3, #0]
    }
  }
  
  return ret;
 8004644:	697b      	ldr	r3, [r7, #20]
}
 8004646:	4618      	mov	r0, r3
 8004648:	3718      	adds	r7, #24
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	82082083 	.word	0x82082083
 8004654:	891ac73b 	.word	0x891ac73b

08004658 <WM8994_SetMute>:
  * @param Cmd  WM8994_MUTE_ON to enable the mute or WM8994_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
int32_t WM8994_SetMute(WM8994_Object_t *pObj, uint32_t Cmd)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t tmp;
  
  /* Set the Mute mode */
  if(Cmd == WM8994_MUTE_ON)
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	2b01      	cmp	r3, #1
 8004666:	d11c      	bne.n	80046a2 <WM8994_SetMute+0x4a>
  { 
    tmp = 0x0200;
 8004668:	f44f 7300 	mov.w	r3, #512	; 0x200
 800466c:	817b      	strh	r3, [r7, #10]
    /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f103 0018 	add.w	r0, r3, #24
 8004674:	f107 020a 	add.w	r2, r7, #10
 8004678:	2302      	movs	r3, #2
 800467a:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800467e:	f000 fccd 	bl	800501c <wm8994_write_reg>
 8004682:	60f8      	str	r0, [r7, #12]
    
    /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f103 0018 	add.w	r0, r3, #24
 800468a:	f107 020a 	add.w	r2, r7, #10
 800468e:	2302      	movs	r3, #2
 8004690:	f240 4122 	movw	r1, #1058	; 0x422
 8004694:	f000 fcc2 	bl	800501c <wm8994_write_reg>
 8004698:	4602      	mov	r2, r0
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	4413      	add	r3, r2
 800469e:	60fb      	str	r3, [r7, #12]
 80046a0:	e01a      	b.n	80046d8 <WM8994_SetMute+0x80>
  }
  else /* WM8994_MUTE_OFF Disable the Mute */
  {
    tmp = 0x0010;
 80046a2:	2310      	movs	r3, #16
 80046a4:	817b      	strh	r3, [r7, #10]
    /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f103 0018 	add.w	r0, r3, #24
 80046ac:	f107 020a 	add.w	r2, r7, #10
 80046b0:	2302      	movs	r3, #2
 80046b2:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80046b6:	f000 fcb1 	bl	800501c <wm8994_write_reg>
 80046ba:	60f8      	str	r0, [r7, #12]
    
    /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f103 0018 	add.w	r0, r3, #24
 80046c2:	f107 020a 	add.w	r2, r7, #10
 80046c6:	2302      	movs	r3, #2
 80046c8:	f240 4122 	movw	r1, #1058	; 0x422
 80046cc:	f000 fca6 	bl	800501c <wm8994_write_reg>
 80046d0:	4602      	mov	r2, r0
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	4413      	add	r3, r2
 80046d6:	60fb      	str	r3, [r7, #12]
  }
  
  if(ret != WM8994_OK)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d002      	beq.n	80046e4 <WM8994_SetMute+0x8c>
  {
    ret = WM8994_ERROR;
 80046de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80046e2:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 80046e4:	68fb      	ldr	r3, [r7, #12]
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3710      	adds	r7, #16
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}

080046ee <WM8994_SetOutputMode>:
  * @param Output  specifies the audio output target: WM8994_OUT_SPEAKER,
  *         WM8994_OUT_HEADPHONE, WM8994_OUT_BOTH or WM8994_OUT_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
int32_t WM8994_SetOutputMode(WM8994_Object_t *pObj, uint32_t Output)
{
 80046ee:	b580      	push	{r7, lr}
 80046f0:	b084      	sub	sp, #16
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
 80046f6:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t tmp;
  
  if((Output == WM8994_OUT_HEADPHONE) || (Output == WM8994_OUT_AUTO))
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d003      	beq.n	8004706 <WM8994_SetOutputMode+0x18>
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	2b04      	cmp	r3, #4
 8004702:	f040 809c 	bne.w	800483e <WM8994_SetOutputMode+0x150>
  {
    /* Disable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    tmp = 0x0000;
 8004706:	2300      	movs	r3, #0
 8004708:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f103 0018 	add.w	r0, r3, #24
 8004710:	f107 020a 	add.w	r2, r7, #10
 8004714:	2302      	movs	r3, #2
 8004716:	2101      	movs	r1, #1
 8004718:	f000 fc80 	bl	800501c <wm8994_write_reg>
 800471c:	60f8      	str	r0, [r7, #12]
    
    /* Disable DAC1 (Left), Disable DAC1 (Right),
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    tmp = 0x0303;
 800471e:	f240 3303 	movw	r3, #771	; 0x303
 8004722:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f103 0018 	add.w	r0, r3, #24
 800472a:	f107 020a 	add.w	r2, r7, #10
 800472e:	2302      	movs	r3, #2
 8004730:	2105      	movs	r1, #5
 8004732:	f000 fc73 	bl	800501c <wm8994_write_reg>
 8004736:	4602      	mov	r2, r0
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	4413      	add	r3, r2
 800473c:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    tmp = 0x0001;
 800473e:	2301      	movs	r3, #1
 8004740:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f103 0018 	add.w	r0, r3, #24
 8004748:	f107 020a 	add.w	r2, r7, #10
 800474c:	2302      	movs	r3, #2
 800474e:	f240 6101 	movw	r1, #1537	; 0x601
 8004752:	f000 fc63 	bl	800501c <wm8994_write_reg>
 8004756:	4602      	mov	r2, r0
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	4413      	add	r3, r2
 800475c:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f103 0018 	add.w	r0, r3, #24
 8004764:	f107 020a 	add.w	r2, r7, #10
 8004768:	2302      	movs	r3, #2
 800476a:	f240 6102 	movw	r1, #1538	; 0x602
 800476e:	f000 fc55 	bl	800501c <wm8994_write_reg>
 8004772:	4602      	mov	r2, r0
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	4413      	add	r3, r2
 8004778:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    tmp = 0x0000;
 800477a:	2300      	movs	r3, #0
 800477c:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f103 0018 	add.w	r0, r3, #24
 8004784:	f107 020a 	add.w	r2, r7, #10
 8004788:	2302      	movs	r3, #2
 800478a:	f240 6104 	movw	r1, #1540	; 0x604
 800478e:	f000 fc45 	bl	800501c <wm8994_write_reg>
 8004792:	4602      	mov	r2, r0
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	4413      	add	r3, r2
 8004798:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f103 0018 	add.w	r0, r3, #24
 80047a0:	f107 020a 	add.w	r2, r7, #10
 80047a4:	2302      	movs	r3, #2
 80047a6:	f240 6105 	movw	r1, #1541	; 0x605
 80047aa:	f000 fc37 	bl	800501c <wm8994_write_reg>
 80047ae:	4602      	mov	r2, r0
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	4413      	add	r3, r2
 80047b4:	60fb      	str	r3, [r7, #12]
    
    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    tmp = 0x0100;
 80047b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80047ba:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f103 0018 	add.w	r0, r3, #24
 80047c2:	f107 020a 	add.w	r2, r7, #10
 80047c6:	2302      	movs	r3, #2
 80047c8:	212d      	movs	r1, #45	; 0x2d
 80047ca:	f000 fc27 	bl	800501c <wm8994_write_reg>
 80047ce:	4602      	mov	r2, r0
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	4413      	add	r3, r2
 80047d4:	60fb      	str	r3, [r7, #12]
    
    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f103 0018 	add.w	r0, r3, #24
 80047dc:	f107 020a 	add.w	r2, r7, #10
 80047e0:	2302      	movs	r3, #2
 80047e2:	212e      	movs	r1, #46	; 0x2e
 80047e4:	f000 fc1a 	bl	800501c <wm8994_write_reg>
 80047e8:	4602      	mov	r2, r0
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	4413      	add	r3, r2
 80047ee:	60fb      	str	r3, [r7, #12]
    
    /* Startup sequence for Headphone */
    /* Enable/Start the write sequencer */
    tmp = 0x8100;
 80047f0:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80047f4:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_WRITE_SEQ_CTRL1, &tmp, 2);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f103 0018 	add.w	r0, r3, #24
 80047fc:	f107 020a 	add.w	r2, r7, #10
 8004800:	2302      	movs	r3, #2
 8004802:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004806:	f000 fc09 	bl	800501c <wm8994_write_reg>
 800480a:	4602      	mov	r2, r0
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	4413      	add	r3, r2
 8004810:	60fb      	str	r3, [r7, #12]
    
    /* Add Delay */
    (void)WM8994_Delay(pObj, 300);
 8004812:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 fb88 	bl	8004f2c <WM8994_Delay>
    
    /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
    tmp = 0x0000;
 800481c:	2300      	movs	r3, #0
 800481e:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);    
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f103 0018 	add.w	r0, r3, #24
 8004826:	f107 020a 	add.w	r2, r7, #10
 800482a:	2302      	movs	r3, #2
 800482c:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8004830:	f000 fbf4 	bl	800501c <wm8994_write_reg>
 8004834:	4602      	mov	r2, r0
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	4413      	add	r3, r2
 800483a:	60fb      	str	r3, [r7, #12]
 800483c:	e165      	b.n	8004b0a <WM8994_SetOutputMode+0x41c>
  }
  else
  {    
    switch (Output) 
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	2b01      	cmp	r3, #1
 8004842:	d149      	bne.n	80048d8 <WM8994_SetOutputMode+0x1ea>
    {    
    case WM8994_OUT_SPEAKER: 
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      tmp = 0x0C0C;
 8004844:	f640 430c 	movw	r3, #3084	; 0xc0c
 8004848:	817b      	strh	r3, [r7, #10]
      ret = wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f103 0018 	add.w	r0, r3, #24
 8004850:	f107 020a 	add.w	r2, r7, #10
 8004854:	2302      	movs	r3, #2
 8004856:	2105      	movs	r1, #5
 8004858:	f000 fbe0 	bl	800501c <wm8994_write_reg>
 800485c:	60f8      	str	r0, [r7, #12]
      
      /* Disable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      tmp = 0x0000;
 800485e:	2300      	movs	r3, #0
 8004860:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f103 0018 	add.w	r0, r3, #24
 8004868:	f107 020a 	add.w	r2, r7, #10
 800486c:	2302      	movs	r3, #2
 800486e:	f240 6101 	movw	r1, #1537	; 0x601
 8004872:	f000 fbd3 	bl	800501c <wm8994_write_reg>
 8004876:	4602      	mov	r2, r0
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	4413      	add	r3, r2
 800487c:	60fb      	str	r3, [r7, #12]
      
      /* Disable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f103 0018 	add.w	r0, r3, #24
 8004884:	f107 020a 	add.w	r2, r7, #10
 8004888:	2302      	movs	r3, #2
 800488a:	f240 6102 	movw	r1, #1538	; 0x602
 800488e:	f000 fbc5 	bl	800501c <wm8994_write_reg>
 8004892:	4602      	mov	r2, r0
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	4413      	add	r3, r2
 8004898:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      tmp = 0x0002;
 800489a:	2302      	movs	r3, #2
 800489c:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f103 0018 	add.w	r0, r3, #24
 80048a4:	f107 020a 	add.w	r2, r7, #10
 80048a8:	2302      	movs	r3, #2
 80048aa:	f240 6104 	movw	r1, #1540	; 0x604
 80048ae:	f000 fbb5 	bl	800501c <wm8994_write_reg>
 80048b2:	4602      	mov	r2, r0
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	4413      	add	r3, r2
 80048b8:	60fb      	str	r3, [r7, #12]
      
      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f103 0018 	add.w	r0, r3, #24
 80048c0:	f107 020a 	add.w	r2, r7, #10
 80048c4:	2302      	movs	r3, #2
 80048c6:	f240 6105 	movw	r1, #1541	; 0x605
 80048ca:	f000 fba7 	bl	800501c <wm8994_write_reg>
 80048ce:	4602      	mov	r2, r0
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	4413      	add	r3, r2
 80048d4:	60fb      	str	r3, [r7, #12]
      break;
 80048d6:	e03b      	b.n	8004950 <WM8994_SetOutputMode+0x262>
      
    case WM8994_OUT_BOTH:
    default:  
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      also Enable DAC2 (Left), Enable DAC2 (Right)*/
      tmp = 0x0F0F;
 80048d8:	f640 730f 	movw	r3, #3855	; 0xf0f
 80048dc:	817b      	strh	r3, [r7, #10]
      ret = wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f103 0018 	add.w	r0, r3, #24
 80048e4:	f107 020a 	add.w	r2, r7, #10
 80048e8:	2302      	movs	r3, #2
 80048ea:	2105      	movs	r1, #5
 80048ec:	f000 fb96 	bl	800501c <wm8994_write_reg>
 80048f0:	60f8      	str	r0, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      tmp = 0x0001;
 80048f2:	2301      	movs	r3, #1
 80048f4:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f103 0018 	add.w	r0, r3, #24
 80048fc:	f107 020a 	add.w	r2, r7, #10
 8004900:	2302      	movs	r3, #2
 8004902:	f240 6101 	movw	r1, #1537	; 0x601
 8004906:	f000 fb89 	bl	800501c <wm8994_write_reg>
 800490a:	4602      	mov	r2, r0
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	4413      	add	r3, r2
 8004910:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f103 0018 	add.w	r0, r3, #24
 8004918:	f107 020a 	add.w	r2, r7, #10
 800491c:	2302      	movs	r3, #2
 800491e:	f240 6102 	movw	r1, #1538	; 0x602
 8004922:	f000 fb7b 	bl	800501c <wm8994_write_reg>
 8004926:	4602      	mov	r2, r0
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	4413      	add	r3, r2
 800492c:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      tmp = 0x0002;
 800492e:	2302      	movs	r3, #2
 8004930:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);      
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f103 0018 	add.w	r0, r3, #24
 8004938:	f107 020a 	add.w	r2, r7, #10
 800493c:	2302      	movs	r3, #2
 800493e:	f240 6104 	movw	r1, #1540	; 0x604
 8004942:	f000 fb6b 	bl	800501c <wm8994_write_reg>
 8004946:	4602      	mov	r2, r0
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	4413      	add	r3, r2
 800494c:	60fb      	str	r3, [r7, #12]
      break;
 800494e:	bf00      	nop
    }
    
    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    tmp = 0x0300;
 8004950:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004954:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f103 0018 	add.w	r0, r3, #24
 800495c:	f107 020a 	add.w	r2, r7, #10
 8004960:	2302      	movs	r3, #2
 8004962:	2103      	movs	r1, #3
 8004964:	f000 fb5a 	bl	800501c <wm8994_write_reg>
 8004968:	4602      	mov	r2, r0
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	4413      	add	r3, r2
 800496e:	60fb      	str	r3, [r7, #12]
    
    /* Left Speaker Mixer Volume = 0dB */
    tmp = 0x0000;
 8004970:	2300      	movs	r3, #0
 8004972:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPKMIXL_ATT, &tmp, 2);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f103 0018 	add.w	r0, r3, #24
 800497a:	f107 020a 	add.w	r2, r7, #10
 800497e:	2302      	movs	r3, #2
 8004980:	2122      	movs	r1, #34	; 0x22
 8004982:	f000 fb4b 	bl	800501c <wm8994_write_reg>
 8004986:	4602      	mov	r2, r0
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	4413      	add	r3, r2
 800498c:	60fb      	str	r3, [r7, #12]
    
    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPKMIXR_ATT, &tmp, 2);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f103 0018 	add.w	r0, r3, #24
 8004994:	f107 020a 	add.w	r2, r7, #10
 8004998:	2302      	movs	r3, #2
 800499a:	2123      	movs	r1, #35	; 0x23
 800499c:	f000 fb3e 	bl	800501c <wm8994_write_reg>
 80049a0:	4602      	mov	r2, r0
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	4413      	add	r3, r2
 80049a6:	60fb      	str	r3, [r7, #12]
    
    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    tmp = 0x0300;
 80049a8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80049ac:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPEAKER_MIXER, &tmp, 2);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f103 0018 	add.w	r0, r3, #24
 80049b4:	f107 020a 	add.w	r2, r7, #10
 80049b8:	2302      	movs	r3, #2
 80049ba:	2136      	movs	r1, #54	; 0x36
 80049bc:	f000 fb2e 	bl	800501c <wm8994_write_reg>
 80049c0:	4602      	mov	r2, r0
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	4413      	add	r3, r2
 80049c6:	60fb      	str	r3, [r7, #12]
    
    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    tmp = 0x3003;
 80049c8:	f243 0303 	movw	r3, #12291	; 0x3003
 80049cc:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f103 0018 	add.w	r0, r3, #24
 80049d4:	f107 020a 	add.w	r2, r7, #10
 80049d8:	2302      	movs	r3, #2
 80049da:	2101      	movs	r1, #1
 80049dc:	f000 fb1e 	bl	800501c <wm8994_write_reg>
 80049e0:	4602      	mov	r2, r0
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	4413      	add	r3, r2
 80049e6:	60fb      	str	r3, [r7, #12]
    /* Headphone/Speaker Enable */
    
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    tmp = 0x0005;
 80049e8:	2305      	movs	r3, #5
 80049ea:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLASS_W, &tmp, 2);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f103 0018 	add.w	r0, r3, #24
 80049f2:	f107 020a 	add.w	r2, r7, #10
 80049f6:	2302      	movs	r3, #2
 80049f8:	2151      	movs	r1, #81	; 0x51
 80049fa:	f000 fb0f 	bl	800501c <wm8994_write_reg>
 80049fe:	4602      	mov	r2, r0
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	4413      	add	r3, r2
 8004a04:	60fb      	str	r3, [r7, #12]
    
    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    tmp = 0x3303;
 8004a06:	f243 3303 	movw	r3, #13059	; 0x3303
 8004a0a:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f103 0018 	add.w	r0, r3, #24
 8004a12:	f107 020a 	add.w	r2, r7, #10
 8004a16:	2302      	movs	r3, #2
 8004a18:	2101      	movs	r1, #1
 8004a1a:	f000 faff 	bl	800501c <wm8994_write_reg>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	4413      	add	r3, r2
 8004a24:	60fb      	str	r3, [r7, #12]
    
    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    tmp = 0x0022;
 8004a26:	2322      	movs	r3, #34	; 0x22
 8004a28:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANALOG_HP, &tmp, 2);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f103 0018 	add.w	r0, r3, #24
 8004a30:	f107 020a 	add.w	r2, r7, #10
 8004a34:	2302      	movs	r3, #2
 8004a36:	2160      	movs	r1, #96	; 0x60
 8004a38:	f000 faf0 	bl	800501c <wm8994_write_reg>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	4413      	add	r3, r2
 8004a42:	60fb      	str	r3, [r7, #12]
    
    /* Enable Charge Pump */
    tmp = 0x9F25;
 8004a44:	f649 7325 	movw	r3, #40741	; 0x9f25
 8004a48:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_CHARGE_PUMP1, &tmp, 2);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f103 0018 	add.w	r0, r3, #24
 8004a50:	f107 020a 	add.w	r2, r7, #10
 8004a54:	2302      	movs	r3, #2
 8004a56:	214c      	movs	r1, #76	; 0x4c
 8004a58:	f000 fae0 	bl	800501c <wm8994_write_reg>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	4413      	add	r3, r2
 8004a62:	60fb      	str	r3, [r7, #12]
    
    /* Add Delay */
    (void)WM8994_Delay(pObj, 15);
 8004a64:	210f      	movs	r1, #15
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 fa60 	bl	8004f2c <WM8994_Delay>
    
    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    tmp = 0x0001;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f103 0018 	add.w	r0, r3, #24
 8004a76:	f107 020a 	add.w	r2, r7, #10
 8004a7a:	2302      	movs	r3, #2
 8004a7c:	212d      	movs	r1, #45	; 0x2d
 8004a7e:	f000 facd 	bl	800501c <wm8994_write_reg>
 8004a82:	4602      	mov	r2, r0
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	4413      	add	r3, r2
 8004a88:	60fb      	str	r3, [r7, #12]
    
    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f103 0018 	add.w	r0, r3, #24
 8004a90:	f107 020a 	add.w	r2, r7, #10
 8004a94:	2302      	movs	r3, #2
 8004a96:	212e      	movs	r1, #46	; 0x2e
 8004a98:	f000 fac0 	bl	800501c <wm8994_write_reg>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	4413      	add	r3, r2
 8004aa2:	60fb      	str	r3, [r7, #12]
    
    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    tmp = 0x0330;
 8004aa4:	f44f 734c 	mov.w	r3, #816	; 0x330
 8004aa8:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f103 0018 	add.w	r0, r3, #24
 8004ab0:	f107 020a 	add.w	r2, r7, #10
 8004ab4:	2302      	movs	r3, #2
 8004ab6:	2103      	movs	r1, #3
 8004ab8:	f000 fab0 	bl	800501c <wm8994_write_reg>
 8004abc:	4602      	mov	r2, r0
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	60fb      	str	r3, [r7, #12]
    
    /* Enable DC Servo and trigger start-up mode on left and right channels */
    tmp = 0x0033;
 8004ac4:	2333      	movs	r3, #51	; 0x33
 8004ac6:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DC_SERVO1, &tmp, 2);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f103 0018 	add.w	r0, r3, #24
 8004ace:	f107 020a 	add.w	r2, r7, #10
 8004ad2:	2302      	movs	r3, #2
 8004ad4:	2154      	movs	r1, #84	; 0x54
 8004ad6:	f000 faa1 	bl	800501c <wm8994_write_reg>
 8004ada:	4602      	mov	r2, r0
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	4413      	add	r3, r2
 8004ae0:	60fb      	str	r3, [r7, #12]
    
    /* Add Delay */
    (void)WM8994_Delay(pObj, 257);
 8004ae2:	f240 1101 	movw	r1, #257	; 0x101
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 fa20 	bl	8004f2c <WM8994_Delay>
    
    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    tmp = 0x00EE;
 8004aec:	23ee      	movs	r3, #238	; 0xee
 8004aee:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANALOG_HP, &tmp, 2);    
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f103 0018 	add.w	r0, r3, #24
 8004af6:	f107 020a 	add.w	r2, r7, #10
 8004afa:	2302      	movs	r3, #2
 8004afc:	2160      	movs	r1, #96	; 0x60
 8004afe:	f000 fa8d 	bl	800501c <wm8994_write_reg>
 8004b02:	4602      	mov	r2, r0
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	4413      	add	r3, r2
 8004b08:	60fb      	str	r3, [r7, #12]
  }
  
  if(ret != WM8994_OK)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d002      	beq.n	8004b16 <WM8994_SetOutputMode+0x428>
  {
    ret = WM8994_ERROR;
 8004b10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b14:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8004b16:	68fb      	ldr	r3, [r7, #12]
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3710      	adds	r7, #16
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <WM8994_SetResolution>:
  *                    WM8994_RESOLUTION_16b, WM8994_RESOLUTION_20b, 
  *                    WM8994_RESOLUTION_24b or WM8994_RESOLUTION_32b
  * @retval Component status
  */
int32_t WM8994_SetResolution(WM8994_Object_t *pObj, uint32_t Resolution)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
  int32_t ret = WM8994_OK;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	60fb      	str	r3, [r7, #12]
  
  if(wm8994_aif1_control1_wl(&pObj->Ctx, (uint16_t)Resolution) != WM8994_OK)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	3318      	adds	r3, #24
 8004b32:	683a      	ldr	r2, [r7, #0]
 8004b34:	b292      	uxth	r2, r2
 8004b36:	4611      	mov	r1, r2
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f000 fb4b 	bl	80051d4 <wm8994_aif1_control1_wl>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d002      	beq.n	8004b4a <WM8994_SetResolution+0x2a>
  {
    ret = WM8994_ERROR;
 8004b44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b48:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3710      	adds	r7, #16
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <WM8994_GetResolution>:
  * @brief Get Audio resolution.
  * @param pObj pointer to component object
  * @retval Audio resolution
  */
int32_t WM8994_GetResolution(WM8994_Object_t *pObj, uint32_t *Resolution)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
  int32_t ret = WM8994_OK;  
 8004b5e:	2300      	movs	r3, #0
 8004b60:	60fb      	str	r3, [r7, #12]
  uint16_t resolution = 0;
 8004b62:	2300      	movs	r3, #0
 8004b64:	817b      	strh	r3, [r7, #10]
  
  if(wm8994_aif1_control1_wl_r(&pObj->Ctx, &resolution) != WM8994_OK)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	3318      	adds	r3, #24
 8004b6a:	f107 020a 	add.w	r2, r7, #10
 8004b6e:	4611      	mov	r1, r2
 8004b70:	4618      	mov	r0, r3
 8004b72:	f000 fb5f 	bl	8005234 <wm8994_aif1_control1_wl_r>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d003      	beq.n	8004b84 <WM8994_GetResolution+0x30>
  {
    ret = WM8994_ERROR;
 8004b7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b80:	60fb      	str	r3, [r7, #12]
 8004b82:	e021      	b.n	8004bc8 <WM8994_GetResolution+0x74>
  }
  else
  {
    switch(resolution)
 8004b84:	897b      	ldrh	r3, [r7, #10]
 8004b86:	2b03      	cmp	r3, #3
 8004b88:	d81a      	bhi.n	8004bc0 <WM8994_GetResolution+0x6c>
 8004b8a:	a201      	add	r2, pc, #4	; (adr r2, 8004b90 <WM8994_GetResolution+0x3c>)
 8004b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b90:	08004ba1 	.word	0x08004ba1
 8004b94:	08004ba9 	.word	0x08004ba9
 8004b98:	08004bb1 	.word	0x08004bb1
 8004b9c:	08004bb9 	.word	0x08004bb9
    {
    case 0:
      *Resolution = WM8994_RESOLUTION_16b;
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	601a      	str	r2, [r3, #0]
      break;
 8004ba6:	e00f      	b.n	8004bc8 <WM8994_GetResolution+0x74>
    case 1:
      *Resolution = WM8994_RESOLUTION_20b;
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	2201      	movs	r2, #1
 8004bac:	601a      	str	r2, [r3, #0]
      break;
 8004bae:	e00b      	b.n	8004bc8 <WM8994_GetResolution+0x74>
    case 2:
      *Resolution = WM8994_RESOLUTION_24b;
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	601a      	str	r2, [r3, #0]
      break;
 8004bb6:	e007      	b.n	8004bc8 <WM8994_GetResolution+0x74>
    case 3:
      *Resolution = WM8994_RESOLUTION_32b;
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	2203      	movs	r2, #3
 8004bbc:	601a      	str	r2, [r3, #0]
      break; 
 8004bbe:	e003      	b.n	8004bc8 <WM8994_GetResolution+0x74>
    default:
      *Resolution = WM8994_RESOLUTION_16b;
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	601a      	str	r2, [r3, #0]
      break;
 8004bc6:	bf00      	nop
    }
  }
  
  return ret;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3710      	adds	r7, #16
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop

08004bd4 <WM8994_SetProtocol>:
  *                  WM8994_PROTOCOL_R_JUSTIFIED, WM8994_PROTOCOL_L_JUSTIFIED, 
  *                  WM8994_PROTOCOL_I2S or WM8994_PROTOCOL_DSP
  * @retval Component status
  */
int32_t WM8994_SetProtocol(WM8994_Object_t *pObj, uint32_t Protocol)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b084      	sub	sp, #16
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
  int32_t ret = WM8994_OK; 
 8004bde:	2300      	movs	r3, #0
 8004be0:	60fb      	str	r3, [r7, #12]
  
  if(wm8994_aif1_control1_fmt(&pObj->Ctx, (uint16_t)Protocol) != WM8994_OK)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	3318      	adds	r3, #24
 8004be6:	683a      	ldr	r2, [r7, #0]
 8004be8:	b292      	uxth	r2, r2
 8004bea:	4611      	mov	r1, r2
 8004bec:	4618      	mov	r0, r3
 8004bee:	f000 fa9f 	bl	8005130 <wm8994_aif1_control1_fmt>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d002      	beq.n	8004bfe <WM8994_SetProtocol+0x2a>
  {
    ret = WM8994_ERROR;
 8004bf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004bfc:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;  
 8004bfe:	68fb      	ldr	r3, [r7, #12]
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3710      	adds	r7, #16
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <WM8994_GetProtocol>:
  * @brief Get Audio Protocol.
  * @param pObj pointer to component object
  * @retval Component status
  */
int32_t WM8994_GetProtocol(WM8994_Object_t *pObj, uint32_t *Protocol)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
  int32_t ret = WM8994_OK;  
 8004c12:	2300      	movs	r3, #0
 8004c14:	60fb      	str	r3, [r7, #12]
  uint16_t protocol;
  
  if(wm8994_aif1_control1_fmt_r(&pObj->Ctx, &protocol) != WM8994_OK)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	3318      	adds	r3, #24
 8004c1a:	f107 020a 	add.w	r2, r7, #10
 8004c1e:	4611      	mov	r1, r2
 8004c20:	4618      	mov	r0, r3
 8004c22:	f000 fab5 	bl	8005190 <wm8994_aif1_control1_fmt_r>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d003      	beq.n	8004c34 <WM8994_GetProtocol+0x2c>
  {
    ret = WM8994_ERROR;
 8004c2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c30:	60fb      	str	r3, [r7, #12]
 8004c32:	e003      	b.n	8004c3c <WM8994_GetProtocol+0x34>
  }
  else
  {
    *Protocol = protocol;
 8004c34:	897b      	ldrh	r3, [r7, #10]
 8004c36:	461a      	mov	r2, r3
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	601a      	str	r2, [r3, #0]
  }
  
  return ret;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3710      	adds	r7, #16
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
	...

08004c48 <WM8994_SetFrequency>:
  * @param pObj pointer to component object
  * @param AudioFreq Audio frequency
  * @retval Component status
  */
int32_t WM8994_SetFrequency(WM8994_Object_t *pObj, uint32_t AudioFreq)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t tmp;
  
  switch (AudioFreq)
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	4a55      	ldr	r2, [pc, #340]	; (8004dac <WM8994_SetFrequency+0x164>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d05d      	beq.n	8004d16 <WM8994_SetFrequency+0xce>
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	4a53      	ldr	r2, [pc, #332]	; (8004dac <WM8994_SetFrequency+0x164>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	f200 8091 	bhi.w	8004d86 <WM8994_SetFrequency+0x13e>
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	f64a 4244 	movw	r2, #44100	; 0xac44
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d07d      	beq.n	8004d6a <WM8994_SetFrequency+0x122>
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	f64a 4244 	movw	r2, #44100	; 0xac44
 8004c74:	4293      	cmp	r3, r2
 8004c76:	f200 8086 	bhi.w	8004d86 <WM8994_SetFrequency+0x13e>
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8004c80:	d03b      	beq.n	8004cfa <WM8994_SetFrequency+0xb2>
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8004c88:	d87d      	bhi.n	8004d86 <WM8994_SetFrequency+0x13e>
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	f245 6222 	movw	r2, #22050	; 0x5622
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d05c      	beq.n	8004d4e <WM8994_SetFrequency+0x106>
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	f245 6222 	movw	r2, #22050	; 0x5622
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d873      	bhi.n	8004d86 <WM8994_SetFrequency+0x13e>
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8004ca4:	d01b      	beq.n	8004cde <WM8994_SetFrequency+0x96>
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8004cac:	d86b      	bhi.n	8004d86 <WM8994_SetFrequency+0x13e>
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8004cb4:	d005      	beq.n	8004cc2 <WM8994_SetFrequency+0x7a>
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	f642 3211 	movw	r2, #11025	; 0x2b11
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d038      	beq.n	8004d32 <WM8994_SetFrequency+0xea>
 8004cc0:	e061      	b.n	8004d86 <WM8994_SetFrequency+0x13e>
  {
  case  WM8994_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */
    tmp = 0x0003;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f103 0018 	add.w	r0, r3, #24
 8004ccc:	f107 020a 	add.w	r2, r7, #10
 8004cd0:	2302      	movs	r3, #2
 8004cd2:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004cd6:	f000 f9a1 	bl	800501c <wm8994_write_reg>
 8004cda:	60f8      	str	r0, [r7, #12]
    break;
 8004cdc:	e061      	b.n	8004da2 <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    tmp = 0x0033;
 8004cde:	2333      	movs	r3, #51	; 0x33
 8004ce0:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f103 0018 	add.w	r0, r3, #24
 8004ce8:	f107 020a 	add.w	r2, r7, #10
 8004cec:	2302      	movs	r3, #2
 8004cee:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004cf2:	f000 f993 	bl	800501c <wm8994_write_reg>
 8004cf6:	60f8      	str	r0, [r7, #12]
    break;
 8004cf8:	e053      	b.n	8004da2 <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */
    tmp = 0x0063;
 8004cfa:	2363      	movs	r3, #99	; 0x63
 8004cfc:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f103 0018 	add.w	r0, r3, #24
 8004d04:	f107 020a 	add.w	r2, r7, #10
 8004d08:	2302      	movs	r3, #2
 8004d0a:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004d0e:	f000 f985 	bl	800501c <wm8994_write_reg>
 8004d12:	60f8      	str	r0, [r7, #12]
    break;
 8004d14:	e045      	b.n	8004da2 <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */
    tmp = 0x00A3;
 8004d16:	23a3      	movs	r3, #163	; 0xa3
 8004d18:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f103 0018 	add.w	r0, r3, #24
 8004d20:	f107 020a 	add.w	r2, r7, #10
 8004d24:	2302      	movs	r3, #2
 8004d26:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004d2a:	f000 f977 	bl	800501c <wm8994_write_reg>
 8004d2e:	60f8      	str	r0, [r7, #12]
    break;
 8004d30:	e037      	b.n	8004da2 <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    tmp = 0x0013;
 8004d32:	2313      	movs	r3, #19
 8004d34:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f103 0018 	add.w	r0, r3, #24
 8004d3c:	f107 020a 	add.w	r2, r7, #10
 8004d40:	2302      	movs	r3, #2
 8004d42:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004d46:	f000 f969 	bl	800501c <wm8994_write_reg>
 8004d4a:	60f8      	str	r0, [r7, #12]
    break;
 8004d4c:	e029      	b.n	8004da2 <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    tmp = 0x0043;
 8004d4e:	2343      	movs	r3, #67	; 0x43
 8004d50:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f103 0018 	add.w	r0, r3, #24
 8004d58:	f107 020a 	add.w	r2, r7, #10
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004d62:	f000 f95b 	bl	800501c <wm8994_write_reg>
 8004d66:	60f8      	str	r0, [r7, #12]
    break;
 8004d68:	e01b      	b.n	8004da2 <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    tmp = 0x0073;
 8004d6a:	2373      	movs	r3, #115	; 0x73
 8004d6c:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f103 0018 	add.w	r0, r3, #24
 8004d74:	f107 020a 	add.w	r2, r7, #10
 8004d78:	2302      	movs	r3, #2
 8004d7a:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004d7e:	f000 f94d 	bl	800501c <wm8994_write_reg>
 8004d82:	60f8      	str	r0, [r7, #12]
    break; 
 8004d84:	e00d      	b.n	8004da2 <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_48K:    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */
    tmp = 0x0083;
 8004d86:	2383      	movs	r3, #131	; 0x83
 8004d88:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f103 0018 	add.w	r0, r3, #24
 8004d90:	f107 020a 	add.w	r2, r7, #10
 8004d94:	2302      	movs	r3, #2
 8004d96:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004d9a:	f000 f93f 	bl	800501c <wm8994_write_reg>
 8004d9e:	60f8      	str	r0, [r7, #12]
    break; 
 8004da0:	bf00      	nop
  }
  
  return ret;
 8004da2:	68fb      	ldr	r3, [r7, #12]
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3710      	adds	r7, #16
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	00017700 	.word	0x00017700

08004db0 <WM8994_GetFrequency>:
  * @param pObj pointer to component object
  * @param AudioFreq Audio frequency
  * @retval Component status
  */
int32_t WM8994_GetFrequency(WM8994_Object_t *pObj, uint32_t *AudioFreq)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  int32_t ret = WM8994_OK;   
 8004dba:	2300      	movs	r3, #0
 8004dbc:	60fb      	str	r3, [r7, #12]
  uint16_t freq = 0;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	817b      	strh	r3, [r7, #10]
  
  if(wm8994_aif1_sr_r(&pObj->Ctx, &freq) != WM8994_OK)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	3318      	adds	r3, #24
 8004dc6:	f107 020a 	add.w	r2, r7, #10
 8004dca:	4611      	mov	r1, r2
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f000 f98d 	bl	80050ec <wm8994_aif1_sr_r>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d003      	beq.n	8004de0 <WM8994_GetFrequency+0x30>
  {
    ret = WM8994_ERROR;
 8004dd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ddc:	60fb      	str	r3, [r7, #12]
 8004dde:	e043      	b.n	8004e68 <WM8994_GetFrequency+0xb8>
  }
  else
  {
    switch(freq)
 8004de0:	897b      	ldrh	r3, [r7, #10]
 8004de2:	2b0a      	cmp	r3, #10
 8004de4:	d83f      	bhi.n	8004e66 <WM8994_GetFrequency+0xb6>
 8004de6:	a201      	add	r2, pc, #4	; (adr r2, 8004dec <WM8994_GetFrequency+0x3c>)
 8004de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dec:	08004e19 	.word	0x08004e19
 8004df0:	08004e23 	.word	0x08004e23
 8004df4:	08004e67 	.word	0x08004e67
 8004df8:	08004e2d 	.word	0x08004e2d
 8004dfc:	08004e37 	.word	0x08004e37
 8004e00:	08004e67 	.word	0x08004e67
 8004e04:	08004e41 	.word	0x08004e41
 8004e08:	08004e4b 	.word	0x08004e4b
 8004e0c:	08004e55 	.word	0x08004e55
 8004e10:	08004e67 	.word	0x08004e67
 8004e14:	08004e5f 	.word	0x08004e5f
    {
    case 0:
      *AudioFreq = WM8994_FREQUENCY_8K;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8004e1e:	601a      	str	r2, [r3, #0]
      break;
 8004e20:	e022      	b.n	8004e68 <WM8994_GetFrequency+0xb8>
    case 1:
      *AudioFreq = WM8994_FREQUENCY_11K;
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	f642 3211 	movw	r2, #11025	; 0x2b11
 8004e28:	601a      	str	r2, [r3, #0]
      break;    
 8004e2a:	e01d      	b.n	8004e68 <WM8994_GetFrequency+0xb8>
    case 3:
      *AudioFreq = WM8994_FREQUENCY_16K;
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8004e32:	601a      	str	r2, [r3, #0]
      break;
 8004e34:	e018      	b.n	8004e68 <WM8994_GetFrequency+0xb8>
    case 4:
      *AudioFreq = WM8994_FREQUENCY_22K;
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	f245 6222 	movw	r2, #22050	; 0x5622
 8004e3c:	601a      	str	r2, [r3, #0]
      break; 
 8004e3e:	e013      	b.n	8004e68 <WM8994_GetFrequency+0xb8>
    case 6:
      *AudioFreq = WM8994_FREQUENCY_32K;
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8004e46:	601a      	str	r2, [r3, #0]
      break; 
 8004e48:	e00e      	b.n	8004e68 <WM8994_GetFrequency+0xb8>
    case 7:
      *AudioFreq = WM8994_FREQUENCY_44K;
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	f64a 4244 	movw	r2, #44100	; 0xac44
 8004e50:	601a      	str	r2, [r3, #0]
      break;    
 8004e52:	e009      	b.n	8004e68 <WM8994_GetFrequency+0xb8>
    case 8:
      *AudioFreq = WM8994_FREQUENCY_48K;
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8004e5a:	601a      	str	r2, [r3, #0]
      break;
 8004e5c:	e004      	b.n	8004e68 <WM8994_GetFrequency+0xb8>
    case 10:
      *AudioFreq = WM8994_FREQUENCY_96K;
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	4a04      	ldr	r2, [pc, #16]	; (8004e74 <WM8994_GetFrequency+0xc4>)
 8004e62:	601a      	str	r2, [r3, #0]
      break;    
 8004e64:	e000      	b.n	8004e68 <WM8994_GetFrequency+0xb8>
    default:
      break;    
 8004e66:	bf00      	nop
    }
  }
  
  return ret;
 8004e68:	68fb      	ldr	r3, [r7, #12]
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3710      	adds	r7, #16
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	00017700 	.word	0x00017700

08004e78 <WM8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param pObj pointer to component object 
  * @retval Component status if correct communication, else wrong communication
  */
int32_t WM8994_Reset(WM8994_Object_t *pObj)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  int32_t ret = WM8994_OK;
 8004e80:	2300      	movs	r3, #0
 8004e82:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  if(wm8994_sw_reset_w(&pObj->Ctx, 0x0000) != WM8994_OK)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	3318      	adds	r3, #24
 8004e88:	2100      	movs	r1, #0
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f000 f8ee 	bl	800506c <wm8994_sw_reset_w>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d002      	beq.n	8004e9c <WM8994_Reset+0x24>
  {
    ret = WM8994_ERROR;
 8004e96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e9a:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3710      	adds	r7, #16
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
	...

08004ea8 <WM8994_RegisterBusIO>:
  * @brief  Function
  * @param  Component object pointer
  * @retval error status
  */
int32_t WM8994_RegisterBusIO (WM8994_Object_t *pObj, WM8994_IO_t *pIO)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  if (pObj == NULL)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d103      	bne.n	8004ec0 <WM8994_RegisterBusIO+0x18>
  {
    ret = WM8994_ERROR;
 8004eb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ebc:	60fb      	str	r3, [r7, #12]
 8004ebe:	e02c      	b.n	8004f1a <WM8994_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	685a      	ldr	r2, [r3, #4]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	891a      	ldrh	r2, [r3, #8]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	68da      	ldr	r2, [r3, #12]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	691a      	ldr	r2, [r3, #16]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	695a      	ldr	r2, [r3, #20]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	615a      	str	r2, [r3, #20]
    
    pObj->Ctx.ReadReg  = WM8994_ReadRegWrap;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a0c      	ldr	r2, [pc, #48]	; (8004f24 <WM8994_RegisterBusIO+0x7c>)
 8004ef4:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WM8994_WriteRegWrap;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a0b      	ldr	r2, [pc, #44]	; (8004f28 <WM8994_RegisterBusIO+0x80>)
 8004efa:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	621a      	str	r2, [r3, #32]
    
    if(pObj->IO.Init != NULL)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d004      	beq.n	8004f14 <WM8994_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4798      	blx	r3
 8004f10:	60f8      	str	r0, [r7, #12]
 8004f12:	e002      	b.n	8004f1a <WM8994_RegisterBusIO+0x72>
    }
    else
    {
      ret = WM8994_ERROR;
 8004f14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f18:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return ret;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3710      	adds	r7, #16
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	08004f61 	.word	0x08004f61
 8004f28:	08004f93 	.word	0x08004f93

08004f2c <WM8994_Delay>:
  * @param pObj pointer to component object
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval Component status
  */
static int32_t WM8994_Delay(WM8994_Object_t *pObj, uint32_t Delay)
{  
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = pObj->IO.GetTick();
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	4798      	blx	r3
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	60fb      	str	r3, [r7, #12]
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8004f40:	bf00      	nop
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	4798      	blx	r3
 8004f48:	4603      	mov	r3, r0
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	683a      	ldr	r2, [r7, #0]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d8f5      	bhi.n	8004f42 <WM8994_Delay+0x16>
  {
  }
  return WM8994_OK;
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3710      	adds	r7, #16
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <WM8994_ReadRegWrap>:
  * @param  pData   The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t WM8994_ReadRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8004f60:	b590      	push	{r4, r7, lr}
 8004f62:	b087      	sub	sp, #28
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	607a      	str	r2, [r7, #4]
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	817b      	strh	r3, [r7, #10]
 8004f70:	4613      	mov	r3, r2
 8004f72:	813b      	strh	r3, [r7, #8]
  WM8994_Object_t *pObj = (WM8994_Object_t *)handle;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	691c      	ldr	r4, [r3, #16]
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	8918      	ldrh	r0, [r3, #8]
 8004f80:	893b      	ldrh	r3, [r7, #8]
 8004f82:	8979      	ldrh	r1, [r7, #10]
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	47a0      	blx	r4
 8004f88:	4603      	mov	r3, r0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	371c      	adds	r7, #28
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd90      	pop	{r4, r7, pc}

08004f92 <WM8994_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval error status
  */
static int32_t WM8994_WriteRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8004f92:	b590      	push	{r4, r7, lr}
 8004f94:	b087      	sub	sp, #28
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	60f8      	str	r0, [r7, #12]
 8004f9a:	607a      	str	r2, [r7, #4]
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	460b      	mov	r3, r1
 8004fa0:	817b      	strh	r3, [r7, #10]
 8004fa2:	4613      	mov	r3, r2
 8004fa4:	813b      	strh	r3, [r7, #8]
  WM8994_Object_t *pObj = (WM8994_Object_t *)handle;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	68dc      	ldr	r4, [r3, #12]
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	8918      	ldrh	r0, [r3, #8]
 8004fb2:	893b      	ldrh	r3, [r7, #8]
 8004fb4:	8979      	ldrh	r1, [r7, #10]
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	47a0      	blx	r4
 8004fba:	4603      	mov	r3, r0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	371c      	adds	r7, #28
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd90      	pop	{r4, r7, pc}

08004fc4 <wm8994_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : data Read
*******************************************************************************/
int32_t wm8994_read_reg(wm8994_ctx_t *ctx, uint16_t reg, uint16_t* data, uint16_t length)
{
 8004fc4:	b590      	push	{r4, r7, lr}
 8004fc6:	b087      	sub	sp, #28
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	607a      	str	r2, [r7, #4]
 8004fce:	461a      	mov	r2, r3
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	817b      	strh	r3, [r7, #10]
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  uint16_t tmp;
  
  ret = ctx->ReadReg(ctx->handle, reg, (uint8_t *)data, length);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	685c      	ldr	r4, [r3, #4]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6898      	ldr	r0, [r3, #8]
 8004fe0:	893b      	ldrh	r3, [r7, #8]
 8004fe2:	8979      	ldrh	r1, [r7, #10]
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	47a0      	blx	r4
 8004fe8:	6178      	str	r0, [r7, #20]
  
  if(ret >= 0)
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	db10      	blt.n	8005012 <wm8994_read_reg+0x4e>
  {
    tmp = ((uint16_t)(*data >> 8) & 0x00FF);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	881b      	ldrh	r3, [r3, #0]
 8004ff4:	0a1b      	lsrs	r3, r3, #8
 8004ff6:	827b      	strh	r3, [r7, #18]
    tmp |= ((uint16_t)(*data << 8) & 0xFF00);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	881b      	ldrh	r3, [r3, #0]
 8004ffc:	021b      	lsls	r3, r3, #8
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	b21a      	sxth	r2, r3
 8005002:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005006:	4313      	orrs	r3, r2
 8005008:	b21b      	sxth	r3, r3
 800500a:	827b      	strh	r3, [r7, #18]
    *data = tmp;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	8a7a      	ldrh	r2, [r7, #18]
 8005010:	801a      	strh	r2, [r3, #0]
  }
  return ret;
 8005012:	697b      	ldr	r3, [r7, #20]
}
 8005014:	4618      	mov	r0, r3
 8005016:	371c      	adds	r7, #28
 8005018:	46bd      	mov	sp, r7
 800501a:	bd90      	pop	{r4, r7, pc}

0800501c <wm8994_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t wm8994_write_reg(wm8994_ctx_t *ctx, uint16_t reg, uint16_t *data, uint16_t length)
{
 800501c:	b590      	push	{r4, r7, lr}
 800501e:	b087      	sub	sp, #28
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	607a      	str	r2, [r7, #4]
 8005026:	461a      	mov	r2, r3
 8005028:	460b      	mov	r3, r1
 800502a:	817b      	strh	r3, [r7, #10]
 800502c:	4613      	mov	r3, r2
 800502e:	813b      	strh	r3, [r7, #8]
  uint16_t tmp;
  tmp = ((uint16_t)(*data >> 8) & 0x00FF);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	881b      	ldrh	r3, [r3, #0]
 8005034:	0a1b      	lsrs	r3, r3, #8
 8005036:	b29b      	uxth	r3, r3
 8005038:	82fb      	strh	r3, [r7, #22]
  tmp |= ((uint16_t)(*data << 8) & 0xFF00);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	881b      	ldrh	r3, [r3, #0]
 800503e:	021b      	lsls	r3, r3, #8
 8005040:	b29b      	uxth	r3, r3
 8005042:	b21a      	sxth	r2, r3
 8005044:	8afb      	ldrh	r3, [r7, #22]
 8005046:	b21b      	sxth	r3, r3
 8005048:	4313      	orrs	r3, r2
 800504a:	b21b      	sxth	r3, r3
 800504c:	b29b      	uxth	r3, r3
 800504e:	82fb      	strh	r3, [r7, #22]
  
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)&tmp, length);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681c      	ldr	r4, [r3, #0]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6898      	ldr	r0, [r3, #8]
 8005058:	893b      	ldrh	r3, [r7, #8]
 800505a:	f107 0216 	add.w	r2, r7, #22
 800505e:	8979      	ldrh	r1, [r7, #10]
 8005060:	47a0      	blx	r4
 8005062:	4603      	mov	r3, r0
}
 8005064:	4618      	mov	r0, r3
 8005066:	371c      	adds	r7, #28
 8005068:	46bd      	mov	sp, r7
 800506a:	bd90      	pop	{r4, r7, pc}

0800506c <wm8994_sw_reset_w>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_sw_reset_w(wm8994_ctx_t *ctx, uint16_t value)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b082      	sub	sp, #8
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	460b      	mov	r3, r1
 8005076:	807b      	strh	r3, [r7, #2]
  return wm8994_write_reg(ctx, WM8994_SW_RESET, &value, 2);
 8005078:	1cba      	adds	r2, r7, #2
 800507a:	2302      	movs	r3, #2
 800507c:	2100      	movs	r1, #0
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f7ff ffcc 	bl	800501c <wm8994_write_reg>
 8005084:	4603      	mov	r3, r0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3708      	adds	r7, #8
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}

0800508e <wm8994_sw_reset_r>:
* Input          : Pointer to uint8_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_sw_reset_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 800508e:	b580      	push	{r7, lr}
 8005090:	b082      	sub	sp, #8
 8005092:	af00      	add	r7, sp, #0
 8005094:	6078      	str	r0, [r7, #4]
 8005096:	6039      	str	r1, [r7, #0]
  return wm8994_read_reg(ctx, WM8994_SW_RESET, value, 2);
 8005098:	2302      	movs	r3, #2
 800509a:	683a      	ldr	r2, [r7, #0]
 800509c:	2100      	movs	r1, #0
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f7ff ff90 	bl	8004fc4 <wm8994_read_reg>
 80050a4:	4603      	mov	r3, r0
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3708      	adds	r7, #8
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}

080050ae <wm8994_lo_hpout1l_vol_r>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_lo_hpout1l_vol_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 80050ae:	b580      	push	{r7, lr}
 80050b0:	b084      	sub	sp, #16
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
 80050b6:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = wm8994_read_reg(ctx, WM8994_LEFT_OUTPUT_VOL, value, 2);
 80050b8:	2302      	movs	r3, #2
 80050ba:	683a      	ldr	r2, [r7, #0]
 80050bc:	211c      	movs	r1, #28
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f7ff ff80 	bl	8004fc4 <wm8994_read_reg>
 80050c4:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d10a      	bne.n	80050e2 <wm8994_lo_hpout1l_vol_r+0x34>
  {  
  *value &= WM8994_LO_HPOUT1L_VOL_MASK;
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	881b      	ldrh	r3, [r3, #0]
 80050d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050d4:	b29a      	uxth	r2, r3
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	801a      	strh	r2, [r3, #0]
  *value = *value >> WM8994_LO_HPOUT1L_VOL_POSITION;
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	881a      	ldrh	r2, [r3, #0]
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	801a      	strh	r2, [r3, #0]
  }
  
  return ret;
 80050e2:	68fb      	ldr	r3, [r7, #12]
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3710      	adds	r7, #16
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <wm8994_aif1_sr_r>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_sr_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_RATE, value, 2);
 80050f6:	2302      	movs	r3, #2
 80050f8:	683a      	ldr	r2, [r7, #0]
 80050fa:	f44f 7104 	mov.w	r1, #528	; 0x210
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f7ff ff60 	bl	8004fc4 <wm8994_read_reg>
 8005104:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d10c      	bne.n	8005126 <wm8994_aif1_sr_r+0x3a>
  {  
  *value &= WM8994_AIF1_SR_MASK;
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	881b      	ldrh	r3, [r3, #0]
 8005110:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005114:	b29a      	uxth	r2, r3
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	801a      	strh	r2, [r3, #0]
  *value = *value >> WM8994_AIF1_SR_POSITION;
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	881b      	ldrh	r3, [r3, #0]
 800511e:	091b      	lsrs	r3, r3, #4
 8005120:	b29a      	uxth	r2, r3
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	801a      	strh	r2, [r3, #0]
  }
  
  return ret;
 8005126:	68fb      	ldr	r3, [r7, #12]
}
 8005128:	4618      	mov	r0, r3
 800512a:	3710      	adds	r7, #16
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <wm8994_aif1_control1_fmt>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_fmt(wm8994_ctx_t *ctx, uint16_t value)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	460b      	mov	r3, r1
 800513a:	807b      	strh	r3, [r7, #2]
  int32_t ret;
  uint16_t tmp = 0;
 800513c:	2300      	movs	r3, #0
 800513e:	817b      	strh	r3, [r7, #10]
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 8005140:	f107 020a 	add.w	r2, r7, #10
 8005144:	2302      	movs	r3, #2
 8005146:	f44f 7140 	mov.w	r1, #768	; 0x300
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f7ff ff3a 	bl	8004fc4 <wm8994_read_reg>
 8005150:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d116      	bne.n	8005186 <wm8994_aif1_control1_fmt+0x56>
  {
    tmp &= ~WM8994_AIF1_CONTROL1_FMT_MASK;
 8005158:	897b      	ldrh	r3, [r7, #10]
 800515a:	f023 0318 	bic.w	r3, r3, #24
 800515e:	b29b      	uxth	r3, r3
 8005160:	817b      	strh	r3, [r7, #10]
    tmp |= value << WM8994_AIF1_CONTROL1_FMT_POSITION;
 8005162:	887b      	ldrh	r3, [r7, #2]
 8005164:	00db      	lsls	r3, r3, #3
 8005166:	b21a      	sxth	r2, r3
 8005168:	897b      	ldrh	r3, [r7, #10]
 800516a:	b21b      	sxth	r3, r3
 800516c:	4313      	orrs	r3, r2
 800516e:	b21b      	sxth	r3, r3
 8005170:	b29b      	uxth	r3, r3
 8005172:	817b      	strh	r3, [r7, #10]
    
    ret = wm8994_write_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 8005174:	f107 020a 	add.w	r2, r7, #10
 8005178:	2302      	movs	r3, #2
 800517a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f7ff ff4c 	bl	800501c <wm8994_write_reg>
 8005184:	60f8      	str	r0, [r7, #12]
  }
  
  return ret;
 8005186:	68fb      	ldr	r3, [r7, #12]
}
 8005188:	4618      	mov	r0, r3
 800518a:	3710      	adds	r7, #16
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <wm8994_aif1_control1_fmt_r>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_fmt_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_CONTROL1, value, 2);
 800519a:	2302      	movs	r3, #2
 800519c:	683a      	ldr	r2, [r7, #0]
 800519e:	f44f 7140 	mov.w	r1, #768	; 0x300
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f7ff ff0e 	bl	8004fc4 <wm8994_read_reg>
 80051a8:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d10c      	bne.n	80051ca <wm8994_aif1_control1_fmt_r+0x3a>
  {  
  *value &= WM8994_AIF1_CONTROL1_FMT_MASK;
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	881b      	ldrh	r3, [r3, #0]
 80051b4:	f003 0318 	and.w	r3, r3, #24
 80051b8:	b29a      	uxth	r2, r3
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	801a      	strh	r2, [r3, #0]
  *value = *value >> WM8994_AIF1_CONTROL1_FMT_POSITION;
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	881b      	ldrh	r3, [r3, #0]
 80051c2:	08db      	lsrs	r3, r3, #3
 80051c4:	b29a      	uxth	r2, r3
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	801a      	strh	r2, [r3, #0]
  }
  
  return ret;
 80051ca:	68fb      	ldr	r3, [r7, #12]
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3710      	adds	r7, #16
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <wm8994_aif1_control1_wl>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_wl(wm8994_ctx_t *ctx, uint16_t value)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	460b      	mov	r3, r1
 80051de:	807b      	strh	r3, [r7, #2]
  int32_t ret;
  uint16_t tmp = 0;
 80051e0:	2300      	movs	r3, #0
 80051e2:	817b      	strh	r3, [r7, #10]
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 80051e4:	f107 020a 	add.w	r2, r7, #10
 80051e8:	2302      	movs	r3, #2
 80051ea:	f44f 7140 	mov.w	r1, #768	; 0x300
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f7ff fee8 	bl	8004fc4 <wm8994_read_reg>
 80051f4:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d116      	bne.n	800522a <wm8994_aif1_control1_wl+0x56>
  {
    tmp &= ~WM8994_AIF1_CONTROL1_WL_MASK;
 80051fc:	897b      	ldrh	r3, [r7, #10]
 80051fe:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005202:	b29b      	uxth	r3, r3
 8005204:	817b      	strh	r3, [r7, #10]
    tmp |= value << WM8994_AIF1_CONTROL1_WL_POSITION;
 8005206:	887b      	ldrh	r3, [r7, #2]
 8005208:	015b      	lsls	r3, r3, #5
 800520a:	b21a      	sxth	r2, r3
 800520c:	897b      	ldrh	r3, [r7, #10]
 800520e:	b21b      	sxth	r3, r3
 8005210:	4313      	orrs	r3, r2
 8005212:	b21b      	sxth	r3, r3
 8005214:	b29b      	uxth	r3, r3
 8005216:	817b      	strh	r3, [r7, #10]
    
    ret = wm8994_write_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 8005218:	f107 020a 	add.w	r2, r7, #10
 800521c:	2302      	movs	r3, #2
 800521e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f7ff fefa 	bl	800501c <wm8994_write_reg>
 8005228:	60f8      	str	r0, [r7, #12]
  }
  
  return ret;
 800522a:	68fb      	ldr	r3, [r7, #12]
}
 800522c:	4618      	mov	r0, r3
 800522e:	3710      	adds	r7, #16
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <wm8994_aif1_control1_wl_r>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_wl_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_CONTROL1, value, 2);
 800523e:	2302      	movs	r3, #2
 8005240:	683a      	ldr	r2, [r7, #0]
 8005242:	f44f 7140 	mov.w	r1, #768	; 0x300
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f7ff febc 	bl	8004fc4 <wm8994_read_reg>
 800524c:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d10c      	bne.n	800526e <wm8994_aif1_control1_wl_r+0x3a>
  {  
  *value &= WM8994_AIF1_CONTROL1_WL_MASK;
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	881b      	ldrh	r3, [r3, #0]
 8005258:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800525c:	b29a      	uxth	r2, r3
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	801a      	strh	r2, [r3, #0]
  *value = *value >> WM8994_AIF1_CONTROL1_WL_POSITION;
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	881b      	ldrh	r3, [r3, #0]
 8005266:	095b      	lsrs	r3, r3, #5
 8005268:	b29a      	uxth	r2, r3
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	801a      	strh	r2, [r3, #0]
  }
  
  return ret;
 800526e:	68fb      	ldr	r3, [r7, #12]
}
 8005270:	4618      	mov	r0, r3
 8005272:	3710      	adds	r7, #16
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <wm8994_aif1_control1_adcr_src>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_adcr_src(wm8994_ctx_t *ctx, uint16_t value)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b084      	sub	sp, #16
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	460b      	mov	r3, r1
 8005282:	807b      	strh	r3, [r7, #2]
  int32_t ret;
  uint16_t tmp = 0;
 8005284:	2300      	movs	r3, #0
 8005286:	817b      	strh	r3, [r7, #10]
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 8005288:	f107 020a 	add.w	r2, r7, #10
 800528c:	2302      	movs	r3, #2
 800528e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f7ff fe96 	bl	8004fc4 <wm8994_read_reg>
 8005298:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d116      	bne.n	80052ce <wm8994_aif1_control1_adcr_src+0x56>
  {
    tmp &= ~WM8994_AIF1_CONTROL1_ADCR_SRC_MASK;
 80052a0:	897b      	ldrh	r3, [r7, #10]
 80052a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	817b      	strh	r3, [r7, #10]
    tmp |= value << WM8994_AIF1_CONTROL1_ADCR_SRC_POSITION;
 80052aa:	887b      	ldrh	r3, [r7, #2]
 80052ac:	039b      	lsls	r3, r3, #14
 80052ae:	b21a      	sxth	r2, r3
 80052b0:	897b      	ldrh	r3, [r7, #10]
 80052b2:	b21b      	sxth	r3, r3
 80052b4:	4313      	orrs	r3, r2
 80052b6:	b21b      	sxth	r3, r3
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	817b      	strh	r3, [r7, #10]
    
    ret = wm8994_write_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 80052bc:	f107 020a 	add.w	r2, r7, #10
 80052c0:	2302      	movs	r3, #2
 80052c2:	f44f 7140 	mov.w	r1, #768	; 0x300
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f7ff fea8 	bl	800501c <wm8994_write_reg>
 80052cc:	60f8      	str	r0, [r7, #12]
  }
  
  return ret;
 80052ce:	68fb      	ldr	r3, [r7, #12]
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3710      	adds	r7, #16
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <wm8994_aif1_adc1_left_vol_adc1l_r>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_adc1_left_vol_adc1l_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_ADC1_LEFT_VOL, value, 2);
 80052e2:	2302      	movs	r3, #2
 80052e4:	683a      	ldr	r2, [r7, #0]
 80052e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f7ff fe6a 	bl	8004fc4 <wm8994_read_reg>
 80052f0:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d109      	bne.n	800530c <wm8994_aif1_adc1_left_vol_adc1l_r+0x34>
  {  
  *value &= WM8994_AIF1_ADC1_LEFT_VOL_ADC1L_MASK;
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	881b      	ldrh	r3, [r3, #0]
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	b29a      	uxth	r2, r3
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	801a      	strh	r2, [r3, #0]
  *value = *value >> WM8994_AIF1_ADC1_LEFT_VOL_ADC1L_POSITION;
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	881a      	ldrh	r2, [r3, #0]
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	801a      	strh	r2, [r3, #0]
  }
  
  return ret;
 800530c:	68fb      	ldr	r3, [r7, #12]
}
 800530e:	4618      	mov	r0, r3
 8005310:	3710      	adds	r7, #16
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
	...

08005318 <BSP_LED_Init>:
  *            @arg  LED3
  *            @arg  LED4
  * @retval BSP status
  */
int32_t  BSP_LED_Init(Led_TypeDef Led)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b08a      	sub	sp, #40	; 0x28
 800531c:	af00      	add	r7, sp, #0
 800531e:	4603      	mov	r3, r0
 8005320:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8005322:	2300      	movs	r3, #0
 8005324:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE();
 8005326:	4b1b      	ldr	r3, [pc, #108]	; (8005394 <BSP_LED_Init+0x7c>)
 8005328:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800532c:	4a19      	ldr	r2, [pc, #100]	; (8005394 <BSP_LED_Init+0x7c>)
 800532e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005332:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005336:	4b17      	ldr	r3, [pc, #92]	; (8005394 <BSP_LED_Init+0x7c>)
 8005338:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800533c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005340:	60fb      	str	r3, [r7, #12]
 8005342:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8005344:	79fb      	ldrb	r3, [r7, #7]
 8005346:	4a14      	ldr	r2, [pc, #80]	; (8005398 <BSP_LED_Init+0x80>)
 8005348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800534c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800534e:	2301      	movs	r3, #1
 8005350:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005352:	2301      	movs	r3, #1
 8005354:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005356:	2303      	movs	r3, #3
 8005358:	61fb      	str	r3, [r7, #28]

  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800535a:	79fb      	ldrb	r3, [r7, #7]
 800535c:	4a0f      	ldr	r2, [pc, #60]	; (800539c <BSP_LED_Init+0x84>)
 800535e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005362:	f107 0210 	add.w	r2, r7, #16
 8005366:	4611      	mov	r1, r2
 8005368:	4618      	mov	r0, r3
 800536a:	f008 fa07 	bl	800d77c <HAL_GPIO_Init>

  /* By default, turn off LED */
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 800536e:	79fb      	ldrb	r3, [r7, #7]
 8005370:	4a0a      	ldr	r2, [pc, #40]	; (800539c <BSP_LED_Init+0x84>)
 8005372:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005376:	79fb      	ldrb	r3, [r7, #7]
 8005378:	4a07      	ldr	r2, [pc, #28]	; (8005398 <BSP_LED_Init+0x80>)
 800537a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800537e:	b29b      	uxth	r3, r3
 8005380:	2201      	movs	r2, #1
 8005382:	4619      	mov	r1, r3
 8005384:	f008 fccc 	bl	800dd20 <HAL_GPIO_WritePin>
 return ret;
 8005388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800538a:	4618      	mov	r0, r3
 800538c:	3728      	adds	r7, #40	; 0x28
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop
 8005394:	58024400 	.word	0x58024400
 8005398:	08015a54 	.word	0x08015a54
 800539c:	2400009c 	.word	0x2400009c

080053a0 <BSP_LED_On>:
  *            @arg  LED3
  *            @arg  LED4
  * @retval BSP status
  */
int32_t  BSP_LED_On(Led_TypeDef Led)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	4603      	mov	r3, r0
 80053a8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80053aa:	2300      	movs	r3, #0
 80053ac:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 80053ae:	79fb      	ldrb	r3, [r7, #7]
 80053b0:	4a08      	ldr	r2, [pc, #32]	; (80053d4 <BSP_LED_On+0x34>)
 80053b2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80053b6:	79fb      	ldrb	r3, [r7, #7]
 80053b8:	4a07      	ldr	r2, [pc, #28]	; (80053d8 <BSP_LED_On+0x38>)
 80053ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053be:	b29b      	uxth	r3, r3
 80053c0:	2200      	movs	r2, #0
 80053c2:	4619      	mov	r1, r3
 80053c4:	f008 fcac 	bl	800dd20 <HAL_GPIO_WritePin>
  return ret;
 80053c8:	68fb      	ldr	r3, [r7, #12]
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3710      	adds	r7, #16
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	2400009c 	.word	0x2400009c
 80053d8:	08015a54 	.word	0x08015a54

080053dc <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  * @retval BSP status
  */
int32_t  BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b088      	sub	sp, #32
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	4603      	mov	r3, r0
 80053e4:	460a      	mov	r2, r1
 80053e6:	71fb      	strb	r3, [r7, #7]
 80053e8:	4613      	mov	r3, r2
 80053ea:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_WAKEUP_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_WAKEUP_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={BUTTON_WAKEUP_EXTI_LINE};
  /* Enable the BUTTON clock*/
  BUTTON_WAKEUP_GPIO_CLK_ENABLE();
 80053ec:	4b2d      	ldr	r3, [pc, #180]	; (80054a4 <BSP_PB_Init+0xc8>)
 80053ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80053f2:	4a2c      	ldr	r2, [pc, #176]	; (80054a4 <BSP_PB_Init+0xc8>)
 80053f4:	f043 0304 	orr.w	r3, r3, #4
 80053f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80053fc:	4b29      	ldr	r3, [pc, #164]	; (80054a4 <BSP_PB_Init+0xc8>)
 80053fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005402:	f003 0304 	and.w	r3, r3, #4
 8005406:	60bb      	str	r3, [r7, #8]
 8005408:	68bb      	ldr	r3, [r7, #8]
  gpio_init_structure.Pin = BUTTON_PIN [Button];
 800540a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800540e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8005410:	2300      	movs	r3, #0
 8005412:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8005414:	2302      	movs	r3, #2
 8005416:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8005418:	79bb      	ldrb	r3, [r7, #6]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d10c      	bne.n	8005438 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800541e:	2300      	movs	r3, #0
 8005420:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8005422:	79fb      	ldrb	r3, [r7, #7]
 8005424:	4a20      	ldr	r2, [pc, #128]	; (80054a8 <BSP_PB_Init+0xcc>)
 8005426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800542a:	f107 020c 	add.w	r2, r7, #12
 800542e:	4611      	mov	r1, r2
 8005430:	4618      	mov	r0, r3
 8005432:	f008 f9a3 	bl	800d77c <HAL_GPIO_Init>
 8005436:	e030      	b.n	800549a <BSP_PB_Init+0xbe>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8005438:	4b1c      	ldr	r3, [pc, #112]	; (80054ac <BSP_PB_Init+0xd0>)
 800543a:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800543c:	79fb      	ldrb	r3, [r7, #7]
 800543e:	4a1a      	ldr	r2, [pc, #104]	; (80054a8 <BSP_PB_Init+0xcc>)
 8005440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005444:	f107 020c 	add.w	r2, r7, #12
 8005448:	4611      	mov	r1, r2
 800544a:	4618      	mov	r0, r3
 800544c:	f008 f996 	bl	800d77c <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8005450:	79fb      	ldrb	r3, [r7, #7]
 8005452:	00db      	lsls	r3, r3, #3
 8005454:	4a16      	ldr	r2, [pc, #88]	; (80054b0 <BSP_PB_Init+0xd4>)
 8005456:	441a      	add	r2, r3
 8005458:	79fb      	ldrb	r3, [r7, #7]
 800545a:	4916      	ldr	r1, [pc, #88]	; (80054b4 <BSP_PB_Init+0xd8>)
 800545c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005460:	4619      	mov	r1, r3
 8005462:	4610      	mov	r0, r2
 8005464:	f008 f939 	bl	800d6da <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8005468:	79fb      	ldrb	r3, [r7, #7]
 800546a:	00db      	lsls	r3, r3, #3
 800546c:	4a10      	ldr	r2, [pc, #64]	; (80054b0 <BSP_PB_Init+0xd4>)
 800546e:	1898      	adds	r0, r3, r2
 8005470:	79fb      	ldrb	r3, [r7, #7]
 8005472:	4a11      	ldr	r2, [pc, #68]	; (80054b8 <BSP_PB_Init+0xdc>)
 8005474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005478:	461a      	mov	r2, r3
 800547a:	2100      	movs	r1, #0
 800547c:	f008 f90e 	bl	800d69c <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8005480:	2028      	movs	r0, #40	; 0x28
 8005482:	79fb      	ldrb	r3, [r7, #7]
 8005484:	4a0d      	ldr	r2, [pc, #52]	; (80054bc <BSP_PB_Init+0xe0>)
 8005486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800548a:	2200      	movs	r2, #0
 800548c:	4619      	mov	r1, r3
 800548e:	f003 fefc 	bl	800928a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8005492:	2328      	movs	r3, #40	; 0x28
 8005494:	4618      	mov	r0, r3
 8005496:	f003 ff12 	bl	80092be <HAL_NVIC_EnableIRQ>
  }
  return BSP_ERROR_NONE;
 800549a:	2300      	movs	r3, #0
}
 800549c:	4618      	mov	r0, r3
 800549e:	3720      	adds	r7, #32
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	58024400 	.word	0x58024400
 80054a8:	240000ac 	.word	0x240000ac
 80054ac:	11110000 	.word	0x11110000
 80054b0:	24001d28 	.word	0x24001d28
 80054b4:	08015aa4 	.word	0x08015aa4
 80054b8:	240000c4 	.word	0x240000c4
 80054bc:	240000c8 	.word	0x240000c8

080054c0 <BSP_PB_GetState>:
  *          This parameter can be one of the following values:
  *            @arg  BUTTON_WAKEUP: Wakeup Push Button
  * @retval The Button GPIO pin value
  */
int32_t  BSP_PB_GetState(Button_TypeDef Button)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b082      	sub	sp, #8
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	4603      	mov	r3, r0
 80054c8:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 80054ca:	79fb      	ldrb	r3, [r7, #7]
 80054cc:	4a06      	ldr	r2, [pc, #24]	; (80054e8 <BSP_PB_GetState+0x28>)
 80054ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80054d6:	4611      	mov	r1, r2
 80054d8:	4618      	mov	r0, r3
 80054da:	f008 fc09 	bl	800dcf0 <HAL_GPIO_ReadPin>
 80054de:	4603      	mov	r3, r0
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3708      	adds	r7, #8
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	240000ac 	.word	0x240000ac

080054ec <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	4603      	mov	r3, r0
 80054f4:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 80054f6:	79fb      	ldrb	r3, [r7, #7]
 80054f8:	00db      	lsls	r3, r3, #3
 80054fa:	4a04      	ldr	r2, [pc, #16]	; (800550c <BSP_PB_IRQHandler+0x20>)
 80054fc:	4413      	add	r3, r2
 80054fe:	4618      	mov	r0, r3
 8005500:	f008 f900 	bl	800d704 <HAL_EXTI_IRQHandler>
}
 8005504:	bf00      	nop
 8005506:	3708      	adds	r7, #8
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}
 800550c:	24001d28 	.word	0x24001d28

08005510 <BUTTON_WAKEUP_EXTI_Callback>:
/**
  * @brief  KEY EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_WAKEUP_EXTI_Callback(void)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_WAKEUP);
 8005514:	2000      	movs	r0, #0
 8005516:	f00f fa69 	bl	80149ec <BSP_PB_Callback>
}
 800551a:	bf00      	nop
 800551c:	bd80      	pop	{r7, pc}
	...

08005520 <BSP_JOY_Init>:
  *                                 with interrupt generation capability
  * @param  JoyPins joystick pins to be initialized
  * @retval BSP status
  */
int32_t BSP_JOY_Init(JOY_TypeDef JOY, JOYMode_TypeDef JoyMode, JOYPin_TypeDef JoyPins)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b090      	sub	sp, #64	; 0x40
 8005524:	af00      	add	r7, sp, #0
 8005526:	4603      	mov	r3, r0
 8005528:	71fb      	strb	r3, [r7, #7]
 800552a:	460b      	mov	r3, r1
 800552c:	71bb      	strb	r3, [r7, #6]
 800552e:	4613      	mov	r3, r2
 8005530:	717b      	strb	r3, [r7, #5]
  int32_t ret = BSP_ERROR_NONE;
 8005532:	2300      	movs	r3, #0
 8005534:	63bb      	str	r3, [r7, #56]	; 0x38
                                                   BSP_JOY1_RIGHT_IT_PRIORITY,
                                                   BSP_JOY1_UP_IT_PRIORITY
                                                  };

  /* Store Joystick pins initialized */
  JoyPinsMask |= (uint32_t)JoyPins;
 8005536:	797a      	ldrb	r2, [r7, #5]
 8005538:	4b68      	ldr	r3, [pc, #416]	; (80056dc <BSP_JOY_Init+0x1bc>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4313      	orrs	r3, r2
 800553e:	4a67      	ldr	r2, [pc, #412]	; (80056dc <BSP_JOY_Init+0x1bc>)
 8005540:	6013      	str	r3, [r2, #0]

  /* Initialized the Joystick. */
  for(joykey = 0U; joykey < JOY_KEY_NUMBER ; joykey++)
 8005542:	2300      	movs	r3, #0
 8005544:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005546:	e0c0      	b.n	80056ca <BSP_JOY_Init+0x1aa>
  {
    key_pressed = 1UL << joykey;
 8005548:	2201      	movs	r2, #1
 800554a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800554c:	fa02 f303 	lsl.w	r3, r2, r3
 8005550:	637b      	str	r3, [r7, #52]	; 0x34
    if((key_pressed & (uint32_t)JoyPins) == key_pressed)
 8005552:	797a      	ldrb	r2, [r7, #5]
 8005554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005556:	4013      	ands	r3, r2
 8005558:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800555a:	429a      	cmp	r2, r3
 800555c:	f040 80b2 	bne.w	80056c4 <BSP_JOY_Init+0x1a4>
    {
      if(JOY == JOY1)
 8005560:	79fb      	ldrb	r3, [r7, #7]
 8005562:	2b00      	cmp	r3, #0
 8005564:	f040 80ae 	bne.w	80056c4 <BSP_JOY_Init+0x1a4>
      {
      /* Enable the JOY clock */
        if(key_pressed == (uint32_t)JOY_SEL)
 8005568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800556a:	2b01      	cmp	r3, #1
 800556c:	d10f      	bne.n	800558e <BSP_JOY_Init+0x6e>
        {
          JOY1_SEL_GPIO_CLK_ENABLE();
 800556e:	4b5c      	ldr	r3, [pc, #368]	; (80056e0 <BSP_JOY_Init+0x1c0>)
 8005570:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005574:	4a5a      	ldr	r2, [pc, #360]	; (80056e0 <BSP_JOY_Init+0x1c0>)
 8005576:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800557a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800557e:	4b58      	ldr	r3, [pc, #352]	; (80056e0 <BSP_JOY_Init+0x1c0>)
 8005580:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005584:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005588:	61fb      	str	r3, [r7, #28]
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	e04a      	b.n	8005624 <BSP_JOY_Init+0x104>
        }
        else if(key_pressed == (uint32_t)JOY_DOWN)
 800558e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005590:	2b02      	cmp	r3, #2
 8005592:	d10f      	bne.n	80055b4 <BSP_JOY_Init+0x94>
        {
          JOY1_DOWN_GPIO_CLK_ENABLE();
 8005594:	4b52      	ldr	r3, [pc, #328]	; (80056e0 <BSP_JOY_Init+0x1c0>)
 8005596:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800559a:	4a51      	ldr	r2, [pc, #324]	; (80056e0 <BSP_JOY_Init+0x1c0>)
 800559c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80055a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80055a4:	4b4e      	ldr	r3, [pc, #312]	; (80056e0 <BSP_JOY_Init+0x1c0>)
 80055a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80055aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055ae:	61bb      	str	r3, [r7, #24]
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	e037      	b.n	8005624 <BSP_JOY_Init+0x104>
        }
        else if(key_pressed == (uint32_t) JOY_LEFT)
 80055b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055b6:	2b04      	cmp	r3, #4
 80055b8:	d10f      	bne.n	80055da <BSP_JOY_Init+0xba>
        {
          JOY1_LEFT_GPIO_CLK_ENABLE();
 80055ba:	4b49      	ldr	r3, [pc, #292]	; (80056e0 <BSP_JOY_Init+0x1c0>)
 80055bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80055c0:	4a47      	ldr	r2, [pc, #284]	; (80056e0 <BSP_JOY_Init+0x1c0>)
 80055c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80055c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80055ca:	4b45      	ldr	r3, [pc, #276]	; (80056e0 <BSP_JOY_Init+0x1c0>)
 80055cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80055d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055d4:	617b      	str	r3, [r7, #20]
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	e024      	b.n	8005624 <BSP_JOY_Init+0x104>
        }
        else if(key_pressed == (uint32_t) JOY_RIGHT)
 80055da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055dc:	2b08      	cmp	r3, #8
 80055de:	d10f      	bne.n	8005600 <BSP_JOY_Init+0xe0>
        {
          JOY1_RIGHT_GPIO_CLK_ENABLE();
 80055e0:	4b3f      	ldr	r3, [pc, #252]	; (80056e0 <BSP_JOY_Init+0x1c0>)
 80055e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80055e6:	4a3e      	ldr	r2, [pc, #248]	; (80056e0 <BSP_JOY_Init+0x1c0>)
 80055e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80055ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80055f0:	4b3b      	ldr	r3, [pc, #236]	; (80056e0 <BSP_JOY_Init+0x1c0>)
 80055f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80055f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055fa:	613b      	str	r3, [r7, #16]
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	e011      	b.n	8005624 <BSP_JOY_Init+0x104>
        }
        else
        {
          if(key_pressed == (uint32_t) JOY_UP)
 8005600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005602:	2b10      	cmp	r3, #16
 8005604:	d10e      	bne.n	8005624 <BSP_JOY_Init+0x104>
          {
            JOY1_UP_GPIO_CLK_ENABLE();
 8005606:	4b36      	ldr	r3, [pc, #216]	; (80056e0 <BSP_JOY_Init+0x1c0>)
 8005608:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800560c:	4a34      	ldr	r2, [pc, #208]	; (80056e0 <BSP_JOY_Init+0x1c0>)
 800560e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005612:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005616:	4b32      	ldr	r3, [pc, #200]	; (80056e0 <BSP_JOY_Init+0x1c0>)
 8005618:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800561c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005620:	60fb      	str	r3, [r7, #12]
 8005622:	68fb      	ldr	r3, [r7, #12]
          }
        }

        gpio_init_structure.Pin = JOY1_PIN[joykey];
 8005624:	4a2f      	ldr	r2, [pc, #188]	; (80056e4 <BSP_JOY_Init+0x1c4>)
 8005626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005628:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800562c:	623b      	str	r3, [r7, #32]
        gpio_init_structure.Pull = GPIO_PULLUP;
 800562e:	2301      	movs	r3, #1
 8005630:	62bb      	str	r3, [r7, #40]	; 0x28
        gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005632:	2303      	movs	r3, #3
 8005634:	62fb      	str	r3, [r7, #44]	; 0x2c

        if (JoyMode == JOY_MODE_GPIO)
 8005636:	79bb      	ldrb	r3, [r7, #6]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d10c      	bne.n	8005656 <BSP_JOY_Init+0x136>
        {
          /* Configure Joy pin as input */
          gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800563c:	2300      	movs	r3, #0
 800563e:	627b      	str	r3, [r7, #36]	; 0x24
          HAL_GPIO_Init(JOY1_PORT[joykey], &gpio_init_structure);
 8005640:	4a29      	ldr	r2, [pc, #164]	; (80056e8 <BSP_JOY_Init+0x1c8>)
 8005642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005648:	f107 0220 	add.w	r2, r7, #32
 800564c:	4611      	mov	r1, r2
 800564e:	4618      	mov	r0, r3
 8005650:	f008 f894 	bl	800d77c <HAL_GPIO_Init>
 8005654:	e036      	b.n	80056c4 <BSP_JOY_Init+0x1a4>
        }
        else /*(JoyMode == JOY_MODE_EXTI)*/
        {
          /* Configure Joy pin as input with External interrupt */
          gpio_init_structure.Mode = GPIO_MODE_IT_RISING_FALLING;
 8005656:	4b25      	ldr	r3, [pc, #148]	; (80056ec <BSP_JOY_Init+0x1cc>)
 8005658:	627b      	str	r3, [r7, #36]	; 0x24
          HAL_GPIO_Init(JOY1_PORT[joykey], &gpio_init_structure);
 800565a:	4a23      	ldr	r2, [pc, #140]	; (80056e8 <BSP_JOY_Init+0x1c8>)
 800565c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800565e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005662:	f107 0220 	add.w	r2, r7, #32
 8005666:	4611      	mov	r1, r2
 8005668:	4618      	mov	r0, r3
 800566a:	f008 f887 	bl	800d77c <HAL_GPIO_Init>

         (void)HAL_EXTI_GetHandle(&hjoy_exti[joykey], JOY_EXTI_LINE[joykey]);
 800566e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005670:	00db      	lsls	r3, r3, #3
 8005672:	4a1f      	ldr	r2, [pc, #124]	; (80056f0 <BSP_JOY_Init+0x1d0>)
 8005674:	441a      	add	r2, r3
 8005676:	491f      	ldr	r1, [pc, #124]	; (80056f4 <BSP_JOY_Init+0x1d4>)
 8005678:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800567a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800567e:	4619      	mov	r1, r3
 8005680:	4610      	mov	r0, r2
 8005682:	f008 f82a 	bl	800d6da <HAL_EXTI_GetHandle>
         (void)HAL_EXTI_RegisterCallback(&hjoy_exti[joykey],  HAL_EXTI_COMMON_CB_ID, JoyCallback[joykey]);
 8005686:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005688:	00db      	lsls	r3, r3, #3
 800568a:	4a19      	ldr	r2, [pc, #100]	; (80056f0 <BSP_JOY_Init+0x1d0>)
 800568c:	1898      	adds	r0, r3, r2
 800568e:	4a1a      	ldr	r2, [pc, #104]	; (80056f8 <BSP_JOY_Init+0x1d8>)
 8005690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005696:	461a      	mov	r2, r3
 8005698:	2100      	movs	r1, #0
 800569a:	f007 ffff 	bl	800d69c <HAL_EXTI_RegisterCallback>

          /* Enable and set Joy EXTI Interrupt to the lowest priority */
          HAL_NVIC_SetPriority((IRQn_Type)(JOY1_IRQn[joykey]), BSP_JOY_PRIO[joykey], 0x00);
 800569e:	4a17      	ldr	r2, [pc, #92]	; (80056fc <BSP_JOY_Init+0x1dc>)
 80056a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056a2:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 80056a6:	4a16      	ldr	r2, [pc, #88]	; (8005700 <BSP_JOY_Init+0x1e0>)
 80056a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056ae:	2200      	movs	r2, #0
 80056b0:	4619      	mov	r1, r3
 80056b2:	f003 fdea 	bl	800928a <HAL_NVIC_SetPriority>
          HAL_NVIC_EnableIRQ((IRQn_Type)(JOY1_IRQn[joykey]));
 80056b6:	4a11      	ldr	r2, [pc, #68]	; (80056fc <BSP_JOY_Init+0x1dc>)
 80056b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056ba:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80056be:	4618      	mov	r0, r3
 80056c0:	f003 fdfd 	bl	80092be <HAL_NVIC_EnableIRQ>
  for(joykey = 0U; joykey < JOY_KEY_NUMBER ; joykey++)
 80056c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056c6:	3301      	adds	r3, #1
 80056c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056cc:	2b04      	cmp	r3, #4
 80056ce:	f67f af3b 	bls.w	8005548 <BSP_JOY_Init+0x28>
        }
      }
    }
  }

  return ret;
 80056d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3740      	adds	r7, #64	; 0x40
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	2400063c 	.word	0x2400063c
 80056e0:	58024400 	.word	0x58024400
 80056e4:	08015a6c 	.word	0x08015a6c
 80056e8:	240000b0 	.word	0x240000b0
 80056ec:	11310000 	.word	0x11310000
 80056f0:	24000640 	.word	0x24000640
 80056f4:	08015aa8 	.word	0x08015aa8
 80056f8:	240000cc 	.word	0x240000cc
 80056fc:	08015a78 	.word	0x08015a78
 8005700:	240000e0 	.word	0x240000e0

08005704 <BSP_JOY_IRQHandler>:
  * @param  JOY Joystick instance
  * @param  JoyPin Specifies the pin connected EXTI handler
  * @retval None
  */
void BSP_JOY_IRQHandler(JOY_TypeDef JOY, JOYPin_TypeDef JoyPin)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b086      	sub	sp, #24
 8005708:	af00      	add	r7, sp, #0
 800570a:	4603      	mov	r3, r0
 800570c:	460a      	mov	r2, r1
 800570e:	71fb      	strb	r3, [r7, #7]
 8005710:	4613      	mov	r3, r2
 8005712:	71bb      	strb	r3, [r7, #6]
  if(JOY == JOY1)
 8005714:	79fb      	ldrb	r3, [r7, #7]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d116      	bne.n	8005748 <BSP_JOY_IRQHandler+0x44>
  {
    HAL_EXTI_IRQHandler(&hjoy_exti[POSITION_VAL(JoyPin)]);
 800571a:	79bb      	ldrb	r3, [r7, #6]
 800571c:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	fa93 f3a3 	rbit	r3, r3
 8005724:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d101      	bne.n	8005734 <BSP_JOY_IRQHandler+0x30>
  {
    return 32U;
 8005730:	2320      	movs	r3, #32
 8005732:	e003      	b.n	800573c <BSP_JOY_IRQHandler+0x38>
  }
  return __builtin_clz(value);
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	fab3 f383 	clz	r3, r3
 800573a:	b2db      	uxtb	r3, r3
 800573c:	00db      	lsls	r3, r3, #3
 800573e:	4a04      	ldr	r2, [pc, #16]	; (8005750 <BSP_JOY_IRQHandler+0x4c>)
 8005740:	4413      	add	r3, r2
 8005742:	4618      	mov	r0, r3
 8005744:	f007 ffde 	bl	800d704 <HAL_EXTI_IRQHandler>
  }
}
 8005748:	bf00      	nop
 800574a:	3718      	adds	r7, #24
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}
 8005750:	24000640 	.word	0x24000640

08005754 <JOY1_UP_EXTI_Callback>:
/**
  * @brief  JOY1 UP EXTI line detection callbacks.
  * @retval None
  */
static void JOY1_UP_EXTI_Callback(void)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	af00      	add	r7, sp, #0
  BSP_JOY_Callback(JOY1, JOY_UP);
 8005758:	2110      	movs	r1, #16
 800575a:	2000      	movs	r0, #0
 800575c:	f00e ffd6 	bl	801470c <BSP_JOY_Callback>
}
 8005760:	bf00      	nop
 8005762:	bd80      	pop	{r7, pc}

08005764 <JOY1_DOWN_EXTI_Callback>:
/**
  * @brief  JOY1 DOWN EXTI line detection callbacks.
  * @retval None
  */
static void JOY1_DOWN_EXTI_Callback(void)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	af00      	add	r7, sp, #0
  BSP_JOY_Callback(JOY1, JOY_DOWN);
 8005768:	2102      	movs	r1, #2
 800576a:	2000      	movs	r0, #0
 800576c:	f00e ffce 	bl	801470c <BSP_JOY_Callback>
}
 8005770:	bf00      	nop
 8005772:	bd80      	pop	{r7, pc}

08005774 <JOY1_SEL_EXTI_Callback>:
/**
  * @brief  JOY1 SEL EXTI line detection callbacks.
  * @retval None
  */
static void JOY1_SEL_EXTI_Callback(void)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	af00      	add	r7, sp, #0
  BSP_JOY_Callback(JOY1, JOY_SEL);
 8005778:	2101      	movs	r1, #1
 800577a:	2000      	movs	r0, #0
 800577c:	f00e ffc6 	bl	801470c <BSP_JOY_Callback>
}
 8005780:	bf00      	nop
 8005782:	bd80      	pop	{r7, pc}

08005784 <JOY1_LEFT_EXTI_Callback>:
/**
  * @brief  JOY1 LEFT EXTI line detection callbacks.
  * @retval None
  */
static void JOY1_LEFT_EXTI_Callback(void)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	af00      	add	r7, sp, #0
  BSP_JOY_Callback(JOY1, JOY_LEFT);
 8005788:	2104      	movs	r1, #4
 800578a:	2000      	movs	r0, #0
 800578c:	f00e ffbe 	bl	801470c <BSP_JOY_Callback>
}
 8005790:	bf00      	nop
 8005792:	bd80      	pop	{r7, pc}

08005794 <JOY1_RIGHT_EXTI_Callback>:
/**
  * @brief  JOY1 RIGHT EXTI line detection callbacks.
  * @retval None
  */
static void JOY1_RIGHT_EXTI_Callback(void)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	af00      	add	r7, sp, #0
  BSP_JOY_Callback(JOY1, JOY_RIGHT);
 8005798:	2108      	movs	r1, #8
 800579a:	2000      	movs	r0, #0
 800579c:	f00e ffb6 	bl	801470c <BSP_JOY_Callback>
}
 80057a0:	bf00      	nop
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <BSP_AUDIO_OUT_Init>:
  * @param  Instance  : AUDIO_OUT Instance. It can only be 0 (SAI)
  * @param  AudioInit : AUDIO_OUT init Structure
  * @retval BSP status
  */
int32_t BSP_AUDIO_OUT_Init(uint32_t Instance, BSP_AUDIO_Init_t* AudioInit)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b094      	sub	sp, #80	; 0x50
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80057ae:	2300      	movs	r3, #0
 80057b0:	64fb      	str	r3, [r7, #76]	; 0x4c

  if(Instance >= AUDIO_OUT_INSTANCES_NBR)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d903      	bls.n	80057c0 <BSP_AUDIO_OUT_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80057b8:	f06f 0301 	mvn.w	r3, #1
 80057bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057be:	e0da      	b.n	8005976 <BSP_AUDIO_OUT_Init+0x1d2>
  }
  else
  {
    /* Fill Audio_Out_Ctx structure */
    Audio_Out_Ctx[Instance].Device         = AudioInit->Device;
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	6819      	ldr	r1, [r3, #0]
 80057c4:	486e      	ldr	r0, [pc, #440]	; (8005980 <BSP_AUDIO_OUT_Init+0x1dc>)
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	4613      	mov	r3, r2
 80057ca:	00db      	lsls	r3, r3, #3
 80057cc:	4413      	add	r3, r2
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	4403      	add	r3, r0
 80057d2:	3304      	adds	r3, #4
 80057d4:	6019      	str	r1, [r3, #0]
    Audio_Out_Ctx[Instance].Instance       = Instance;
 80057d6:	496a      	ldr	r1, [pc, #424]	; (8005980 <BSP_AUDIO_OUT_Init+0x1dc>)
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	4613      	mov	r3, r2
 80057dc:	00db      	lsls	r3, r3, #3
 80057de:	4413      	add	r3, r2
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	440b      	add	r3, r1
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	601a      	str	r2, [r3, #0]
    Audio_Out_Ctx[Instance].SampleRate     = AudioInit->SampleRate;
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	6859      	ldr	r1, [r3, #4]
 80057ec:	4864      	ldr	r0, [pc, #400]	; (8005980 <BSP_AUDIO_OUT_Init+0x1dc>)
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	4613      	mov	r3, r2
 80057f2:	00db      	lsls	r3, r3, #3
 80057f4:	4413      	add	r3, r2
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	4403      	add	r3, r0
 80057fa:	3308      	adds	r3, #8
 80057fc:	6019      	str	r1, [r3, #0]
    Audio_Out_Ctx[Instance].BitsPerSample  = AudioInit->BitsPerSample;
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	6899      	ldr	r1, [r3, #8]
 8005802:	485f      	ldr	r0, [pc, #380]	; (8005980 <BSP_AUDIO_OUT_Init+0x1dc>)
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	4613      	mov	r3, r2
 8005808:	00db      	lsls	r3, r3, #3
 800580a:	4413      	add	r3, r2
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	4403      	add	r3, r0
 8005810:	330c      	adds	r3, #12
 8005812:	6019      	str	r1, [r3, #0]
    Audio_Out_Ctx[Instance].ChannelsNbr    = AudioInit->ChannelsNbr;
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	68d9      	ldr	r1, [r3, #12]
 8005818:	4859      	ldr	r0, [pc, #356]	; (8005980 <BSP_AUDIO_OUT_Init+0x1dc>)
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	4613      	mov	r3, r2
 800581e:	00db      	lsls	r3, r3, #3
 8005820:	4413      	add	r3, r2
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	4403      	add	r3, r0
 8005826:	3314      	adds	r3, #20
 8005828:	6019      	str	r1, [r3, #0]
    Audio_Out_Ctx[Instance].Volume         = AudioInit->Volume;
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	6919      	ldr	r1, [r3, #16]
 800582e:	4854      	ldr	r0, [pc, #336]	; (8005980 <BSP_AUDIO_OUT_Init+0x1dc>)
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	4613      	mov	r3, r2
 8005834:	00db      	lsls	r3, r3, #3
 8005836:	4413      	add	r3, r2
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	4403      	add	r3, r0
 800583c:	3310      	adds	r3, #16
 800583e:	6019      	str	r1, [r3, #0]
    Audio_Out_Ctx[Instance].State          = AUDIO_OUT_STATE_RESET;
 8005840:	494f      	ldr	r1, [pc, #316]	; (8005980 <BSP_AUDIO_OUT_Init+0x1dc>)
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	4613      	mov	r3, r2
 8005846:	00db      	lsls	r3, r3, #3
 8005848:	4413      	add	r3, r2
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	440b      	add	r3, r1
 800584e:	331c      	adds	r3, #28
 8005850:	2200      	movs	r2, #0
 8005852:	601a      	str	r2, [r3, #0]

#if (USE_AUDIO_CODEC_WM8994 == 1)
    if(WM8994_Probe() != BSP_ERROR_NONE)
 8005854:	f000 ffe8 	bl	8006828 <WM8994_Probe>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d002      	beq.n	8005864 <BSP_AUDIO_OUT_Init+0xc0>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800585e:	f06f 0304 	mvn.w	r3, #4
 8005862:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
#endif

    if(ret == BSP_ERROR_NONE)
 8005864:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005866:	2b00      	cmp	r3, #0
 8005868:	f040 8085 	bne.w	8005976 <BSP_AUDIO_OUT_Init+0x1d2>
    {
      /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */
      if(MX_SAI1_ClockConfig(&haudio_out_sai, AudioInit->SampleRate) != HAL_OK)
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	4619      	mov	r1, r3
 8005872:	4844      	ldr	r0, [pc, #272]	; (8005984 <BSP_AUDIO_OUT_Init+0x1e0>)
 8005874:	f000 f95d 	bl	8005b32 <MX_SAI1_ClockConfig>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d003      	beq.n	8005886 <BSP_AUDIO_OUT_Init+0xe2>
      {
        ret = BSP_ERROR_CLOCK_FAILURE;
 800587e:	f06f 0308 	mvn.w	r3, #8
 8005882:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005884:	e077      	b.n	8005976 <BSP_AUDIO_OUT_Init+0x1d2>
      }
      else
      {
        /* SAI data transfer preparation:
        Prepare the Media to be used for the audio transfer from memory to SAI peripheral */
        haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8005886:	4b3f      	ldr	r3, [pc, #252]	; (8005984 <BSP_AUDIO_OUT_Init+0x1e0>)
 8005888:	4a3f      	ldr	r2, [pc, #252]	; (8005988 <BSP_AUDIO_OUT_Init+0x1e4>)
 800588a:	601a      	str	r2, [r3, #0]
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
          }
        }
#else
        SAI_MspInit(&haudio_out_sai);
 800588c:	483d      	ldr	r0, [pc, #244]	; (8005984 <BSP_AUDIO_OUT_Init+0x1e0>)
 800588e:	f001 f825 	bl	80068dc <SAI_MspInit>
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 1U) */
        if(ret == BSP_ERROR_NONE)
 8005892:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005894:	2b00      	cmp	r3, #0
 8005896:	d16e      	bne.n	8005976 <BSP_AUDIO_OUT_Init+0x1d2>
	{
          MX_SAI_Config_t mx_sai_config;

          /* Prepare haudio_out_sai handle */
          mx_sai_config.AudioFrequency    = AudioInit->SampleRate;
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	60fb      	str	r3, [r7, #12]
          mx_sai_config.AudioMode         = SAI_MODEMASTER_TX;
 800589e:	2300      	movs	r3, #0
 80058a0:	613b      	str	r3, [r7, #16]
          mx_sai_config.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80058a2:	2301      	movs	r3, #1
 80058a4:	61fb      	str	r3, [r7, #28]
          mx_sai_config.MonoStereoMode    = (AudioInit->ChannelsNbr == 1U) ? SAI_MONOMODE : SAI_STEREOMODE;
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d102      	bne.n	80058b4 <BSP_AUDIO_OUT_Init+0x110>
 80058ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058b2:	e000      	b.n	80058b6 <BSP_AUDIO_OUT_Init+0x112>
 80058b4:	2300      	movs	r3, #0
 80058b6:	61bb      	str	r3, [r7, #24]
          mx_sai_config.DataSize          = (AudioInit->BitsPerSample == AUDIO_RESOLUTION_32B) ? SAI_DATASIZE_32 : SAI_DATASIZE_16;
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	2b20      	cmp	r3, #32
 80058be:	d101      	bne.n	80058c4 <BSP_AUDIO_OUT_Init+0x120>
 80058c0:	23e0      	movs	r3, #224	; 0xe0
 80058c2:	e000      	b.n	80058c6 <BSP_AUDIO_OUT_Init+0x122>
 80058c4:	2380      	movs	r3, #128	; 0x80
 80058c6:	617b      	str	r3, [r7, #20]
          mx_sai_config.FrameLength       = 128;
 80058c8:	2380      	movs	r3, #128	; 0x80
 80058ca:	62fb      	str	r3, [r7, #44]	; 0x2c
          mx_sai_config.ActiveFrameLength = 64;
 80058cc:	2340      	movs	r3, #64	; 0x40
 80058ce:	633b      	str	r3, [r7, #48]	; 0x30
          mx_sai_config.OutputDrive       = SAI_OUTPUTDRIVE_ENABLE;
 80058d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80058d4:	627b      	str	r3, [r7, #36]	; 0x24
          mx_sai_config.Synchro           = SAI_ASYNCHRONOUS;
 80058d6:	2300      	movs	r3, #0
 80058d8:	623b      	str	r3, [r7, #32]
          mx_sai_config.SynchroExt        = SAI_SYNCEXT_DISABLE;
 80058da:	2300      	movs	r3, #0
 80058dc:	62bb      	str	r3, [r7, #40]	; 0x28
          mx_sai_config.SlotActive        = CODEC_AUDIOFRAME_SLOT_02;
 80058de:	2305      	movs	r3, #5
 80058e0:	637b      	str	r3, [r7, #52]	; 0x34

          /* SAI peripheral initialization: this __weak function can be redefined by the application  */
          if(MX_SAI1_Block_A_Init(&haudio_out_sai, &mx_sai_config) != HAL_OK)
 80058e2:	f107 030c 	add.w	r3, r7, #12
 80058e6:	4619      	mov	r1, r3
 80058e8:	4826      	ldr	r0, [pc, #152]	; (8005984 <BSP_AUDIO_OUT_Init+0x1e0>)
 80058ea:	f000 f899 	bl	8005a20 <MX_SAI1_Block_A_Init>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d003      	beq.n	80058fc <BSP_AUDIO_OUT_Init+0x158>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 80058f4:	f06f 0303 	mvn.w	r3, #3
 80058f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058fa:	e03c      	b.n	8005976 <BSP_AUDIO_OUT_Init+0x1d2>
#endif
          else
          {
#if (USE_AUDIO_CODEC_WM8994 == 1)
            WM8994_Init_t codec_init;
            codec_init.Resolution   = (AudioInit->BitsPerSample == AUDIO_RESOLUTION_32B) ? 3 : 0;
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	2b20      	cmp	r3, #32
 8005902:	d101      	bne.n	8005908 <BSP_AUDIO_OUT_Init+0x164>
 8005904:	2303      	movs	r3, #3
 8005906:	e000      	b.n	800590a <BSP_AUDIO_OUT_Init+0x166>
 8005908:	2300      	movs	r3, #0
 800590a:	647b      	str	r3, [r7, #68]	; 0x44
            /* Fill codec_init structure */
            codec_init.Frequency    = AudioInit->SampleRate;
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	643b      	str	r3, [r7, #64]	; 0x40
            codec_init.InputDevice  = WM8994_IN_NONE;
 8005912:	2300      	movs	r3, #0
 8005914:	63bb      	str	r3, [r7, #56]	; 0x38
            codec_init.OutputDevice = AudioInit->Device;
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Convert volume before sending to the codec */
            codec_init.Volume       = VOLUME_OUT_CONVERT(AudioInit->Volume);
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	691b      	ldr	r3, [r3, #16]
 8005920:	2b64      	cmp	r3, #100	; 0x64
 8005922:	d80a      	bhi.n	800593a <BSP_AUDIO_OUT_Init+0x196>
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	691a      	ldr	r2, [r3, #16]
 8005928:	4613      	mov	r3, r2
 800592a:	019b      	lsls	r3, r3, #6
 800592c:	1a9b      	subs	r3, r3, r2
 800592e:	4a17      	ldr	r2, [pc, #92]	; (800598c <BSP_AUDIO_OUT_Init+0x1e8>)
 8005930:	fba2 2303 	umull	r2, r3, r2, r3
 8005934:	095b      	lsrs	r3, r3, #5
 8005936:	b2db      	uxtb	r3, r3
 8005938:	e000      	b.n	800593c <BSP_AUDIO_OUT_Init+0x198>
 800593a:	233f      	movs	r3, #63	; 0x3f
 800593c:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Initialize the codec internal registers */
            if(Audio_Drv->Init(Audio_CompObj, &codec_init) != 0)
 800593e:	4b14      	ldr	r3, [pc, #80]	; (8005990 <BSP_AUDIO_OUT_Init+0x1ec>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a13      	ldr	r2, [pc, #76]	; (8005994 <BSP_AUDIO_OUT_Init+0x1f0>)
 8005946:	6812      	ldr	r2, [r2, #0]
 8005948:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800594c:	4610      	mov	r0, r2
 800594e:	4798      	blx	r3
 8005950:	4603      	mov	r3, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d002      	beq.n	800595c <BSP_AUDIO_OUT_Init+0x1b8>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 8005956:	f06f 0304 	mvn.w	r3, #4
 800595a:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
#endif
            if(ret == BSP_ERROR_NONE)
 800595c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800595e:	2b00      	cmp	r3, #0
 8005960:	d109      	bne.n	8005976 <BSP_AUDIO_OUT_Init+0x1d2>
            {
              /* Update BSP AUDIO OUT state */
              Audio_Out_Ctx[Instance].State = AUDIO_OUT_STATE_STOP;
 8005962:	4907      	ldr	r1, [pc, #28]	; (8005980 <BSP_AUDIO_OUT_Init+0x1dc>)
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	4613      	mov	r3, r2
 8005968:	00db      	lsls	r3, r3, #3
 800596a:	4413      	add	r3, r2
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	440b      	add	r3, r1
 8005970:	331c      	adds	r3, #28
 8005972:	2202      	movs	r2, #2
 8005974:	601a      	str	r2, [r3, #0]
	}
      }
    }
  }

  return ret;
 8005976:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8005978:	4618      	mov	r0, r3
 800597a:	3750      	adds	r7, #80	; 0x50
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}
 8005980:	24000714 	.word	0x24000714
 8005984:	24001e58 	.word	0x24001e58
 8005988:	40015804 	.word	0x40015804
 800598c:	51eb851f 	.word	0x51eb851f
 8005990:	24000668 	.word	0x24000668
 8005994:	24000710 	.word	0x24000710

08005998 <BSP_AUDIO_OUT_DeInit>:
  * @brief  De-initializes the audio out peripheral.
  * @param  Instance : AUDIO OUT Instance. It can only be 0 (SAI)
  * @retval None
  */
int32_t BSP_AUDIO_OUT_DeInit(uint32_t Instance)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b084      	sub	sp, #16
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80059a0:	2300      	movs	r3, #0
 80059a2:	60fb      	str	r3, [r7, #12]

  if(Instance >= AUDIO_OUT_INSTANCES_NBR)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d903      	bls.n	80059b2 <BSP_AUDIO_OUT_DeInit+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80059aa:	f06f 0301 	mvn.w	r3, #1
 80059ae:	60fb      	str	r3, [r7, #12]
 80059b0:	e027      	b.n	8005a02 <BSP_AUDIO_OUT_DeInit+0x6a>
  }
  else
  {
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 0U)
    SAI_MspDeInit(&haudio_out_sai);
 80059b2:	4816      	ldr	r0, [pc, #88]	; (8005a0c <BSP_AUDIO_OUT_DeInit+0x74>)
 80059b4:	f001 fa32 	bl	8006e1c <SAI_MspDeInit>
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 0U) */
    /* Initialize the haudio_out_sai Instance parameter */
    haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 80059b8:	4b14      	ldr	r3, [pc, #80]	; (8005a0c <BSP_AUDIO_OUT_DeInit+0x74>)
 80059ba:	4a15      	ldr	r2, [pc, #84]	; (8005a10 <BSP_AUDIO_OUT_DeInit+0x78>)
 80059bc:	601a      	str	r2, [r3, #0]
    /* Call the Media layer stop function */
    if(Audio_Drv->DeInit(Audio_CompObj) != 0)
 80059be:	4b15      	ldr	r3, [pc, #84]	; (8005a14 <BSP_AUDIO_OUT_DeInit+0x7c>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	4a14      	ldr	r2, [pc, #80]	; (8005a18 <BSP_AUDIO_OUT_DeInit+0x80>)
 80059c6:	6812      	ldr	r2, [r2, #0]
 80059c8:	4610      	mov	r0, r2
 80059ca:	4798      	blx	r3
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d003      	beq.n	80059da <BSP_AUDIO_OUT_DeInit+0x42>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80059d2:	f06f 0304 	mvn.w	r3, #4
 80059d6:	60fb      	str	r3, [r7, #12]
 80059d8:	e013      	b.n	8005a02 <BSP_AUDIO_OUT_DeInit+0x6a>
    }
    else if(HAL_SAI_DeInit(&haudio_out_sai) != HAL_OK)
 80059da:	480c      	ldr	r0, [pc, #48]	; (8005a0c <BSP_AUDIO_OUT_DeInit+0x74>)
 80059dc:	f00d fa7c 	bl	8012ed8 <HAL_SAI_DeInit>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d003      	beq.n	80059ee <BSP_AUDIO_OUT_DeInit+0x56>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80059e6:	f06f 0303 	mvn.w	r3, #3
 80059ea:	60fb      	str	r3, [r7, #12]
 80059ec:	e009      	b.n	8005a02 <BSP_AUDIO_OUT_DeInit+0x6a>
    }
    else
    {
      /* Update BSP AUDIO OUT state */
      Audio_Out_Ctx[Instance].State = AUDIO_OUT_STATE_RESET;
 80059ee:	490b      	ldr	r1, [pc, #44]	; (8005a1c <BSP_AUDIO_OUT_DeInit+0x84>)
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	4613      	mov	r3, r2
 80059f4:	00db      	lsls	r3, r3, #3
 80059f6:	4413      	add	r3, r2
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	440b      	add	r3, r1
 80059fc:	331c      	adds	r3, #28
 80059fe:	2200      	movs	r2, #0
 8005a00:	601a      	str	r2, [r3, #0]
    }
  }
  /* Return BSP status */
  return ret;
 8005a02:	68fb      	ldr	r3, [r7, #12]
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3710      	adds	r7, #16
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	24001e58 	.word	0x24001e58
 8005a10:	40015804 	.word	0x40015804
 8005a14:	24000668 	.word	0x24000668
 8005a18:	24000710 	.word	0x24000710
 8005a1c:	24000714 	.word	0x24000714

08005a20 <MX_SAI1_Block_A_Init>:
  * @param  MXConfig SAI configuration structure
  * @note   Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SAI1_Block_A_Init(SAI_HandleTypeDef* hsai, MX_SAI_Config_t *MXConfig)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b084      	sub	sp, #16
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	73fb      	strb	r3, [r7, #15]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(hsai);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005a3c:	601a      	str	r2, [r3, #0]

  /* Configure SAI1_Block_A */
  hsai->Init.MonoStereoMode       = MXConfig->MonoStereoMode;
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	68da      	ldr	r2, [r3, #12]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai->Init.AudioFrequency       = MXConfig->AudioFrequency;
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	621a      	str	r2, [r3, #32]
  hsai->Init.AudioMode            = MXConfig->AudioMode;
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	685a      	ldr	r2, [r3, #4]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	605a      	str	r2, [r3, #4]
  hsai->Init.NoDivider            = SAI_MASTERDIVIDER_ENABLE;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	619a      	str	r2, [r3, #24]
  hsai->Init.Protocol             = SAI_FREE_PROTOCOL;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.DataSize             = MXConfig->DataSize;
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	689a      	ldr	r2, [r3, #8]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->Init.FirstBit             = SAI_FIRSTBIT_MSB;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->Init.ClockStrobing        = MXConfig->ClockStrobing;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	691a      	ldr	r2, [r3, #16]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->Init.Synchro              = MXConfig->Synchro;
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	695a      	ldr	r2, [r3, #20]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	609a      	str	r2, [r3, #8]
  hsai->Init.OutputDrive          = MXConfig->OutputDrive;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	699a      	ldr	r2, [r3, #24]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	615a      	str	r2, [r3, #20]
  hsai->Init.FIFOThreshold        = SAI_FIFOTHRESHOLD_1QF;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	61da      	str	r2, [r3, #28]
  hsai->Init.SynchroExt           = MXConfig->SynchroExt;
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	69da      	ldr	r2, [r3, #28]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	60da      	str	r2, [r3, #12]
  hsai->Init.CompandingMode       = SAI_NOCOMPANDING;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.TriState             = SAI_OUTPUT_NOTRELEASED;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	635a      	str	r2, [r3, #52]	; 0x34
  hsai->Init.Mckdiv               = 0;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	625a      	str	r2, [r3, #36]	; 0x24
  hsai->Init.MckOverSampling      = SAI_MCK_OVERSAMPLING_DISABLE;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	629a      	str	r2, [r3, #40]	; 0x28
  hsai->Init.MckOutput            = SAI_MCK_OUTPUT_DISABLE;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	611a      	str	r2, [r3, #16]
  hsai->Init.PdmInit.Activation   = DISABLE;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai->Init.PdmInit.ClockEnable  = 0;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	641a      	str	r2, [r3, #64]	; 0x40
  hsai->Init.PdmInit.MicPairsNbr  = 0;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Configure SAI_Block_x Frame */
  hsai->FrameInit.FrameLength       = MXConfig->FrameLength;
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	6a1a      	ldr	r2, [r3, #32]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->FrameInit.ActiveFrameLength = MXConfig->ActiveFrameLength;
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->FrameInit.FSDefinition      = SAI_FS_CHANNEL_IDENTIFICATION;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005ade:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity        = SAI_FS_ACTIVE_LOW;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset          = SAI_FS_BEFOREFIRSTBIT;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005aec:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure SAI Block_x Slot */
  hsai->SlotInit.FirstBitOffset     = 0;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotSize           = SAI_SLOTSIZE_DATASIZE;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai->SlotInit.SlotNumber         = 4;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2204      	movs	r2, #4
 8005afe:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive         = MXConfig->SlotActive;
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	675a      	str	r2, [r3, #116]	; 0x74

  if(HAL_SAI_Init(hsai) != HAL_OK)
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f00c ff45 	bl	8012998 <HAL_SAI_Init>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d001      	beq.n	8005b18 <MX_SAI1_Block_A_Init+0xf8>
  {
    ret = HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_SAI_ENABLE(hsai);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005b26:	601a      	str	r2, [r3, #0]

  return ret;
 8005b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3710      	adds	r7, #16
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}

08005b32 <MX_SAI1_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SAI1_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t SampleRate)
{
 8005b32:	b580      	push	{r7, lr}
 8005b34:	b0b4      	sub	sp, #208	; 0xd0
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
 8005b3a:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  HAL_StatusTypeDef ret = HAL_OK;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;
  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8005b42:	f107 030c 	add.w	r3, r7, #12
 8005b46:	4618      	mov	r0, r3
 8005b48:	f00b fb68 	bl	801121c <HAL_RCCEx_GetPeriphCLKConfig>

  /* Set the PLL configuration according to the audio frequency */
  if((SampleRate == AUDIO_FREQUENCY_11K) || (SampleRate == AUDIO_FREQUENCY_22K) || (SampleRate == AUDIO_FREQUENCY_44K))
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	f642 3211 	movw	r2, #11025	; 0x2b11
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d009      	beq.n	8005b6a <MX_SAI1_ClockConfig+0x38>
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	f245 6222 	movw	r2, #22050	; 0x5622
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d004      	beq.n	8005b6a <MX_SAI1_ClockConfig+0x38>
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	f64a 4244 	movw	r2, #44100	; 0xac44
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d105      	bne.n	8005b76 <MX_SAI1_ClockConfig+0x44>
  {
    rcc_ex_clk_init_struct.PLL2.PLL2P = 38;
 8005b6a:	2326      	movs	r3, #38	; 0x26
 8005b6c:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLL2.PLL2N = 429;
 8005b6e:	f240 13ad 	movw	r3, #429	; 0x1ad
 8005b72:	617b      	str	r3, [r7, #20]
 8005b74:	e004      	b.n	8005b80 <MX_SAI1_ClockConfig+0x4e>
  }
  else /* AUDIO_FREQUENCY_8K, AUDIO_FREQUENCY_16K, AUDIO_FREQUENCY_32K, AUDIO_FREQUENCY_48K, AUDIO_FREQUENCY_96K */
  {
    rcc_ex_clk_init_struct.PLL2.PLL2P = 7;
 8005b76:	2307      	movs	r3, #7
 8005b78:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLL2.PLL2N = 344;
 8005b7a:	f44f 73ac 	mov.w	r3, #344	; 0x158
 8005b7e:	617b      	str	r3, [r7, #20]
  }
  rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8005b80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b84:	60fb      	str	r3, [r7, #12]
  rcc_ex_clk_init_struct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 8005b86:	2301      	movs	r3, #1
 8005b88:	667b      	str	r3, [r7, #100]	; 0x64
  rcc_ex_clk_init_struct.PLL2.PLL2Q = 1;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	61fb      	str	r3, [r7, #28]
  rcc_ex_clk_init_struct.PLL2.PLL2R = 1;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	623b      	str	r3, [r7, #32]
  rcc_ex_clk_init_struct.PLL2.PLL2M = 25;
 8005b92:	2319      	movs	r3, #25
 8005b94:	613b      	str	r3, [r7, #16]
  if(HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct) != HAL_OK)
 8005b96:	f107 030c 	add.w	r3, r7, #12
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f00a fbce 	bl	801033c <HAL_RCCEx_PeriphCLKConfig>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d002      	beq.n	8005bac <MX_SAI1_ClockConfig+0x7a>
  {
    ret = HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
  }

  return ret;
 8005bac:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	37d0      	adds	r7, #208	; 0xd0
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}

08005bb8 <MX_SAI4_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SAI4_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t SampleRate)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b0b4      	sub	sp, #208	; 0xd0
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  HAL_StatusTypeDef ret = HAL_OK;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;
  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8005bc8:	f107 030c 	add.w	r3, r7, #12
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f00b fb25 	bl	801121c <HAL_RCCEx_GetPeriphCLKConfig>

  /* Set the PLL configuration according to the audio frequency */
  if((SampleRate == AUDIO_FREQUENCY_11K) || (SampleRate == AUDIO_FREQUENCY_22K) || (SampleRate == AUDIO_FREQUENCY_44K))
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	f642 3211 	movw	r2, #11025	; 0x2b11
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d009      	beq.n	8005bf0 <MX_SAI4_ClockConfig+0x38>
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	f245 6222 	movw	r2, #22050	; 0x5622
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d004      	beq.n	8005bf0 <MX_SAI4_ClockConfig+0x38>
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	f64a 4244 	movw	r2, #44100	; 0xac44
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d105      	bne.n	8005bfc <MX_SAI4_ClockConfig+0x44>
  {
    rcc_ex_clk_init_struct.PLL2.PLL2P = 38;
 8005bf0:	2326      	movs	r3, #38	; 0x26
 8005bf2:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLL2.PLL2N = 429;
 8005bf4:	f240 13ad 	movw	r3, #429	; 0x1ad
 8005bf8:	617b      	str	r3, [r7, #20]
 8005bfa:	e004      	b.n	8005c06 <MX_SAI4_ClockConfig+0x4e>
  }
  else /* AUDIO_FREQUENCY_8K, AUDIO_FREQUENCY_16K, AUDIO_FREQUENCY_32K, AUDIO_FREQUENCY_48K, AUDIO_FREQUENCY_96K */
  {
    rcc_ex_clk_init_struct.PLL2.PLL2P = 7;
 8005bfc:	2307      	movs	r3, #7
 8005bfe:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLL2.PLL2N = 344;
 8005c00:	f44f 73ac 	mov.w	r3, #344	; 0x158
 8005c04:	617b      	str	r3, [r7, #20]
  }
  /* SAI clock config */
  rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI4A;
 8005c06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c0a:	60fb      	str	r3, [r7, #12]
  rcc_ex_clk_init_struct.Sai4AClockSelection = RCC_SAI4ACLKSOURCE_PLL2;
 8005c0c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005c10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  rcc_ex_clk_init_struct.PLL2.PLL2Q = 1;
 8005c14:	2301      	movs	r3, #1
 8005c16:	61fb      	str	r3, [r7, #28]
  rcc_ex_clk_init_struct.PLL2.PLL2R = 1;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	623b      	str	r3, [r7, #32]
  rcc_ex_clk_init_struct.PLL2.PLL2M = 25;
 8005c1c:	2319      	movs	r3, #25
 8005c1e:	613b      	str	r3, [r7, #16]
  if(HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct) != HAL_OK)
 8005c20:	f107 030c 	add.w	r3, r7, #12
 8005c24:	4618      	mov	r0, r3
 8005c26:	f00a fb89 	bl	801033c <HAL_RCCEx_PeriphCLKConfig>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d002      	beq.n	8005c36 <MX_SAI4_ClockConfig+0x7e>
  {
    ret = HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
  }

  return ret;
 8005c36:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	37d0      	adds	r7, #208	; 0xd0
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
	...

08005c44 <BSP_AUDIO_OUT_Play>:
  * @param  NbrOfBytes   Size of total samples in bytes
  *                      BitsPerSample: 16 or 32
  * @retval BSP status
  */
int32_t BSP_AUDIO_OUT_Play(uint32_t Instance, uint8_t* pData, uint32_t NbrOfBytes)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b086      	sub	sp, #24
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	60b9      	str	r1, [r7, #8]
 8005c4e:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8005c50:	2300      	movs	r3, #0
 8005c52:	617b      	str	r3, [r7, #20]

  if((Instance >= AUDIO_OUT_INSTANCES_NBR) || (((NbrOfBytes / (Audio_Out_Ctx[Instance].BitsPerSample/8U)) > 0xFFFFU)))
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d80f      	bhi.n	8005c7a <BSP_AUDIO_OUT_Play+0x36>
 8005c5a:	4933      	ldr	r1, [pc, #204]	; (8005d28 <BSP_AUDIO_OUT_Play+0xe4>)
 8005c5c:	68fa      	ldr	r2, [r7, #12]
 8005c5e:	4613      	mov	r3, r2
 8005c60:	00db      	lsls	r3, r3, #3
 8005c62:	4413      	add	r3, r2
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	440b      	add	r3, r1
 8005c68:	330c      	adds	r3, #12
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	08db      	lsrs	r3, r3, #3
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c78:	d303      	bcc.n	8005c82 <BSP_AUDIO_OUT_Play+0x3e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005c7a:	f06f 0301 	mvn.w	r3, #1
 8005c7e:	617b      	str	r3, [r7, #20]
 8005c80:	e04d      	b.n	8005d1e <BSP_AUDIO_OUT_Play+0xda>
  }
  else if((Audio_Out_Ctx[Instance].State == AUDIO_OUT_STATE_STOP) || (Audio_Out_Ctx[Instance].State == AUDIO_OUT_STATE_RESET))
 8005c82:	4929      	ldr	r1, [pc, #164]	; (8005d28 <BSP_AUDIO_OUT_Play+0xe4>)
 8005c84:	68fa      	ldr	r2, [r7, #12]
 8005c86:	4613      	mov	r3, r2
 8005c88:	00db      	lsls	r3, r3, #3
 8005c8a:	4413      	add	r3, r2
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	440b      	add	r3, r1
 8005c90:	331c      	adds	r3, #28
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2b02      	cmp	r3, #2
 8005c96:	d00a      	beq.n	8005cae <BSP_AUDIO_OUT_Play+0x6a>
 8005c98:	4923      	ldr	r1, [pc, #140]	; (8005d28 <BSP_AUDIO_OUT_Play+0xe4>)
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	4613      	mov	r3, r2
 8005c9e:	00db      	lsls	r3, r3, #3
 8005ca0:	4413      	add	r3, r2
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	440b      	add	r3, r1
 8005ca6:	331c      	adds	r3, #28
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d134      	bne.n	8005d18 <BSP_AUDIO_OUT_Play+0xd4>
  {
    if(HAL_SAI_Transmit_DMA(&haudio_out_sai, pData, (uint16_t)(NbrOfBytes /(Audio_Out_Ctx[Instance].BitsPerSample/8U))) != HAL_OK)
 8005cae:	491e      	ldr	r1, [pc, #120]	; (8005d28 <BSP_AUDIO_OUT_Play+0xe4>)
 8005cb0:	68fa      	ldr	r2, [r7, #12]
 8005cb2:	4613      	mov	r3, r2
 8005cb4:	00db      	lsls	r3, r3, #3
 8005cb6:	4413      	add	r3, r2
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	440b      	add	r3, r1
 8005cbc:	330c      	adds	r3, #12
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	08db      	lsrs	r3, r3, #3
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	461a      	mov	r2, r3
 8005ccc:	68b9      	ldr	r1, [r7, #8]
 8005cce:	4817      	ldr	r0, [pc, #92]	; (8005d2c <BSP_AUDIO_OUT_Play+0xe8>)
 8005cd0:	f00d f9fa 	bl	80130c8 <HAL_SAI_Transmit_DMA>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d002      	beq.n	8005ce0 <BSP_AUDIO_OUT_Play+0x9c>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8005cda:	f06f 0303 	mvn.w	r3, #3
 8005cde:	617b      	str	r3, [r7, #20]
    }
    if(ret == BSP_ERROR_NONE)
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d11b      	bne.n	8005d1e <BSP_AUDIO_OUT_Play+0xda>
    {
      if(Audio_Drv->Play(Audio_CompObj) != BSP_ERROR_NONE)
 8005ce6:	4b12      	ldr	r3, [pc, #72]	; (8005d30 <BSP_AUDIO_OUT_Play+0xec>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	4a11      	ldr	r2, [pc, #68]	; (8005d34 <BSP_AUDIO_OUT_Play+0xf0>)
 8005cee:	6812      	ldr	r2, [r2, #0]
 8005cf0:	4610      	mov	r0, r2
 8005cf2:	4798      	blx	r3
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d003      	beq.n	8005d02 <BSP_AUDIO_OUT_Play+0xbe>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005cfa:	f06f 0304 	mvn.w	r3, #4
 8005cfe:	617b      	str	r3, [r7, #20]
    if(ret == BSP_ERROR_NONE)
 8005d00:	e00d      	b.n	8005d1e <BSP_AUDIO_OUT_Play+0xda>
      }
      else
      {
        /* Update BSP AUDIO OUT state */
        Audio_Out_Ctx[Instance].State = AUDIO_OUT_STATE_PLAYING;
 8005d02:	4909      	ldr	r1, [pc, #36]	; (8005d28 <BSP_AUDIO_OUT_Play+0xe4>)
 8005d04:	68fa      	ldr	r2, [r7, #12]
 8005d06:	4613      	mov	r3, r2
 8005d08:	00db      	lsls	r3, r3, #3
 8005d0a:	4413      	add	r3, r2
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	440b      	add	r3, r1
 8005d10:	331c      	adds	r3, #28
 8005d12:	2201      	movs	r2, #1
 8005d14:	601a      	str	r2, [r3, #0]
    if(ret == BSP_ERROR_NONE)
 8005d16:	e002      	b.n	8005d1e <BSP_AUDIO_OUT_Play+0xda>
      }
    }
  }
  else
  {
    ret = BSP_ERROR_BUSY;
 8005d18:	f06f 0302 	mvn.w	r3, #2
 8005d1c:	617b      	str	r3, [r7, #20]
  }

  /* Return BSP status */
  return ret;
 8005d1e:	697b      	ldr	r3, [r7, #20]
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3718      	adds	r7, #24
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	24000714 	.word	0x24000714
 8005d2c:	24001e58 	.word	0x24001e58
 8005d30:	24000668 	.word	0x24000668
 8005d34:	24000710 	.word	0x24000710

08005d38 <BSP_AUDIO_OUT_Stop>:
  * @brief  Stops audio playing and Power down the Audio Codec.
  * @param  Instance : AUDIO OUT Instance. It can only be 0 (SAI)
  * @retval BSP status
  */
int32_t BSP_AUDIO_OUT_Stop(uint32_t Instance)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8005d40:	2300      	movs	r3, #0
 8005d42:	60fb      	str	r3, [r7, #12]

  if(Instance >= AUDIO_OUT_INSTANCES_NBR)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d903      	bls.n	8005d52 <BSP_AUDIO_OUT_Stop+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005d4a:	f06f 0301 	mvn.w	r3, #1
 8005d4e:	60fb      	str	r3, [r7, #12]
 8005d50:	e033      	b.n	8005dba <BSP_AUDIO_OUT_Stop+0x82>
  }
  else if (Audio_Out_Ctx[Instance].State == AUDIO_OUT_STATE_PLAYING)
 8005d52:	491c      	ldr	r1, [pc, #112]	; (8005dc4 <BSP_AUDIO_OUT_Stop+0x8c>)
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	4613      	mov	r3, r2
 8005d58:	00db      	lsls	r3, r3, #3
 8005d5a:	4413      	add	r3, r2
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	440b      	add	r3, r1
 8005d60:	331c      	adds	r3, #28
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d125      	bne.n	8005db4 <BSP_AUDIO_OUT_Stop+0x7c>
  {
    /* Call the Media layer stop function */
    if(Audio_Drv->Stop(Audio_CompObj, CODEC_PDWN_SW) != BSP_ERROR_NONE)
 8005d68:	4b17      	ldr	r3, [pc, #92]	; (8005dc8 <BSP_AUDIO_OUT_Stop+0x90>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	699b      	ldr	r3, [r3, #24]
 8005d6e:	4a17      	ldr	r2, [pc, #92]	; (8005dcc <BSP_AUDIO_OUT_Stop+0x94>)
 8005d70:	6812      	ldr	r2, [r2, #0]
 8005d72:	2101      	movs	r1, #1
 8005d74:	4610      	mov	r0, r2
 8005d76:	4798      	blx	r3
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d003      	beq.n	8005d86 <BSP_AUDIO_OUT_Stop+0x4e>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005d7e:	f06f 0304 	mvn.w	r3, #4
 8005d82:	60fb      	str	r3, [r7, #12]
 8005d84:	e019      	b.n	8005dba <BSP_AUDIO_OUT_Stop+0x82>
    }
    else
    {
      if(HAL_SAI_DMAStop(&haudio_out_sai)!= HAL_OK)
 8005d86:	4812      	ldr	r0, [pc, #72]	; (8005dd0 <BSP_AUDIO_OUT_Stop+0x98>)
 8005d88:	f00d f920 	bl	8012fcc <HAL_SAI_DMAStop>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d002      	beq.n	8005d98 <BSP_AUDIO_OUT_Stop+0x60>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 8005d92:	f06f 0303 	mvn.w	r3, #3
 8005d96:	60fb      	str	r3, [r7, #12]
      }

      if( ret==BSP_ERROR_NONE)
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d10d      	bne.n	8005dba <BSP_AUDIO_OUT_Stop+0x82>
      {
        /* Update BSP AUDIO OUT state */
        Audio_Out_Ctx[Instance].State = AUDIO_OUT_STATE_STOP;
 8005d9e:	4909      	ldr	r1, [pc, #36]	; (8005dc4 <BSP_AUDIO_OUT_Stop+0x8c>)
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	4613      	mov	r3, r2
 8005da4:	00db      	lsls	r3, r3, #3
 8005da6:	4413      	add	r3, r2
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	440b      	add	r3, r1
 8005dac:	331c      	adds	r3, #28
 8005dae:	2202      	movs	r2, #2
 8005db0:	601a      	str	r2, [r3, #0]
 8005db2:	e002      	b.n	8005dba <BSP_AUDIO_OUT_Stop+0x82>
      }
    }
  }
  else
  {
    ret = BSP_ERROR_BUSY;
 8005db4:	f06f 0302 	mvn.w	r3, #2
 8005db8:	60fb      	str	r3, [r7, #12]
  }

  /* Return BSP status */
  return ret;
 8005dba:	68fb      	ldr	r3, [r7, #12]
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3710      	adds	r7, #16
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	24000714 	.word	0x24000714
 8005dc8:	24000668 	.word	0x24000668
 8005dcc:	24000710 	.word	0x24000710
 8005dd0:	24001e58 	.word	0x24001e58

08005dd4 <BSP_AUDIO_OUT_SetDevice>:
  * @param  Instance AUDIO OUT Instance. It can only be 0 (SAI) or 1 (I2S)
  * @param  Device  The audio output device
  * @retval BSP status
  */
int32_t BSP_AUDIO_OUT_SetDevice(uint32_t Instance, uint32_t Device)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b085      	sub	sp, #20
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8005dde:	2300      	movs	r3, #0
 8005de0:	60fb      	str	r3, [r7, #12]

  UNUSED(Device);

  if (Instance >= AUDIO_OUT_INSTANCES_NBR)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d903      	bls.n	8005df0 <BSP_AUDIO_OUT_SetDevice+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005de8:	f06f 0301 	mvn.w	r3, #1
 8005dec:	60fb      	str	r3, [r7, #12]
 8005dee:	e00d      	b.n	8005e0c <BSP_AUDIO_OUT_SetDevice+0x38>
  }
  /* Check audio out state */
  else if (Audio_Out_Ctx[Instance].State != AUDIO_OUT_STATE_STOP)
 8005df0:	490a      	ldr	r1, [pc, #40]	; (8005e1c <BSP_AUDIO_OUT_SetDevice+0x48>)
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	4613      	mov	r3, r2
 8005df6:	00db      	lsls	r3, r3, #3
 8005df8:	4413      	add	r3, r2
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	440b      	add	r3, r1
 8005dfe:	331c      	adds	r3, #28
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	d002      	beq.n	8005e0c <BSP_AUDIO_OUT_SetDevice+0x38>
  {
    ret = BSP_ERROR_BUSY;
 8005e06:	f06f 0302 	mvn.w	r3, #2
 8005e0a:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do because there is only one device (AUDIO_OUT_DEVICE_HEADPHONE) */
  }

  /* Return BSP status */
  return ret;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3714      	adds	r7, #20
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr
 8005e1a:	bf00      	nop
 8005e1c:	24000714 	.word	0x24000714

08005e20 <BSP_AUDIO_OUT_IRQHandler>:
  /* Return BSP status */
  return ret;
}

void BSP_AUDIO_OUT_IRQHandler(uint32_t Instance)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b082      	sub	sp, #8
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  if (Instance == 0U)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d105      	bne.n	8005e3a <BSP_AUDIO_OUT_IRQHandler+0x1a>
  {
    HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
 8005e2e:	4b05      	ldr	r3, [pc, #20]	; (8005e44 <BSP_AUDIO_OUT_IRQHandler+0x24>)
 8005e30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e34:	4618      	mov	r0, r3
 8005e36:	f005 f8fd 	bl	800b034 <HAL_DMA_IRQHandler>
  }
}
 8005e3a:	bf00      	nop
 8005e3c:	3708      	adds	r7, #8
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	24001e58 	.word	0x24001e58

08005e48 <HAL_SAI_TxCpltCallback>:
  * @brief  Tx Transfer completed callbacks.
  * @param  hsai SAI handle
  * @retval None
  */
void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  /* Manage the remaining file size and new address offset: This function
     should be coded by user (its prototype is already declared in stm32h747i_discovery_audio.h) */
  BSP_AUDIO_OUT_TransferComplete_CallBack(0);
 8005e50:	2000      	movs	r0, #0
 8005e52:	f00e f97f 	bl	8014154 <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 8005e56:	bf00      	nop
 8005e58:	3708      	adds	r7, #8
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}

08005e5e <HAL_SAI_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hsai  SAI handle
  * @retval None
  */
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8005e5e:	b580      	push	{r7, lr}
 8005e60:	b082      	sub	sp, #8
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  /* Manage the remaining file size and new address offset: This function
     should be coded by user (its prototype is already declared in stm32h747i_discovery_audio.h) */
  BSP_AUDIO_OUT_HalfTransfer_CallBack(0);
 8005e66:	2000      	movs	r0, #0
 8005e68:	f00e f98a 	bl	8014180 <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 8005e6c:	bf00      	nop
 8005e6e:	3708      	adds	r7, #8
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai  SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b082      	sub	sp, #8
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a06      	ldr	r2, [pc, #24]	; (8005e9c <HAL_SAI_ErrorCallback+0x28>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d103      	bne.n	8005e8e <HAL_SAI_ErrorCallback+0x1a>
  {
  BSP_AUDIO_OUT_Error_CallBack(0);
 8005e86:	2000      	movs	r0, #0
 8005e88:	f00e f990 	bl	80141ac <BSP_AUDIO_OUT_Error_CallBack>
  }
  else
  {
  BSP_AUDIO_IN_Error_CallBack(0);
  }
}
 8005e8c:	e002      	b.n	8005e94 <HAL_SAI_ErrorCallback+0x20>
  BSP_AUDIO_IN_Error_CallBack(0);
 8005e8e:	2000      	movs	r0, #0
 8005e90:	f00e fb9c 	bl	80145cc <BSP_AUDIO_IN_Error_CallBack>
}
 8005e94:	bf00      	nop
 8005e96:	3708      	adds	r7, #8
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}
 8005e9c:	40015804 	.word	0x40015804

08005ea0 <BSP_AUDIO_IN_Init>:
  *       - 1 if SAI PDM is used
  * @param  AudioInit Init structure
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_Init(uint32_t Instance, BSP_AUDIO_Init_t* AudioInit)
{
 8005ea0:	b590      	push	{r4, r7, lr}
 8005ea2:	b093      	sub	sp, #76	; 0x4c
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]


  if(Instance >= AUDIO_IN_INSTANCES_NBR)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d902      	bls.n	8005eb6 <BSP_AUDIO_IN_Init+0x16>
  {
    return BSP_ERROR_WRONG_PARAM;
 8005eb0:	f06f 0301 	mvn.w	r3, #1
 8005eb4:	e17d      	b.n	80061b2 <BSP_AUDIO_IN_Init+0x312>
  }
  else
  {
    /* Store the audio record context */
    Audio_In_Ctx[Instance].Device          = AudioInit->Device;
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	6819      	ldr	r1, [r3, #0]
 8005eba:	48a0      	ldr	r0, [pc, #640]	; (800613c <BSP_AUDIO_IN_Init+0x29c>)
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	4613      	mov	r3, r2
 8005ec0:	005b      	lsls	r3, r3, #1
 8005ec2:	4413      	add	r3, r2
 8005ec4:	011b      	lsls	r3, r3, #4
 8005ec6:	4403      	add	r3, r0
 8005ec8:	3304      	adds	r3, #4
 8005eca:	6019      	str	r1, [r3, #0]
    Audio_In_Ctx[Instance].ChannelsNbr     = AudioInit->ChannelsNbr;
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	68d9      	ldr	r1, [r3, #12]
 8005ed0:	489a      	ldr	r0, [pc, #616]	; (800613c <BSP_AUDIO_IN_Init+0x29c>)
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	4613      	mov	r3, r2
 8005ed6:	005b      	lsls	r3, r3, #1
 8005ed8:	4413      	add	r3, r2
 8005eda:	011b      	lsls	r3, r3, #4
 8005edc:	4403      	add	r3, r0
 8005ede:	3310      	adds	r3, #16
 8005ee0:	6019      	str	r1, [r3, #0]
    Audio_In_Ctx[Instance].SampleRate      = AudioInit->SampleRate;
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	6859      	ldr	r1, [r3, #4]
 8005ee6:	4895      	ldr	r0, [pc, #596]	; (800613c <BSP_AUDIO_IN_Init+0x29c>)
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	4613      	mov	r3, r2
 8005eec:	005b      	lsls	r3, r3, #1
 8005eee:	4413      	add	r3, r2
 8005ef0:	011b      	lsls	r3, r3, #4
 8005ef2:	4403      	add	r3, r0
 8005ef4:	3308      	adds	r3, #8
 8005ef6:	6019      	str	r1, [r3, #0]
    Audio_In_Ctx[Instance].BitsPerSample   = AudioInit->BitsPerSample;
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	6899      	ldr	r1, [r3, #8]
 8005efc:	488f      	ldr	r0, [pc, #572]	; (800613c <BSP_AUDIO_IN_Init+0x29c>)
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	4613      	mov	r3, r2
 8005f02:	005b      	lsls	r3, r3, #1
 8005f04:	4413      	add	r3, r2
 8005f06:	011b      	lsls	r3, r3, #4
 8005f08:	4403      	add	r3, r0
 8005f0a:	330c      	adds	r3, #12
 8005f0c:	6019      	str	r1, [r3, #0]
    Audio_In_Ctx[Instance].Volume          = AudioInit->Volume;
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	6919      	ldr	r1, [r3, #16]
 8005f12:	488a      	ldr	r0, [pc, #552]	; (800613c <BSP_AUDIO_IN_Init+0x29c>)
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	4613      	mov	r3, r2
 8005f18:	005b      	lsls	r3, r3, #1
 8005f1a:	4413      	add	r3, r2
 8005f1c:	011b      	lsls	r3, r3, #4
 8005f1e:	4403      	add	r3, r0
 8005f20:	3320      	adds	r3, #32
 8005f22:	6019      	str	r1, [r3, #0]
    Audio_In_Ctx[Instance].State           = AUDIO_IN_STATE_RESET;
 8005f24:	4985      	ldr	r1, [pc, #532]	; (800613c <BSP_AUDIO_IN_Init+0x29c>)
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	4613      	mov	r3, r2
 8005f2a:	005b      	lsls	r3, r3, #1
 8005f2c:	4413      	add	r3, r2
 8005f2e:	011b      	lsls	r3, r3, #4
 8005f30:	440b      	add	r3, r1
 8005f32:	3324      	adds	r3, #36	; 0x24
 8005f34:	2200      	movs	r2, #0
 8005f36:	601a      	str	r2, [r3, #0]

    if(Instance == 0U)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	f040 80be 	bne.w	80060bc <BSP_AUDIO_IN_Init+0x21c>
    {
      /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */
      if(MX_SAI1_ClockConfig(&haudio_in_sai, AudioInit->SampleRate) != HAL_OK)
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	4619      	mov	r1, r3
 8005f46:	487e      	ldr	r0, [pc, #504]	; (8006140 <BSP_AUDIO_IN_Init+0x2a0>)
 8005f48:	f7ff fdf3 	bl	8005b32 <MX_SAI1_ClockConfig>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d002      	beq.n	8005f58 <BSP_AUDIO_IN_Init+0xb8>
      {
        return BSP_ERROR_CLOCK_FAILURE;
 8005f52:	f06f 0308 	mvn.w	r3, #8
 8005f56:	e12c      	b.n	80061b2 <BSP_AUDIO_IN_Init+0x312>
      }
      haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8005f58:	4b79      	ldr	r3, [pc, #484]	; (8006140 <BSP_AUDIO_IN_Init+0x2a0>)
 8005f5a:	4a7a      	ldr	r2, [pc, #488]	; (8006144 <BSP_AUDIO_IN_Init+0x2a4>)
 8005f5c:	601a      	str	r2, [r3, #0]
        {
          return BSP_ERROR_PERIPH_FAILURE;
        }
      }
#else
      SAI_MspInit(&haudio_in_sai);
 8005f5e:	4878      	ldr	r0, [pc, #480]	; (8006140 <BSP_AUDIO_IN_Init+0x2a0>)
 8005f60:	f000 fcbc 	bl	80068dc <SAI_MspInit>
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 1U) */
      MX_SAI_Config_t mx_config;

      mx_config.MonoStereoMode = (AudioInit->ChannelsNbr == 1U) ? SAI_MONOMODE : SAI_STEREOMODE;
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d102      	bne.n	8005f72 <BSP_AUDIO_IN_Init+0xd2>
 8005f6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f70:	e000      	b.n	8005f74 <BSP_AUDIO_IN_Init+0xd4>
 8005f72:	2300      	movs	r3, #0
 8005f74:	617b      	str	r3, [r7, #20]
      mx_config.FrameLength       = 64;
 8005f76:	2340      	movs	r3, #64	; 0x40
 8005f78:	62bb      	str	r3, [r7, #40]	; 0x28
      mx_config.ActiveFrameLength = 32;
 8005f7a:	2320      	movs	r3, #32
 8005f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      mx_config.DataSize =(AudioInit->BitsPerSample == AUDIO_RESOLUTION_32B)?SAI_DATASIZE_32: SAI_DATASIZE_16;
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	2b20      	cmp	r3, #32
 8005f84:	d101      	bne.n	8005f8a <BSP_AUDIO_IN_Init+0xea>
 8005f86:	23e0      	movs	r3, #224	; 0xe0
 8005f88:	e000      	b.n	8005f8c <BSP_AUDIO_IN_Init+0xec>
 8005f8a:	2380      	movs	r3, #128	; 0x80
 8005f8c:	613b      	str	r3, [r7, #16]
      mx_config.FrameLength=(AudioInit->BitsPerSample == AUDIO_RESOLUTION_32B)?128: 64;
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	2b20      	cmp	r3, #32
 8005f94:	d101      	bne.n	8005f9a <BSP_AUDIO_IN_Init+0xfa>
 8005f96:	2380      	movs	r3, #128	; 0x80
 8005f98:	e000      	b.n	8005f9c <BSP_AUDIO_IN_Init+0xfc>
 8005f9a:	2340      	movs	r3, #64	; 0x40
 8005f9c:	62bb      	str	r3, [r7, #40]	; 0x28
      mx_config.ActiveFrameLength=(AudioInit->BitsPerSample == AUDIO_RESOLUTION_32B)?64: 32;
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	2b20      	cmp	r3, #32
 8005fa4:	d101      	bne.n	8005faa <BSP_AUDIO_IN_Init+0x10a>
 8005fa6:	2340      	movs	r3, #64	; 0x40
 8005fa8:	e000      	b.n	8005fac <BSP_AUDIO_IN_Init+0x10c>
 8005faa:	2320      	movs	r3, #32
 8005fac:	62fb      	str	r3, [r7, #44]	; 0x2c
      mx_config.OutputDrive       = SAI_OUTPUTDRIVE_DISABLE;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	623b      	str	r3, [r7, #32]
      mx_config.SlotActive =(AudioInit->Device==AUDIO_IN_DEVICE_ANALOG_MIC)? CODEC_AUDIOFRAME_SLOT_02:CODEC_AUDIOFRAME_SLOT_13;
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d101      	bne.n	8005fbe <BSP_AUDIO_IN_Init+0x11e>
 8005fba:	2305      	movs	r3, #5
 8005fbc:	e000      	b.n	8005fc0 <BSP_AUDIO_IN_Init+0x120>
 8005fbe:	230a      	movs	r3, #10
 8005fc0:	633b      	str	r3, [r7, #48]	; 0x30
      /* Prepare haudio_in_sai handle */
      haudio_in_sai.Instance        = SAI1_Block_B;
 8005fc2:	4b5f      	ldr	r3, [pc, #380]	; (8006140 <BSP_AUDIO_IN_Init+0x2a0>)
 8005fc4:	4a5f      	ldr	r2, [pc, #380]	; (8006144 <BSP_AUDIO_IN_Init+0x2a4>)
 8005fc6:	601a      	str	r2, [r3, #0]
      mx_config.AudioFrequency    = Audio_In_Ctx[Instance].SampleRate;
 8005fc8:	495c      	ldr	r1, [pc, #368]	; (800613c <BSP_AUDIO_IN_Init+0x29c>)
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	4613      	mov	r3, r2
 8005fce:	005b      	lsls	r3, r3, #1
 8005fd0:	4413      	add	r3, r2
 8005fd2:	011b      	lsls	r3, r3, #4
 8005fd4:	440b      	add	r3, r1
 8005fd6:	3308      	adds	r3, #8
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	60bb      	str	r3, [r7, #8]
      mx_config.AudioMode         = SAI_MODESLAVE_RX;
 8005fdc:	2303      	movs	r3, #3
 8005fde:	60fb      	str	r3, [r7, #12]
      mx_config.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	61bb      	str	r3, [r7, #24]
      mx_config.Synchro           = SAI_SYNCHRONOUS;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	61fb      	str	r3, [r7, #28]
      mx_config.SynchroExt        = SAI_SYNCEXT_DISABLE;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	627b      	str	r3, [r7, #36]	; 0x24
      /* Disable SAI peripheral to allow access to SAI internal registers */

      if(MX_SAI1_Block_B_Init(&haudio_in_sai, &mx_config) != HAL_OK)
 8005fec:	f107 0308 	add.w	r3, r7, #8
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	4853      	ldr	r0, [pc, #332]	; (8006140 <BSP_AUDIO_IN_Init+0x2a0>)
 8005ff4:	f000 f95e 	bl	80062b4 <MX_SAI1_Block_B_Init>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d002      	beq.n	8006004 <BSP_AUDIO_IN_Init+0x164>
      {
        /* Return BSP_ERROR_PERIPH_FAILURE when operations are not correctly done */
        return BSP_ERROR_PERIPH_FAILURE;
 8005ffe:	f06f 0303 	mvn.w	r3, #3
 8006002:	e0d6      	b.n	80061b2 <BSP_AUDIO_IN_Init+0x312>
      }

      /* Prepare haudio_out_sai handle */
      haudio_out_sai.Instance       = SAI1_Block_A;
 8006004:	4b50      	ldr	r3, [pc, #320]	; (8006148 <BSP_AUDIO_IN_Init+0x2a8>)
 8006006:	4a51      	ldr	r2, [pc, #324]	; (800614c <BSP_AUDIO_IN_Init+0x2ac>)
 8006008:	601a      	str	r2, [r3, #0]
      mx_config.AudioMode         = SAI_MODEMASTER_RX;
 800600a:	2301      	movs	r3, #1
 800600c:	60fb      	str	r3, [r7, #12]
      mx_config.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800600e:	2300      	movs	r3, #0
 8006010:	61bb      	str	r3, [r7, #24]
      mx_config.OutputDrive       = SAI_OUTPUTDRIVE_ENABLE;
 8006012:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006016:	623b      	str	r3, [r7, #32]
      mx_config.Synchro           = SAI_ASYNCHRONOUS;
 8006018:	2300      	movs	r3, #0
 800601a:	61fb      	str	r3, [r7, #28]
      mx_config.SynchroExt        = SAI_SYNCEXT_DISABLE;
 800601c:	2300      	movs	r3, #0
 800601e:	627b      	str	r3, [r7, #36]	; 0x24
      mx_config.SlotActive        = CODEC_AUDIOFRAME_SLOT_0123;
 8006020:	230f      	movs	r3, #15
 8006022:	633b      	str	r3, [r7, #48]	; 0x30
      if(MX_SAI1_Block_A_Init(&haudio_out_sai, &mx_config) != HAL_OK)
 8006024:	f107 0308 	add.w	r3, r7, #8
 8006028:	4619      	mov	r1, r3
 800602a:	4847      	ldr	r0, [pc, #284]	; (8006148 <BSP_AUDIO_IN_Init+0x2a8>)
 800602c:	f7ff fcf8 	bl	8005a20 <MX_SAI1_Block_A_Init>
 8006030:	4603      	mov	r3, r0
 8006032:	2b00      	cmp	r3, #0
 8006034:	d002      	beq.n	800603c <BSP_AUDIO_IN_Init+0x19c>
      {
        /* Return BSP_ERROR_PERIPH_FAILURE when operations are not correctly done */
        return BSP_ERROR_PERIPH_FAILURE;
 8006036:	f06f 0303 	mvn.w	r3, #3
 800603a:	e0ba      	b.n	80061b2 <BSP_AUDIO_IN_Init+0x312>
        return BSP_ERROR_PERIPH_FAILURE;
      }
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 1U) */
#if (USE_AUDIO_CODEC_WM8994 == 1U)
      /* Initialize the codec internal registers */
      if(WM8994_Probe() == BSP_ERROR_NONE)
 800603c:	f000 fbf4 	bl	8006828 <WM8994_Probe>
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	f040 80aa 	bne.w	800619c <BSP_AUDIO_IN_Init+0x2fc>
      {
        WM8994_Init_t codec_init;

        /* Fill codec_init structure */
        codec_init.Frequency    = AudioInit->SampleRate;
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	63fb      	str	r3, [r7, #60]	; 0x3c
        codec_init.OutputDevice = WM8994_OUT_NONE;
 800604e:	2300      	movs	r3, #0
 8006050:	63bb      	str	r3, [r7, #56]	; 0x38
        if(AudioInit->Device == AUDIO_IN_DEVICE_ANALOG_MIC)
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d104      	bne.n	8006064 <BSP_AUDIO_IN_Init+0x1c4>
        {
          codec_init.InputDevice = WM8994_IN_LINE1;
 800605a:	2303      	movs	r3, #3
 800605c:	637b      	str	r3, [r7, #52]	; 0x34
          codec_init.OutputDevice = AUDIO_OUT_DEVICE_HEADPHONE;
 800605e:	2302      	movs	r3, #2
 8006060:	63bb      	str	r3, [r7, #56]	; 0x38
 8006062:	e001      	b.n	8006068 <BSP_AUDIO_IN_Init+0x1c8>
        }
        else /* (AudioInit->Device == AUDIO_IN_DEVICE_DIGITAL_MIC) */
        {
          codec_init.InputDevice = WM8994_IN_MIC2;
 8006064:	2302      	movs	r3, #2
 8006066:	637b      	str	r3, [r7, #52]	; 0x34
        }
        codec_init.Resolution=(AudioInit->BitsPerSample==AUDIO_RESOLUTION_32B)? 3:0;
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	2b20      	cmp	r3, #32
 800606e:	d101      	bne.n	8006074 <BSP_AUDIO_IN_Init+0x1d4>
 8006070:	2303      	movs	r3, #3
 8006072:	e000      	b.n	8006076 <BSP_AUDIO_IN_Init+0x1d6>
 8006074:	2300      	movs	r3, #0
 8006076:	643b      	str	r3, [r7, #64]	; 0x40
        /* Convert volume before sending to the codec */
        codec_init.Volume       = VOLUME_IN_CONVERT(AudioInit->Volume);
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	2b63      	cmp	r3, #99	; 0x63
 800607e:	d80c      	bhi.n	800609a <BSP_AUDIO_IN_Init+0x1fa>
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	691a      	ldr	r2, [r3, #16]
 8006084:	4613      	mov	r3, r2
 8006086:	011b      	lsls	r3, r3, #4
 8006088:	1a9b      	subs	r3, r3, r2
 800608a:	011b      	lsls	r3, r3, #4
 800608c:	1a9b      	subs	r3, r3, r2
 800608e:	4a30      	ldr	r2, [pc, #192]	; (8006150 <BSP_AUDIO_IN_Init+0x2b0>)
 8006090:	fba2 2303 	umull	r2, r3, r2, r3
 8006094:	095b      	lsrs	r3, r3, #5
 8006096:	b2db      	uxtb	r3, r3
 8006098:	e000      	b.n	800609c <BSP_AUDIO_IN_Init+0x1fc>
 800609a:	23ef      	movs	r3, #239	; 0xef
 800609c:	647b      	str	r3, [r7, #68]	; 0x44

        /* Initialize the codec internal registers */
        if(Audio_Drv->Init(Audio_CompObj, &codec_init) != 0)
 800609e:	4b2d      	ldr	r3, [pc, #180]	; (8006154 <BSP_AUDIO_IN_Init+0x2b4>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a2c      	ldr	r2, [pc, #176]	; (8006158 <BSP_AUDIO_IN_Init+0x2b8>)
 80060a6:	6812      	ldr	r2, [r2, #0]
 80060a8:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80060ac:	4610      	mov	r0, r2
 80060ae:	4798      	blx	r3
 80060b0:	4603      	mov	r3, r0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d072      	beq.n	800619c <BSP_AUDIO_IN_Init+0x2fc>
        {
          return BSP_ERROR_COMPONENT_FAILURE;
 80060b6:	f06f 0304 	mvn.w	r3, #4
        return BSP_ERROR_CLOCK_FAILURE;
 80060ba:	e07a      	b.n	80061b2 <BSP_AUDIO_IN_Init+0x312>
        }
      }
#endif  /*USE_AUDIO_CODEC_WM8994 == 1)*/
    }
    else if(Instance == 1U)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d16c      	bne.n	800619c <BSP_AUDIO_IN_Init+0x2fc>
    {
      /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */
      if(MX_SAI4_ClockConfig(&haudio_in_sai, AudioInit->SampleRate) != HAL_OK)
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	4619      	mov	r1, r3
 80060c8:	481d      	ldr	r0, [pc, #116]	; (8006140 <BSP_AUDIO_IN_Init+0x2a0>)
 80060ca:	f7ff fd75 	bl	8005bb8 <MX_SAI4_ClockConfig>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d002      	beq.n	80060da <BSP_AUDIO_IN_Init+0x23a>
      {
        return BSP_ERROR_CLOCK_FAILURE;
 80060d4:	f06f 0308 	mvn.w	r3, #8
 80060d8:	e06b      	b.n	80061b2 <BSP_AUDIO_IN_Init+0x312>
      }
      haudio_in_sai.Instance = AUDIO_IN_SAI_PDMx;
 80060da:	4b19      	ldr	r3, [pc, #100]	; (8006140 <BSP_AUDIO_IN_Init+0x2a0>)
 80060dc:	4a1f      	ldr	r2, [pc, #124]	; (800615c <BSP_AUDIO_IN_Init+0x2bc>)
 80060de:	601a      	str	r2, [r3, #0]
        {
          return BSP_ERROR_PERIPH_FAILURE;
        }
      }
#else
      SAI_MspInit(&haudio_in_sai);
 80060e0:	4817      	ldr	r0, [pc, #92]	; (8006140 <BSP_AUDIO_IN_Init+0x2a0>)
 80060e2:	f000 fbfb 	bl	80068dc <SAI_MspInit>
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 1U) */
      MX_SAI_Config_t mx_config;

      /* Prepare haudio_in_sai handle */
      mx_config.MonoStereoMode    = SAI_STEREOMODE;
 80060e6:	2300      	movs	r3, #0
 80060e8:	617b      	str	r3, [r7, #20]
      mx_config.DataSize          = SAI_DATASIZE_16;
 80060ea:	2380      	movs	r3, #128	; 0x80
 80060ec:	613b      	str	r3, [r7, #16]
      mx_config.FrameLength       = 16;
 80060ee:	2310      	movs	r3, #16
 80060f0:	62bb      	str	r3, [r7, #40]	; 0x28
      mx_config.ActiveFrameLength = 1;
 80060f2:	2301      	movs	r3, #1
 80060f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      mx_config.OutputDrive       = SAI_OUTPUTDRIVE_DISABLE;
 80060f6:	2300      	movs	r3, #0
 80060f8:	623b      	str	r3, [r7, #32]
      mx_config.SlotActive        = SAI_SLOTACTIVE_0;
 80060fa:	2301      	movs	r3, #1
 80060fc:	633b      	str	r3, [r7, #48]	; 0x30
      mx_config.AudioFrequency    = Audio_In_Ctx[Instance].SampleRate*8;
 80060fe:	490f      	ldr	r1, [pc, #60]	; (800613c <BSP_AUDIO_IN_Init+0x29c>)
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	4613      	mov	r3, r2
 8006104:	005b      	lsls	r3, r3, #1
 8006106:	4413      	add	r3, r2
 8006108:	011b      	lsls	r3, r3, #4
 800610a:	440b      	add	r3, r1
 800610c:	3308      	adds	r3, #8
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	00db      	lsls	r3, r3, #3
 8006112:	60bb      	str	r3, [r7, #8]
      mx_config.AudioMode         = SAI_MODEMASTER_RX;
 8006114:	2301      	movs	r3, #1
 8006116:	60fb      	str	r3, [r7, #12]
      mx_config.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8006118:	2300      	movs	r3, #0
 800611a:	61bb      	str	r3, [r7, #24]
      mx_config.Synchro           = SAI_ASYNCHRONOUS;
 800611c:	2300      	movs	r3, #0
 800611e:	61fb      	str	r3, [r7, #28]
      mx_config.SynchroExt        = SAI_SYNCEXT_DISABLE;
 8006120:	2300      	movs	r3, #0
 8006122:	627b      	str	r3, [r7, #36]	; 0x24

      if(MX_SAI4_Block_A_Init(&haudio_in_sai, &mx_config) != HAL_OK)
 8006124:	f107 0308 	add.w	r3, r7, #8
 8006128:	4619      	mov	r1, r3
 800612a:	4805      	ldr	r0, [pc, #20]	; (8006140 <BSP_AUDIO_IN_Init+0x2a0>)
 800612c:	f000 f93f 	bl	80063ae <MX_SAI4_Block_A_Init>
 8006130:	4603      	mov	r3, r0
 8006132:	2b00      	cmp	r3, #0
 8006134:	d014      	beq.n	8006160 <BSP_AUDIO_IN_Init+0x2c0>
      {
        /* Return BSP_ERROR_PERIPH_FAILURE when operations are not correctly done */
        return BSP_ERROR_PERIPH_FAILURE;
 8006136:	f06f 0303 	mvn.w	r3, #3
 800613a:	e03a      	b.n	80061b2 <BSP_AUDIO_IN_Init+0x312>
 800613c:	2400075c 	.word	0x2400075c
 8006140:	24001dc0 	.word	0x24001dc0
 8006144:	40015824 	.word	0x40015824
 8006148:	24001e58 	.word	0x24001e58
 800614c:	40015804 	.word	0x40015804
 8006150:	51eb851f 	.word	0x51eb851f
 8006154:	24000668 	.word	0x24000668
 8006158:	24000710 	.word	0x24000710
 800615c:	58005404 	.word	0x58005404
      {
        return BSP_ERROR_PERIPH_FAILURE;
      }
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 1U) */

      if(BSP_AUDIO_IN_PDMToPCM_Init(Instance, AudioInit->SampleRate, Audio_In_Ctx[Instance].ChannelsNbr, Audio_In_Ctx[Instance].ChannelsNbr) != BSP_ERROR_NONE)
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	6859      	ldr	r1, [r3, #4]
 8006164:	4815      	ldr	r0, [pc, #84]	; (80061bc <BSP_AUDIO_IN_Init+0x31c>)
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	4613      	mov	r3, r2
 800616a:	005b      	lsls	r3, r3, #1
 800616c:	4413      	add	r3, r2
 800616e:	011b      	lsls	r3, r3, #4
 8006170:	4403      	add	r3, r0
 8006172:	3310      	adds	r3, #16
 8006174:	6818      	ldr	r0, [r3, #0]
 8006176:	4c11      	ldr	r4, [pc, #68]	; (80061bc <BSP_AUDIO_IN_Init+0x31c>)
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	4613      	mov	r3, r2
 800617c:	005b      	lsls	r3, r3, #1
 800617e:	4413      	add	r3, r2
 8006180:	011b      	lsls	r3, r3, #4
 8006182:	4423      	add	r3, r4
 8006184:	3310      	adds	r3, #16
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4602      	mov	r2, r0
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 f994 	bl	80064b8 <BSP_AUDIO_IN_PDMToPCM_Init>
 8006190:	4603      	mov	r3, r0
 8006192:	2b00      	cmp	r3, #0
 8006194:	d002      	beq.n	800619c <BSP_AUDIO_IN_Init+0x2fc>
      {
        return BSP_ERROR_NO_INIT;
 8006196:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800619a:	e00a      	b.n	80061b2 <BSP_AUDIO_IN_Init+0x312>
    }
    else
    {}

    /* Update BSP AUDIO IN state */
    Audio_In_Ctx[Instance].State = AUDIO_IN_STATE_STOP;
 800619c:	4907      	ldr	r1, [pc, #28]	; (80061bc <BSP_AUDIO_IN_Init+0x31c>)
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	4613      	mov	r3, r2
 80061a2:	005b      	lsls	r3, r3, #1
 80061a4:	4413      	add	r3, r2
 80061a6:	011b      	lsls	r3, r3, #4
 80061a8:	440b      	add	r3, r1
 80061aa:	3324      	adds	r3, #36	; 0x24
 80061ac:	2202      	movs	r2, #2
 80061ae:	601a      	str	r2, [r3, #0]
    /* Return BSP status */
    return BSP_ERROR_NONE;
 80061b0:	2300      	movs	r3, #0
  }
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	374c      	adds	r7, #76	; 0x4c
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd90      	pop	{r4, r7, pc}
 80061ba:	bf00      	nop
 80061bc:	2400075c 	.word	0x2400075c

080061c0 <BSP_AUDIO_IN_DeInit>:
  * @param  Instance  AUDIO IN Instance. It can be 0 when SAI is used or 1 if PDM is used
  * @retval BSP status
  */

int32_t BSP_AUDIO_IN_DeInit(uint32_t Instance)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80061c8:	2300      	movs	r3, #0
 80061ca:	60fb      	str	r3, [r7, #12]

  if(Instance >= AUDIO_IN_INSTANCES_NBR)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d903      	bls.n	80061da <BSP_AUDIO_IN_DeInit+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80061d2:	f06f 0301 	mvn.w	r3, #1
 80061d6:	60fb      	str	r3, [r7, #12]
 80061d8:	e056      	b.n	8006288 <BSP_AUDIO_IN_DeInit+0xc8>
  }
  else
  {
    if(Instance == 0U)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d12a      	bne.n	8006236 <BSP_AUDIO_IN_DeInit+0x76>
    {
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 0U)
      SAI_MspDeInit(&haudio_in_sai);
 80061e0:	482c      	ldr	r0, [pc, #176]	; (8006294 <BSP_AUDIO_IN_DeInit+0xd4>)
 80061e2:	f000 fe1b 	bl	8006e1c <SAI_MspDeInit>
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 0U) */

      /* Initialize the haudio_in_sai Instance parameter */
      haudio_in_sai.Instance = AUDIO_IN_SAIx;
 80061e6:	4b2b      	ldr	r3, [pc, #172]	; (8006294 <BSP_AUDIO_IN_DeInit+0xd4>)
 80061e8:	4a2b      	ldr	r2, [pc, #172]	; (8006298 <BSP_AUDIO_IN_DeInit+0xd8>)
 80061ea:	601a      	str	r2, [r3, #0]
      /* Initialize the haudio_out_sai Instance parameter */
      haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 80061ec:	4b2b      	ldr	r3, [pc, #172]	; (800629c <BSP_AUDIO_IN_DeInit+0xdc>)
 80061ee:	4a2c      	ldr	r2, [pc, #176]	; (80062a0 <BSP_AUDIO_IN_DeInit+0xe0>)
 80061f0:	601a      	str	r2, [r3, #0]

      if(Audio_Drv->DeInit(Audio_CompObj) != BSP_ERROR_NONE)
 80061f2:	4b2c      	ldr	r3, [pc, #176]	; (80062a4 <BSP_AUDIO_IN_DeInit+0xe4>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	4a2b      	ldr	r2, [pc, #172]	; (80062a8 <BSP_AUDIO_IN_DeInit+0xe8>)
 80061fa:	6812      	ldr	r2, [r2, #0]
 80061fc:	4610      	mov	r0, r2
 80061fe:	4798      	blx	r3
 8006200:	4603      	mov	r3, r0
 8006202:	2b00      	cmp	r3, #0
 8006204:	d003      	beq.n	800620e <BSP_AUDIO_IN_DeInit+0x4e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006206:	f06f 0304 	mvn.w	r3, #4
 800620a:	60fb      	str	r3, [r7, #12]
 800620c:	e032      	b.n	8006274 <BSP_AUDIO_IN_DeInit+0xb4>
      }/* De-Initializes SAI handles */
      else if(HAL_SAI_DeInit(&haudio_in_sai) != HAL_OK)
 800620e:	4821      	ldr	r0, [pc, #132]	; (8006294 <BSP_AUDIO_IN_DeInit+0xd4>)
 8006210:	f00c fe62 	bl	8012ed8 <HAL_SAI_DeInit>
 8006214:	4603      	mov	r3, r0
 8006216:	2b00      	cmp	r3, #0
 8006218:	d003      	beq.n	8006222 <BSP_AUDIO_IN_DeInit+0x62>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 800621a:	f06f 0303 	mvn.w	r3, #3
 800621e:	60fb      	str	r3, [r7, #12]
 8006220:	e028      	b.n	8006274 <BSP_AUDIO_IN_DeInit+0xb4>
      }
      else
      {
        if(HAL_SAI_DeInit(&haudio_out_sai) != HAL_OK)
 8006222:	481e      	ldr	r0, [pc, #120]	; (800629c <BSP_AUDIO_IN_DeInit+0xdc>)
 8006224:	f00c fe58 	bl	8012ed8 <HAL_SAI_DeInit>
 8006228:	4603      	mov	r3, r0
 800622a:	2b00      	cmp	r3, #0
 800622c:	d022      	beq.n	8006274 <BSP_AUDIO_IN_DeInit+0xb4>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 800622e:	f06f 0303 	mvn.w	r3, #3
 8006232:	60fb      	str	r3, [r7, #12]
 8006234:	e01e      	b.n	8006274 <BSP_AUDIO_IN_DeInit+0xb4>
        }
      }
    }
    else if (Instance == 1U)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2b01      	cmp	r3, #1
 800623a:	d11b      	bne.n	8006274 <BSP_AUDIO_IN_DeInit+0xb4>
    {
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 0U)
      SAI_MspDeInit(&haudio_in_sai);
 800623c:	4815      	ldr	r0, [pc, #84]	; (8006294 <BSP_AUDIO_IN_DeInit+0xd4>)
 800623e:	f000 fded 	bl	8006e1c <SAI_MspDeInit>
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 0U) */

      /* Initialize the haudio_in_sai Instance parameter */
      haudio_in_sai.Instance = AUDIO_IN_SAI_PDMx;
 8006242:	4b14      	ldr	r3, [pc, #80]	; (8006294 <BSP_AUDIO_IN_DeInit+0xd4>)
 8006244:	4a19      	ldr	r2, [pc, #100]	; (80062ac <BSP_AUDIO_IN_DeInit+0xec>)
 8006246:	601a      	str	r2, [r3, #0]
      /* Initialize the haudio_out_sai Instance parameter */
      haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8006248:	4b14      	ldr	r3, [pc, #80]	; (800629c <BSP_AUDIO_IN_DeInit+0xdc>)
 800624a:	4a15      	ldr	r2, [pc, #84]	; (80062a0 <BSP_AUDIO_IN_DeInit+0xe0>)
 800624c:	601a      	str	r2, [r3, #0]

      if(HAL_SAI_DeInit(&haudio_in_sai) != HAL_OK)
 800624e:	4811      	ldr	r0, [pc, #68]	; (8006294 <BSP_AUDIO_IN_DeInit+0xd4>)
 8006250:	f00c fe42 	bl	8012ed8 <HAL_SAI_DeInit>
 8006254:	4603      	mov	r3, r0
 8006256:	2b00      	cmp	r3, #0
 8006258:	d003      	beq.n	8006262 <BSP_AUDIO_IN_DeInit+0xa2>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 800625a:	f06f 0303 	mvn.w	r3, #3
 800625e:	60fb      	str	r3, [r7, #12]
 8006260:	e008      	b.n	8006274 <BSP_AUDIO_IN_DeInit+0xb4>
      }
      else
      {
        if(HAL_SAI_DeInit(&haudio_out_sai) != HAL_OK)
 8006262:	480e      	ldr	r0, [pc, #56]	; (800629c <BSP_AUDIO_IN_DeInit+0xdc>)
 8006264:	f00c fe38 	bl	8012ed8 <HAL_SAI_DeInit>
 8006268:	4603      	mov	r3, r0
 800626a:	2b00      	cmp	r3, #0
 800626c:	d002      	beq.n	8006274 <BSP_AUDIO_IN_DeInit+0xb4>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 800626e:	f06f 0303 	mvn.w	r3, #3
 8006272:	60fb      	str	r3, [r7, #12]
      }
    }
    else
    {}
    /* Update BSP AUDIO IN state */
    Audio_In_Ctx[Instance].State = AUDIO_IN_STATE_RESET;
 8006274:	490e      	ldr	r1, [pc, #56]	; (80062b0 <BSP_AUDIO_IN_DeInit+0xf0>)
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	4613      	mov	r3, r2
 800627a:	005b      	lsls	r3, r3, #1
 800627c:	4413      	add	r3, r2
 800627e:	011b      	lsls	r3, r3, #4
 8006280:	440b      	add	r3, r1
 8006282:	3324      	adds	r3, #36	; 0x24
 8006284:	2200      	movs	r2, #0
 8006286:	601a      	str	r2, [r3, #0]
  }


  /* Return BSP status */
  return ret;
 8006288:	68fb      	ldr	r3, [r7, #12]
}
 800628a:	4618      	mov	r0, r3
 800628c:	3710      	adds	r7, #16
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
 8006292:	bf00      	nop
 8006294:	24001dc0 	.word	0x24001dc0
 8006298:	40015824 	.word	0x40015824
 800629c:	24001e58 	.word	0x24001e58
 80062a0:	40015804 	.word	0x40015804
 80062a4:	24000668 	.word	0x24000668
 80062a8:	24000710 	.word	0x24000710
 80062ac:	58005404 	.word	0x58005404
 80062b0:	2400075c 	.word	0x2400075c

080062b4 <MX_SAI1_Block_B_Init>:
  * @param  MXConfig SAI configuration structure
  * @note   Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SAI1_Block_B_Init(SAI_HandleTypeDef* hsai, MX_SAI_Config_t *MXConfig)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80062be:	2300      	movs	r3, #0
 80062c0:	73fb      	strb	r3, [r7, #15]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(hsai);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80062d0:	601a      	str	r2, [r3, #0]

  /* Configure SAI1_Block_B */
  hsai->Init.AudioFrequency         = MXConfig->AudioFrequency;
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	621a      	str	r2, [r3, #32]
  hsai->Init.MonoStereoMode         = MXConfig->MonoStereoMode;
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	68da      	ldr	r2, [r3, #12]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai->Init.AudioMode              = MXConfig->AudioMode;
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	685a      	ldr	r2, [r3, #4]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	605a      	str	r2, [r3, #4]
  hsai->Init.NoDivider              = SAI_MASTERDIVIDER_ENABLE;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2200      	movs	r2, #0
 80062ee:	619a      	str	r2, [r3, #24]
  hsai->Init.Protocol               = SAI_FREE_PROTOCOL;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.DataSize               = MXConfig->DataSize;
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	689a      	ldr	r2, [r3, #8]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->Init.FirstBit               = SAI_FIRSTBIT_MSB;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->Init.ClockStrobing          = MXConfig->ClockStrobing;
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	691a      	ldr	r2, [r3, #16]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->Init.Synchro                = MXConfig->Synchro;
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	695a      	ldr	r2, [r3, #20]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	609a      	str	r2, [r3, #8]
  hsai->Init.OutputDrive            = MXConfig->OutputDrive;
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	699a      	ldr	r2, [r3, #24]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	615a      	str	r2, [r3, #20]
  hsai->Init.FIFOThreshold          = SAI_FIFOTHRESHOLD_1QF;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	61da      	str	r2, [r3, #28]
  hsai->Init.SynchroExt             = MXConfig->SynchroExt;
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	69da      	ldr	r2, [r3, #28]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	60da      	str	r2, [r3, #12]
  hsai->Init.CompandingMode         = SAI_NOCOMPANDING;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.TriState               = SAI_OUTPUT_RELEASED;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2210      	movs	r2, #16
 8006334:	635a      	str	r2, [r3, #52]	; 0x34
  hsai->Init.Mckdiv                 = 0;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	625a      	str	r2, [r3, #36]	; 0x24
  hsai->Init.PdmInit.Activation     = DISABLE;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Configure SAI_Block_x Frame */
  hsai->FrameInit.FrameLength       = MXConfig->FrameLength;
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	6a1a      	ldr	r2, [r3, #32]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->FrameInit.ActiveFrameLength = MXConfig->ActiveFrameLength;
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->FrameInit.FSDefinition      = SAI_FS_CHANNEL_IDENTIFICATION;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800635a:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity        = SAI_FS_ACTIVE_LOW;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2200      	movs	r2, #0
 8006360:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset          = SAI_FS_BEFOREFIRSTBIT;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006368:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure SAI Block_x Slot */
  hsai->SlotInit.FirstBitOffset     = 0;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2200      	movs	r2, #0
 800636e:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotSize           = SAI_SLOTSIZE_DATASIZE;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai->SlotInit.SlotNumber         = 4;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2204      	movs	r2, #4
 800637a:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive        = MXConfig->SlotActive;
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	675a      	str	r2, [r3, #116]	; 0x74

  if(HAL_SAI_Init(hsai) != HAL_OK)
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f00c fb07 	bl	8012998 <HAL_SAI_Init>
 800638a:	4603      	mov	r3, r0
 800638c:	2b00      	cmp	r3, #0
 800638e:	d001      	beq.n	8006394 <MX_SAI1_Block_B_Init+0xe0>
  {
    ret = HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	73fb      	strb	r3, [r7, #15]
  }

  /* Enable SAI peripheral */
  __HAL_SAI_ENABLE(hsai);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80063a2:	601a      	str	r2, [r3, #0]

  return ret;
 80063a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3710      	adds	r7, #16
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}

080063ae <MX_SAI4_Block_A_Init>:
  * @param  MXConfig SAI configuration structure
  * @note   Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SAI4_Block_A_Init(SAI_HandleTypeDef* hsai, MX_SAI_Config_t *MXConfig)
{
 80063ae:	b580      	push	{r7, lr}
 80063b0:	b084      	sub	sp, #16
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
 80063b6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80063b8:	2300      	movs	r3, #0
 80063ba:	73fb      	strb	r3, [r7, #15]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(hsai);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80063ca:	601a      	str	r2, [r3, #0]

  /* Configure SAI4_Block_A */
  hsai->Init.AudioFrequency         = MXConfig->AudioFrequency;
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	621a      	str	r2, [r3, #32]
  hsai->Init.MonoStereoMode         = MXConfig->MonoStereoMode;
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	68da      	ldr	r2, [r3, #12]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai->Init.AudioMode              = MXConfig->AudioMode;
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	685a      	ldr	r2, [r3, #4]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	605a      	str	r2, [r3, #4]
  hsai->Init.NoDivider              = SAI_MASTERDIVIDER_DISABLE;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80063ea:	619a      	str	r2, [r3, #24]
  hsai->Init.Protocol               = SAI_FREE_PROTOCOL;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.DataSize               = MXConfig->DataSize;
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	689a      	ldr	r2, [r3, #8]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->Init.FirstBit               = SAI_FIRSTBIT_LSB;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006400:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->Init.ClockStrobing          = MXConfig->ClockStrobing;
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	691a      	ldr	r2, [r3, #16]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->Init.Synchro                = MXConfig->Synchro;
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	695a      	ldr	r2, [r3, #20]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	609a      	str	r2, [r3, #8]
  hsai->Init.OutputDrive            = MXConfig->OutputDrive;
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	699a      	ldr	r2, [r3, #24]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	615a      	str	r2, [r3, #20]
  hsai->Init.FIFOThreshold          = SAI_FIFOTHRESHOLD_1QF;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2201      	movs	r2, #1
 800641e:	61da      	str	r2, [r3, #28]
  hsai->Init.SynchroExt             = MXConfig->SynchroExt;
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	69da      	ldr	r2, [r3, #28]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	60da      	str	r2, [r3, #12]
  hsai->Init.CompandingMode         = SAI_NOCOMPANDING;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.TriState               = SAI_OUTPUT_RELEASED;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2210      	movs	r2, #16
 8006432:	635a      	str	r2, [r3, #52]	; 0x34
  hsai->Init.Mckdiv                 = 0;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2200      	movs	r2, #0
 8006438:	625a      	str	r2, [r3, #36]	; 0x24
  hsai->Init.PdmInit.Activation     = ENABLE;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2201      	movs	r2, #1
 800643e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai->Init.PdmInit.MicPairsNbr    = 1;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2201      	movs	r2, #1
 8006446:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai->Init.PdmInit.ClockEnable    = SAI_PDM_CLOCK1_ENABLE;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800644e:	641a      	str	r2, [r3, #64]	; 0x40


  /* Configure SAI_Block_x Frame */
  hsai->FrameInit.FrameLength       = MXConfig->FrameLength;
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	6a1a      	ldr	r2, [r3, #32]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->FrameInit.ActiveFrameLength = MXConfig->ActiveFrameLength;
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->FrameInit.FSDefinition      = SAI_FS_STARTFRAME;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity        = SAI_FS_ACTIVE_HIGH;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800646c:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset          = SAI_FS_FIRSTBIT;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure SAI Block_x Slot */
  hsai->SlotInit.FirstBitOffset     = 0;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotSize           = SAI_SLOTSIZE_DATASIZE;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai->SlotInit.SlotNumber         = 1;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2201      	movs	r2, #1
 8006484:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive        = MXConfig->SlotActive;
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	675a      	str	r2, [r3, #116]	; 0x74

  if(HAL_SAI_Init(hsai) != HAL_OK)
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f00c fa82 	bl	8012998 <HAL_SAI_Init>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d001      	beq.n	800649e <MX_SAI4_Block_A_Init+0xf0>
  {
    ret = HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	73fb      	strb	r3, [r7, #15]
  }

  /* Enable SAI peripheral */
  __HAL_SAI_ENABLE(hsai);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80064ac:	601a      	str	r2, [r3, #0]

  return ret;
 80064ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3710      	adds	r7, #16
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <BSP_AUDIO_IN_PDMToPCM_Init>:
  * @param  ChnlNbrIn  Number of input audio channels in the PDM buffer
  * @param  ChnlNbrOut Number of desired output audio channels in the  resulting PCM buffer
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_PDMToPCM_Init(uint32_t Instance, uint32_t AudioFreq, uint32_t ChnlNbrIn, uint32_t ChnlNbrOut)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b086      	sub	sp, #24
 80064bc:	af00      	add	r7, sp, #0
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	60b9      	str	r1, [r7, #8]
 80064c2:	607a      	str	r2, [r7, #4]
 80064c4:	603b      	str	r3, [r7, #0]
  uint32_t index = 0;
 80064c6:	2300      	movs	r3, #0
 80064c8:	617b      	str	r3, [r7, #20]

  if(Instance != 1U)
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d002      	beq.n	80064d6 <BSP_AUDIO_IN_PDMToPCM_Init+0x1e>
  {
    return BSP_ERROR_WRONG_PARAM;
 80064d0:	f06f 0301 	mvn.w	r3, #1
 80064d4:	e085      	b.n	80065e2 <BSP_AUDIO_IN_PDMToPCM_Init+0x12a>
  }
  else
  {
    /* Enable CRC peripheral to unlock the PDM library */
    __HAL_RCC_CRC_CLK_ENABLE();
 80064d6:	4b45      	ldr	r3, [pc, #276]	; (80065ec <BSP_AUDIO_IN_PDMToPCM_Init+0x134>)
 80064d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80064dc:	4a43      	ldr	r2, [pc, #268]	; (80065ec <BSP_AUDIO_IN_PDMToPCM_Init+0x134>)
 80064de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80064e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80064e6:	4b41      	ldr	r3, [pc, #260]	; (80065ec <BSP_AUDIO_IN_PDMToPCM_Init+0x134>)
 80064e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80064ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80064f0:	613b      	str	r3, [r7, #16]
 80064f2:	693b      	ldr	r3, [r7, #16]

    for(index = 0; index < ChnlNbrIn; index++)
 80064f4:	2300      	movs	r3, #0
 80064f6:	617b      	str	r3, [r7, #20]
 80064f8:	e06e      	b.n	80065d8 <BSP_AUDIO_IN_PDMToPCM_Init+0x120>
    {
      /* Init PDM filters */
      PDM_FilterHandler[index].bit_order  = PDM_FILTER_BIT_ORDER_MSB;
 80064fa:	4a3d      	ldr	r2, [pc, #244]	; (80065f0 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	214c      	movs	r1, #76	; 0x4c
 8006500:	fb01 f303 	mul.w	r3, r1, r3
 8006504:	4413      	add	r3, r2
 8006506:	2201      	movs	r2, #1
 8006508:	801a      	strh	r2, [r3, #0]
      PDM_FilterHandler[index].endianness = PDM_FILTER_ENDIANNESS_LE;
 800650a:	4a39      	ldr	r2, [pc, #228]	; (80065f0 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	214c      	movs	r1, #76	; 0x4c
 8006510:	fb01 f303 	mul.w	r3, r1, r3
 8006514:	4413      	add	r3, r2
 8006516:	3302      	adds	r3, #2
 8006518:	2200      	movs	r2, #0
 800651a:	801a      	strh	r2, [r3, #0]
      PDM_FilterHandler[index].high_pass_tap = 2122358088;
 800651c:	4a34      	ldr	r2, [pc, #208]	; (80065f0 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	214c      	movs	r1, #76	; 0x4c
 8006522:	fb01 f303 	mul.w	r3, r1, r3
 8006526:	4413      	add	r3, r2
 8006528:	3304      	adds	r3, #4
 800652a:	4a32      	ldr	r2, [pc, #200]	; (80065f4 <BSP_AUDIO_IN_PDMToPCM_Init+0x13c>)
 800652c:	601a      	str	r2, [r3, #0]
      PDM_FilterHandler[index].out_ptr_channels = ChnlNbrOut;
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	b298      	uxth	r0, r3
 8006532:	4a2f      	ldr	r2, [pc, #188]	; (80065f0 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	214c      	movs	r1, #76	; 0x4c
 8006538:	fb01 f303 	mul.w	r3, r1, r3
 800653c:	4413      	add	r3, r2
 800653e:	330a      	adds	r3, #10
 8006540:	4602      	mov	r2, r0
 8006542:	801a      	strh	r2, [r3, #0]
      PDM_FilterHandler[index].in_ptr_channels  = ChnlNbrIn;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	b298      	uxth	r0, r3
 8006548:	4a29      	ldr	r2, [pc, #164]	; (80065f0 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	214c      	movs	r1, #76	; 0x4c
 800654e:	fb01 f303 	mul.w	r3, r1, r3
 8006552:	4413      	add	r3, r2
 8006554:	3308      	adds	r3, #8
 8006556:	4602      	mov	r2, r0
 8006558:	801a      	strh	r2, [r3, #0]
      PDM_Filter_Init((PDM_Filter_Handler_t *)(&PDM_FilterHandler[index]));
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	224c      	movs	r2, #76	; 0x4c
 800655e:	fb02 f303 	mul.w	r3, r2, r3
 8006562:	4a23      	ldr	r2, [pc, #140]	; (80065f0 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 8006564:	4413      	add	r3, r2
 8006566:	4618      	mov	r0, r3
 8006568:	f7f9 feb6 	bl	80002d8 <PDM_Filter_Init>

      /* PDM lib config phase */
      PDM_FilterConfig[index].output_samples_number = AudioFreq/1000;
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	4a22      	ldr	r2, [pc, #136]	; (80065f8 <BSP_AUDIO_IN_PDMToPCM_Init+0x140>)
 8006570:	fba2 2303 	umull	r2, r3, r2, r3
 8006574:	099b      	lsrs	r3, r3, #6
 8006576:	b298      	uxth	r0, r3
 8006578:	4920      	ldr	r1, [pc, #128]	; (80065fc <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 800657a:	697a      	ldr	r2, [r7, #20]
 800657c:	4613      	mov	r3, r2
 800657e:	005b      	lsls	r3, r3, #1
 8006580:	4413      	add	r3, r2
 8006582:	005b      	lsls	r3, r3, #1
 8006584:	440b      	add	r3, r1
 8006586:	3302      	adds	r3, #2
 8006588:	4602      	mov	r2, r0
 800658a:	801a      	strh	r2, [r3, #0]
      PDM_FilterConfig[index].mic_gain = 24;
 800658c:	491b      	ldr	r1, [pc, #108]	; (80065fc <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 800658e:	697a      	ldr	r2, [r7, #20]
 8006590:	4613      	mov	r3, r2
 8006592:	005b      	lsls	r3, r3, #1
 8006594:	4413      	add	r3, r2
 8006596:	005b      	lsls	r3, r3, #1
 8006598:	440b      	add	r3, r1
 800659a:	3304      	adds	r3, #4
 800659c:	2218      	movs	r2, #24
 800659e:	801a      	strh	r2, [r3, #0]
      PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 80065a0:	4916      	ldr	r1, [pc, #88]	; (80065fc <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 80065a2:	697a      	ldr	r2, [r7, #20]
 80065a4:	4613      	mov	r3, r2
 80065a6:	005b      	lsls	r3, r3, #1
 80065a8:	4413      	add	r3, r2
 80065aa:	005b      	lsls	r3, r3, #1
 80065ac:	440b      	add	r3, r1
 80065ae:	2202      	movs	r2, #2
 80065b0:	801a      	strh	r2, [r3, #0]
      PDM_Filter_setConfig((PDM_Filter_Handler_t *)&PDM_FilterHandler[index], &PDM_FilterConfig[index]);
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	224c      	movs	r2, #76	; 0x4c
 80065b6:	fb02 f303 	mul.w	r3, r2, r3
 80065ba:	4a0d      	ldr	r2, [pc, #52]	; (80065f0 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 80065bc:	1898      	adds	r0, r3, r2
 80065be:	697a      	ldr	r2, [r7, #20]
 80065c0:	4613      	mov	r3, r2
 80065c2:	005b      	lsls	r3, r3, #1
 80065c4:	4413      	add	r3, r2
 80065c6:	005b      	lsls	r3, r3, #1
 80065c8:	4a0c      	ldr	r2, [pc, #48]	; (80065fc <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 80065ca:	4413      	add	r3, r2
 80065cc:	4619      	mov	r1, r3
 80065ce:	f7f9 ffa1 	bl	8000514 <PDM_Filter_setConfig>
    for(index = 0; index < ChnlNbrIn; index++)
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	3301      	adds	r3, #1
 80065d6:	617b      	str	r3, [r7, #20]
 80065d8:	697a      	ldr	r2, [r7, #20]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	429a      	cmp	r2, r3
 80065de:	d38c      	bcc.n	80064fa <BSP_AUDIO_IN_PDMToPCM_Init+0x42>
    }
  }

  return BSP_ERROR_NONE;
 80065e0:	2300      	movs	r3, #0
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3718      	adds	r7, #24
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop
 80065ec:	58024400 	.word	0x58024400
 80065f0:	2400066c 	.word	0x2400066c
 80065f4:	7e809d48 	.word	0x7e809d48
 80065f8:	10624dd3 	.word	0x10624dd3
 80065fc:	24000704 	.word	0x24000704

08006600 <BSP_AUDIO_IN_PDMToPCM>:
  * @param  PDMBuf    Pointer to PDM buffer data
  * @param  PCMBuf    Pointer to PCM buffer data
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_PDMToPCM(uint32_t Instance, uint16_t *PDMBuf, uint16_t *PCMBuf)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b086      	sub	sp, #24
 8006604:	af00      	add	r7, sp, #0
 8006606:	60f8      	str	r0, [r7, #12]
 8006608:	60b9      	str	r1, [r7, #8]
 800660a:	607a      	str	r2, [r7, #4]
  uint32_t index = 0;
 800660c:	2300      	movs	r3, #0
 800660e:	617b      	str	r3, [r7, #20]

  if(Instance != 1U)
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2b01      	cmp	r3, #1
 8006614:	d002      	beq.n	800661c <BSP_AUDIO_IN_PDMToPCM+0x1c>
  {
    return BSP_ERROR_WRONG_PARAM;
 8006616:	f06f 0301 	mvn.w	r3, #1
 800661a:	e022      	b.n	8006662 <BSP_AUDIO_IN_PDMToPCM+0x62>
  }
  else
  {
    for(index = 0; index < Audio_In_Ctx[Instance].ChannelsNbr; index++)
 800661c:	2300      	movs	r3, #0
 800661e:	617b      	str	r3, [r7, #20]
 8006620:	e012      	b.n	8006648 <BSP_AUDIO_IN_PDMToPCM+0x48>
    {
      PDM_Filter(&((uint8_t*)(PDMBuf))[index], (uint16_t*)&(PCMBuf[index]), &PDM_FilterHandler[index]);
 8006622:	68ba      	ldr	r2, [r7, #8]
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	18d0      	adds	r0, r2, r3
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	005b      	lsls	r3, r3, #1
 800662c:	687a      	ldr	r2, [r7, #4]
 800662e:	18d1      	adds	r1, r2, r3
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	224c      	movs	r2, #76	; 0x4c
 8006634:	fb02 f303 	mul.w	r3, r2, r3
 8006638:	4a0c      	ldr	r2, [pc, #48]	; (800666c <BSP_AUDIO_IN_PDMToPCM+0x6c>)
 800663a:	4413      	add	r3, r2
 800663c:	461a      	mov	r2, r3
 800663e:	f7fa f86e 	bl	800071e <PDM_Filter>
    for(index = 0; index < Audio_In_Ctx[Instance].ChannelsNbr; index++)
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	3301      	adds	r3, #1
 8006646:	617b      	str	r3, [r7, #20]
 8006648:	4909      	ldr	r1, [pc, #36]	; (8006670 <BSP_AUDIO_IN_PDMToPCM+0x70>)
 800664a:	68fa      	ldr	r2, [r7, #12]
 800664c:	4613      	mov	r3, r2
 800664e:	005b      	lsls	r3, r3, #1
 8006650:	4413      	add	r3, r2
 8006652:	011b      	lsls	r3, r3, #4
 8006654:	440b      	add	r3, r1
 8006656:	3310      	adds	r3, #16
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	697a      	ldr	r2, [r7, #20]
 800665c:	429a      	cmp	r2, r3
 800665e:	d3e0      	bcc.n	8006622 <BSP_AUDIO_IN_PDMToPCM+0x22>
    }
  }

  return BSP_ERROR_NONE;
 8006660:	2300      	movs	r3, #0
}
 8006662:	4618      	mov	r0, r3
 8006664:	3718      	adds	r7, #24
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
 800666a:	bf00      	nop
 800666c:	2400066c 	.word	0x2400066c
 8006670:	2400075c 	.word	0x2400075c

08006674 <BSP_AUDIO_IN_Stop>:
  * @brief  Stop audio recording.
  * @param  Instance  AUDIO IN Instance. It can be 0 when SAI is used
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_Stop(uint32_t Instance)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b084      	sub	sp, #16
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800667c:	2300      	movs	r3, #0
 800667e:	60fb      	str	r3, [r7, #12]

  if(Instance >= AUDIO_IN_INSTANCES_NBR)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2b01      	cmp	r3, #1
 8006684:	d903      	bls.n	800668e <BSP_AUDIO_IN_Stop+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006686:	f06f 0301 	mvn.w	r3, #1
 800668a:	60fb      	str	r3, [r7, #12]
 800668c:	e01c      	b.n	80066c8 <BSP_AUDIO_IN_Stop+0x54>
  }
  else
  {

      if(Instance == 0U)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d10d      	bne.n	80066b0 <BSP_AUDIO_IN_Stop+0x3c>
      {
        /* Call the Media layer stop function */
        if(Audio_Drv->Stop(Audio_CompObj, CODEC_PDWN_SW) != BSP_ERROR_NONE)
 8006694:	4b14      	ldr	r3, [pc, #80]	; (80066e8 <BSP_AUDIO_IN_Stop+0x74>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	699b      	ldr	r3, [r3, #24]
 800669a:	4a14      	ldr	r2, [pc, #80]	; (80066ec <BSP_AUDIO_IN_Stop+0x78>)
 800669c:	6812      	ldr	r2, [r2, #0]
 800669e:	2101      	movs	r1, #1
 80066a0:	4610      	mov	r0, r2
 80066a2:	4798      	blx	r3
 80066a4:	4603      	mov	r3, r0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d002      	beq.n	80066b0 <BSP_AUDIO_IN_Stop+0x3c>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 80066aa:	f06f 0304 	mvn.w	r3, #4
 80066ae:	60fb      	str	r3, [r7, #12]
        }
      }

      if(ret == BSP_ERROR_NONE)
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d108      	bne.n	80066c8 <BSP_AUDIO_IN_Stop+0x54>
      {
        if(HAL_SAI_DMAStop(&haudio_in_sai) != HAL_OK)
 80066b6:	480e      	ldr	r0, [pc, #56]	; (80066f0 <BSP_AUDIO_IN_Stop+0x7c>)
 80066b8:	f00c fc88 	bl	8012fcc <HAL_SAI_DMAStop>
 80066bc:	4603      	mov	r3, r0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d002      	beq.n	80066c8 <BSP_AUDIO_IN_Stop+0x54>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 80066c2:	f06f 0303 	mvn.w	r3, #3
 80066c6:	60fb      	str	r3, [r7, #12]
      }
    }


    /* Update BSP AUDIO IN state */
    Audio_In_Ctx[Instance].State = AUDIO_IN_STATE_STOP;
 80066c8:	490a      	ldr	r1, [pc, #40]	; (80066f4 <BSP_AUDIO_IN_Stop+0x80>)
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	4613      	mov	r3, r2
 80066ce:	005b      	lsls	r3, r3, #1
 80066d0:	4413      	add	r3, r2
 80066d2:	011b      	lsls	r3, r3, #4
 80066d4:	440b      	add	r3, r1
 80066d6:	3324      	adds	r3, #36	; 0x24
 80066d8:	2202      	movs	r2, #2
 80066da:	601a      	str	r2, [r3, #0]

  /* Return BSP status */
  return ret;
 80066dc:	68fb      	ldr	r3, [r7, #12]
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3710      	adds	r7, #16
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	bf00      	nop
 80066e8:	24000668 	.word	0x24000668
 80066ec:	24000710 	.word	0x24000710
 80066f0:	24001dc0 	.word	0x24001dc0
 80066f4:	2400075c 	.word	0x2400075c

080066f8 <BSP_AUDIO_IN_RecordPDM>:
  * @param  pBuf     Main buffer pointer for the recorded data storing
  * @param  NbrOfBytes  Size of the record buffer
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_RecordPDM(uint32_t Instance, uint8_t* pBuf, uint32_t NbrOfBytes)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b086      	sub	sp, #24
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8006704:	2300      	movs	r3, #0
 8006706:	617b      	str	r3, [r7, #20]

  if(Instance != 1U)
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2b01      	cmp	r3, #1
 800670c:	d003      	beq.n	8006716 <BSP_AUDIO_IN_RecordPDM+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800670e:	f06f 0301 	mvn.w	r3, #1
 8006712:	617b      	str	r3, [r7, #20]
 8006714:	e018      	b.n	8006748 <BSP_AUDIO_IN_RecordPDM+0x50>
  }
  else
  {
    /* Start the process receive DMA */
    if(HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pBuf, (uint16_t)(NbrOfBytes/(Audio_In_Ctx[Instance].BitsPerSample/8U))) != HAL_OK)
 8006716:	490f      	ldr	r1, [pc, #60]	; (8006754 <BSP_AUDIO_IN_RecordPDM+0x5c>)
 8006718:	68fa      	ldr	r2, [r7, #12]
 800671a:	4613      	mov	r3, r2
 800671c:	005b      	lsls	r3, r3, #1
 800671e:	4413      	add	r3, r2
 8006720:	011b      	lsls	r3, r3, #4
 8006722:	440b      	add	r3, r1
 8006724:	330c      	adds	r3, #12
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	08db      	lsrs	r3, r3, #3
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006730:	b29b      	uxth	r3, r3
 8006732:	461a      	mov	r2, r3
 8006734:	68b9      	ldr	r1, [r7, #8]
 8006736:	4808      	ldr	r0, [pc, #32]	; (8006758 <BSP_AUDIO_IN_RecordPDM+0x60>)
 8006738:	f00c fd7c 	bl	8013234 <HAL_SAI_Receive_DMA>
 800673c:	4603      	mov	r3, r0
 800673e:	2b00      	cmp	r3, #0
 8006740:	d002      	beq.n	8006748 <BSP_AUDIO_IN_RecordPDM+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8006742:	f06f 0303 	mvn.w	r3, #3
 8006746:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return BSP status */
  return ret;
 8006748:	697b      	ldr	r3, [r7, #20]
}
 800674a:	4618      	mov	r0, r3
 800674c:	3718      	adds	r7, #24
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop
 8006754:	2400075c 	.word	0x2400075c
 8006758:	24001dc0 	.word	0x24001dc0

0800675c <BSP_AUDIO_IN_GetState>:
  * @param  Instance  AUDIO IN Instance. It can be 0 when SAI is used
  * @param  State     Audio Out state
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_GetState(uint32_t Instance, uint32_t *State)
{
 800675c:	b480      	push	{r7}
 800675e:	b085      	sub	sp, #20
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8006766:	2300      	movs	r3, #0
 8006768:	60fb      	str	r3, [r7, #12]

  if(Instance >= AUDIO_IN_INSTANCES_NBR)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2b01      	cmp	r3, #1
 800676e:	d903      	bls.n	8006778 <BSP_AUDIO_IN_GetState+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006770:	f06f 0301 	mvn.w	r3, #1
 8006774:	60fb      	str	r3, [r7, #12]
 8006776:	e00a      	b.n	800678e <BSP_AUDIO_IN_GetState+0x32>
  }
  else
  {
    /* Input State to be returned */
    *State = Audio_In_Ctx[Instance].State;
 8006778:	4908      	ldr	r1, [pc, #32]	; (800679c <BSP_AUDIO_IN_GetState+0x40>)
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	4613      	mov	r3, r2
 800677e:	005b      	lsls	r3, r3, #1
 8006780:	4413      	add	r3, r2
 8006782:	011b      	lsls	r3, r3, #4
 8006784:	440b      	add	r3, r1
 8006786:	3324      	adds	r3, #36	; 0x24
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	601a      	str	r2, [r3, #0]
  }
  return ret;
 800678e:	68fb      	ldr	r3, [r7, #12]
}
 8006790:	4618      	mov	r0, r3
 8006792:	3714      	adds	r7, #20
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr
 800679c:	2400075c 	.word	0x2400075c

080067a0 <BSP_AUDIO_IN_IRQHandler>:
  *         - AUDIO_IN_DEVICE_ANALOG_MIC
  *         - AUDIO_IN_DEVICE_DIGITAL_MIC
  * @retval None
  */
void BSP_AUDIO_IN_IRQHandler(uint32_t Instance, uint32_t InputDevice)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b082      	sub	sp, #8
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
  if ((InputDevice == AUDIO_IN_DEVICE_DIGITAL_MIC) || (InputDevice == AUDIO_IN_DEVICE_ANALOG_MIC))
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	2b10      	cmp	r3, #16
 80067ae:	d002      	beq.n	80067b6 <BSP_AUDIO_IN_IRQHandler+0x16>
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d105      	bne.n	80067c2 <BSP_AUDIO_IN_IRQHandler+0x22>
  {
    HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 80067b6:	4b05      	ldr	r3, [pc, #20]	; (80067cc <BSP_AUDIO_IN_IRQHandler+0x2c>)
 80067b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067bc:	4618      	mov	r0, r3
 80067be:	f004 fc39 	bl	800b034 <HAL_DMA_IRQHandler>
  }
}
 80067c2:	bf00      	nop
 80067c4:	3708      	adds	r7, #8
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	24001dc0 	.word	0x24001dc0

080067d0 <HAL_SAI_RxHalfCpltCallback>:
  * @brief  Half reception complete callback.
  * @param  hsai   SAI handle.
  * @retval None
  */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b082      	sub	sp, #8
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the first half */
  if(hsai->Instance == AUDIO_IN_SAIx)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a06      	ldr	r2, [pc, #24]	; (80067f8 <HAL_SAI_RxHalfCpltCallback+0x28>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d103      	bne.n	80067ea <HAL_SAI_RxHalfCpltCallback+0x1a>
  {
    BSP_AUDIO_IN_HalfTransfer_CallBack(0);
 80067e2:	2000      	movs	r0, #0
 80067e4:	f00d fe70 	bl	80144c8 <BSP_AUDIO_IN_HalfTransfer_CallBack>
  }
  else
  {
    BSP_AUDIO_IN_HalfTransfer_CallBack(1);
  }
}
 80067e8:	e002      	b.n	80067f0 <HAL_SAI_RxHalfCpltCallback+0x20>
    BSP_AUDIO_IN_HalfTransfer_CallBack(1);
 80067ea:	2001      	movs	r0, #1
 80067ec:	f00d fe6c 	bl	80144c8 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 80067f0:	bf00      	nop
 80067f2:	3708      	adds	r7, #8
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}
 80067f8:	40015824 	.word	0x40015824

080067fc <HAL_SAI_RxCpltCallback>:
  * @brief  Reception complete callback.
  * @param  hsai   SAI handle.
  * @retval None
  */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b082      	sub	sp, #8
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the second half */
  if(hsai->Instance == AUDIO_IN_SAIx)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a06      	ldr	r2, [pc, #24]	; (8006824 <HAL_SAI_RxCpltCallback+0x28>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d103      	bne.n	8006816 <HAL_SAI_RxCpltCallback+0x1a>
  {
    BSP_AUDIO_IN_TransferComplete_CallBack(0);
 800680e:	2000      	movs	r0, #0
 8006810:	f00d fdd8 	bl	80143c4 <BSP_AUDIO_IN_TransferComplete_CallBack>
  }
  else
  {
    BSP_AUDIO_IN_TransferComplete_CallBack(1);
  }
}
 8006814:	e002      	b.n	800681c <HAL_SAI_RxCpltCallback+0x20>
    BSP_AUDIO_IN_TransferComplete_CallBack(1);
 8006816:	2001      	movs	r0, #1
 8006818:	f00d fdd4 	bl	80143c4 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 800681c:	bf00      	nop
 800681e:	3708      	adds	r7, #8
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}
 8006824:	40015824 	.word	0x40015824

08006828 <WM8994_Probe>:
/**
  * @brief  Register Bus IOs if component ID is OK
  * @retval error status
  */
static int32_t WM8994_Probe(void)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b088      	sub	sp, #32
 800682c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800682e:	2300      	movs	r3, #0
 8006830:	61fb      	str	r3, [r7, #28]
  WM8994_IO_t              IOCtx;
  static WM8994_Object_t   WM8994Obj;
  uint32_t id;

  /* Configure the audio driver */
  IOCtx.Address     = AUDIO_I2C_ADDRESS;
 8006832:	2334      	movs	r3, #52	; 0x34
 8006834:	81bb      	strh	r3, [r7, #12]
  IOCtx.Init        = BSP_I2C4_Init;
 8006836:	4b20      	ldr	r3, [pc, #128]	; (80068b8 <WM8994_Probe+0x90>)
 8006838:	607b      	str	r3, [r7, #4]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 800683a:	4b20      	ldr	r3, [pc, #128]	; (80068bc <WM8994_Probe+0x94>)
 800683c:	60bb      	str	r3, [r7, #8]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg16;
 800683e:	4b20      	ldr	r3, [pc, #128]	; (80068c0 <WM8994_Probe+0x98>)
 8006840:	617b      	str	r3, [r7, #20]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg16;
 8006842:	4b20      	ldr	r3, [pc, #128]	; (80068c4 <WM8994_Probe+0x9c>)
 8006844:	613b      	str	r3, [r7, #16]
  IOCtx.GetTick     = BSP_GetTick;
 8006846:	4b20      	ldr	r3, [pc, #128]	; (80068c8 <WM8994_Probe+0xa0>)
 8006848:	61bb      	str	r3, [r7, #24]

  if(WM8994_RegisterBusIO (&WM8994Obj, &IOCtx) != WM8994_OK)
 800684a:	1d3b      	adds	r3, r7, #4
 800684c:	4619      	mov	r1, r3
 800684e:	481f      	ldr	r0, [pc, #124]	; (80068cc <WM8994_Probe+0xa4>)
 8006850:	f7fe fb2a 	bl	8004ea8 <WM8994_RegisterBusIO>
 8006854:	4603      	mov	r3, r0
 8006856:	2b00      	cmp	r3, #0
 8006858:	d003      	beq.n	8006862 <WM8994_Probe+0x3a>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 800685a:	f06f 0307 	mvn.w	r3, #7
 800685e:	61fb      	str	r3, [r7, #28]
 8006860:	e024      	b.n	80068ac <WM8994_Probe+0x84>
  }
  else
  {
    /* Reset the codec */
    if(WM8994_Reset(&WM8994Obj) != WM8994_OK)
 8006862:	481a      	ldr	r0, [pc, #104]	; (80068cc <WM8994_Probe+0xa4>)
 8006864:	f7fe fb08 	bl	8004e78 <WM8994_Reset>
 8006868:	4603      	mov	r3, r0
 800686a:	2b00      	cmp	r3, #0
 800686c:	d003      	beq.n	8006876 <WM8994_Probe+0x4e>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800686e:	f06f 0304 	mvn.w	r3, #4
 8006872:	61fb      	str	r3, [r7, #28]
 8006874:	e01a      	b.n	80068ac <WM8994_Probe+0x84>
    }
    else if(WM8994_ReadID(&WM8994Obj, &id) != WM8994_OK)
 8006876:	463b      	mov	r3, r7
 8006878:	4619      	mov	r1, r3
 800687a:	4814      	ldr	r0, [pc, #80]	; (80068cc <WM8994_Probe+0xa4>)
 800687c:	f7fd fcf7 	bl	800426e <WM8994_ReadID>
 8006880:	4603      	mov	r3, r0
 8006882:	2b00      	cmp	r3, #0
 8006884:	d003      	beq.n	800688e <WM8994_Probe+0x66>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006886:	f06f 0304 	mvn.w	r3, #4
 800688a:	61fb      	str	r3, [r7, #28]
 800688c:	e00e      	b.n	80068ac <WM8994_Probe+0x84>
    }
    else if(id != WM8994_ID)
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	f648 1294 	movw	r2, #35220	; 0x8994
 8006894:	4293      	cmp	r3, r2
 8006896:	d003      	beq.n	80068a0 <WM8994_Probe+0x78>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006898:	f06f 0306 	mvn.w	r3, #6
 800689c:	61fb      	str	r3, [r7, #28]
 800689e:	e005      	b.n	80068ac <WM8994_Probe+0x84>
    }
    else
    {
      Audio_Drv = (AUDIO_Drv_t *) &WM8994_Driver;
 80068a0:	4b0b      	ldr	r3, [pc, #44]	; (80068d0 <WM8994_Probe+0xa8>)
 80068a2:	4a0c      	ldr	r2, [pc, #48]	; (80068d4 <WM8994_Probe+0xac>)
 80068a4:	601a      	str	r2, [r3, #0]
      Audio_CompObj = &WM8994Obj;
 80068a6:	4b0c      	ldr	r3, [pc, #48]	; (80068d8 <WM8994_Probe+0xb0>)
 80068a8:	4a08      	ldr	r2, [pc, #32]	; (80068cc <WM8994_Probe+0xa4>)
 80068aa:	601a      	str	r2, [r3, #0]
    }
  }
  return ret;
 80068ac:	69fb      	ldr	r3, [r7, #28]
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3720      	adds	r7, #32
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}
 80068b6:	bf00      	nop
 80068b8:	08006f01 	.word	0x08006f01
 80068bc:	08006f75 	.word	0x08006f75
 80068c0:	0800709d 	.word	0x0800709d
 80068c4:	08007041 	.word	0x08007041
 80068c8:	080070f9 	.word	0x080070f9
 80068cc:	240007bc 	.word	0x240007bc
 80068d0:	24000668 	.word	0x24000668
 80068d4:	2400004c 	.word	0x2400004c
 80068d8:	24000710 	.word	0x24000710

080068dc <SAI_MspInit>:
  * @brief  Initialize BSP_AUDIO_OUT MSP.
  * @param  hsai  SAI handle
  * @retval None
  */
static void SAI_MspInit(SAI_HandleTypeDef *hsai)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b098      	sub	sp, #96	; 0x60
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  static DMA_HandleTypeDef hdma_sai_tx, hdma_sai_rx;

    /* Enable SAI clock */
    AUDIO_OUT_SAIx_CLK_ENABLE();
 80068e4:	4b75      	ldr	r3, [pc, #468]	; (8006abc <SAI_MspInit+0x1e0>)
 80068e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80068ea:	4a74      	ldr	r2, [pc, #464]	; (8006abc <SAI_MspInit+0x1e0>)
 80068ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80068f0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80068f4:	4b71      	ldr	r3, [pc, #452]	; (8006abc <SAI_MspInit+0x1e0>)
 80068f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80068fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8006900:	6cbb      	ldr	r3, [r7, #72]	; 0x48

    /* Enable GPIO clock */
    AUDIO_OUT_SAIx_SCK_ENABLE();
 8006902:	4b6e      	ldr	r3, [pc, #440]	; (8006abc <SAI_MspInit+0x1e0>)
 8006904:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006908:	4a6c      	ldr	r2, [pc, #432]	; (8006abc <SAI_MspInit+0x1e0>)
 800690a:	f043 0310 	orr.w	r3, r3, #16
 800690e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006912:	4b6a      	ldr	r3, [pc, #424]	; (8006abc <SAI_MspInit+0x1e0>)
 8006914:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006918:	f003 0310 	and.w	r3, r3, #16
 800691c:	647b      	str	r3, [r7, #68]	; 0x44
 800691e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    AUDIO_OUT_SAIx_SD_ENABLE();
 8006920:	4b66      	ldr	r3, [pc, #408]	; (8006abc <SAI_MspInit+0x1e0>)
 8006922:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006926:	4a65      	ldr	r2, [pc, #404]	; (8006abc <SAI_MspInit+0x1e0>)
 8006928:	f043 0310 	orr.w	r3, r3, #16
 800692c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006930:	4b62      	ldr	r3, [pc, #392]	; (8006abc <SAI_MspInit+0x1e0>)
 8006932:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006936:	f003 0310 	and.w	r3, r3, #16
 800693a:	643b      	str	r3, [r7, #64]	; 0x40
 800693c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    AUDIO_OUT_SAIx_FS_ENABLE();
 800693e:	4b5f      	ldr	r3, [pc, #380]	; (8006abc <SAI_MspInit+0x1e0>)
 8006940:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006944:	4a5d      	ldr	r2, [pc, #372]	; (8006abc <SAI_MspInit+0x1e0>)
 8006946:	f043 0310 	orr.w	r3, r3, #16
 800694a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800694e:	4b5b      	ldr	r3, [pc, #364]	; (8006abc <SAI_MspInit+0x1e0>)
 8006950:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006954:	f003 0310 	and.w	r3, r3, #16
 8006958:	63fb      	str	r3, [r7, #60]	; 0x3c
 800695a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
    gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 800695c:	2310      	movs	r3, #16
 800695e:	64fb      	str	r3, [r7, #76]	; 0x4c
    gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8006960:	2302      	movs	r3, #2
 8006962:	653b      	str	r3, [r7, #80]	; 0x50
    gpio_init_structure.Pull = GPIO_NOPULL;
 8006964:	2300      	movs	r3, #0
 8006966:	657b      	str	r3, [r7, #84]	; 0x54
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006968:	2303      	movs	r3, #3
 800696a:	65bb      	str	r3, [r7, #88]	; 0x58
    gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_AF;
 800696c:	2306      	movs	r3, #6
 800696e:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 8006970:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006974:	4619      	mov	r1, r3
 8006976:	4852      	ldr	r0, [pc, #328]	; (8006ac0 <SAI_MspInit+0x1e4>)
 8006978:	f006 ff00 	bl	800d77c <HAL_GPIO_Init>

    gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 800697c:	2320      	movs	r3, #32
 800697e:	64fb      	str	r3, [r7, #76]	; 0x4c
    gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 8006980:	2306      	movs	r3, #6
 8006982:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_GPIO_PORT, &gpio_init_structure);
 8006984:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006988:	4619      	mov	r1, r3
 800698a:	484d      	ldr	r0, [pc, #308]	; (8006ac0 <SAI_MspInit+0x1e4>)
 800698c:	f006 fef6 	bl	800d77c <HAL_GPIO_Init>

    gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 8006990:	2340      	movs	r3, #64	; 0x40
 8006992:	64fb      	str	r3, [r7, #76]	; 0x4c
    gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SD_AF;
 8006994:	2306      	movs	r3, #6
 8006996:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(AUDIO_OUT_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8006998:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800699c:	4619      	mov	r1, r3
 800699e:	4848      	ldr	r0, [pc, #288]	; (8006ac0 <SAI_MspInit+0x1e4>)
 80069a0:	f006 feec 	bl	800d77c <HAL_GPIO_Init>

    if(hsai->Instance != AUDIO_IN_SAI_PDMx)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a46      	ldr	r2, [pc, #280]	; (8006ac4 <SAI_MspInit+0x1e8>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d01e      	beq.n	80069ec <SAI_MspInit+0x110>
    {
      if(haudio_in_sai.State != HAL_SAI_STATE_READY)
 80069ae:	4b46      	ldr	r3, [pc, #280]	; (8006ac8 <SAI_MspInit+0x1ec>)
 80069b0:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d018      	beq.n	80069ec <SAI_MspInit+0x110>
      {
        AUDIO_OUT_SAIx_MCLK_ENABLE();
 80069ba:	4b40      	ldr	r3, [pc, #256]	; (8006abc <SAI_MspInit+0x1e0>)
 80069bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80069c0:	4a3e      	ldr	r2, [pc, #248]	; (8006abc <SAI_MspInit+0x1e0>)
 80069c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80069ca:	4b3c      	ldr	r3, [pc, #240]	; (8006abc <SAI_MspInit+0x1e0>)
 80069cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80069d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80069d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
        gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 80069d8:	2380      	movs	r3, #128	; 0x80
 80069da:	64fb      	str	r3, [r7, #76]	; 0x4c
        gpio_init_structure.Alternate = AUDIO_OUT_SAIx_MCLK_AF;
 80069dc:	2306      	movs	r3, #6
 80069de:	65fb      	str	r3, [r7, #92]	; 0x5c
        HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 80069e0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80069e4:	4619      	mov	r1, r3
 80069e6:	4839      	ldr	r0, [pc, #228]	; (8006acc <SAI_MspInit+0x1f0>)
 80069e8:	f006 fec8 	bl	800d77c <HAL_GPIO_Init>
      }
    }

  if(hsai->Instance == AUDIO_OUT_SAIx)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a37      	ldr	r2, [pc, #220]	; (8006ad0 <SAI_MspInit+0x1f4>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	f040 80b3 	bne.w	8006b5e <SAI_MspInit+0x282>
  {

	    /* Enable SAI clock */
    __HAL_RCC_SAI1_CLK_ENABLE();
 80069f8:	4b30      	ldr	r3, [pc, #192]	; (8006abc <SAI_MspInit+0x1e0>)
 80069fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80069fe:	4a2f      	ldr	r2, [pc, #188]	; (8006abc <SAI_MspInit+0x1e0>)
 8006a00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006a04:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006a08:	4b2c      	ldr	r3, [pc, #176]	; (8006abc <SAI_MspInit+0x1e0>)
 8006a0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006a0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a12:	637b      	str	r3, [r7, #52]	; 0x34
 8006a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34

  /* CODEC_SAI pins configuration: FS, SCK and SD pins */
  /* Enable FS, SCK and SD clocks */
 __HAL_RCC_GPIOE_CLK_ENABLE();
 8006a16:	4b29      	ldr	r3, [pc, #164]	; (8006abc <SAI_MspInit+0x1e0>)
 8006a18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a1c:	4a27      	ldr	r2, [pc, #156]	; (8006abc <SAI_MspInit+0x1e0>)
 8006a1e:	f043 0310 	orr.w	r3, r3, #16
 8006a22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006a26:	4b25      	ldr	r3, [pc, #148]	; (8006abc <SAI_MspInit+0x1e0>)
 8006a28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a2c:	f003 0310 	and.w	r3, r3, #16
 8006a30:	633b      	str	r3, [r7, #48]	; 0x30
 8006a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  /* Enable FS, SCK and SD pins */
  gpio_init_structure.Pin = GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6;
 8006a34:	2370      	movs	r3, #112	; 0x70
 8006a36:	64fb      	str	r3, [r7, #76]	; 0x4c
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8006a38:	2302      	movs	r3, #2
 8006a3a:	653b      	str	r3, [r7, #80]	; 0x50
  gpio_init_structure.Pull = GPIO_NOPULL;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	657b      	str	r3, [r7, #84]	; 0x54
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a40:	2303      	movs	r3, #3
 8006a42:	65bb      	str	r3, [r7, #88]	; 0x58
  gpio_init_structure.Alternate = GPIO_AF6_SAI1;
 8006a44:	2306      	movs	r3, #6
 8006a46:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8006a48:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006a4c:	4619      	mov	r1, r3
 8006a4e:	481c      	ldr	r0, [pc, #112]	; (8006ac0 <SAI_MspInit+0x1e4>)
 8006a50:	f006 fe94 	bl	800d77c <HAL_GPIO_Init>

  /* Enable MCLK clock */
   __HAL_RCC_GPIOG_CLK_ENABLE();
 8006a54:	4b19      	ldr	r3, [pc, #100]	; (8006abc <SAI_MspInit+0x1e0>)
 8006a56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a5a:	4a18      	ldr	r2, [pc, #96]	; (8006abc <SAI_MspInit+0x1e0>)
 8006a5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006a64:	4b15      	ldr	r3, [pc, #84]	; (8006abc <SAI_MspInit+0x1e0>)
 8006a66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  /* Enable MCLK pin */
  gpio_init_structure.Pin = GPIO_PIN_7;
 8006a72:	2380      	movs	r3, #128	; 0x80
 8006a74:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8006a76:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	4813      	ldr	r0, [pc, #76]	; (8006acc <SAI_MspInit+0x1f0>)
 8006a7e:	f006 fe7d 	bl	800d77c <HAL_GPIO_Init>


    /* Enable the DMA clock */
    AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 8006a82:	4b0e      	ldr	r3, [pc, #56]	; (8006abc <SAI_MspInit+0x1e0>)
 8006a84:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006a88:	4a0c      	ldr	r2, [pc, #48]	; (8006abc <SAI_MspInit+0x1e0>)
 8006a8a:	f043 0302 	orr.w	r3, r3, #2
 8006a8e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8006a92:	4b0a      	ldr	r3, [pc, #40]	; (8006abc <SAI_MspInit+0x1e0>)
 8006a94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006a98:	f003 0302 	and.w	r3, r3, #2
 8006a9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28

    /* Configure the hdma_saiTx handle parameters */
    if(Audio_Out_Ctx[0].BitsPerSample == AUDIO_RESOLUTION_16B)
 8006aa0:	4b0c      	ldr	r3, [pc, #48]	; (8006ad4 <SAI_MspInit+0x1f8>)
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	2b10      	cmp	r3, #16
 8006aa6:	d119      	bne.n	8006adc <SAI_MspInit+0x200>
    {
      hdma_sai_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006aa8:	4b0b      	ldr	r3, [pc, #44]	; (8006ad8 <SAI_MspInit+0x1fc>)
 8006aaa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006aae:	615a      	str	r2, [r3, #20]
      hdma_sai_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_HALFWORD;
 8006ab0:	4b09      	ldr	r3, [pc, #36]	; (8006ad8 <SAI_MspInit+0x1fc>)
 8006ab2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006ab6:	619a      	str	r2, [r3, #24]
 8006ab8:	e018      	b.n	8006aec <SAI_MspInit+0x210>
 8006aba:	bf00      	nop
 8006abc:	58024400 	.word	0x58024400
 8006ac0:	58021000 	.word	0x58021000
 8006ac4:	58005404 	.word	0x58005404
 8006ac8:	24001dc0 	.word	0x24001dc0
 8006acc:	58021800 	.word	0x58021800
 8006ad0:	40015804 	.word	0x40015804
 8006ad4:	24000714 	.word	0x24000714
 8006ad8:	240007e4 	.word	0x240007e4
    }
    else
    {
      hdma_sai_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006adc:	4bb1      	ldr	r3, [pc, #708]	; (8006da4 <SAI_MspInit+0x4c8>)
 8006ade:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006ae2:	615a      	str	r2, [r3, #20]
      hdma_sai_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8006ae4:	4baf      	ldr	r3, [pc, #700]	; (8006da4 <SAI_MspInit+0x4c8>)
 8006ae6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006aea:	619a      	str	r2, [r3, #24]
    }

    hdma_sai_tx.Init.Request             = AUDIO_OUT_SAIx_DMAx_REQUEST;
 8006aec:	4bad      	ldr	r3, [pc, #692]	; (8006da4 <SAI_MspInit+0x4c8>)
 8006aee:	2257      	movs	r2, #87	; 0x57
 8006af0:	605a      	str	r2, [r3, #4]
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8006af2:	4bac      	ldr	r3, [pc, #688]	; (8006da4 <SAI_MspInit+0x4c8>)
 8006af4:	2200      	movs	r2, #0
 8006af6:	60da      	str	r2, [r3, #12]
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8006af8:	4baa      	ldr	r3, [pc, #680]	; (8006da4 <SAI_MspInit+0x4c8>)
 8006afa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006afe:	611a      	str	r2, [r3, #16]
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 8006b00:	4ba8      	ldr	r3, [pc, #672]	; (8006da4 <SAI_MspInit+0x4c8>)
 8006b02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006b06:	61da      	str	r2, [r3, #28]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 8006b08:	4ba6      	ldr	r3, [pc, #664]	; (8006da4 <SAI_MspInit+0x4c8>)
 8006b0a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006b0e:	621a      	str	r2, [r3, #32]
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 8006b10:	4ba4      	ldr	r3, [pc, #656]	; (8006da4 <SAI_MspInit+0x4c8>)
 8006b12:	2204      	movs	r2, #4
 8006b14:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8006b16:	4ba3      	ldr	r3, [pc, #652]	; (8006da4 <SAI_MspInit+0x4c8>)
 8006b18:	2203      	movs	r2, #3
 8006b1a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8006b1c:	4ba1      	ldr	r3, [pc, #644]	; (8006da4 <SAI_MspInit+0x4c8>)
 8006b1e:	2240      	movs	r2, #64	; 0x40
 8006b20:	609a      	str	r2, [r3, #8]
    hdma_sai_tx.Instance                 = AUDIO_OUT_SAIx_DMAx_STREAM;
 8006b22:	4ba0      	ldr	r3, [pc, #640]	; (8006da4 <SAI_MspInit+0x4c8>)
 8006b24:	4aa0      	ldr	r2, [pc, #640]	; (8006da8 <SAI_MspInit+0x4cc>)
 8006b26:	601a      	str	r2, [r3, #0]
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8006b28:	4b9e      	ldr	r3, [pc, #632]	; (8006da4 <SAI_MspInit+0x4c8>)
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 8006b2e:	4b9d      	ldr	r3, [pc, #628]	; (8006da4 <SAI_MspInit+0x4c8>)
 8006b30:	2200      	movs	r2, #0
 8006b32:	631a      	str	r2, [r3, #48]	; 0x30

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	4a9b      	ldr	r2, [pc, #620]	; (8006da4 <SAI_MspInit+0x4c8>)
 8006b38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8006b3c:	4a99      	ldr	r2, [pc, #612]	; (8006da4 <SAI_MspInit+0x4c8>)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6393      	str	r3, [r2, #56]	; 0x38

    /* Deinitialize the Stream for new transfer */
    (void)HAL_DMA_DeInit(&hdma_sai_tx);
 8006b42:	4898      	ldr	r0, [pc, #608]	; (8006da4 <SAI_MspInit+0x4c8>)
 8006b44:	f003 f8f4 	bl	8009d30 <HAL_DMA_DeInit>

    /* Configure the DMA Stream */
    (void)HAL_DMA_Init(&hdma_sai_tx);
 8006b48:	4896      	ldr	r0, [pc, #600]	; (8006da4 <SAI_MspInit+0x4c8>)
 8006b4a:	f002 fd95 	bl	8009678 <HAL_DMA_Init>

    /* SAI DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, BSP_AUDIO_OUT_IT_PRIORITY, 0);
 8006b4e:	2200      	movs	r2, #0
 8006b50:	210e      	movs	r1, #14
 8006b52:	2039      	movs	r0, #57	; 0x39
 8006b54:	f002 fb99 	bl	800928a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ);
 8006b58:	2039      	movs	r0, #57	; 0x39
 8006b5a:	f002 fbb0 	bl	80092be <HAL_NVIC_EnableIRQ>
  }

  /* Audio In Msp initialization */
  if(hsai->Instance == AUDIO_IN_SAI_PDMx)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a92      	ldr	r2, [pc, #584]	; (8006dac <SAI_MspInit+0x4d0>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	f040 80b8 	bne.w	8006cda <SAI_MspInit+0x3fe>
  {
     /* Enable SAI clock */
     AUDIO_IN_SAI_PDMx_CLK_ENABLE();
 8006b6a:	4b91      	ldr	r3, [pc, #580]	; (8006db0 <SAI_MspInit+0x4d4>)
 8006b6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006b70:	4a8f      	ldr	r2, [pc, #572]	; (8006db0 <SAI_MspInit+0x4d4>)
 8006b72:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006b76:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006b7a:	4b8d      	ldr	r3, [pc, #564]	; (8006db0 <SAI_MspInit+0x4d4>)
 8006b7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006b80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b84:	627b      	str	r3, [r7, #36]	; 0x24
 8006b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24

     AUDIO_IN_SAI_PDMx_CLK_IN_ENABLE();
 8006b88:	4b89      	ldr	r3, [pc, #548]	; (8006db0 <SAI_MspInit+0x4d4>)
 8006b8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b8e:	4a88      	ldr	r2, [pc, #544]	; (8006db0 <SAI_MspInit+0x4d4>)
 8006b90:	f043 0310 	orr.w	r3, r3, #16
 8006b94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006b98:	4b85      	ldr	r3, [pc, #532]	; (8006db0 <SAI_MspInit+0x4d4>)
 8006b9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b9e:	f003 0310 	and.w	r3, r3, #16
 8006ba2:	623b      	str	r3, [r7, #32]
 8006ba4:	6a3b      	ldr	r3, [r7, #32]
     AUDIO_IN_SAI_PDMx_DATA_IN_ENABLE();
 8006ba6:	4b82      	ldr	r3, [pc, #520]	; (8006db0 <SAI_MspInit+0x4d4>)
 8006ba8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006bac:	4a80      	ldr	r2, [pc, #512]	; (8006db0 <SAI_MspInit+0x4d4>)
 8006bae:	f043 0304 	orr.w	r3, r3, #4
 8006bb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006bb6:	4b7e      	ldr	r3, [pc, #504]	; (8006db0 <SAI_MspInit+0x4d4>)
 8006bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006bbc:	f003 0304 	and.w	r3, r3, #4
 8006bc0:	61fb      	str	r3, [r7, #28]
 8006bc2:	69fb      	ldr	r3, [r7, #28]

     gpio_init_structure.Pin = AUDIO_IN_SAI_PDMx_CLK_IN_PIN;
 8006bc4:	2304      	movs	r3, #4
 8006bc6:	64fb      	str	r3, [r7, #76]	; 0x4c
    gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8006bc8:	2302      	movs	r3, #2
 8006bca:	653b      	str	r3, [r7, #80]	; 0x50
    gpio_init_structure.Pull = GPIO_NOPULL;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	657b      	str	r3, [r7, #84]	; 0x54
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8006bd0:	2302      	movs	r3, #2
 8006bd2:	65bb      	str	r3, [r7, #88]	; 0x58
    gpio_init_structure.Alternate = GPIO_AF10_SAI4;
 8006bd4:	230a      	movs	r3, #10
 8006bd6:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(AUDIO_IN_SAI_PDMx_CLK_IN_PORT, &gpio_init_structure);
 8006bd8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006bdc:	4619      	mov	r1, r3
 8006bde:	4875      	ldr	r0, [pc, #468]	; (8006db4 <SAI_MspInit+0x4d8>)
 8006be0:	f006 fdcc 	bl	800d77c <HAL_GPIO_Init>

    gpio_init_structure.Pull = GPIO_PULLUP;
 8006be4:	2301      	movs	r3, #1
 8006be6:	657b      	str	r3, [r7, #84]	; 0x54
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8006be8:	2301      	movs	r3, #1
 8006bea:	65bb      	str	r3, [r7, #88]	; 0x58
    gpio_init_structure.Pin = AUDIO_IN_SAI_PDMx_DATA_IN_PIN;
 8006bec:	2302      	movs	r3, #2
 8006bee:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(AUDIO_IN_SAI_PDMx_DATA_IN_PORT, &gpio_init_structure);
 8006bf0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006bf4:	4619      	mov	r1, r3
 8006bf6:	4870      	ldr	r0, [pc, #448]	; (8006db8 <SAI_MspInit+0x4dc>)
 8006bf8:	f006 fdc0 	bl	800d77c <HAL_GPIO_Init>

    AUDIO_IN_SAI_PDMx_FS_SCK_ENABLE();
 8006bfc:	4b6c      	ldr	r3, [pc, #432]	; (8006db0 <SAI_MspInit+0x4d4>)
 8006bfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c02:	4a6b      	ldr	r2, [pc, #428]	; (8006db0 <SAI_MspInit+0x4d4>)
 8006c04:	f043 0310 	orr.w	r3, r3, #16
 8006c08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006c0c:	4b68      	ldr	r3, [pc, #416]	; (8006db0 <SAI_MspInit+0x4d4>)
 8006c0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c12:	f003 0310 	and.w	r3, r3, #16
 8006c16:	61bb      	str	r3, [r7, #24]
 8006c18:	69bb      	ldr	r3, [r7, #24]

    /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
    gpio_init_structure.Pin = AUDIO_IN_SAI_PDMx_FS_PIN | AUDIO_IN_SAI_PDMx_SCK_PIN;
 8006c1a:	2330      	movs	r3, #48	; 0x30
 8006c1c:	64fb      	str	r3, [r7, #76]	; 0x4c
    gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8006c1e:	2302      	movs	r3, #2
 8006c20:	653b      	str	r3, [r7, #80]	; 0x50
    gpio_init_structure.Pull = GPIO_NOPULL;
 8006c22:	2300      	movs	r3, #0
 8006c24:	657b      	str	r3, [r7, #84]	; 0x54
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8006c26:	2302      	movs	r3, #2
 8006c28:	65bb      	str	r3, [r7, #88]	; 0x58
    gpio_init_structure.Alternate = AUDIO_IN_SAI_PDMx_FS_SCK_AF;
 8006c2a:	2308      	movs	r3, #8
 8006c2c:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(AUDIO_IN_SAI_PDMx_FS_SCK_GPIO_PORT, &gpio_init_structure);
 8006c2e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006c32:	4619      	mov	r1, r3
 8006c34:	485f      	ldr	r0, [pc, #380]	; (8006db4 <SAI_MspInit+0x4d8>)
 8006c36:	f006 fda1 	bl	800d77c <HAL_GPIO_Init>

    /* Enable the DMA clock */
      __HAL_RCC_BDMA_CLK_ENABLE();
 8006c3a:	4b5d      	ldr	r3, [pc, #372]	; (8006db0 <SAI_MspInit+0x4d4>)
 8006c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c40:	4a5b      	ldr	r2, [pc, #364]	; (8006db0 <SAI_MspInit+0x4d4>)
 8006c42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006c46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006c4a:	4b59      	ldr	r3, [pc, #356]	; (8006db0 <SAI_MspInit+0x4d4>)
 8006c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c54:	617b      	str	r3, [r7, #20]
 8006c56:	697b      	ldr	r3, [r7, #20]
    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Request             = AUDIO_IN_SAI_PDMx_DMAx_REQUEST;
 8006c58:	4b58      	ldr	r3, [pc, #352]	; (8006dbc <SAI_MspInit+0x4e0>)
 8006c5a:	220f      	movs	r2, #15
 8006c5c:	605a      	str	r2, [r3, #4]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8006c5e:	4b57      	ldr	r3, [pc, #348]	; (8006dbc <SAI_MspInit+0x4e0>)
 8006c60:	2200      	movs	r2, #0
 8006c62:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8006c64:	4b55      	ldr	r3, [pc, #340]	; (8006dbc <SAI_MspInit+0x4e0>)
 8006c66:	2200      	movs	r2, #0
 8006c68:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8006c6a:	4b54      	ldr	r3, [pc, #336]	; (8006dbc <SAI_MspInit+0x4e0>)
 8006c6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006c70:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAI_PDMx_DMAx_PERIPH_DATA_SIZE;
 8006c72:	4b52      	ldr	r3, [pc, #328]	; (8006dbc <SAI_MspInit+0x4e0>)
 8006c74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c78:	615a      	str	r2, [r3, #20]
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAI_PDMx_DMAx_MEM_DATA_SIZE;
 8006c7a:	4b50      	ldr	r3, [pc, #320]	; (8006dbc <SAI_MspInit+0x4e0>)
 8006c7c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006c80:	619a      	str	r2, [r3, #24]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 8006c82:	4b4e      	ldr	r3, [pc, #312]	; (8006dbc <SAI_MspInit+0x4e0>)
 8006c84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006c88:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8006c8a:	4b4c      	ldr	r3, [pc, #304]	; (8006dbc <SAI_MspInit+0x4e0>)
 8006c8c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006c90:	621a      	str	r2, [r3, #32]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8006c92:	4b4a      	ldr	r3, [pc, #296]	; (8006dbc <SAI_MspInit+0x4e0>)
 8006c94:	2200      	movs	r2, #0
 8006c96:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8006c98:	4b48      	ldr	r3, [pc, #288]	; (8006dbc <SAI_MspInit+0x4e0>)
 8006c9a:	2203      	movs	r2, #3
 8006c9c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8006c9e:	4b47      	ldr	r3, [pc, #284]	; (8006dbc <SAI_MspInit+0x4e0>)
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 8006ca4:	4b45      	ldr	r3, [pc, #276]	; (8006dbc <SAI_MspInit+0x4e0>)
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	631a      	str	r2, [r3, #48]	; 0x30

    hdma_sai_rx.Instance = AUDIO_IN_SAI_PDMx_DMAx_STREAM;
 8006caa:	4b44      	ldr	r3, [pc, #272]	; (8006dbc <SAI_MspInit+0x4e0>)
 8006cac:	4a44      	ldr	r2, [pc, #272]	; (8006dc0 <SAI_MspInit+0x4e4>)
 8006cae:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4a42      	ldr	r2, [pc, #264]	; (8006dbc <SAI_MspInit+0x4e0>)
 8006cb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8006cb8:	4a40      	ldr	r2, [pc, #256]	; (8006dbc <SAI_MspInit+0x4e0>)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6393      	str	r3, [r2, #56]	; 0x38

    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_rx);
 8006cbe:	483f      	ldr	r0, [pc, #252]	; (8006dbc <SAI_MspInit+0x4e0>)
 8006cc0:	f003 f836 	bl	8009d30 <HAL_DMA_DeInit>

    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_rx);
 8006cc4:	483d      	ldr	r0, [pc, #244]	; (8006dbc <SAI_MspInit+0x4e0>)
 8006cc6:	f002 fcd7 	bl	8009678 <HAL_DMA_Init>

    /* SAI DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_IN_SAI_PDMx_DMAx_IRQ, BSP_AUDIO_IN_IT_PRIORITY, 0);
 8006cca:	2200      	movs	r2, #0
 8006ccc:	210f      	movs	r1, #15
 8006cce:	2082      	movs	r0, #130	; 0x82
 8006cd0:	f002 fadb 	bl	800928a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_IN_SAI_PDMx_DMAx_IRQ);
 8006cd4:	2082      	movs	r0, #130	; 0x82
 8006cd6:	f002 faf2 	bl	80092be <HAL_NVIC_EnableIRQ>
  }
   /* Audio In Msp initialization */
  if(hsai->Instance == AUDIO_IN_SAIx)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a39      	ldr	r2, [pc, #228]	; (8006dc4 <SAI_MspInit+0x4e8>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	f040 8092 	bne.w	8006e0a <SAI_MspInit+0x52e>
  {
        /* Enable SAI clock */
    AUDIO_IN_SAIx_CLK_ENABLE();
 8006ce6:	4b32      	ldr	r3, [pc, #200]	; (8006db0 <SAI_MspInit+0x4d4>)
 8006ce8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006cec:	4a30      	ldr	r2, [pc, #192]	; (8006db0 <SAI_MspInit+0x4d4>)
 8006cee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006cf2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006cf6:	4b2e      	ldr	r3, [pc, #184]	; (8006db0 <SAI_MspInit+0x4d4>)
 8006cf8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006cfc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d00:	613b      	str	r3, [r7, #16]
 8006d02:	693b      	ldr	r3, [r7, #16]

    /* Enable SD GPIO clock */
    AUDIO_IN_SAIx_SD_ENABLE();
 8006d04:	4b2a      	ldr	r3, [pc, #168]	; (8006db0 <SAI_MspInit+0x4d4>)
 8006d06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d0a:	4a29      	ldr	r2, [pc, #164]	; (8006db0 <SAI_MspInit+0x4d4>)
 8006d0c:	f043 0310 	orr.w	r3, r3, #16
 8006d10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006d14:	4b26      	ldr	r3, [pc, #152]	; (8006db0 <SAI_MspInit+0x4d4>)
 8006d16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d1a:	f003 0310 	and.w	r3, r3, #16
 8006d1e:	60fb      	str	r3, [r7, #12]
 8006d20:	68fb      	ldr	r3, [r7, #12]
    /* CODEC_SAI pin configuration: SD pin */
    gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 8006d22:	2308      	movs	r3, #8
 8006d24:	64fb      	str	r3, [r7, #76]	; 0x4c
    gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8006d26:	2302      	movs	r3, #2
 8006d28:	653b      	str	r3, [r7, #80]	; 0x50
    gpio_init_structure.Pull = GPIO_NOPULL;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	657b      	str	r3, [r7, #84]	; 0x54
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8006d2e:	2302      	movs	r3, #2
 8006d30:	65bb      	str	r3, [r7, #88]	; 0x58
    gpio_init_structure.Alternate = AUDIO_IN_SAIx_AF;
 8006d32:	2306      	movs	r3, #6
 8006d34:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8006d36:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	481d      	ldr	r0, [pc, #116]	; (8006db4 <SAI_MspInit+0x4d8>)
 8006d3e:	f006 fd1d 	bl	800d77c <HAL_GPIO_Init>

    /* Enable the DMA clock */
    AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 8006d42:	4b1b      	ldr	r3, [pc, #108]	; (8006db0 <SAI_MspInit+0x4d4>)
 8006d44:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006d48:	4a19      	ldr	r2, [pc, #100]	; (8006db0 <SAI_MspInit+0x4d4>)
 8006d4a:	f043 0302 	orr.w	r3, r3, #2
 8006d4e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8006d52:	4b17      	ldr	r3, [pc, #92]	; (8006db0 <SAI_MspInit+0x4d4>)
 8006d54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006d58:	f003 0302 	and.w	r3, r3, #2
 8006d5c:	60bb      	str	r3, [r7, #8]
 8006d5e:	68bb      	ldr	r3, [r7, #8]

    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Request             = AUDIO_IN_SAIx_DMAx_REQUEST;
 8006d60:	4b16      	ldr	r3, [pc, #88]	; (8006dbc <SAI_MspInit+0x4e0>)
 8006d62:	2258      	movs	r2, #88	; 0x58
 8006d64:	605a      	str	r2, [r3, #4]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8006d66:	4b15      	ldr	r3, [pc, #84]	; (8006dbc <SAI_MspInit+0x4e0>)
 8006d68:	2200      	movs	r2, #0
 8006d6a:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8006d6c:	4b13      	ldr	r3, [pc, #76]	; (8006dbc <SAI_MspInit+0x4e0>)
 8006d6e:	2200      	movs	r2, #0
 8006d70:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8006d72:	4b12      	ldr	r3, [pc, #72]	; (8006dbc <SAI_MspInit+0x4e0>)
 8006d74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006d78:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 8006d7a:	4b10      	ldr	r3, [pc, #64]	; (8006dbc <SAI_MspInit+0x4e0>)
 8006d7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d80:	615a      	str	r2, [r3, #20]
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 8006d82:	4b0e      	ldr	r3, [pc, #56]	; (8006dbc <SAI_MspInit+0x4e0>)
 8006d84:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006d88:	619a      	str	r2, [r3, #24]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 8006d8a:	4b0c      	ldr	r3, [pc, #48]	; (8006dbc <SAI_MspInit+0x4e0>)
 8006d8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006d90:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8006d92:	4b0a      	ldr	r3, [pc, #40]	; (8006dbc <SAI_MspInit+0x4e0>)
 8006d94:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006d98:	621a      	str	r2, [r3, #32]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8006d9a:	4b08      	ldr	r3, [pc, #32]	; (8006dbc <SAI_MspInit+0x4e0>)
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	625a      	str	r2, [r3, #36]	; 0x24
 8006da0:	e012      	b.n	8006dc8 <SAI_MspInit+0x4ec>
 8006da2:	bf00      	nop
 8006da4:	240007e4 	.word	0x240007e4
 8006da8:	40020428 	.word	0x40020428
 8006dac:	58005404 	.word	0x58005404
 8006db0:	58024400 	.word	0x58024400
 8006db4:	58021000 	.word	0x58021000
 8006db8:	58020800 	.word	0x58020800
 8006dbc:	2400085c 	.word	0x2400085c
 8006dc0:	5802541c 	.word	0x5802541c
 8006dc4:	40015824 	.word	0x40015824
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8006dc8:	4b12      	ldr	r3, [pc, #72]	; (8006e14 <SAI_MspInit+0x538>)
 8006dca:	2203      	movs	r2, #3
 8006dcc:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8006dce:	4b11      	ldr	r3, [pc, #68]	; (8006e14 <SAI_MspInit+0x538>)
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 8006dd4:	4b0f      	ldr	r3, [pc, #60]	; (8006e14 <SAI_MspInit+0x538>)
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	631a      	str	r2, [r3, #48]	; 0x30

    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 8006dda:	4b0e      	ldr	r3, [pc, #56]	; (8006e14 <SAI_MspInit+0x538>)
 8006ddc:	4a0e      	ldr	r2, [pc, #56]	; (8006e18 <SAI_MspInit+0x53c>)
 8006dde:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	4a0c      	ldr	r2, [pc, #48]	; (8006e14 <SAI_MspInit+0x538>)
 8006de4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8006de8:	4a0a      	ldr	r2, [pc, #40]	; (8006e14 <SAI_MspInit+0x538>)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6393      	str	r3, [r2, #56]	; 0x38

    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_rx);
 8006dee:	4809      	ldr	r0, [pc, #36]	; (8006e14 <SAI_MspInit+0x538>)
 8006df0:	f002 ff9e 	bl	8009d30 <HAL_DMA_DeInit>

    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_rx);
 8006df4:	4807      	ldr	r0, [pc, #28]	; (8006e14 <SAI_MspInit+0x538>)
 8006df6:	f002 fc3f 	bl	8009678 <HAL_DMA_Init>

    /* SAI DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, BSP_AUDIO_IN_IT_PRIORITY, 0);
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	210f      	movs	r1, #15
 8006dfe:	203c      	movs	r0, #60	; 0x3c
 8006e00:	f002 fa43 	bl	800928a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 8006e04:	203c      	movs	r0, #60	; 0x3c
 8006e06:	f002 fa5a 	bl	80092be <HAL_NVIC_EnableIRQ>

  }
}
 8006e0a:	bf00      	nop
 8006e0c:	3760      	adds	r7, #96	; 0x60
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	bf00      	nop
 8006e14:	2400085c 	.word	0x2400085c
 8006e18:	40020470 	.word	0x40020470

08006e1c <SAI_MspDeInit>:
  * @brief  Deinitializes SAI MSP.
  * @param  hsai  SAI handle
  * @retval HAL status
  */
static void SAI_MspDeInit(SAI_HandleTypeDef *hsai)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b088      	sub	sp, #32
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a30      	ldr	r2, [pc, #192]	; (8006eec <SAI_MspDeInit+0xd0>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d134      	bne.n	8006e98 <SAI_MspDeInit+0x7c>
  {
    /* SAI DMA IRQ Channel deactivation */
    HAL_NVIC_DisableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ);
 8006e2e:	2039      	movs	r0, #57	; 0x39
 8006e30:	f002 fa53 	bl	80092da <HAL_NVIC_DisableIRQ>

    /* Deinitialize the DMA stream */
    (void)HAL_DMA_DeInit(hsai->hdmatx);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f002 ff78 	bl	8009d30 <HAL_DMA_DeInit>

    /* Disable SAI peripheral */
    __HAL_SAI_DISABLE(hsai);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006e4e:	601a      	str	r2, [r3, #0]

    /* Deactivates CODEC_SAI pins FS, SCK, MCK and SD by putting them in input mode */
    gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 8006e50:	2310      	movs	r3, #16
 8006e52:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_DeInit(AUDIO_OUT_SAIx_FS_GPIO_PORT, gpio_init_structure.Pin);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	4619      	mov	r1, r3
 8006e58:	4825      	ldr	r0, [pc, #148]	; (8006ef0 <SAI_MspDeInit+0xd4>)
 8006e5a:	f006 fe3f 	bl	800dadc <HAL_GPIO_DeInit>

    gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 8006e5e:	2320      	movs	r3, #32
 8006e60:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_DeInit(AUDIO_OUT_SAIx_SCK_GPIO_PORT, gpio_init_structure.Pin);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	4619      	mov	r1, r3
 8006e66:	4822      	ldr	r0, [pc, #136]	; (8006ef0 <SAI_MspDeInit+0xd4>)
 8006e68:	f006 fe38 	bl	800dadc <HAL_GPIO_DeInit>

    gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 8006e6c:	2340      	movs	r3, #64	; 0x40
 8006e6e:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_DeInit(AUDIO_OUT_SAIx_SD_GPIO_PORT, gpio_init_structure.Pin);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	4619      	mov	r1, r3
 8006e74:	481e      	ldr	r0, [pc, #120]	; (8006ef0 <SAI_MspDeInit+0xd4>)
 8006e76:	f006 fe31 	bl	800dadc <HAL_GPIO_DeInit>

    gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 8006e7a:	2380      	movs	r3, #128	; 0x80
 8006e7c:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_DeInit(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, gpio_init_structure.Pin);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	4619      	mov	r1, r3
 8006e82:	481c      	ldr	r0, [pc, #112]	; (8006ef4 <SAI_MspDeInit+0xd8>)
 8006e84:	f006 fe2a 	bl	800dadc <HAL_GPIO_DeInit>

    /* Disable SAI clock */
    AUDIO_OUT_SAIx_CLK_DISABLE();
 8006e88:	4b1b      	ldr	r3, [pc, #108]	; (8006ef8 <SAI_MspDeInit+0xdc>)
 8006e8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006e8e:	4a1a      	ldr	r2, [pc, #104]	; (8006ef8 <SAI_MspDeInit+0xdc>)
 8006e90:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8006e94:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
  }
  if(hsai->Instance == AUDIO_IN_SAIx)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a17      	ldr	r2, [pc, #92]	; (8006efc <SAI_MspDeInit+0xe0>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d11f      	bne.n	8006ee2 <SAI_MspDeInit+0xc6>
  {
    /* SAI DMA IRQ Channel deactivation */
    HAL_NVIC_DisableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 8006ea2:	203c      	movs	r0, #60	; 0x3c
 8006ea4:	f002 fa19 	bl	80092da <HAL_NVIC_DisableIRQ>

    /* Deinitialize the DMA stream */
    (void)HAL_DMA_DeInit(hsai->hdmarx);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f002 ff3e 	bl	8009d30 <HAL_DMA_DeInit>

    /* Disable SAI peripheral */
    __HAL_SAI_DISABLE(hsai);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	681a      	ldr	r2, [r3, #0]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006ec2:	601a      	str	r2, [r3, #0]

    /* Deactivates CODEC_SAI pin SD by putting them in input mode */
    gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 8006ec4:	2308      	movs	r3, #8
 8006ec6:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_DeInit(AUDIO_IN_SAIx_SD_GPIO_PORT, gpio_init_structure.Pin);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	4619      	mov	r1, r3
 8006ecc:	4808      	ldr	r0, [pc, #32]	; (8006ef0 <SAI_MspDeInit+0xd4>)
 8006ece:	f006 fe05 	bl	800dadc <HAL_GPIO_DeInit>

    /* Disable SAI clock */
    AUDIO_IN_SAIx_CLK_DISABLE();
 8006ed2:	4b09      	ldr	r3, [pc, #36]	; (8006ef8 <SAI_MspDeInit+0xdc>)
 8006ed4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006ed8:	4a07      	ldr	r2, [pc, #28]	; (8006ef8 <SAI_MspDeInit+0xdc>)
 8006eda:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8006ede:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
  }
}
 8006ee2:	bf00      	nop
 8006ee4:	3720      	adds	r7, #32
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}
 8006eea:	bf00      	nop
 8006eec:	40015804 	.word	0x40015804
 8006ef0:	58021000 	.word	0x58021000
 8006ef4:	58021800 	.word	0x58021800
 8006ef8:	58024400 	.word	0x58024400
 8006efc:	40015824 	.word	0x40015824

08006f00 <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b082      	sub	sp, #8
 8006f04:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8006f06:	2300      	movs	r3, #0
 8006f08:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 8006f0a:	4b16      	ldr	r3, [pc, #88]	; (8006f64 <BSP_I2C4_Init+0x64>)
 8006f0c:	4a16      	ldr	r2, [pc, #88]	; (8006f68 <BSP_I2C4_Init+0x68>)
 8006f0e:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 8006f10:	4b16      	ldr	r3, [pc, #88]	; (8006f6c <BSP_I2C4_Init+0x6c>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d11f      	bne.n	8006f58 <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 8006f18:	4b14      	ldr	r3, [pc, #80]	; (8006f6c <BSP_I2C4_Init+0x6c>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	3301      	adds	r3, #1
 8006f1e:	4a13      	ldr	r2, [pc, #76]	; (8006f6c <BSP_I2C4_Init+0x6c>)
 8006f20:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 8006f22:	4810      	ldr	r0, [pc, #64]	; (8006f64 <BSP_I2C4_Init+0x64>)
 8006f24:	f007 fa18 	bl	800e358 <HAL_I2C_GetState>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d114      	bne.n	8006f58 <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 8006f2e:	480d      	ldr	r0, [pc, #52]	; (8006f64 <BSP_I2C4_Init+0x64>)
 8006f30:	f000 fb60 	bl	80075f4 <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8006f34:	f009 f9ec 	bl	8010310 <HAL_RCC_GetPCLK2Freq>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	490d      	ldr	r1, [pc, #52]	; (8006f70 <BSP_I2C4_Init+0x70>)
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f000 f8e3 	bl	8007108 <I2C_GetTiming>
 8006f42:	4603      	mov	r3, r0
 8006f44:	4619      	mov	r1, r3
 8006f46:	4807      	ldr	r0, [pc, #28]	; (8006f64 <BSP_I2C4_Init+0x64>)
 8006f48:	f000 f838 	bl	8006fbc <MX_I2C4_Init>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d002      	beq.n	8006f58 <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8006f52:	f06f 0307 	mvn.w	r3, #7
 8006f56:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 8006f58:	687b      	ldr	r3, [r7, #4]
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3708      	adds	r7, #8
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
 8006f62:	bf00      	nop
 8006f64:	24001ef0 	.word	0x24001ef0
 8006f68:	58001c00 	.word	0x58001c00
 8006f6c:	240008d4 	.word	0x240008d4
 8006f70:	000186a0 	.word	0x000186a0

08006f74 <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b082      	sub	sp, #8
 8006f78:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
 8006f7e:	4b0d      	ldr	r3, [pc, #52]	; (8006fb4 <BSP_I2C4_DeInit+0x40>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	3b01      	subs	r3, #1
 8006f84:	4a0b      	ldr	r2, [pc, #44]	; (8006fb4 <BSP_I2C4_DeInit+0x40>)
 8006f86:	6013      	str	r3, [r2, #0]
  if (I2c4InitCounter == 0U)
 8006f88:	4b0a      	ldr	r3, [pc, #40]	; (8006fb4 <BSP_I2C4_DeInit+0x40>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d10b      	bne.n	8006fa8 <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
 8006f90:	4809      	ldr	r0, [pc, #36]	; (8006fb8 <BSP_I2C4_DeInit+0x44>)
 8006f92:	f000 fb9b 	bl	80076cc <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8006f96:	4808      	ldr	r0, [pc, #32]	; (8006fb8 <BSP_I2C4_DeInit+0x44>)
 8006f98:	f006 ff6c 	bl	800de74 <HAL_I2C_DeInit>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d002      	beq.n	8006fa8 <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8006fa2:	f06f 0307 	mvn.w	r3, #7
 8006fa6:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 8006fa8:	687b      	ldr	r3, [r7, #4]
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3708      	adds	r7, #8
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	bf00      	nop
 8006fb4:	240008d4 	.word	0x240008d4
 8006fb8:	24001ef0 	.word	0x24001ef0

08006fbc <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b084      	sub	sp, #16
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	683a      	ldr	r2, [r7, #0]
 8006fce:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2201      	movs	r2, #1
 8006fda:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2200      	movs	r2, #0
 8006fec:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f006 feaa 	bl	800dd54 <HAL_I2C_Init>
 8007000:	4603      	mov	r3, r0
 8007002:	2b00      	cmp	r3, #0
 8007004:	d002      	beq.n	800700c <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 8007006:	2301      	movs	r3, #1
 8007008:	73fb      	strb	r3, [r7, #15]
 800700a:	e014      	b.n	8007036 <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 800700c:	2300      	movs	r3, #0
 800700e:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8007010:	68b9      	ldr	r1, [r7, #8]
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f007 fbd6 	bl	800e7c4 <HAL_I2CEx_ConfigAnalogFilter>
 8007018:	4603      	mov	r3, r0
 800701a:	2b00      	cmp	r3, #0
 800701c:	d002      	beq.n	8007024 <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 800701e:	2301      	movs	r3, #1
 8007020:	73fb      	strb	r3, [r7, #15]
 8007022:	e008      	b.n	8007036 <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8007024:	2100      	movs	r1, #0
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f007 fc17 	bl	800e85a <HAL_I2CEx_ConfigDigitalFilter>
 800702c:	4603      	mov	r3, r0
 800702e:	2b00      	cmp	r3, #0
 8007030:	d001      	beq.n	8007036 <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 8007032:	2301      	movs	r3, #1
 8007034:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 8007036:	7bfb      	ldrb	r3, [r7, #15]
}
 8007038:	4618      	mov	r0, r3
 800703a:	3710      	adds	r7, #16
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}

08007040 <BSP_I2C4_WriteReg16>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b088      	sub	sp, #32
 8007044:	af02      	add	r7, sp, #8
 8007046:	60ba      	str	r2, [r7, #8]
 8007048:	461a      	mov	r2, r3
 800704a:	4603      	mov	r3, r0
 800704c:	81fb      	strh	r3, [r7, #14]
 800704e:	460b      	mov	r3, r1
 8007050:	81bb      	strh	r3, [r7, #12]
 8007052:	4613      	mov	r3, r2
 8007054:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
 #if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 8007056:	89b9      	ldrh	r1, [r7, #12]
 8007058:	89f8      	ldrh	r0, [r7, #14]
 800705a:	88fb      	ldrh	r3, [r7, #6]
 800705c:	9300      	str	r3, [sp, #0]
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	2202      	movs	r2, #2
 8007062:	f000 fb57 	bl	8007714 <I2C4_WriteReg>
 8007066:	4603      	mov	r3, r0
 8007068:	2b00      	cmp	r3, #0
 800706a:	d102      	bne.n	8007072 <BSP_I2C4_WriteReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
 800706c:	2300      	movs	r3, #0
 800706e:	617b      	str	r3, [r7, #20]
 8007070:	e00c      	b.n	800708c <BSP_I2C4_WriteReg16+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8007072:	4809      	ldr	r0, [pc, #36]	; (8007098 <BSP_I2C4_WriteReg16+0x58>)
 8007074:	f007 f97e 	bl	800e374 <HAL_I2C_GetError>
 8007078:	4603      	mov	r3, r0
 800707a:	2b04      	cmp	r3, #4
 800707c:	d103      	bne.n	8007086 <BSP_I2C4_WriteReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800707e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8007082:	617b      	str	r3, [r7, #20]
 8007084:	e002      	b.n	800708c <BSP_I2C4_WriteReg16+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8007086:	f06f 0303 	mvn.w	r3, #3
 800708a:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 800708c:	697b      	ldr	r3, [r7, #20]
}
 800708e:	4618      	mov	r0, r3
 8007090:	3718      	adds	r7, #24
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}
 8007096:	bf00      	nop
 8007098:	24001ef0 	.word	0x24001ef0

0800709c <BSP_I2C4_ReadReg16>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b088      	sub	sp, #32
 80070a0:	af02      	add	r7, sp, #8
 80070a2:	60ba      	str	r2, [r7, #8]
 80070a4:	461a      	mov	r2, r3
 80070a6:	4603      	mov	r3, r0
 80070a8:	81fb      	strh	r3, [r7, #14]
 80070aa:	460b      	mov	r3, r1
 80070ac:	81bb      	strh	r3, [r7, #12]
 80070ae:	4613      	mov	r3, r2
 80070b0:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 80070b2:	89b9      	ldrh	r1, [r7, #12]
 80070b4:	89f8      	ldrh	r0, [r7, #14]
 80070b6:	88fb      	ldrh	r3, [r7, #6]
 80070b8:	9300      	str	r3, [sp, #0]
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	2202      	movs	r2, #2
 80070be:	f000 fb4f 	bl	8007760 <I2C4_ReadReg>
 80070c2:	4603      	mov	r3, r0
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d102      	bne.n	80070ce <BSP_I2C4_ReadReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
 80070c8:	2300      	movs	r3, #0
 80070ca:	617b      	str	r3, [r7, #20]
 80070cc:	e00c      	b.n	80070e8 <BSP_I2C4_ReadReg16+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 80070ce:	4809      	ldr	r0, [pc, #36]	; (80070f4 <BSP_I2C4_ReadReg16+0x58>)
 80070d0:	f007 f950 	bl	800e374 <HAL_I2C_GetError>
 80070d4:	4603      	mov	r3, r0
 80070d6:	2b04      	cmp	r3, #4
 80070d8:	d103      	bne.n	80070e2 <BSP_I2C4_ReadReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80070da:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80070de:	617b      	str	r3, [r7, #20]
 80070e0:	e002      	b.n	80070e8 <BSP_I2C4_ReadReg16+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80070e2:	f06f 0303 	mvn.w	r3, #3
 80070e6:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 80070e8:	697b      	ldr	r3, [r7, #20]
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3718      	adds	r7, #24
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	bf00      	nop
 80070f4:	24001ef0 	.word	0x24001ef0

080070f8 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 80070fc:	f001 ff7a 	bl	8008ff4 <HAL_GetTick>
 8007100:	4603      	mov	r3, r0
}
 8007102:	4618      	mov	r0, r3
 8007104:	bd80      	pop	{r7, pc}
	...

08007108 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b086      	sub	sp, #24
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 8007112:	2300      	movs	r3, #0
 8007114:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d06b      	beq.n	80071f4 <I2C_GetTiming+0xec>
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d068      	beq.n	80071f4 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8007122:	2300      	movs	r3, #0
 8007124:	613b      	str	r3, [r7, #16]
 8007126:	e060      	b.n	80071ea <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8007128:	4a35      	ldr	r2, [pc, #212]	; (8007200 <I2C_GetTiming+0xf8>)
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	212c      	movs	r1, #44	; 0x2c
 800712e:	fb01 f303 	mul.w	r3, r1, r3
 8007132:	4413      	add	r3, r2
 8007134:	3304      	adds	r3, #4
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	683a      	ldr	r2, [r7, #0]
 800713a:	429a      	cmp	r2, r3
 800713c:	d352      	bcc.n	80071e4 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 800713e:	4a30      	ldr	r2, [pc, #192]	; (8007200 <I2C_GetTiming+0xf8>)
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	212c      	movs	r1, #44	; 0x2c
 8007144:	fb01 f303 	mul.w	r3, r1, r3
 8007148:	4413      	add	r3, r2
 800714a:	3308      	adds	r3, #8
 800714c:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800714e:	683a      	ldr	r2, [r7, #0]
 8007150:	429a      	cmp	r2, r3
 8007152:	d847      	bhi.n	80071e4 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 8007154:	6939      	ldr	r1, [r7, #16]
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 f856 	bl	8007208 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 800715c:	6939      	ldr	r1, [r7, #16]
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 f940 	bl	80073e4 <I2C_Compute_SCLL_SCLH>
 8007164:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2b7f      	cmp	r3, #127	; 0x7f
 800716a:	d842      	bhi.n	80071f2 <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800716c:	4925      	ldr	r1, [pc, #148]	; (8007204 <I2C_GetTiming+0xfc>)
 800716e:	68fa      	ldr	r2, [r7, #12]
 8007170:	4613      	mov	r3, r2
 8007172:	009b      	lsls	r3, r3, #2
 8007174:	4413      	add	r3, r2
 8007176:	009b      	lsls	r3, r3, #2
 8007178:	440b      	add	r3, r1
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800717e:	4821      	ldr	r0, [pc, #132]	; (8007204 <I2C_GetTiming+0xfc>)
 8007180:	68fa      	ldr	r2, [r7, #12]
 8007182:	4613      	mov	r3, r2
 8007184:	009b      	lsls	r3, r3, #2
 8007186:	4413      	add	r3, r2
 8007188:	009b      	lsls	r3, r3, #2
 800718a:	4403      	add	r3, r0
 800718c:	3304      	adds	r3, #4
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	051b      	lsls	r3, r3, #20
 8007192:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8007196:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8007198:	481a      	ldr	r0, [pc, #104]	; (8007204 <I2C_GetTiming+0xfc>)
 800719a:	68fa      	ldr	r2, [r7, #12]
 800719c:	4613      	mov	r3, r2
 800719e:	009b      	lsls	r3, r3, #2
 80071a0:	4413      	add	r3, r2
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	4403      	add	r3, r0
 80071a6:	3308      	adds	r3, #8
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	041b      	lsls	r3, r3, #16
 80071ac:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 80071b0:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 80071b2:	4814      	ldr	r0, [pc, #80]	; (8007204 <I2C_GetTiming+0xfc>)
 80071b4:	68fa      	ldr	r2, [r7, #12]
 80071b6:	4613      	mov	r3, r2
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	4413      	add	r3, r2
 80071bc:	009b      	lsls	r3, r3, #2
 80071be:	4403      	add	r3, r0
 80071c0:	330c      	adds	r3, #12
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	021b      	lsls	r3, r3, #8
 80071c6:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 80071c8:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 80071ca:	480e      	ldr	r0, [pc, #56]	; (8007204 <I2C_GetTiming+0xfc>)
 80071cc:	68fa      	ldr	r2, [r7, #12]
 80071ce:	4613      	mov	r3, r2
 80071d0:	009b      	lsls	r3, r3, #2
 80071d2:	4413      	add	r3, r2
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	4403      	add	r3, r0
 80071d8:	3310      	adds	r3, #16
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80071de:	430b      	orrs	r3, r1
 80071e0:	617b      	str	r3, [r7, #20]
        }
        break;
 80071e2:	e006      	b.n	80071f2 <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	3301      	adds	r3, #1
 80071e8:	613b      	str	r3, [r7, #16]
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	2b02      	cmp	r3, #2
 80071ee:	d99b      	bls.n	8007128 <I2C_GetTiming+0x20>
 80071f0:	e000      	b.n	80071f4 <I2C_GetTiming+0xec>
        break;
 80071f2:	bf00      	nop
      }
    }
  }

  return ret;
 80071f4:	697b      	ldr	r3, [r7, #20]
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3718      	adds	r7, #24
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}
 80071fe:	bf00      	nop
 8007200:	08015abc 	.word	0x08015abc
 8007204:	240008d8 	.word	0x240008d8

08007208 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8007208:	b480      	push	{r7}
 800720a:	b08f      	sub	sp, #60	; 0x3c
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 8007212:	2310      	movs	r3, #16
 8007214:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	085a      	lsrs	r2, r3, #1
 800721a:	4b6e      	ldr	r3, [pc, #440]	; (80073d4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 800721c:	4413      	add	r3, r2
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	fbb3 f3f2 	udiv	r3, r3, r2
 8007224:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8007226:	2332      	movs	r3, #50	; 0x32
 8007228:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 800722a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800722e:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8007230:	4a69      	ldr	r2, [pc, #420]	; (80073d8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	212c      	movs	r1, #44	; 0x2c
 8007236:	fb01 f303 	mul.w	r3, r1, r3
 800723a:	4413      	add	r3, r2
 800723c:	3324      	adds	r3, #36	; 0x24
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4618      	mov	r0, r3
 8007242:	4a65      	ldr	r2, [pc, #404]	; (80073d8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	212c      	movs	r1, #44	; 0x2c
 8007248:	fb01 f303 	mul.w	r3, r1, r3
 800724c:	4413      	add	r3, r2
 800724e:	330c      	adds	r3, #12
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8007254:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8007256:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8007258:	495f      	ldr	r1, [pc, #380]	; (80073d8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	202c      	movs	r0, #44	; 0x2c
 800725e:	fb00 f303 	mul.w	r3, r0, r3
 8007262:	440b      	add	r3, r1
 8007264:	3328      	adds	r3, #40	; 0x28
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	3303      	adds	r3, #3
 800726a:	69f9      	ldr	r1, [r7, #28]
 800726c:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8007270:	1ad3      	subs	r3, r2, r3
 8007272:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8007274:	4a58      	ldr	r2, [pc, #352]	; (80073d8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	212c      	movs	r1, #44	; 0x2c
 800727a:	fb01 f303 	mul.w	r3, r1, r3
 800727e:	4413      	add	r3, r2
 8007280:	3310      	adds	r3, #16
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4618      	mov	r0, r3
 8007286:	4a54      	ldr	r2, [pc, #336]	; (80073d8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	212c      	movs	r1, #44	; 0x2c
 800728c:	fb01 f303 	mul.w	r3, r1, r3
 8007290:	4413      	add	r3, r2
 8007292:	3320      	adds	r3, #32
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8007298:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800729a:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800729c:	494e      	ldr	r1, [pc, #312]	; (80073d8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	202c      	movs	r0, #44	; 0x2c
 80072a2:	fb00 f303 	mul.w	r3, r0, r3
 80072a6:	440b      	add	r3, r1
 80072a8:	3328      	adds	r3, #40	; 0x28
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	3304      	adds	r3, #4
 80072ae:	69f9      	ldr	r1, [r7, #28]
 80072b0:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80072b4:	1ad3      	subs	r3, r2, r3
 80072b6:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 80072b8:	4a47      	ldr	r2, [pc, #284]	; (80073d8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	212c      	movs	r1, #44	; 0x2c
 80072be:	fb01 f303 	mul.w	r3, r1, r3
 80072c2:	4413      	add	r3, r2
 80072c4:	3320      	adds	r3, #32
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4618      	mov	r0, r3
 80072ca:	4a43      	ldr	r2, [pc, #268]	; (80073d8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	212c      	movs	r1, #44	; 0x2c
 80072d0:	fb01 f303 	mul.w	r3, r1, r3
 80072d4:	4413      	add	r3, r2
 80072d6:	3314      	adds	r3, #20
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4403      	add	r3, r0
 80072dc:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 80072de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	dc01      	bgt.n	80072e8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 80072e4:	2300      	movs	r3, #0
 80072e6:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 80072e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	dc01      	bgt.n	80072f2 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 80072ee:	2300      	movs	r3, #0
 80072f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80072f2:	2300      	movs	r3, #0
 80072f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80072f6:	e062      	b.n	80073be <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80072f8:	2300      	movs	r3, #0
 80072fa:	627b      	str	r3, [r7, #36]	; 0x24
 80072fc:	e059      	b.n	80073b2 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 80072fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007300:	3301      	adds	r3, #1
 8007302:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007304:	3201      	adds	r2, #1
 8007306:	fb02 f203 	mul.w	r2, r2, r3
 800730a:	69fb      	ldr	r3, [r7, #28]
 800730c:	fb02 f303 	mul.w	r3, r2, r3
 8007310:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	68fa      	ldr	r2, [r7, #12]
 8007316:	429a      	cmp	r2, r3
 8007318:	d348      	bcc.n	80073ac <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800731a:	2300      	movs	r3, #0
 800731c:	623b      	str	r3, [r7, #32]
 800731e:	e042      	b.n	80073a6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 8007320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007322:	3301      	adds	r3, #1
 8007324:	6a3a      	ldr	r2, [r7, #32]
 8007326:	fb02 f203 	mul.w	r2, r2, r3
 800732a:	69fb      	ldr	r3, [r7, #28]
 800732c:	fb02 f303 	mul.w	r3, r2, r3
 8007330:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8007332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007334:	68ba      	ldr	r2, [r7, #8]
 8007336:	429a      	cmp	r2, r3
 8007338:	d332      	bcc.n	80073a0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 800733a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800733c:	68ba      	ldr	r2, [r7, #8]
 800733e:	429a      	cmp	r2, r3
 8007340:	d82e      	bhi.n	80073a0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 8007342:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007346:	429a      	cmp	r2, r3
 8007348:	d02a      	beq.n	80073a0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800734a:	4b24      	ldr	r3, [pc, #144]	; (80073dc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800734c:	681a      	ldr	r2, [r3, #0]
 800734e:	4924      	ldr	r1, [pc, #144]	; (80073e0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8007350:	4613      	mov	r3, r2
 8007352:	009b      	lsls	r3, r3, #2
 8007354:	4413      	add	r3, r2
 8007356:	009b      	lsls	r3, r3, #2
 8007358:	440b      	add	r3, r1
 800735a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800735c:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800735e:	4b1f      	ldr	r3, [pc, #124]	; (80073dc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8007360:	681a      	ldr	r2, [r3, #0]
 8007362:	491f      	ldr	r1, [pc, #124]	; (80073e0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8007364:	4613      	mov	r3, r2
 8007366:	009b      	lsls	r3, r3, #2
 8007368:	4413      	add	r3, r2
 800736a:	009b      	lsls	r3, r3, #2
 800736c:	440b      	add	r3, r1
 800736e:	3304      	adds	r3, #4
 8007370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007372:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8007374:	4b19      	ldr	r3, [pc, #100]	; (80073dc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	4919      	ldr	r1, [pc, #100]	; (80073e0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800737a:	4613      	mov	r3, r2
 800737c:	009b      	lsls	r3, r3, #2
 800737e:	4413      	add	r3, r2
 8007380:	009b      	lsls	r3, r3, #2
 8007382:	440b      	add	r3, r1
 8007384:	3308      	adds	r3, #8
 8007386:	6a3a      	ldr	r2, [r7, #32]
 8007388:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 800738a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800738c:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 800738e:	4b13      	ldr	r3, [pc, #76]	; (80073dc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	3301      	adds	r3, #1
 8007394:	4a11      	ldr	r2, [pc, #68]	; (80073dc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8007396:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8007398:	4b10      	ldr	r3, [pc, #64]	; (80073dc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	2b7f      	cmp	r3, #127	; 0x7f
 800739e:	d812      	bhi.n	80073c6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80073a0:	6a3b      	ldr	r3, [r7, #32]
 80073a2:	3301      	adds	r3, #1
 80073a4:	623b      	str	r3, [r7, #32]
 80073a6:	6a3b      	ldr	r3, [r7, #32]
 80073a8:	2b0f      	cmp	r3, #15
 80073aa:	d9b9      	bls.n	8007320 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80073ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ae:	3301      	adds	r3, #1
 80073b0:	627b      	str	r3, [r7, #36]	; 0x24
 80073b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b4:	2b0f      	cmp	r3, #15
 80073b6:	d9a2      	bls.n	80072fe <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80073b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ba:	3301      	adds	r3, #1
 80073bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80073be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c0:	2b0f      	cmp	r3, #15
 80073c2:	d999      	bls.n	80072f8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 80073c4:	e000      	b.n	80073c8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 80073c6:	bf00      	nop
          }
        }
      }
    }
  }
}
 80073c8:	373c      	adds	r7, #60	; 0x3c
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr
 80073d2:	bf00      	nop
 80073d4:	3b9aca00 	.word	0x3b9aca00
 80073d8:	08015abc 	.word	0x08015abc
 80073dc:	240012d8 	.word	0x240012d8
 80073e0:	240008d8 	.word	0x240008d8

080073e4 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b093      	sub	sp, #76	; 0x4c
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 80073ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80073f2:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	085a      	lsrs	r2, r3, #1
 80073f8:	4b7a      	ldr	r3, [pc, #488]	; (80075e4 <I2C_Compute_SCLL_SCLH+0x200>)
 80073fa:	4413      	add	r3, r2
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8007402:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 8007404:	4a78      	ldr	r2, [pc, #480]	; (80075e8 <I2C_Compute_SCLL_SCLH+0x204>)
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	212c      	movs	r1, #44	; 0x2c
 800740a:	fb01 f303 	mul.w	r3, r1, r3
 800740e:	4413      	add	r3, r2
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	085a      	lsrs	r2, r3, #1
 8007414:	4b73      	ldr	r3, [pc, #460]	; (80075e4 <I2C_Compute_SCLL_SCLH+0x200>)
 8007416:	4413      	add	r3, r2
 8007418:	4973      	ldr	r1, [pc, #460]	; (80075e8 <I2C_Compute_SCLL_SCLH+0x204>)
 800741a:	683a      	ldr	r2, [r7, #0]
 800741c:	202c      	movs	r0, #44	; 0x2c
 800741e:	fb00 f202 	mul.w	r2, r0, r2
 8007422:	440a      	add	r2, r1
 8007424:	6812      	ldr	r2, [r2, #0]
 8007426:	fbb3 f3f2 	udiv	r3, r3, r2
 800742a:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 800742c:	2332      	movs	r3, #50	; 0x32
 800742e:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 8007430:	4a6d      	ldr	r2, [pc, #436]	; (80075e8 <I2C_Compute_SCLL_SCLH+0x204>)
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	212c      	movs	r1, #44	; 0x2c
 8007436:	fb01 f303 	mul.w	r3, r1, r3
 800743a:	4413      	add	r3, r2
 800743c:	3328      	adds	r3, #40	; 0x28
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007442:	fb02 f303 	mul.w	r3, r2, r3
 8007446:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 8007448:	4a67      	ldr	r2, [pc, #412]	; (80075e8 <I2C_Compute_SCLL_SCLH+0x204>)
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	212c      	movs	r1, #44	; 0x2c
 800744e:	fb01 f303 	mul.w	r3, r1, r3
 8007452:	4413      	add	r3, r2
 8007454:	3304      	adds	r3, #4
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a62      	ldr	r2, [pc, #392]	; (80075e4 <I2C_Compute_SCLL_SCLH+0x200>)
 800745a:	fbb2 f3f3 	udiv	r3, r2, r3
 800745e:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 8007460:	4a61      	ldr	r2, [pc, #388]	; (80075e8 <I2C_Compute_SCLL_SCLH+0x204>)
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	212c      	movs	r1, #44	; 0x2c
 8007466:	fb01 f303 	mul.w	r3, r1, r3
 800746a:	4413      	add	r3, r2
 800746c:	3308      	adds	r3, #8
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a5c      	ldr	r2, [pc, #368]	; (80075e4 <I2C_Compute_SCLL_SCLH+0x200>)
 8007472:	fbb2 f3f3 	udiv	r3, r2, r3
 8007476:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 8007478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800747a:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800747c:	2300      	movs	r3, #0
 800747e:	637b      	str	r3, [r7, #52]	; 0x34
 8007480:	e0a3      	b.n	80075ca <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8007482:	495a      	ldr	r1, [pc, #360]	; (80075ec <I2C_Compute_SCLL_SCLH+0x208>)
 8007484:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007486:	4613      	mov	r3, r2
 8007488:	009b      	lsls	r3, r3, #2
 800748a:	4413      	add	r3, r2
 800748c:	009b      	lsls	r3, r3, #2
 800748e:	440b      	add	r3, r1
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	1c5a      	adds	r2, r3, #1
 8007494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007496:	fb02 f303 	mul.w	r3, r2, r3
 800749a:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800749c:	2300      	movs	r3, #0
 800749e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074a0:	e08c      	b.n	80075bc <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80074a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074a4:	6a3b      	ldr	r3, [r7, #32]
 80074a6:	441a      	add	r2, r3
 80074a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074aa:	3301      	adds	r3, #1
 80074ac:	6979      	ldr	r1, [r7, #20]
 80074ae:	fb01 f103 	mul.w	r1, r1, r3
 80074b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b4:	005b      	lsls	r3, r3, #1
 80074b6:	440b      	add	r3, r1
 80074b8:	4413      	add	r3, r2
 80074ba:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 80074bc:	4a4a      	ldr	r2, [pc, #296]	; (80075e8 <I2C_Compute_SCLL_SCLH+0x204>)
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	212c      	movs	r1, #44	; 0x2c
 80074c2:	fb01 f303 	mul.w	r3, r1, r3
 80074c6:	4413      	add	r3, r2
 80074c8:	3318      	adds	r3, #24
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	693a      	ldr	r2, [r7, #16]
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d971      	bls.n	80075b6 <I2C_Compute_SCLL_SCLH+0x1d2>
 80074d2:	693a      	ldr	r2, [r7, #16]
 80074d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d6:	1ad2      	subs	r2, r2, r3
 80074d8:	6a3b      	ldr	r3, [r7, #32]
 80074da:	1ad3      	subs	r3, r2, r3
 80074dc:	089b      	lsrs	r3, r3, #2
 80074de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074e0:	429a      	cmp	r2, r3
 80074e2:	d268      	bcs.n	80075b6 <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80074e4:	2300      	movs	r3, #0
 80074e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80074e8:	e062      	b.n	80075b0 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 80074ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074ec:	6a3b      	ldr	r3, [r7, #32]
 80074ee:	441a      	add	r2, r3
 80074f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074f2:	3301      	adds	r3, #1
 80074f4:	6979      	ldr	r1, [r7, #20]
 80074f6:	fb01 f103 	mul.w	r1, r1, r3
 80074fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074fc:	005b      	lsls	r3, r3, #1
 80074fe:	440b      	add	r3, r1
 8007500:	4413      	add	r3, r2
 8007502:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 8007504:	693a      	ldr	r2, [r7, #16]
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	441a      	add	r2, r3
 800750a:	4937      	ldr	r1, [pc, #220]	; (80075e8 <I2C_Compute_SCLL_SCLH+0x204>)
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	202c      	movs	r0, #44	; 0x2c
 8007510:	fb00 f303 	mul.w	r3, r0, r3
 8007514:	440b      	add	r3, r1
 8007516:	3320      	adds	r3, #32
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	441a      	add	r2, r3
 800751c:	4932      	ldr	r1, [pc, #200]	; (80075e8 <I2C_Compute_SCLL_SCLH+0x204>)
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	202c      	movs	r0, #44	; 0x2c
 8007522:	fb00 f303 	mul.w	r3, r0, r3
 8007526:	440b      	add	r3, r1
 8007528:	3324      	adds	r3, #36	; 0x24
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4413      	add	r3, r2
 800752e:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8007530:	68ba      	ldr	r2, [r7, #8]
 8007532:	69bb      	ldr	r3, [r7, #24]
 8007534:	429a      	cmp	r2, r3
 8007536:	d338      	bcc.n	80075aa <I2C_Compute_SCLL_SCLH+0x1c6>
 8007538:	68ba      	ldr	r2, [r7, #8]
 800753a:	69fb      	ldr	r3, [r7, #28]
 800753c:	429a      	cmp	r2, r3
 800753e:	d834      	bhi.n	80075aa <I2C_Compute_SCLL_SCLH+0x1c6>
 8007540:	4a29      	ldr	r2, [pc, #164]	; (80075e8 <I2C_Compute_SCLL_SCLH+0x204>)
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	212c      	movs	r1, #44	; 0x2c
 8007546:	fb01 f303 	mul.w	r3, r1, r3
 800754a:	4413      	add	r3, r2
 800754c:	331c      	adds	r3, #28
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	68fa      	ldr	r2, [r7, #12]
 8007552:	429a      	cmp	r2, r3
 8007554:	d329      	bcc.n	80075aa <I2C_Compute_SCLL_SCLH+0x1c6>
 8007556:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	429a      	cmp	r2, r3
 800755c:	d225      	bcs.n	80075aa <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 800755e:	68ba      	ldr	r2, [r7, #8]
 8007560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007562:	1ad3      	subs	r3, r2, r3
 8007564:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 8007566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007568:	2b00      	cmp	r3, #0
 800756a:	da02      	bge.n	8007572 <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 800756c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800756e:	425b      	negs	r3, r3
 8007570:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 8007572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007574:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007576:	429a      	cmp	r2, r3
 8007578:	d917      	bls.n	80075aa <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 800757a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800757c:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 800757e:	491b      	ldr	r1, [pc, #108]	; (80075ec <I2C_Compute_SCLL_SCLH+0x208>)
 8007580:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007582:	4613      	mov	r3, r2
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	4413      	add	r3, r2
 8007588:	009b      	lsls	r3, r3, #2
 800758a:	440b      	add	r3, r1
 800758c:	3310      	adds	r3, #16
 800758e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007590:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 8007592:	4916      	ldr	r1, [pc, #88]	; (80075ec <I2C_Compute_SCLL_SCLH+0x208>)
 8007594:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007596:	4613      	mov	r3, r2
 8007598:	009b      	lsls	r3, r3, #2
 800759a:	4413      	add	r3, r2
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	440b      	add	r3, r1
 80075a0:	330c      	adds	r3, #12
 80075a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075a4:	601a      	str	r2, [r3, #0]
              ret = count;
 80075a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075a8:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80075aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ac:	3301      	adds	r3, #1
 80075ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80075b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b2:	2bff      	cmp	r3, #255	; 0xff
 80075b4:	d999      	bls.n	80074ea <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80075b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075b8:	3301      	adds	r3, #1
 80075ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80075bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075be:	2bff      	cmp	r3, #255	; 0xff
 80075c0:	f67f af6f 	bls.w	80074a2 <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80075c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075c6:	3301      	adds	r3, #1
 80075c8:	637b      	str	r3, [r7, #52]	; 0x34
 80075ca:	4b09      	ldr	r3, [pc, #36]	; (80075f0 <I2C_Compute_SCLL_SCLH+0x20c>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80075d0:	429a      	cmp	r2, r3
 80075d2:	f4ff af56 	bcc.w	8007482 <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 80075d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80075d8:	4618      	mov	r0, r3
 80075da:	374c      	adds	r7, #76	; 0x4c
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr
 80075e4:	3b9aca00 	.word	0x3b9aca00
 80075e8:	08015abc 	.word	0x08015abc
 80075ec:	240008d8 	.word	0x240008d8
 80075f0:	240012d8 	.word	0x240012d8

080075f4 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b08a      	sub	sp, #40	; 0x28
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 80075fc:	4b31      	ldr	r3, [pc, #196]	; (80076c4 <I2C4_MspInit+0xd0>)
 80075fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007602:	4a30      	ldr	r2, [pc, #192]	; (80076c4 <I2C4_MspInit+0xd0>)
 8007604:	f043 0308 	orr.w	r3, r3, #8
 8007608:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800760c:	4b2d      	ldr	r3, [pc, #180]	; (80076c4 <I2C4_MspInit+0xd0>)
 800760e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007612:	f003 0308 	and.w	r3, r3, #8
 8007616:	613b      	str	r3, [r7, #16]
 8007618:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800761a:	4b2a      	ldr	r3, [pc, #168]	; (80076c4 <I2C4_MspInit+0xd0>)
 800761c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007620:	4a28      	ldr	r2, [pc, #160]	; (80076c4 <I2C4_MspInit+0xd0>)
 8007622:	f043 0308 	orr.w	r3, r3, #8
 8007626:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800762a:	4b26      	ldr	r3, [pc, #152]	; (80076c4 <I2C4_MspInit+0xd0>)
 800762c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007630:	f003 0308 	and.w	r3, r3, #8
 8007634:	60fb      	str	r3, [r7, #12]
 8007636:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 8007638:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800763c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800763e:	2312      	movs	r3, #18
 8007640:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8007642:	2300      	movs	r3, #0
 8007644:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8007646:	2302      	movs	r3, #2
 8007648:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800764a:	2304      	movs	r3, #4
 800764c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 800764e:	f107 0314 	add.w	r3, r7, #20
 8007652:	4619      	mov	r1, r3
 8007654:	481c      	ldr	r0, [pc, #112]	; (80076c8 <I2C4_MspInit+0xd4>)
 8007656:	f006 f891 	bl	800d77c <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 800765a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800765e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8007660:	2312      	movs	r3, #18
 8007662:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8007664:	2300      	movs	r3, #0
 8007666:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8007668:	2302      	movs	r3, #2
 800766a:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 800766c:	2304      	movs	r3, #4
 800766e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8007670:	f107 0314 	add.w	r3, r7, #20
 8007674:	4619      	mov	r1, r3
 8007676:	4814      	ldr	r0, [pc, #80]	; (80076c8 <I2C4_MspInit+0xd4>)
 8007678:	f006 f880 	bl	800d77c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 800767c:	4b11      	ldr	r3, [pc, #68]	; (80076c4 <I2C4_MspInit+0xd0>)
 800767e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007682:	4a10      	ldr	r2, [pc, #64]	; (80076c4 <I2C4_MspInit+0xd0>)
 8007684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007688:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800768c:	4b0d      	ldr	r3, [pc, #52]	; (80076c4 <I2C4_MspInit+0xd0>)
 800768e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007696:	60bb      	str	r3, [r7, #8]
 8007698:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 800769a:	4b0a      	ldr	r3, [pc, #40]	; (80076c4 <I2C4_MspInit+0xd0>)
 800769c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80076a0:	4a08      	ldr	r2, [pc, #32]	; (80076c4 <I2C4_MspInit+0xd0>)
 80076a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076a6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 80076aa:	4b06      	ldr	r3, [pc, #24]	; (80076c4 <I2C4_MspInit+0xd0>)
 80076ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80076b0:	4a04      	ldr	r2, [pc, #16]	; (80076c4 <I2C4_MspInit+0xd0>)
 80076b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076b6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 80076ba:	bf00      	nop
 80076bc:	3728      	adds	r7, #40	; 0x28
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}
 80076c2:	bf00      	nop
 80076c4:	58024400 	.word	0x58024400
 80076c8:	58020c00 	.word	0x58020c00

080076cc <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b088      	sub	sp, #32
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 80076d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80076d8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	4619      	mov	r1, r3
 80076de:	480b      	ldr	r0, [pc, #44]	; (800770c <I2C4_MspDeInit+0x40>)
 80076e0:	f006 f9fc 	bl	800dadc <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 80076e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80076e8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	4619      	mov	r1, r3
 80076ee:	4807      	ldr	r0, [pc, #28]	; (800770c <I2C4_MspDeInit+0x40>)
 80076f0:	f006 f9f4 	bl	800dadc <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 80076f4:	4b06      	ldr	r3, [pc, #24]	; (8007710 <I2C4_MspDeInit+0x44>)
 80076f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80076fa:	4a05      	ldr	r2, [pc, #20]	; (8007710 <I2C4_MspDeInit+0x44>)
 80076fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007700:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
}
 8007704:	bf00      	nop
 8007706:	3720      	adds	r7, #32
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}
 800770c:	58020c00 	.word	0x58020c00
 8007710:	58024400 	.word	0x58024400

08007714 <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b088      	sub	sp, #32
 8007718:	af04      	add	r7, sp, #16
 800771a:	607b      	str	r3, [r7, #4]
 800771c:	4603      	mov	r3, r0
 800771e:	81fb      	strh	r3, [r7, #14]
 8007720:	460b      	mov	r3, r1
 8007722:	81bb      	strh	r3, [r7, #12]
 8007724:	4613      	mov	r3, r2
 8007726:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8007728:	8978      	ldrh	r0, [r7, #10]
 800772a:	89ba      	ldrh	r2, [r7, #12]
 800772c:	89f9      	ldrh	r1, [r7, #14]
 800772e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007732:	9302      	str	r3, [sp, #8]
 8007734:	8b3b      	ldrh	r3, [r7, #24]
 8007736:	9301      	str	r3, [sp, #4]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	9300      	str	r3, [sp, #0]
 800773c:	4603      	mov	r3, r0
 800773e:	4807      	ldr	r0, [pc, #28]	; (800775c <I2C4_WriteReg+0x48>)
 8007740:	f006 fbdc 	bl	800defc <HAL_I2C_Mem_Write>
 8007744:	4603      	mov	r3, r0
 8007746:	2b00      	cmp	r3, #0
 8007748:	d101      	bne.n	800774e <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800774a:	2300      	movs	r3, #0
 800774c:	e001      	b.n	8007752 <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800774e:	f06f 0307 	mvn.w	r3, #7
}
 8007752:	4618      	mov	r0, r3
 8007754:	3710      	adds	r7, #16
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}
 800775a:	bf00      	nop
 800775c:	24001ef0 	.word	0x24001ef0

08007760 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b088      	sub	sp, #32
 8007764:	af04      	add	r7, sp, #16
 8007766:	607b      	str	r3, [r7, #4]
 8007768:	4603      	mov	r3, r0
 800776a:	81fb      	strh	r3, [r7, #14]
 800776c:	460b      	mov	r3, r1
 800776e:	81bb      	strh	r3, [r7, #12]
 8007770:	4613      	mov	r3, r2
 8007772:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8007774:	8978      	ldrh	r0, [r7, #10]
 8007776:	89ba      	ldrh	r2, [r7, #12]
 8007778:	89f9      	ldrh	r1, [r7, #14]
 800777a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800777e:	9302      	str	r3, [sp, #8]
 8007780:	8b3b      	ldrh	r3, [r7, #24]
 8007782:	9301      	str	r3, [sp, #4]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	9300      	str	r3, [sp, #0]
 8007788:	4603      	mov	r3, r0
 800778a:	4807      	ldr	r0, [pc, #28]	; (80077a8 <I2C4_ReadReg+0x48>)
 800778c:	f006 fcca 	bl	800e124 <HAL_I2C_Mem_Read>
 8007790:	4603      	mov	r3, r0
 8007792:	2b00      	cmp	r3, #0
 8007794:	d101      	bne.n	800779a <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8007796:	2300      	movs	r3, #0
 8007798:	e001      	b.n	800779e <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800779a:	f06f 0307 	mvn.w	r3, #7
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3710      	adds	r7, #16
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
 80077a6:	bf00      	nop
 80077a8:	24001ef0 	.word	0x24001ef0

080077ac <BSP_CAMERA_Suspend>:
/**
  * @brief Suspend the CAMERA capture
  * @param  Instance Camera instance.
  */
int32_t BSP_CAMERA_Suspend(uint32_t Instance)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if(Instance >= CAMERA_INSTANCES_NBR)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d003      	beq.n	80077c2 <BSP_CAMERA_Suspend+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80077ba:	f06f 0301 	mvn.w	r3, #1
 80077be:	60fb      	str	r3, [r7, #12]
 80077c0:	e00a      	b.n	80077d8 <BSP_CAMERA_Suspend+0x2c>
  }
  else if(HAL_DCMI_Suspend(&hcamera_dcmi) != HAL_OK)
 80077c2:	4808      	ldr	r0, [pc, #32]	; (80077e4 <BSP_CAMERA_Suspend+0x38>)
 80077c4:	f001 fe34 	bl	8009430 <HAL_DCMI_Suspend>
 80077c8:	4603      	mov	r3, r0
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d002      	beq.n	80077d4 <BSP_CAMERA_Suspend+0x28>
  {
    return BSP_ERROR_PERIPH_FAILURE;
 80077ce:	f06f 0303 	mvn.w	r3, #3
 80077d2:	e002      	b.n	80077da <BSP_CAMERA_Suspend+0x2e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80077d4:	2300      	movs	r3, #0
 80077d6:	60fb      	str	r3, [r7, #12]
  }

  /* Return BSP status */
  return ret;
 80077d8:	68fb      	ldr	r3, [r7, #12]
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3710      	adds	r7, #16
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}
 80077e2:	bf00      	nop
 80077e4:	24001f3c 	.word	0x24001f3c

080077e8 <BSP_CAMERA_Resume>:
/**
  * @brief Resume the CAMERA capture
  * @param  Instance Camera instance.
  */
int32_t BSP_CAMERA_Resume(uint32_t Instance)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b084      	sub	sp, #16
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if(Instance >= CAMERA_INSTANCES_NBR)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d003      	beq.n	80077fe <BSP_CAMERA_Resume+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80077f6:	f06f 0301 	mvn.w	r3, #1
 80077fa:	60fb      	str	r3, [r7, #12]
 80077fc:	e00b      	b.n	8007816 <BSP_CAMERA_Resume+0x2e>
  }
  else if(HAL_DCMI_Resume(&hcamera_dcmi) != HAL_OK)
 80077fe:	4808      	ldr	r0, [pc, #32]	; (8007820 <BSP_CAMERA_Resume+0x38>)
 8007800:	f001 fe6e 	bl	80094e0 <HAL_DCMI_Resume>
 8007804:	4603      	mov	r3, r0
 8007806:	2b00      	cmp	r3, #0
 8007808:	d003      	beq.n	8007812 <BSP_CAMERA_Resume+0x2a>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 800780a:	f06f 0303 	mvn.w	r3, #3
 800780e:	60fb      	str	r3, [r7, #12]
 8007810:	e001      	b.n	8007816 <BSP_CAMERA_Resume+0x2e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8007812:	2300      	movs	r3, #0
 8007814:	60fb      	str	r3, [r7, #12]
  }

  /* Return BSP status */
  return ret;
 8007816:	68fb      	ldr	r3, [r7, #12]
}
 8007818:	4618      	mov	r0, r3
 800781a:	3710      	adds	r7, #16
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}
 8007820:	24001f3c 	.word	0x24001f3c

08007824 <BSP_CAMERA_IRQHandler>:
  * @brief  This function handles DCMI interrupt request.
  * @param  Instance Camera instance
  * @retval None
  */
void BSP_CAMERA_IRQHandler(uint32_t Instance)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b082      	sub	sp, #8
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);

  HAL_DCMI_IRQHandler(&hcamera_dcmi);
 800782c:	4803      	ldr	r0, [pc, #12]	; (800783c <BSP_CAMERA_IRQHandler+0x18>)
 800782e:	f001 fe83 	bl	8009538 <HAL_DCMI_IRQHandler>
}
 8007832:	bf00      	nop
 8007834:	3708      	adds	r7, #8
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
 800783a:	bf00      	nop
 800783c:	24001f3c 	.word	0x24001f3c

08007840 <BSP_CAMERA_DMA_IRQHandler>:
  * @brief  This function handles DCMI DMA interrupt request.
  * @param  Instance Camera instance
  * @retval None
  */
void BSP_CAMERA_DMA_IRQHandler(uint32_t Instance)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b082      	sub	sp, #8
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);

  HAL_DMA_IRQHandler(hcamera_dcmi.DMA_Handle);
 8007848:	4b04      	ldr	r3, [pc, #16]	; (800785c <BSP_CAMERA_DMA_IRQHandler+0x1c>)
 800784a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800784c:	4618      	mov	r0, r3
 800784e:	f003 fbf1 	bl	800b034 <HAL_DMA_IRQHandler>
}
 8007852:	bf00      	nop
 8007854:	3708      	adds	r7, #8
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
 800785a:	bf00      	nop
 800785c:	24001f3c 	.word	0x24001f3c

08007860 <HAL_DCMI_LineEventCallback>:
  * @brief  Line event callback
  * @param  hdcmi  pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b082      	sub	sp, #8
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_LineEventCallback(0);
 8007868:	2000      	movs	r0, #0
 800786a:	f000 f825 	bl	80078b8 <BSP_CAMERA_LineEventCallback>
}
 800786e:	bf00      	nop
 8007870:	3708      	adds	r7, #8
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}

08007876 <HAL_DCMI_FrameEventCallback>:
  * @brief  Frame event callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8007876:	b580      	push	{r7, lr}
 8007878:	b082      	sub	sp, #8
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_FrameEventCallback(0);
 800787e:	2000      	movs	r0, #0
 8007880:	f00c feae 	bl	80145e0 <BSP_CAMERA_FrameEventCallback>
}
 8007884:	bf00      	nop
 8007886:	3708      	adds	r7, #8
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}

0800788c <HAL_DCMI_VsyncEventCallback>:
  * @brief  Vsync event callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b082      	sub	sp, #8
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_VsyncEventCallback(0);
 8007894:	2000      	movs	r0, #0
 8007896:	f000 f819 	bl	80078cc <BSP_CAMERA_VsyncEventCallback>
}
 800789a:	bf00      	nop
 800789c:	3708      	adds	r7, #8
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}

080078a2 <HAL_DCMI_ErrorCallback>:
  * @brief  Error callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 80078a2:	b580      	push	{r7, lr}
 80078a4:	b082      	sub	sp, #8
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_ErrorCallback(0);
 80078aa:	2000      	movs	r0, #0
 80078ac:	f000 f818 	bl	80078e0 <BSP_CAMERA_ErrorCallback>
}
 80078b0:	bf00      	nop
 80078b2:	3708      	adds	r7, #8
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <BSP_CAMERA_LineEventCallback>:
  * @brief  Line Event callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_LineEventCallback(uint32_t Instance)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b083      	sub	sp, #12
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 80078c0:	bf00      	nop
 80078c2:	370c      	adds	r7, #12
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr

080078cc <BSP_CAMERA_VsyncEventCallback>:
  * @brief  Vsync Event callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_VsyncEventCallback(uint32_t Instance)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b083      	sub	sp, #12
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 80078d4:	bf00      	nop
 80078d6:	370c      	adds	r7, #12
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <BSP_CAMERA_ErrorCallback>:
  * @brief  Error callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_ErrorCallback(uint32_t Instance)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b083      	sub	sp, #12
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 80078e8:	bf00      	nop
 80078ea:	370c      	adds	r7, #12
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr

080078f4 <BSP_LCD_Init>:
  * @param  Instance    LCD Instance
  * @param  Orientation LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval BSP status
  */
int32_t BSP_LCD_Init(uint32_t Instance, uint32_t Orientation)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b084      	sub	sp, #16
 80078f8:	af02      	add	r7, sp, #8
 80078fa:	6078      	str	r0, [r7, #4]
 80078fc:	6039      	str	r1, [r7, #0]
  return BSP_LCD_InitEx(Instance, Orientation, LCD_PIXEL_FORMAT_RGB888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 80078fe:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8007902:	9300      	str	r3, [sp, #0]
 8007904:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007908:	2201      	movs	r2, #1
 800790a:	6839      	ldr	r1, [r7, #0]
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 f805 	bl	800791c <BSP_LCD_InitEx>
 8007912:	4603      	mov	r3, r0
}
 8007914:	4618      	mov	r0, r3
 8007916:	3708      	adds	r7, #8
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}

0800791c <BSP_LCD_InitEx>:
  * @param  Width       Display width
  * @param  Height      Display height
  * @retval BSP status
  */
int32_t BSP_LCD_InitEx(uint32_t Instance, uint32_t Orientation, uint32_t PixelFormat, uint32_t Width, uint32_t Height)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b08e      	sub	sp, #56	; 0x38
 8007920:	af00      	add	r7, sp, #0
 8007922:	60f8      	str	r0, [r7, #12]
 8007924:	60b9      	str	r1, [r7, #8]
 8007926:	607a      	str	r2, [r7, #4]
 8007928:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800792a:	2300      	movs	r3, #0
 800792c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t ctrl_pixel_format, ltdc_pixel_format, dsi_pixel_format;
  MX_LTDC_LayerConfig_t config;

  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	2b01      	cmp	r3, #1
 8007932:	d808      	bhi.n	8007946 <BSP_LCD_InitEx+0x2a>
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d105      	bne.n	8007946 <BSP_LCD_InitEx+0x2a>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2b02      	cmp	r3, #2
 800793e:	d006      	beq.n	800794e <BSP_LCD_InitEx+0x32>
     ((PixelFormat != LCD_PIXEL_FORMAT_RGB565) && (PixelFormat != LTDC_PIXEL_FORMAT_RGB888)))
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2b01      	cmp	r3, #1
 8007944:	d003      	beq.n	800794e <BSP_LCD_InitEx+0x32>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007946:	f06f 0301 	mvn.w	r3, #1
 800794a:	637b      	str	r3, [r7, #52]	; 0x34
 800794c:	e0bf      	b.n	8007ace <BSP_LCD_InitEx+0x1b2>
  }
  else
  {
    if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2b02      	cmp	r3, #2
 8007952:	d110      	bne.n	8007976 <BSP_LCD_InitEx+0x5a>
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_RGB565;
 8007954:	2302      	movs	r3, #2
 8007956:	62fb      	str	r3, [r7, #44]	; 0x2c
      dsi_pixel_format = DSI_RGB565;
 8007958:	2300      	movs	r3, #0
 800795a:	62bb      	str	r3, [r7, #40]	; 0x28
      ctrl_pixel_format = OTM8009A_FORMAT_RBG565;
 800795c:	2302      	movs	r3, #2
 800795e:	633b      	str	r3, [r7, #48]	; 0x30
      Lcd_Ctx[Instance].BppFactor = 2U;
 8007960:	495d      	ldr	r1, [pc, #372]	; (8007ad8 <BSP_LCD_InitEx+0x1bc>)
 8007962:	68fa      	ldr	r2, [r7, #12]
 8007964:	4613      	mov	r3, r2
 8007966:	00db      	lsls	r3, r3, #3
 8007968:	1a9b      	subs	r3, r3, r2
 800796a:	009b      	lsls	r3, r3, #2
 800796c:	440b      	add	r3, r1
 800796e:	3310      	adds	r3, #16
 8007970:	2202      	movs	r2, #2
 8007972:	601a      	str	r2, [r3, #0]
 8007974:	e00f      	b.n	8007996 <BSP_LCD_InitEx+0x7a>
    }
    else /* LCD_PIXEL_FORMAT_RGB888 */
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_ARGB8888;
 8007976:	2300      	movs	r3, #0
 8007978:	62fb      	str	r3, [r7, #44]	; 0x2c
      dsi_pixel_format = DSI_RGB888;
 800797a:	2305      	movs	r3, #5
 800797c:	62bb      	str	r3, [r7, #40]	; 0x28
      ctrl_pixel_format = OTM8009A_FORMAT_RGB888;
 800797e:	2300      	movs	r3, #0
 8007980:	633b      	str	r3, [r7, #48]	; 0x30
      Lcd_Ctx[Instance].BppFactor = 4U;
 8007982:	4955      	ldr	r1, [pc, #340]	; (8007ad8 <BSP_LCD_InitEx+0x1bc>)
 8007984:	68fa      	ldr	r2, [r7, #12]
 8007986:	4613      	mov	r3, r2
 8007988:	00db      	lsls	r3, r3, #3
 800798a:	1a9b      	subs	r3, r3, r2
 800798c:	009b      	lsls	r3, r3, #2
 800798e:	440b      	add	r3, r1
 8007990:	3310      	adds	r3, #16
 8007992:	2204      	movs	r2, #4
 8007994:	601a      	str	r2, [r3, #0]
    }

    /* Store pixel format, xsize and ysize information */
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
 8007996:	4950      	ldr	r1, [pc, #320]	; (8007ad8 <BSP_LCD_InitEx+0x1bc>)
 8007998:	68fa      	ldr	r2, [r7, #12]
 800799a:	4613      	mov	r3, r2
 800799c:	00db      	lsls	r3, r3, #3
 800799e:	1a9b      	subs	r3, r3, r2
 80079a0:	009b      	lsls	r3, r3, #2
 80079a2:	440b      	add	r3, r1
 80079a4:	330c      	adds	r3, #12
 80079a6:	687a      	ldr	r2, [r7, #4]
 80079a8:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].XSize  = Width;
 80079aa:	494b      	ldr	r1, [pc, #300]	; (8007ad8 <BSP_LCD_InitEx+0x1bc>)
 80079ac:	68fa      	ldr	r2, [r7, #12]
 80079ae:	4613      	mov	r3, r2
 80079b0:	00db      	lsls	r3, r3, #3
 80079b2:	1a9b      	subs	r3, r3, r2
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	440b      	add	r3, r1
 80079b8:	683a      	ldr	r2, [r7, #0]
 80079ba:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].YSize  = Height;
 80079bc:	4946      	ldr	r1, [pc, #280]	; (8007ad8 <BSP_LCD_InitEx+0x1bc>)
 80079be:	68fa      	ldr	r2, [r7, #12]
 80079c0:	4613      	mov	r3, r2
 80079c2:	00db      	lsls	r3, r3, #3
 80079c4:	1a9b      	subs	r3, r3, r2
 80079c6:	009b      	lsls	r3, r3, #2
 80079c8:	440b      	add	r3, r1
 80079ca:	3304      	adds	r3, #4
 80079cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80079ce:	601a      	str	r2, [r3, #0]

    /* Toggle Hardware Reset of the LCD using its XRES signal (active low) */
    BSP_LCD_Reset(Instance);
 80079d0:	68f8      	ldr	r0, [r7, #12]
 80079d2:	f000 f88d 	bl	8007af0 <BSP_LCD_Reset>


    /* Initialize LCD special pins GPIOs */
    LCD_InitSequence();
 80079d6:	f000 f8c5 	bl	8007b64 <LCD_InitSequence>

    /* Initializes peripherals instance value */
    hlcd_ltdc.Instance = LTDC;
 80079da:	4b40      	ldr	r3, [pc, #256]	; (8007adc <BSP_LCD_InitEx+0x1c0>)
 80079dc:	4a40      	ldr	r2, [pc, #256]	; (8007ae0 <BSP_LCD_InitEx+0x1c4>)
 80079de:	601a      	str	r2, [r3, #0]
    hlcd_dma2d.Instance = DMA2D;
 80079e0:	4b40      	ldr	r3, [pc, #256]	; (8007ae4 <BSP_LCD_InitEx+0x1c8>)
 80079e2:	4a41      	ldr	r2, [pc, #260]	; (8007ae8 <BSP_LCD_InitEx+0x1cc>)
 80079e4:	601a      	str	r2, [r3, #0]
    hlcd_dsi.Instance = DSI;
 80079e6:	4b41      	ldr	r3, [pc, #260]	; (8007aec <BSP_LCD_InitEx+0x1d0>)
 80079e8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80079ec:	601a      	str	r2, [r3, #0]
      {
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    LTDC_MspInit(&hlcd_ltdc);
 80079ee:	483b      	ldr	r0, [pc, #236]	; (8007adc <BSP_LCD_InitEx+0x1c0>)
 80079f0:	f000 feba 	bl	8008768 <LTDC_MspInit>
#endif

    DMA2D_MspInit(&hlcd_dma2d);
 80079f4:	483b      	ldr	r0, [pc, #236]	; (8007ae4 <BSP_LCD_InitEx+0x1c8>)
 80079f6:	f000 fee9 	bl	80087cc <DMA2D_MspInit>
      {
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    DSI_MspInit(&hlcd_dsi);
 80079fa:	483c      	ldr	r0, [pc, #240]	; (8007aec <BSP_LCD_InitEx+0x1d0>)
 80079fc:	f000 ff14 	bl	8008828 <DSI_MspInit>
#endif
    if(MX_DSIHOST_DSI_Init(&hlcd_dsi, Width, Height, dsi_pixel_format) != HAL_OK)
 8007a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a04:	6839      	ldr	r1, [r7, #0]
 8007a06:	4839      	ldr	r0, [pc, #228]	; (8007aec <BSP_LCD_InitEx+0x1d0>)
 8007a08:	f000 f914 	bl	8007c34 <MX_DSIHOST_DSI_Init>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d003      	beq.n	8007a1a <BSP_LCD_InitEx+0xfe>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8007a12:	f06f 0303 	mvn.w	r3, #3
 8007a16:	637b      	str	r3, [r7, #52]	; 0x34
 8007a18:	e014      	b.n	8007a44 <BSP_LCD_InitEx+0x128>
    }
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
 8007a1a:	4830      	ldr	r0, [pc, #192]	; (8007adc <BSP_LCD_InitEx+0x1c0>)
 8007a1c:	f000 fa1c 	bl	8007e58 <MX_LTDC_ClockConfig>
 8007a20:	4603      	mov	r3, r0
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d003      	beq.n	8007a2e <BSP_LCD_InitEx+0x112>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8007a26:	f06f 0303 	mvn.w	r3, #3
 8007a2a:	637b      	str	r3, [r7, #52]	; 0x34
 8007a2c:	e00a      	b.n	8007a44 <BSP_LCD_InitEx+0x128>
    }
    else
    {
     if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
 8007a2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a30:	6839      	ldr	r1, [r7, #0]
 8007a32:	482a      	ldr	r0, [pc, #168]	; (8007adc <BSP_LCD_InitEx+0x1c0>)
 8007a34:	f000 f982 	bl	8007d3c <MX_LTDC_Init>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d002      	beq.n	8007a44 <BSP_LCD_InitEx+0x128>
     {
       ret = BSP_ERROR_PERIPH_FAILURE;
 8007a3e:	f06f 0303 	mvn.w	r3, #3
 8007a42:	637b      	str	r3, [r7, #52]	; 0x34
     }
    }

    if(ret == BSP_ERROR_NONE)
 8007a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d141      	bne.n	8007ace <BSP_LCD_InitEx+0x1b2>
    {
      /* Before configuring LTDC layer, ensure SDRAM is initialized */
#if !defined(DATA_IN_ExtSDRAM)
      /* Initialize the SDRAM */
      if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 8007a4a:	2000      	movs	r0, #0
 8007a4c:	f001 f810 	bl	8008a70 <BSP_SDRAM_Init>
 8007a50:	4603      	mov	r3, r0
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d002      	beq.n	8007a5c <BSP_LCD_InitEx+0x140>
      {
        return BSP_ERROR_PERIPH_FAILURE;
 8007a56:	f06f 0303 	mvn.w	r3, #3
 8007a5a:	e039      	b.n	8007ad0 <BSP_LCD_InitEx+0x1b4>
      }
#endif /* DATA_IN_ExtSDRAM */

      /* Configure default LTDC Layer 0. This configuration can be override by calling
      BSP_LCD_ConfigLayer() at application level */
      config.X0          = 0;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	613b      	str	r3, [r7, #16]
      config.X1          = Width;
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	617b      	str	r3, [r7, #20]
      config.Y0          = 0;
 8007a64:	2300      	movs	r3, #0
 8007a66:	61bb      	str	r3, [r7, #24]
      config.Y1          = Height;
 8007a68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a6a:	61fb      	str	r3, [r7, #28]
      config.PixelFormat = ltdc_pixel_format;
 8007a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a6e:	623b      	str	r3, [r7, #32]
      config.Address     = LCD_LAYER_0_ADDRESS;
 8007a70:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8007a74:	627b      	str	r3, [r7, #36]	; 0x24
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 8007a76:	f107 0310 	add.w	r3, r7, #16
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	2100      	movs	r1, #0
 8007a7e:	4817      	ldr	r0, [pc, #92]	; (8007adc <BSP_LCD_InitEx+0x1c0>)
 8007a80:	f000 f9a8 	bl	8007dd4 <MX_LTDC_ConfigLayer>
 8007a84:	4603      	mov	r3, r0
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d003      	beq.n	8007a92 <BSP_LCD_InitEx+0x176>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 8007a8a:	f06f 0303 	mvn.w	r3, #3
 8007a8e:	637b      	str	r3, [r7, #52]	; 0x34
 8007a90:	e013      	b.n	8007aba <BSP_LCD_InitEx+0x19e>
      }
      else
      {
        /* Enable the DSI host and wrapper after the LTDC initialization
        To avoid any synchronization issue, the DSI shall be started after enabling the LTDC */
        (void)HAL_DSI_Start(&hlcd_dsi);
 8007a92:	4816      	ldr	r0, [pc, #88]	; (8007aec <BSP_LCD_InitEx+0x1d0>)
 8007a94:	f005 fc5c 	bl	800d350 <HAL_DSI_Start>

        /* Enable the DSI BTW for read operations */
        (void)HAL_DSI_ConfigFlowControl(&hlcd_dsi, DSI_FLOW_CONTROL_BTA);
 8007a98:	2104      	movs	r1, #4
 8007a9a:	4814      	ldr	r0, [pc, #80]	; (8007aec <BSP_LCD_InitEx+0x1d0>)
 8007a9c:	f005 fc30 	bl	800d300 <HAL_DSI_ConfigFlowControl>

#if (USE_LCD_CTRL_OTM8009A == 1)
        /* Initialize the OTM8009A LCD Display IC Driver (KoD LCD IC Driver)
        depending on configuration of DSI */
        if(OTM8009A_Probe(ctrl_pixel_format, Orientation) != BSP_ERROR_NONE)
 8007aa0:	68b9      	ldr	r1, [r7, #8]
 8007aa2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007aa4:	f000 ff54 	bl	8008950 <OTM8009A_Probe>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d003      	beq.n	8007ab6 <BSP_LCD_InitEx+0x19a>
        {
          ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007aae:	f06f 0306 	mvn.w	r3, #6
 8007ab2:	637b      	str	r3, [r7, #52]	; 0x34
 8007ab4:	e001      	b.n	8007aba <BSP_LCD_InitEx+0x19e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	637b      	str	r3, [r7, #52]	; 0x34
        }
#endif
      }
    /* By default the reload is activated and executed immediately */
    Lcd_Ctx[Instance].ReloadEnable = 1U;
 8007aba:	4907      	ldr	r1, [pc, #28]	; (8007ad8 <BSP_LCD_InitEx+0x1bc>)
 8007abc:	68fa      	ldr	r2, [r7, #12]
 8007abe:	4613      	mov	r3, r2
 8007ac0:	00db      	lsls	r3, r3, #3
 8007ac2:	1a9b      	subs	r3, r3, r2
 8007ac4:	009b      	lsls	r3, r3, #2
 8007ac6:	440b      	add	r3, r1
 8007ac8:	3318      	adds	r3, #24
 8007aca:	2201      	movs	r2, #1
 8007acc:	601a      	str	r2, [r3, #0]
   }
  }

  return ret;
 8007ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3738      	adds	r7, #56	; 0x38
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}
 8007ad8:	24002068 	.word	0x24002068
 8007adc:	24001fc0 	.word	0x24001fc0
 8007ae0:	50001000 	.word	0x50001000
 8007ae4:	240020a0 	.word	0x240020a0
 8007ae8:	52001000 	.word	0x52001000
 8007aec:	24002084 	.word	0x24002084

08007af0 <BSP_LCD_Reset>:
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and deactivating it later.
  * @param  Instance LCD Instance
  */
void BSP_LCD_Reset(uint32_t Instance)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b088      	sub	sp, #32
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  LCD_RESET_GPIO_CLK_ENABLE();
 8007af8:	4b18      	ldr	r3, [pc, #96]	; (8007b5c <BSP_LCD_Reset+0x6c>)
 8007afa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007afe:	4a17      	ldr	r2, [pc, #92]	; (8007b5c <BSP_LCD_Reset+0x6c>)
 8007b00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007b08:	4b14      	ldr	r3, [pc, #80]	; (8007b5c <BSP_LCD_Reset+0x6c>)
 8007b0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b12:	60bb      	str	r3, [r7, #8]
 8007b14:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO Reset pin */
  gpio_init_structure.Pin   = LCD_RESET_PIN;
 8007b16:	2308      	movs	r3, #8
 8007b18:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_PULLUP;
 8007b1e:	2301      	movs	r3, #1
 8007b20:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b22:	2303      	movs	r3, #3
 8007b24:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 8007b26:	f107 030c 	add.w	r3, r7, #12
 8007b2a:	4619      	mov	r1, r3
 8007b2c:	480c      	ldr	r0, [pc, #48]	; (8007b60 <BSP_LCD_Reset+0x70>)
 8007b2e:	f005 fe25 	bl	800d77c <HAL_GPIO_Init>

  /* Activate XRES active low */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_RESET);
 8007b32:	2200      	movs	r2, #0
 8007b34:	2108      	movs	r1, #8
 8007b36:	480a      	ldr	r0, [pc, #40]	; (8007b60 <BSP_LCD_Reset+0x70>)
 8007b38:	f006 f8f2 	bl	800dd20 <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 8007b3c:	2014      	movs	r0, #20
 8007b3e:	f001 fa65 	bl	800900c <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_SET);/* Deactivate XRES */
 8007b42:	2201      	movs	r2, #1
 8007b44:	2108      	movs	r1, #8
 8007b46:	4806      	ldr	r0, [pc, #24]	; (8007b60 <BSP_LCD_Reset+0x70>)
 8007b48:	f006 f8ea 	bl	800dd20 <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 8007b4c:	200a      	movs	r0, #10
 8007b4e:	f001 fa5d 	bl	800900c <HAL_Delay>
}
 8007b52:	bf00      	nop
 8007b54:	3720      	adds	r7, #32
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}
 8007b5a:	bf00      	nop
 8007b5c:	58024400 	.word	0x58024400
 8007b60:	58021800 	.word	0x58021800

08007b64 <LCD_InitSequence>:
/**
  * @brief  Configure LCD control pins (Back-light, Display Enable and TE)
  * @retval None
  */
static void LCD_InitSequence(void)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b088      	sub	sp, #32
 8007b68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  /* LCD_BL_CTRL GPIO configuration */
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8007b6a:	4b30      	ldr	r3, [pc, #192]	; (8007c2c <LCD_InitSequence+0xc8>)
 8007b6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007b70:	4a2e      	ldr	r2, [pc, #184]	; (8007c2c <LCD_InitSequence+0xc8>)
 8007b72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007b76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007b7a:	4b2c      	ldr	r3, [pc, #176]	; (8007c2c <LCD_InitSequence+0xc8>)
 8007b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007b80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b84:	60bb      	str	r3, [r7, #8]
 8007b86:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;
 8007b88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007b8c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8007b92:	2302      	movs	r3, #2
 8007b94:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8007b96:	2300      	movs	r3, #0
 8007b98:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8007b9a:	f107 030c 	add.w	r3, r7, #12
 8007b9e:	4619      	mov	r1, r3
 8007ba0:	4823      	ldr	r0, [pc, #140]	; (8007c30 <LCD_InitSequence+0xcc>)
 8007ba2:	f005 fdeb 	bl	800d77c <HAL_GPIO_Init>
  /* Assert back-light LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007bac:	4820      	ldr	r0, [pc, #128]	; (8007c30 <LCD_InitSequence+0xcc>)
 8007bae:	f006 f8b7 	bl	800dd20 <HAL_GPIO_WritePin>

  /* LCD_TE_CTRL GPIO configuration */
  LCD_TE_GPIO_CLK_ENABLE();
 8007bb2:	4b1e      	ldr	r3, [pc, #120]	; (8007c2c <LCD_InitSequence+0xc8>)
 8007bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007bb8:	4a1c      	ldr	r2, [pc, #112]	; (8007c2c <LCD_InitSequence+0xc8>)
 8007bba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007bbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007bc2:	4b1a      	ldr	r3, [pc, #104]	; (8007c2c <LCD_InitSequence+0xc8>)
 8007bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007bc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007bcc:	607b      	str	r3, [r7, #4]
 8007bce:	687b      	ldr	r3, [r7, #4]

  gpio_init_structure.Pin       = LCD_TE_PIN;
 8007bd0:	2304      	movs	r3, #4
 8007bd2:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8007bd8:	2302      	movs	r3, #2
 8007bda:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 8007bdc:	f107 030c 	add.w	r3, r7, #12
 8007be0:	4619      	mov	r1, r3
 8007be2:	4813      	ldr	r0, [pc, #76]	; (8007c30 <LCD_InitSequence+0xcc>)
 8007be4:	f005 fdca 	bl	800d77c <HAL_GPIO_Init>
  /* Assert back-light LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_TE_GPIO_PORT, LCD_TE_PIN, GPIO_PIN_SET);
 8007be8:	2201      	movs	r2, #1
 8007bea:	2104      	movs	r1, #4
 8007bec:	4810      	ldr	r0, [pc, #64]	; (8007c30 <LCD_InitSequence+0xcc>)
 8007bee:	f006 f897 	bl	800dd20 <HAL_GPIO_WritePin>

      /** @brief NVIC configuration for LTDC interrupt that is now enabled */
  HAL_NVIC_SetPriority(LTDC_IRQn, 0x0F, 0);
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	210f      	movs	r1, #15
 8007bf6:	2058      	movs	r0, #88	; 0x58
 8007bf8:	f001 fb47 	bl	800928a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8007bfc:	2058      	movs	r0, #88	; 0x58
 8007bfe:	f001 fb5e 	bl	80092be <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DMA2D interrupt that is now enabled */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 0x0F, 0);
 8007c02:	2200      	movs	r2, #0
 8007c04:	210f      	movs	r1, #15
 8007c06:	205a      	movs	r0, #90	; 0x5a
 8007c08:	f001 fb3f 	bl	800928a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8007c0c:	205a      	movs	r0, #90	; 0x5a
 8007c0e:	f001 fb56 	bl	80092be <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DSI interrupt that is now enabled */
  HAL_NVIC_SetPriority(DSI_IRQn, 0x0F, 0);
 8007c12:	2200      	movs	r2, #0
 8007c14:	210f      	movs	r1, #15
 8007c16:	207b      	movs	r0, #123	; 0x7b
 8007c18:	f001 fb37 	bl	800928a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8007c1c:	207b      	movs	r0, #123	; 0x7b
 8007c1e:	f001 fb4e 	bl	80092be <HAL_NVIC_EnableIRQ>
}
 8007c22:	bf00      	nop
 8007c24:	3720      	adds	r7, #32
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}
 8007c2a:	bf00      	nop
 8007c2c:	58024400 	.word	0x58024400
 8007c30:	58022400 	.word	0x58022400

08007c34 <MX_DSIHOST_DSI_Init>:
  * @param  Height Vertical active height
  * @param  PixelFormat DSI color coding RGB888 or RGB565
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_DSIHOST_DSI_Init(DSI_HandleTypeDef *hdsi, uint32_t Width, uint32_t Height, uint32_t PixelFormat)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b0a2      	sub	sp, #136	; 0x88
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	60f8      	str	r0, [r7, #12]
 8007c3c:	60b9      	str	r1, [r7, #8]
 8007c3e:	607a      	str	r2, [r7, #4]
 8007c40:	603b      	str	r3, [r7, #0]
  DSI_PLLInitTypeDef PLLInit;
  DSI_VidCfgTypeDef VidCfg;

  hdsi->Instance = DSI;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007c48:	601a      	str	r2, [r3, #0]
  hdsi->Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	605a      	str	r2, [r3, #4]
  hdsi->Init.TXEscapeCkdiv = 4;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2204      	movs	r2, #4
 8007c54:	609a      	str	r2, [r3, #8]
  hdsi->Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2201      	movs	r2, #1
 8007c5a:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 100;
 8007c5c:	2364      	movs	r3, #100	; 0x64
 8007c5e:	67fb      	str	r3, [r7, #124]	; 0x7c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 8007c60:	2305      	movs	r3, #5
 8007c62:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8007c66:	2300      	movs	r3, #0
 8007c68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_DSI_Init(hdsi, &PLLInit) != HAL_OK)
 8007c6c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007c70:	4619      	mov	r1, r3
 8007c72:	68f8      	ldr	r0, [r7, #12]
 8007c74:	f005 f820 	bl	800ccb8 <HAL_DSI_Init>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d001      	beq.n	8007c82 <MX_DSIHOST_DSI_Init+0x4e>
  {
    return HAL_ERROR;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e053      	b.n	8007d2a <MX_DSIHOST_DSI_Init+0xf6>
  /* Timing parameters for all Video modes */
  /*
  The lane byte clock is set 62500 Khz
  The pixel clock is set to 27429 Khz
  */
  VidCfg.VirtualChannelID = 0;
 8007c82:	2300      	movs	r3, #0
 8007c84:	613b      	str	r3, [r7, #16]
  VidCfg.ColorCoding = PixelFormat;
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	617b      	str	r3, [r7, #20]
  VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_DISABLE;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	61bb      	str	r3, [r7, #24]
  VidCfg.Mode = DSI_VID_MODE_BURST;
 8007c8e:	2302      	movs	r3, #2
 8007c90:	61fb      	str	r3, [r7, #28]
  VidCfg.PacketSize = Width;
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	623b      	str	r3, [r7, #32]
  VidCfg.NumberOfChunks = 0;
 8007c96:	2300      	movs	r3, #0
 8007c98:	627b      	str	r3, [r7, #36]	; 0x24
  VidCfg.NullPacketSize = 0xFFFU;
 8007c9a:	f640 73ff 	movw	r3, #4095	; 0xfff
 8007c9e:	62bb      	str	r3, [r7, #40]	; 0x28
  VidCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
  VidCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	633b      	str	r3, [r7, #48]	; 0x30
  VidCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	637b      	str	r3, [r7, #52]	; 0x34
  VidCfg.HorizontalSyncActive = (OTM8009A_480X800_HSYNC * 62500U)/27429U;
 8007cac:	2304      	movs	r3, #4
 8007cae:	63bb      	str	r3, [r7, #56]	; 0x38
  VidCfg.HorizontalBackPorch = (OTM8009A_480X800_HBP * 62500U)/27429U;
 8007cb0:	234d      	movs	r3, #77	; 0x4d
 8007cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	f24f 4224 	movw	r2, #62500	; 0xf424
 8007cba:	fb02 f203 	mul.w	r2, r2, r3
 8007cbe:	4b1d      	ldr	r3, [pc, #116]	; (8007d34 <MX_DSIHOST_DSI_Init+0x100>)
 8007cc0:	4413      	add	r3, r2
 8007cc2:	4a1d      	ldr	r2, [pc, #116]	; (8007d38 <MX_DSIHOST_DSI_Init+0x104>)
 8007cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8007cc8:	0b5b      	lsrs	r3, r3, #13
 8007cca:	643b      	str	r3, [r7, #64]	; 0x40
  VidCfg.VerticalSyncActive = OTM8009A_480X800_VSYNC;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	647b      	str	r3, [r7, #68]	; 0x44
  VidCfg.VerticalBackPorch = OTM8009A_480X800_VBP;
 8007cd0:	230f      	movs	r3, #15
 8007cd2:	64bb      	str	r3, [r7, #72]	; 0x48
  VidCfg.VerticalFrontPorch = OTM8009A_480X800_VFP;
 8007cd4:	2310      	movs	r3, #16
 8007cd6:	64fb      	str	r3, [r7, #76]	; 0x4c
  VidCfg.VerticalActive = Height;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	653b      	str	r3, [r7, #80]	; 0x50
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 8007cdc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ce0:	657b      	str	r3, [r7, #84]	; 0x54
  VidCfg.LPLargestPacketSize = 4;
 8007ce2:	2304      	movs	r3, #4
 8007ce4:	65bb      	str	r3, [r7, #88]	; 0x58
  VidCfg.LPVACTLargestPacketSize = 4;
 8007ce6:	2304      	movs	r3, #4
 8007ce8:	65fb      	str	r3, [r7, #92]	; 0x5c

  VidCfg.LPHorizontalFrontPorchEnable  = DSI_LP_HFP_ENABLE;
 8007cea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007cee:	663b      	str	r3, [r7, #96]	; 0x60
  VidCfg.LPHorizontalBackPorchEnable   = DSI_LP_HBP_ENABLE;
 8007cf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007cf4:	667b      	str	r3, [r7, #100]	; 0x64
  VidCfg.LPVerticalActiveEnable        = DSI_LP_VACT_ENABLE;
 8007cf6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007cfa:	66bb      	str	r3, [r7, #104]	; 0x68
  VidCfg.LPVerticalFrontPorchEnable    = DSI_LP_VFP_ENABLE;
 8007cfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d00:	66fb      	str	r3, [r7, #108]	; 0x6c
  VidCfg.LPVerticalBackPorchEnable     = DSI_LP_VBP_ENABLE;
 8007d02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d06:	673b      	str	r3, [r7, #112]	; 0x70
  VidCfg.LPVerticalSyncActiveEnable    = DSI_LP_VSYNC_ENABLE;
 8007d08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007d0c:	677b      	str	r3, [r7, #116]	; 0x74
  VidCfg.FrameBTAAcknowledgeEnable     = DSI_FBTAA_DISABLE;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 8007d12:	f107 0310 	add.w	r3, r7, #16
 8007d16:	4619      	mov	r1, r3
 8007d18:	68f8      	ldr	r0, [r7, #12]
 8007d1a:	f005 f8f1 	bl	800cf00 <HAL_DSI_ConfigVideoMode>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d001      	beq.n	8007d28 <MX_DSIHOST_DSI_Init+0xf4>
  {
    return HAL_ERROR;
 8007d24:	2301      	movs	r3, #1
 8007d26:	e000      	b.n	8007d2a <MX_DSIHOST_DSI_Init+0xf6>
  }

  return HAL_OK;
 8007d28:	2300      	movs	r3, #0
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3788      	adds	r7, #136	; 0x88
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}
 8007d32:	bf00      	nop
 8007d34:	0042c1d8 	.word	0x0042c1d8
 8007d38:	4c751ce3 	.word	0x4c751ce3

08007d3c <MX_LTDC_Init>:
  * @param  Width  LTDC width
  * @param  Height LTDC height
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_Init(LTDC_HandleTypeDef *hltdc, uint32_t Width, uint32_t Height)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b084      	sub	sp, #16
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	60f8      	str	r0, [r7, #12]
 8007d44:	60b9      	str	r1, [r7, #8]
 8007d46:	607a      	str	r2, [r7, #4]
  hltdc->Instance = LTDC;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	4a21      	ldr	r2, [pc, #132]	; (8007dd0 <MX_LTDC_Init+0x94>)
 8007d4c:	601a      	str	r2, [r3, #0]
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2200      	movs	r2, #0
 8007d52:	605a      	str	r2, [r3, #4]
  hltdc->Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2200      	movs	r2, #0
 8007d58:	609a      	str	r2, [r3, #8]
  hltdc->Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	60da      	str	r2, [r3, #12]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2200      	movs	r2, #0
 8007d64:	611a      	str	r2, [r3, #16]

  hltdc->Init.HorizontalSync     = OTM8009A_480X800_HSYNC - 1;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2201      	movs	r2, #1
 8007d6a:	615a      	str	r2, [r3, #20]
  hltdc->Init.AccumulatedHBP     = OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP - 1;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2223      	movs	r2, #35	; 0x23
 8007d70:	61da      	str	r2, [r3, #28]
  hltdc->Init.AccumulatedActiveW = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP - 1;
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	f103 0223 	add.w	r2, r3, #35	; 0x23
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc->Init.TotalWidth         = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP - 1;
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	f103 0245 	add.w	r2, r3, #69	; 0x45
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Init.VerticalSync       = OTM8009A_480X800_VSYNC - 1;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = OTM8009A_480X800_VSYNC + OTM8009A_480X800_VBP - 1;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	220f      	movs	r2, #15
 8007d90:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP - 1;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f103 020f 	add.w	r2, r3, #15
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP + OTM8009A_480X800_VFP - 1;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f103 021f 	add.w	r2, r3, #31
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	631a      	str	r2, [r3, #48]	; 0x30

  hltdc->Init.Backcolor.Blue  = 0x00;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2200      	movs	r2, #0
 8007daa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc->Init.Backcolor.Green = 0x00;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2200      	movs	r2, #0
 8007db2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc->Init.Backcolor.Red   = 0x00;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2200      	movs	r2, #0
 8007dba:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  return HAL_LTDC_Init(hltdc);
 8007dbe:	68f8      	ldr	r0, [r7, #12]
 8007dc0:	f006 fd98 	bl	800e8f4 <HAL_LTDC_Init>
 8007dc4:	4603      	mov	r3, r0
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3710      	adds	r7, #16
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	50001000 	.word	0x50001000

08007dd4 <MX_LTDC_ConfigLayer>:
  * @param  LayerIndex Layer 0 or 1
  * @param  Config     Layer configuration
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, uint32_t LayerIndex, MX_LTDC_LayerConfig_t *Config)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b092      	sub	sp, #72	; 0x48
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	60f8      	str	r0, [r7, #12]
 8007ddc:	60b9      	str	r1, [r7, #8]
 8007dde:	607a      	str	r2, [r7, #4]
  LTDC_LayerCfgTypeDef pLayerCfg;

  pLayerCfg.WindowX0 = Config->X0;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	617b      	str	r3, [r7, #20]
  pLayerCfg.WindowX1 = Config->X1;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	61bb      	str	r3, [r7, #24]
  pLayerCfg.WindowY0 = Config->Y0;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	689b      	ldr	r3, [r3, #8]
 8007df0:	61fb      	str	r3, [r7, #28]
  pLayerCfg.WindowY1 = Config->Y1;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	68db      	ldr	r3, [r3, #12]
 8007df6:	623b      	str	r3, [r7, #32]
  pLayerCfg.PixelFormat = Config->PixelFormat;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	691b      	ldr	r3, [r3, #16]
 8007dfc:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.Alpha = 255;
 8007dfe:	23ff      	movs	r3, #255	; 0xff
 8007e00:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.Alpha0 = 0;
 8007e02:	2300      	movs	r3, #0
 8007e04:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8007e06:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8007e0a:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8007e0c:	2307      	movs	r3, #7
 8007e0e:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.FBStartAdress = Config->Address;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	695b      	ldr	r3, [r3, #20]
 8007e14:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	685a      	ldr	r2, [r3, #4]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	1ad3      	subs	r3, r2, r3
 8007e20:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	68da      	ldr	r2, [r3, #12]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	689b      	ldr	r3, [r3, #8]
 8007e2a:	1ad3      	subs	r3, r2, r3
 8007e2c:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.Backcolor.Blue = 0;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  pLayerCfg.Backcolor.Green = 0;
 8007e34:	2300      	movs	r3, #0
 8007e36:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  pLayerCfg.Backcolor.Red = 0;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 8007e40:	f107 0314 	add.w	r3, r7, #20
 8007e44:	68ba      	ldr	r2, [r7, #8]
 8007e46:	4619      	mov	r1, r3
 8007e48:	68f8      	ldr	r0, [r7, #12]
 8007e4a:	f006 fe2d 	bl	800eaa8 <HAL_LTDC_ConfigLayer>
 8007e4e:	4603      	mov	r3, r0
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3748      	adds	r7, #72	; 0x48
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <MX_LTDC_ClockConfig>:
  * @param  hltdc  LTDC Handle
  *         Being __weak it can be overwritten by the application
  * @retval HAL_status
  */
__weak HAL_StatusTypeDef MX_LTDC_ClockConfig(LTDC_HandleTypeDef *hltdc)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b0b2      	sub	sp, #200	; 0xc8
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;

  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 8007e60:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8007e64:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL3.PLL3M      = 5U;
 8007e66:	2305      	movs	r3, #5
 8007e68:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3N      = 132U;
 8007e6a:	2384      	movs	r3, #132	; 0x84
 8007e6c:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3P      = 2U;
 8007e6e:	2302      	movs	r3, #2
 8007e70:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3Q      = 2U;
 8007e72:	2302      	movs	r3, #2
 8007e74:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3R      = 24U;
 8007e76:	2318      	movs	r3, #24
 8007e78:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3RGE    = RCC_PLLCFGR_PLL3RGE_2;
 8007e7a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007e7e:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8007e80:	2300      	movs	r3, #0
 8007e82:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.PLL3.PLL3FRACN  = 0U;
 8007e84:	2300      	movs	r3, #0
 8007e86:	64bb      	str	r3, [r7, #72]	; 0x48
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8007e88:	f107 0308 	add.w	r3, r7, #8
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f008 fa55 	bl	801033c <HAL_RCCEx_PeriphCLKConfig>
 8007e92:	4603      	mov	r3, r0
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	37c8      	adds	r7, #200	; 0xc8
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <BSP_LCD_SetActiveLayer>:
  * @param  Instance    LCD Instance
  * @param  LayerIndex  LCD layer index
  * @retval BSP status
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b085      	sub	sp, #20
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d003      	beq.n	8007eb8 <BSP_LCD_SetActiveLayer+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007eb0:	f06f 0301 	mvn.w	r3, #1
 8007eb4:	60fb      	str	r3, [r7, #12]
 8007eb6:	e009      	b.n	8007ecc <BSP_LCD_SetActiveLayer+0x30>
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
 8007eb8:	4908      	ldr	r1, [pc, #32]	; (8007edc <BSP_LCD_SetActiveLayer+0x40>)
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	4613      	mov	r3, r2
 8007ebe:	00db      	lsls	r3, r3, #3
 8007ec0:	1a9b      	subs	r3, r3, r2
 8007ec2:	009b      	lsls	r3, r3, #2
 8007ec4:	440b      	add	r3, r1
 8007ec6:	3308      	adds	r3, #8
 8007ec8:	683a      	ldr	r2, [r7, #0]
 8007eca:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3714      	adds	r7, #20
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed8:	4770      	bx	lr
 8007eda:	bf00      	nop
 8007edc:	24002068 	.word	0x24002068

08007ee0 <BSP_LCD_GetPixelFormat>:
  * @param  Instance    LCD Instance
  * @param  PixelFormat Active LCD Pixel Format
  * @retval BSP status
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b085      	sub	sp, #20
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8007eea:	2300      	movs	r3, #0
 8007eec:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d003      	beq.n	8007efc <BSP_LCD_GetPixelFormat+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007ef4:	f06f 0301 	mvn.w	r3, #1
 8007ef8:	60fb      	str	r3, [r7, #12]
 8007efa:	e00a      	b.n	8007f12 <BSP_LCD_GetPixelFormat+0x32>
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
 8007efc:	4908      	ldr	r1, [pc, #32]	; (8007f20 <BSP_LCD_GetPixelFormat+0x40>)
 8007efe:	687a      	ldr	r2, [r7, #4]
 8007f00:	4613      	mov	r3, r2
 8007f02:	00db      	lsls	r3, r3, #3
 8007f04:	1a9b      	subs	r3, r3, r2
 8007f06:	009b      	lsls	r3, r3, #2
 8007f08:	440b      	add	r3, r1
 8007f0a:	330c      	adds	r3, #12
 8007f0c:	681a      	ldr	r2, [r3, #0]
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8007f12:	68fb      	ldr	r3, [r7, #12]
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3714      	adds	r7, #20
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr
 8007f20:	24002068 	.word	0x24002068

08007f24 <BSP_LCD_GetXSize>:
  * @param  Instance  LCD Instance
  * @param  XSize     LCD width
  * @retval BSP status
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b085      	sub	sp, #20
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d003      	beq.n	8007f40 <BSP_LCD_GetXSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007f38:	f06f 0301 	mvn.w	r3, #1
 8007f3c:	60fb      	str	r3, [r7, #12]
 8007f3e:	e00e      	b.n	8007f5e <BSP_LCD_GetXSize+0x3a>
  }
  else if(Lcd_Drv->GetXSize != NULL)
 8007f40:	4b0a      	ldr	r3, [pc, #40]	; (8007f6c <BSP_LCD_GetXSize+0x48>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d009      	beq.n	8007f5e <BSP_LCD_GetXSize+0x3a>
  {
    *XSize = Lcd_Ctx[Instance].XSize;
 8007f4a:	4909      	ldr	r1, [pc, #36]	; (8007f70 <BSP_LCD_GetXSize+0x4c>)
 8007f4c:	687a      	ldr	r2, [r7, #4]
 8007f4e:	4613      	mov	r3, r2
 8007f50:	00db      	lsls	r3, r3, #3
 8007f52:	1a9b      	subs	r3, r3, r2
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	440b      	add	r3, r1
 8007f58:	681a      	ldr	r2, [r3, #0]
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3714      	adds	r7, #20
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr
 8007f6c:	240012dc 	.word	0x240012dc
 8007f70:	24002068 	.word	0x24002068

08007f74 <BSP_LCD_GetYSize>:
  * @param  Instance  LCD Instance
  * @param  YSize     LCD Height
  * @retval BSP status
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b085      	sub	sp, #20
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d003      	beq.n	8007f90 <BSP_LCD_GetYSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007f88:	f06f 0301 	mvn.w	r3, #1
 8007f8c:	60fb      	str	r3, [r7, #12]
 8007f8e:	e00f      	b.n	8007fb0 <BSP_LCD_GetYSize+0x3c>
  }
  else if(Lcd_Drv->GetYSize != NULL)
 8007f90:	4b0b      	ldr	r3, [pc, #44]	; (8007fc0 <BSP_LCD_GetYSize+0x4c>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d00a      	beq.n	8007fb0 <BSP_LCD_GetYSize+0x3c>
  {
    *YSize = Lcd_Ctx[Instance].YSize;
 8007f9a:	490a      	ldr	r1, [pc, #40]	; (8007fc4 <BSP_LCD_GetYSize+0x50>)
 8007f9c:	687a      	ldr	r2, [r7, #4]
 8007f9e:	4613      	mov	r3, r2
 8007fa0:	00db      	lsls	r3, r3, #3
 8007fa2:	1a9b      	subs	r3, r3, r2
 8007fa4:	009b      	lsls	r3, r3, #2
 8007fa6:	440b      	add	r3, r1
 8007fa8:	3304      	adds	r3, #4
 8007faa:	681a      	ldr	r2, [r3, #0]
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3714      	adds	r7, #20
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr
 8007fbe:	bf00      	nop
 8007fc0:	240012dc 	.word	0x240012dc
 8007fc4:	24002068 	.word	0x24002068

08007fc8 <BSP_LCD_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pBmp Pointer to Bmp picture address in the internal Flash.
  * @retval BSP status
  */
int32_t BSP_LCD_DrawBitmap(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 8007fc8:	b590      	push	{r4, r7, lr}
 8007fca:	b08f      	sub	sp, #60	; 0x3c
 8007fcc:	af02      	add	r7, sp, #8
 8007fce:	60f8      	str	r0, [r7, #12]
 8007fd0:	60b9      	str	r1, [r7, #8]
 8007fd2:	607a      	str	r2, [r7, #4]
 8007fd4:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	61fb      	str	r3, [r7, #28]
  uint32_t Address;
  uint32_t input_color_mode;
  uint8_t *pbmp;

  /* Get bitmap data address offset */
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	330a      	adds	r3, #10
 8007fde:	781b      	ldrb	r3, [r3, #0]
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	330b      	adds	r3, #11
 8007fe6:	781b      	ldrb	r3, [r3, #0]
 8007fe8:	021b      	lsls	r3, r3, #8
 8007fea:	441a      	add	r2, r3
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	330c      	adds	r3, #12
 8007ff0:	781b      	ldrb	r3, [r3, #0]
 8007ff2:	041b      	lsls	r3, r3, #16
 8007ff4:	441a      	add	r2, r3
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	330d      	adds	r3, #13
 8007ffa:	781b      	ldrb	r3, [r3, #0]
 8007ffc:	061b      	lsls	r3, r3, #24
 8007ffe:	4413      	add	r3, r2
 8008000:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Read bitmap width */
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	3312      	adds	r3, #18
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	461a      	mov	r2, r3
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	3313      	adds	r3, #19
 800800e:	781b      	ldrb	r3, [r3, #0]
 8008010:	021b      	lsls	r3, r3, #8
 8008012:	441a      	add	r2, r3
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	3314      	adds	r3, #20
 8008018:	781b      	ldrb	r3, [r3, #0]
 800801a:	041b      	lsls	r3, r3, #16
 800801c:	441a      	add	r2, r3
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	3315      	adds	r3, #21
 8008022:	781b      	ldrb	r3, [r3, #0]
 8008024:	061b      	lsls	r3, r3, #24
 8008026:	4413      	add	r3, r2
 8008028:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	3316      	adds	r3, #22
 800802e:	781b      	ldrb	r3, [r3, #0]
 8008030:	461a      	mov	r2, r3
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	3317      	adds	r3, #23
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	021b      	lsls	r3, r3, #8
 800803a:	441a      	add	r2, r3
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	3318      	adds	r3, #24
 8008040:	781b      	ldrb	r3, [r3, #0]
 8008042:	041b      	lsls	r3, r3, #16
 8008044:	441a      	add	r2, r3
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	3319      	adds	r3, #25
 800804a:	781b      	ldrb	r3, [r3, #0]
 800804c:	061b      	lsls	r3, r3, #24
 800804e:	4413      	add	r3, r2
 8008050:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	331c      	adds	r3, #28
 8008056:	781b      	ldrb	r3, [r3, #0]
 8008058:	461a      	mov	r2, r3
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	331d      	adds	r3, #29
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	021b      	lsls	r3, r3, #8
 8008062:	4413      	add	r3, r2
 8008064:	613b      	str	r3, [r7, #16]

  /* Set the address */
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8008066:	493f      	ldr	r1, [pc, #252]	; (8008164 <BSP_LCD_DrawBitmap+0x19c>)
 8008068:	68fa      	ldr	r2, [r7, #12]
 800806a:	4613      	mov	r3, r2
 800806c:	00db      	lsls	r3, r3, #3
 800806e:	1a9b      	subs	r3, r3, r2
 8008070:	009b      	lsls	r3, r3, #2
 8008072:	440b      	add	r3, r1
 8008074:	3308      	adds	r3, #8
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a3b      	ldr	r2, [pc, #236]	; (8008168 <BSP_LCD_DrawBitmap+0x1a0>)
 800807a:	2134      	movs	r1, #52	; 0x34
 800807c:	fb01 f303 	mul.w	r3, r1, r3
 8008080:	4413      	add	r3, r2
 8008082:	335c      	adds	r3, #92	; 0x5c
 8008084:	6819      	ldr	r1, [r3, #0]
 8008086:	4837      	ldr	r0, [pc, #220]	; (8008164 <BSP_LCD_DrawBitmap+0x19c>)
 8008088:	68fa      	ldr	r2, [r7, #12]
 800808a:	4613      	mov	r3, r2
 800808c:	00db      	lsls	r3, r3, #3
 800808e:	1a9b      	subs	r3, r3, r2
 8008090:	009b      	lsls	r3, r3, #2
 8008092:	4403      	add	r3, r0
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	687a      	ldr	r2, [r7, #4]
 8008098:	fb02 f203 	mul.w	r2, r2, r3
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	18d0      	adds	r0, r2, r3
 80080a0:	4c30      	ldr	r4, [pc, #192]	; (8008164 <BSP_LCD_DrawBitmap+0x19c>)
 80080a2:	68fa      	ldr	r2, [r7, #12]
 80080a4:	4613      	mov	r3, r2
 80080a6:	00db      	lsls	r3, r3, #3
 80080a8:	1a9b      	subs	r3, r3, r2
 80080aa:	009b      	lsls	r3, r3, #2
 80080ac:	4423      	add	r3, r4
 80080ae:	3310      	adds	r3, #16
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	fb03 f300 	mul.w	r3, r3, r0
 80080b6:	440b      	add	r3, r1
 80080b8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Get the layer pixel format */
  if ((bit_pixel/8U) == 4U)
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	3b20      	subs	r3, #32
 80080be:	2b07      	cmp	r3, #7
 80080c0:	d802      	bhi.n	80080c8 <BSP_LCD_DrawBitmap+0x100>
  {
    input_color_mode = DMA2D_INPUT_ARGB8888;
 80080c2:	2300      	movs	r3, #0
 80080c4:	627b      	str	r3, [r7, #36]	; 0x24
 80080c6:	e008      	b.n	80080da <BSP_LCD_DrawBitmap+0x112>
  }
  else if ((bit_pixel/8U) == 2U)
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	3b10      	subs	r3, #16
 80080cc:	2b07      	cmp	r3, #7
 80080ce:	d802      	bhi.n	80080d6 <BSP_LCD_DrawBitmap+0x10e>
  {
    input_color_mode = DMA2D_INPUT_RGB565;
 80080d0:	2302      	movs	r3, #2
 80080d2:	627b      	str	r3, [r7, #36]	; 0x24
 80080d4:	e001      	b.n	80080da <BSP_LCD_DrawBitmap+0x112>
  }
  else
  {
    input_color_mode = DMA2D_INPUT_RGB888;
 80080d6:	2301      	movs	r3, #1
 80080d8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Bypass the bitmap header */
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	3b01      	subs	r3, #1
 80080de:	69ba      	ldr	r2, [r7, #24]
 80080e0:	fb02 f303 	mul.w	r3, r2, r3
 80080e4:	693a      	ldr	r2, [r7, #16]
 80080e6:	08d2      	lsrs	r2, r2, #3
 80080e8:	fb02 f203 	mul.w	r2, r2, r3
 80080ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ee:	4413      	add	r3, r2
 80080f0:	683a      	ldr	r2, [r7, #0]
 80080f2:	4413      	add	r3, r2
 80080f4:	623b      	str	r3, [r7, #32]

  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 80080f6:	2300      	movs	r3, #0
 80080f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80080fa:	e029      	b.n	8008150 <BSP_LCD_DrawBitmap+0x188>
  {
    /* Pixel format conversion */
    LL_ConvertLineToRGB(Instance, (uint32_t *)pbmp, (uint32_t *)Address, width, input_color_mode);
 80080fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008100:	9300      	str	r3, [sp, #0]
 8008102:	69bb      	ldr	r3, [r7, #24]
 8008104:	6a39      	ldr	r1, [r7, #32]
 8008106:	68f8      	ldr	r0, [r7, #12]
 8008108:	f000 fad6 	bl	80086b8 <LL_ConvertLineToRGB>

    /* Increment the source and destination buffers */
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 800810c:	4915      	ldr	r1, [pc, #84]	; (8008164 <BSP_LCD_DrawBitmap+0x19c>)
 800810e:	68fa      	ldr	r2, [r7, #12]
 8008110:	4613      	mov	r3, r2
 8008112:	00db      	lsls	r3, r3, #3
 8008114:	1a9b      	subs	r3, r3, r2
 8008116:	009b      	lsls	r3, r3, #2
 8008118:	440b      	add	r3, r1
 800811a:	6819      	ldr	r1, [r3, #0]
 800811c:	4811      	ldr	r0, [pc, #68]	; (8008164 <BSP_LCD_DrawBitmap+0x19c>)
 800811e:	68fa      	ldr	r2, [r7, #12]
 8008120:	4613      	mov	r3, r2
 8008122:	00db      	lsls	r3, r3, #3
 8008124:	1a9b      	subs	r3, r3, r2
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	4403      	add	r3, r0
 800812a:	3310      	adds	r3, #16
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	fb03 f301 	mul.w	r3, r3, r1
 8008132:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008134:	4413      	add	r3, r2
 8008136:	62bb      	str	r3, [r7, #40]	; 0x28
    pbmp -= width*(bit_pixel/8U);
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	08db      	lsrs	r3, r3, #3
 800813c:	69ba      	ldr	r2, [r7, #24]
 800813e:	fb02 f303 	mul.w	r3, r2, r3
 8008142:	425b      	negs	r3, r3
 8008144:	6a3a      	ldr	r2, [r7, #32]
 8008146:	4413      	add	r3, r2
 8008148:	623b      	str	r3, [r7, #32]
  for(index=0; index < height; index++)
 800814a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800814c:	3301      	adds	r3, #1
 800814e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008150:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	429a      	cmp	r2, r3
 8008156:	d3d1      	bcc.n	80080fc <BSP_LCD_DrawBitmap+0x134>
  }

  return ret;
 8008158:	69fb      	ldr	r3, [r7, #28]
}
 800815a:	4618      	mov	r0, r3
 800815c:	3734      	adds	r7, #52	; 0x34
 800815e:	46bd      	mov	sp, r7
 8008160:	bd90      	pop	{r4, r7, pc}
 8008162:	bf00      	nop
 8008164:	24002068 	.word	0x24002068
 8008168:	24001fc0 	.word	0x24001fc0

0800816c <BSP_LCD_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle Height.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b088      	sub	sp, #32
 8008170:	af00      	add	r7, sp, #0
 8008172:	60f8      	str	r0, [r7, #12]
 8008174:	60b9      	str	r1, [r7, #8]
 8008176:	607a      	str	r2, [r7, #4]
 8008178:	603b      	str	r3, [r7, #0]
    }
    pData += Lcd_Ctx[Instance].BppFactor*Width;
  }
#else
  uint32_t color, j;
  for(i = 0; i < Height; i++)
 800817a:	2300      	movs	r3, #0
 800817c:	61fb      	str	r3, [r7, #28]
 800817e:	e035      	b.n	80081ec <BSP_LCD_FillRGBRect+0x80>
  {
    for(j = 0; j < Width; j++)
 8008180:	2300      	movs	r3, #0
 8008182:	61bb      	str	r3, [r7, #24]
 8008184:	e02b      	b.n	80081de <BSP_LCD_FillRGBRect+0x72>
    {
      color = *pData | (*(pData + 1) << 8) | (*(pData + 2) << 16) | (*(pData + 3) << 24);
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	781b      	ldrb	r3, [r3, #0]
 800818a:	461a      	mov	r2, r3
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	3301      	adds	r3, #1
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	021b      	lsls	r3, r3, #8
 8008194:	431a      	orrs	r2, r3
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	3302      	adds	r3, #2
 800819a:	781b      	ldrb	r3, [r3, #0]
 800819c:	041b      	lsls	r3, r3, #16
 800819e:	431a      	orrs	r2, r3
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	3303      	adds	r3, #3
 80081a4:	781b      	ldrb	r3, [r3, #0]
 80081a6:	061b      	lsls	r3, r3, #24
 80081a8:	4313      	orrs	r3, r2
 80081aa:	617b      	str	r3, [r7, #20]
      BSP_LCD_WritePixel(Instance, Xpos + j, Ypos + i, color);
 80081ac:	68ba      	ldr	r2, [r7, #8]
 80081ae:	69bb      	ldr	r3, [r7, #24]
 80081b0:	18d1      	adds	r1, r2, r3
 80081b2:	687a      	ldr	r2, [r7, #4]
 80081b4:	69fb      	ldr	r3, [r7, #28]
 80081b6:	441a      	add	r2, r3
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	68f8      	ldr	r0, [r7, #12]
 80081bc:	f000 f99e 	bl	80084fc <BSP_LCD_WritePixel>
      pData += Lcd_Ctx[Instance].BppFactor;
 80081c0:	490f      	ldr	r1, [pc, #60]	; (8008200 <BSP_LCD_FillRGBRect+0x94>)
 80081c2:	68fa      	ldr	r2, [r7, #12]
 80081c4:	4613      	mov	r3, r2
 80081c6:	00db      	lsls	r3, r3, #3
 80081c8:	1a9b      	subs	r3, r3, r2
 80081ca:	009b      	lsls	r3, r3, #2
 80081cc:	440b      	add	r3, r1
 80081ce:	3310      	adds	r3, #16
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	683a      	ldr	r2, [r7, #0]
 80081d4:	4413      	add	r3, r2
 80081d6:	603b      	str	r3, [r7, #0]
    for(j = 0; j < Width; j++)
 80081d8:	69bb      	ldr	r3, [r7, #24]
 80081da:	3301      	adds	r3, #1
 80081dc:	61bb      	str	r3, [r7, #24]
 80081de:	69ba      	ldr	r2, [r7, #24]
 80081e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081e2:	429a      	cmp	r2, r3
 80081e4:	d3cf      	bcc.n	8008186 <BSP_LCD_FillRGBRect+0x1a>
  for(i = 0; i < Height; i++)
 80081e6:	69fb      	ldr	r3, [r7, #28]
 80081e8:	3301      	adds	r3, #1
 80081ea:	61fb      	str	r3, [r7, #28]
 80081ec:	69fa      	ldr	r2, [r7, #28]
 80081ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081f0:	429a      	cmp	r2, r3
 80081f2:	d3c5      	bcc.n	8008180 <BSP_LCD_FillRGBRect+0x14>
    }
  }
#endif
  return BSP_ERROR_NONE;
 80081f4:	2300      	movs	r3, #0
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3720      	adds	r7, #32
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	bf00      	nop
 8008200:	24002068 	.word	0x24002068

08008204 <BSP_LCD_DrawHLine>:
  * @param  Length  Line length
  * @param  Color Pixel color
  * @retval BSP status.
  */
int32_t BSP_LCD_DrawHLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8008204:	b590      	push	{r4, r7, lr}
 8008206:	b089      	sub	sp, #36	; 0x24
 8008208:	af02      	add	r7, sp, #8
 800820a:	60f8      	str	r0, [r7, #12]
 800820c:	60b9      	str	r1, [r7, #8]
 800820e:	607a      	str	r2, [r7, #4]
 8008210:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8008212:	4928      	ldr	r1, [pc, #160]	; (80082b4 <BSP_LCD_DrawHLine+0xb0>)
 8008214:	68fa      	ldr	r2, [r7, #12]
 8008216:	4613      	mov	r3, r2
 8008218:	00db      	lsls	r3, r3, #3
 800821a:	1a9b      	subs	r3, r3, r2
 800821c:	009b      	lsls	r3, r3, #2
 800821e:	440b      	add	r3, r1
 8008220:	3308      	adds	r3, #8
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a24      	ldr	r2, [pc, #144]	; (80082b8 <BSP_LCD_DrawHLine+0xb4>)
 8008226:	2134      	movs	r1, #52	; 0x34
 8008228:	fb01 f303 	mul.w	r3, r1, r3
 800822c:	4413      	add	r3, r2
 800822e:	335c      	adds	r3, #92	; 0x5c
 8008230:	6819      	ldr	r1, [r3, #0]
 8008232:	4820      	ldr	r0, [pc, #128]	; (80082b4 <BSP_LCD_DrawHLine+0xb0>)
 8008234:	68fa      	ldr	r2, [r7, #12]
 8008236:	4613      	mov	r3, r2
 8008238:	00db      	lsls	r3, r3, #3
 800823a:	1a9b      	subs	r3, r3, r2
 800823c:	009b      	lsls	r3, r3, #2
 800823e:	4403      	add	r3, r0
 8008240:	3310      	adds	r3, #16
 8008242:	6818      	ldr	r0, [r3, #0]
 8008244:	4c1b      	ldr	r4, [pc, #108]	; (80082b4 <BSP_LCD_DrawHLine+0xb0>)
 8008246:	68fa      	ldr	r2, [r7, #12]
 8008248:	4613      	mov	r3, r2
 800824a:	00db      	lsls	r3, r3, #3
 800824c:	1a9b      	subs	r3, r3, r2
 800824e:	009b      	lsls	r3, r3, #2
 8008250:	4423      	add	r3, r4
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	687a      	ldr	r2, [r7, #4]
 8008256:	fb02 f203 	mul.w	r2, r2, r3
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	4413      	add	r3, r2
 800825e:	fb03 f300 	mul.w	r3, r3, r0
 8008262:	440b      	add	r3, r1
 8008264:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 8008266:	68ba      	ldr	r2, [r7, #8]
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	18d1      	adds	r1, r2, r3
 800826c:	4811      	ldr	r0, [pc, #68]	; (80082b4 <BSP_LCD_DrawHLine+0xb0>)
 800826e:	68fa      	ldr	r2, [r7, #12]
 8008270:	4613      	mov	r3, r2
 8008272:	00db      	lsls	r3, r3, #3
 8008274:	1a9b      	subs	r3, r3, r2
 8008276:	009b      	lsls	r3, r3, #2
 8008278:	4403      	add	r3, r0
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4299      	cmp	r1, r3
 800827e:	d90a      	bls.n	8008296 <BSP_LCD_DrawHLine+0x92>
  {
    Length = Lcd_Ctx[Instance].XSize - Xpos;
 8008280:	490c      	ldr	r1, [pc, #48]	; (80082b4 <BSP_LCD_DrawHLine+0xb0>)
 8008282:	68fa      	ldr	r2, [r7, #12]
 8008284:	4613      	mov	r3, r2
 8008286:	00db      	lsls	r3, r3, #3
 8008288:	1a9b      	subs	r3, r3, r2
 800828a:	009b      	lsls	r3, r3, #2
 800828c:	440b      	add	r3, r1
 800828e:	681a      	ldr	r2, [r3, #0]
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	1ad3      	subs	r3, r2, r3
 8008294:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
 8008296:	6979      	ldr	r1, [r7, #20]
 8008298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800829a:	9301      	str	r3, [sp, #4]
 800829c:	2300      	movs	r3, #0
 800829e:	9300      	str	r3, [sp, #0]
 80082a0:	2301      	movs	r3, #1
 80082a2:	683a      	ldr	r2, [r7, #0]
 80082a4:	68f8      	ldr	r0, [r7, #12]
 80082a6:	f000 f993 	bl	80085d0 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 80082aa:	2300      	movs	r3, #0
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	371c      	adds	r7, #28
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd90      	pop	{r4, r7, pc}
 80082b4:	24002068 	.word	0x24002068
 80082b8:	24001fc0 	.word	0x24001fc0

080082bc <BSP_LCD_DrawVLine>:
  * @param  Length  Line length
  * @param  Color Pixel color
  * @retval BSP status.
  */
int32_t BSP_LCD_DrawVLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 80082bc:	b590      	push	{r4, r7, lr}
 80082be:	b089      	sub	sp, #36	; 0x24
 80082c0:	af02      	add	r7, sp, #8
 80082c2:	60f8      	str	r0, [r7, #12]
 80082c4:	60b9      	str	r1, [r7, #8]
 80082c6:	607a      	str	r2, [r7, #4]
 80082c8:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 80082ca:	492d      	ldr	r1, [pc, #180]	; (8008380 <BSP_LCD_DrawVLine+0xc4>)
 80082cc:	68fa      	ldr	r2, [r7, #12]
 80082ce:	4613      	mov	r3, r2
 80082d0:	00db      	lsls	r3, r3, #3
 80082d2:	1a9b      	subs	r3, r3, r2
 80082d4:	009b      	lsls	r3, r3, #2
 80082d6:	440b      	add	r3, r1
 80082d8:	3308      	adds	r3, #8
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a29      	ldr	r2, [pc, #164]	; (8008384 <BSP_LCD_DrawVLine+0xc8>)
 80082de:	2134      	movs	r1, #52	; 0x34
 80082e0:	fb01 f303 	mul.w	r3, r1, r3
 80082e4:	4413      	add	r3, r2
 80082e6:	335c      	adds	r3, #92	; 0x5c
 80082e8:	6819      	ldr	r1, [r3, #0]
 80082ea:	4825      	ldr	r0, [pc, #148]	; (8008380 <BSP_LCD_DrawVLine+0xc4>)
 80082ec:	68fa      	ldr	r2, [r7, #12]
 80082ee:	4613      	mov	r3, r2
 80082f0:	00db      	lsls	r3, r3, #3
 80082f2:	1a9b      	subs	r3, r3, r2
 80082f4:	009b      	lsls	r3, r3, #2
 80082f6:	4403      	add	r3, r0
 80082f8:	3310      	adds	r3, #16
 80082fa:	6818      	ldr	r0, [r3, #0]
 80082fc:	4c20      	ldr	r4, [pc, #128]	; (8008380 <BSP_LCD_DrawVLine+0xc4>)
 80082fe:	68fa      	ldr	r2, [r7, #12]
 8008300:	4613      	mov	r3, r2
 8008302:	00db      	lsls	r3, r3, #3
 8008304:	1a9b      	subs	r3, r3, r2
 8008306:	009b      	lsls	r3, r3, #2
 8008308:	4423      	add	r3, r4
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	687a      	ldr	r2, [r7, #4]
 800830e:	fb02 f203 	mul.w	r2, r2, r3
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	4413      	add	r3, r2
 8008316:	fb03 f300 	mul.w	r3, r3, r0
 800831a:	440b      	add	r3, r1
 800831c:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 800831e:	687a      	ldr	r2, [r7, #4]
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	18d1      	adds	r1, r2, r3
 8008324:	4816      	ldr	r0, [pc, #88]	; (8008380 <BSP_LCD_DrawVLine+0xc4>)
 8008326:	68fa      	ldr	r2, [r7, #12]
 8008328:	4613      	mov	r3, r2
 800832a:	00db      	lsls	r3, r3, #3
 800832c:	1a9b      	subs	r3, r3, r2
 800832e:	009b      	lsls	r3, r3, #2
 8008330:	4403      	add	r3, r0
 8008332:	3304      	adds	r3, #4
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4299      	cmp	r1, r3
 8008338:	d90b      	bls.n	8008352 <BSP_LCD_DrawVLine+0x96>
  {
    Length = Lcd_Ctx[Instance].YSize - Ypos;
 800833a:	4911      	ldr	r1, [pc, #68]	; (8008380 <BSP_LCD_DrawVLine+0xc4>)
 800833c:	68fa      	ldr	r2, [r7, #12]
 800833e:	4613      	mov	r3, r2
 8008340:	00db      	lsls	r3, r3, #3
 8008342:	1a9b      	subs	r3, r3, r2
 8008344:	009b      	lsls	r3, r3, #2
 8008346:	440b      	add	r3, r1
 8008348:	3304      	adds	r3, #4
 800834a:	681a      	ldr	r2, [r3, #0]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	1ad3      	subs	r3, r2, r3
 8008350:	603b      	str	r3, [r7, #0]
  }
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 8008352:	6979      	ldr	r1, [r7, #20]
 8008354:	480a      	ldr	r0, [pc, #40]	; (8008380 <BSP_LCD_DrawVLine+0xc4>)
 8008356:	68fa      	ldr	r2, [r7, #12]
 8008358:	4613      	mov	r3, r2
 800835a:	00db      	lsls	r3, r3, #3
 800835c:	1a9b      	subs	r3, r3, r2
 800835e:	009b      	lsls	r3, r3, #2
 8008360:	4403      	add	r3, r0
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	3b01      	subs	r3, #1
 8008366:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008368:	9201      	str	r2, [sp, #4]
 800836a:	9300      	str	r3, [sp, #0]
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	2201      	movs	r2, #1
 8008370:	68f8      	ldr	r0, [r7, #12]
 8008372:	f000 f92d 	bl	80085d0 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 8008376:	2300      	movs	r3, #0
}
 8008378:	4618      	mov	r0, r3
 800837a:	371c      	adds	r7, #28
 800837c:	46bd      	mov	sp, r7
 800837e:	bd90      	pop	{r4, r7, pc}
 8008380:	24002068 	.word	0x24002068
 8008384:	24001fc0 	.word	0x24001fc0

08008388 <BSP_LCD_FillRect>:
  * @param  Height Rectangle height
  * @param  Color Pixel color
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8008388:	b590      	push	{r4, r7, lr}
 800838a:	b089      	sub	sp, #36	; 0x24
 800838c:	af02      	add	r7, sp, #8
 800838e:	60f8      	str	r0, [r7, #12]
 8008390:	60b9      	str	r1, [r7, #8]
 8008392:	607a      	str	r2, [r7, #4]
 8008394:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the rectangle start address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8008396:	4921      	ldr	r1, [pc, #132]	; (800841c <BSP_LCD_FillRect+0x94>)
 8008398:	68fa      	ldr	r2, [r7, #12]
 800839a:	4613      	mov	r3, r2
 800839c:	00db      	lsls	r3, r3, #3
 800839e:	1a9b      	subs	r3, r3, r2
 80083a0:	009b      	lsls	r3, r3, #2
 80083a2:	440b      	add	r3, r1
 80083a4:	3308      	adds	r3, #8
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4a1d      	ldr	r2, [pc, #116]	; (8008420 <BSP_LCD_FillRect+0x98>)
 80083aa:	2134      	movs	r1, #52	; 0x34
 80083ac:	fb01 f303 	mul.w	r3, r1, r3
 80083b0:	4413      	add	r3, r2
 80083b2:	335c      	adds	r3, #92	; 0x5c
 80083b4:	6819      	ldr	r1, [r3, #0]
 80083b6:	4819      	ldr	r0, [pc, #100]	; (800841c <BSP_LCD_FillRect+0x94>)
 80083b8:	68fa      	ldr	r2, [r7, #12]
 80083ba:	4613      	mov	r3, r2
 80083bc:	00db      	lsls	r3, r3, #3
 80083be:	1a9b      	subs	r3, r3, r2
 80083c0:	009b      	lsls	r3, r3, #2
 80083c2:	4403      	add	r3, r0
 80083c4:	3310      	adds	r3, #16
 80083c6:	6818      	ldr	r0, [r3, #0]
 80083c8:	4c14      	ldr	r4, [pc, #80]	; (800841c <BSP_LCD_FillRect+0x94>)
 80083ca:	68fa      	ldr	r2, [r7, #12]
 80083cc:	4613      	mov	r3, r2
 80083ce:	00db      	lsls	r3, r3, #3
 80083d0:	1a9b      	subs	r3, r3, r2
 80083d2:	009b      	lsls	r3, r3, #2
 80083d4:	4423      	add	r3, r4
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	687a      	ldr	r2, [r7, #4]
 80083da:	fb02 f203 	mul.w	r2, r2, r3
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	4413      	add	r3, r2
 80083e2:	fb03 f300 	mul.w	r3, r3, r0
 80083e6:	440b      	add	r3, r1
 80083e8:	617b      	str	r3, [r7, #20]

  /* Fill the rectangle */
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 80083ea:	6979      	ldr	r1, [r7, #20]
 80083ec:	480b      	ldr	r0, [pc, #44]	; (800841c <BSP_LCD_FillRect+0x94>)
 80083ee:	68fa      	ldr	r2, [r7, #12]
 80083f0:	4613      	mov	r3, r2
 80083f2:	00db      	lsls	r3, r3, #3
 80083f4:	1a9b      	subs	r3, r3, r2
 80083f6:	009b      	lsls	r3, r3, #2
 80083f8:	4403      	add	r3, r0
 80083fa:	681a      	ldr	r2, [r3, #0]
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	1ad3      	subs	r3, r2, r3
 8008400:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008402:	9201      	str	r2, [sp, #4]
 8008404:	9300      	str	r3, [sp, #0]
 8008406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008408:	683a      	ldr	r2, [r7, #0]
 800840a:	68f8      	ldr	r0, [r7, #12]
 800840c:	f000 f8e0 	bl	80085d0 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 8008410:	2300      	movs	r3, #0
}
 8008412:	4618      	mov	r0, r3
 8008414:	371c      	adds	r7, #28
 8008416:	46bd      	mov	sp, r7
 8008418:	bd90      	pop	{r4, r7, pc}
 800841a:	bf00      	nop
 800841c:	24002068 	.word	0x24002068
 8008420:	24001fc0 	.word	0x24001fc0

08008424 <BSP_LCD_ReadPixel>:
  * @param  Ypos Y position
  * @param  Color RGB pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_ReadPixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 8008424:	b480      	push	{r7}
 8008426:	b085      	sub	sp, #20
 8008428:	af00      	add	r7, sp, #0
 800842a:	60f8      	str	r0, [r7, #12]
 800842c:	60b9      	str	r1, [r7, #8]
 800842e:	607a      	str	r2, [r7, #4]
 8008430:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8008432:	4930      	ldr	r1, [pc, #192]	; (80084f4 <BSP_LCD_ReadPixel+0xd0>)
 8008434:	68fa      	ldr	r2, [r7, #12]
 8008436:	4613      	mov	r3, r2
 8008438:	00db      	lsls	r3, r3, #3
 800843a:	1a9b      	subs	r3, r3, r2
 800843c:	009b      	lsls	r3, r3, #2
 800843e:	440b      	add	r3, r1
 8008440:	3308      	adds	r3, #8
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a2c      	ldr	r2, [pc, #176]	; (80084f8 <BSP_LCD_ReadPixel+0xd4>)
 8008446:	2134      	movs	r1, #52	; 0x34
 8008448:	fb01 f303 	mul.w	r3, r1, r3
 800844c:	4413      	add	r3, r2
 800844e:	3348      	adds	r3, #72	; 0x48
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d122      	bne.n	800849c <BSP_LCD_ReadPixel+0x78>
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8008456:	4927      	ldr	r1, [pc, #156]	; (80084f4 <BSP_LCD_ReadPixel+0xd0>)
 8008458:	68fa      	ldr	r2, [r7, #12]
 800845a:	4613      	mov	r3, r2
 800845c:	00db      	lsls	r3, r3, #3
 800845e:	1a9b      	subs	r3, r3, r2
 8008460:	009b      	lsls	r3, r3, #2
 8008462:	440b      	add	r3, r1
 8008464:	3308      	adds	r3, #8
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a23      	ldr	r2, [pc, #140]	; (80084f8 <BSP_LCD_ReadPixel+0xd4>)
 800846a:	2134      	movs	r1, #52	; 0x34
 800846c:	fb01 f303 	mul.w	r3, r1, r3
 8008470:	4413      	add	r3, r2
 8008472:	335c      	adds	r3, #92	; 0x5c
 8008474:	6819      	ldr	r1, [r3, #0]
 8008476:	481f      	ldr	r0, [pc, #124]	; (80084f4 <BSP_LCD_ReadPixel+0xd0>)
 8008478:	68fa      	ldr	r2, [r7, #12]
 800847a:	4613      	mov	r3, r2
 800847c:	00db      	lsls	r3, r3, #3
 800847e:	1a9b      	subs	r3, r3, r2
 8008480:	009b      	lsls	r3, r3, #2
 8008482:	4403      	add	r3, r0
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	687a      	ldr	r2, [r7, #4]
 8008488:	fb02 f203 	mul.w	r2, r2, r3
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	4413      	add	r3, r2
 8008490:	009b      	lsls	r3, r3, #2
 8008492:	440b      	add	r3, r1
 8008494:	681a      	ldr	r2, [r3, #0]
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	601a      	str	r2, [r3, #0]
 800849a:	e023      	b.n	80084e4 <BSP_LCD_ReadPixel+0xc0>
  }
  else /* if((hlcd_ltdc.LayerCfg[layer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) */
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 800849c:	4915      	ldr	r1, [pc, #84]	; (80084f4 <BSP_LCD_ReadPixel+0xd0>)
 800849e:	68fa      	ldr	r2, [r7, #12]
 80084a0:	4613      	mov	r3, r2
 80084a2:	00db      	lsls	r3, r3, #3
 80084a4:	1a9b      	subs	r3, r3, r2
 80084a6:	009b      	lsls	r3, r3, #2
 80084a8:	440b      	add	r3, r1
 80084aa:	3308      	adds	r3, #8
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a12      	ldr	r2, [pc, #72]	; (80084f8 <BSP_LCD_ReadPixel+0xd4>)
 80084b0:	2134      	movs	r1, #52	; 0x34
 80084b2:	fb01 f303 	mul.w	r3, r1, r3
 80084b6:	4413      	add	r3, r2
 80084b8:	335c      	adds	r3, #92	; 0x5c
 80084ba:	6819      	ldr	r1, [r3, #0]
 80084bc:	480d      	ldr	r0, [pc, #52]	; (80084f4 <BSP_LCD_ReadPixel+0xd0>)
 80084be:	68fa      	ldr	r2, [r7, #12]
 80084c0:	4613      	mov	r3, r2
 80084c2:	00db      	lsls	r3, r3, #3
 80084c4:	1a9b      	subs	r3, r3, r2
 80084c6:	009b      	lsls	r3, r3, #2
 80084c8:	4403      	add	r3, r0
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	687a      	ldr	r2, [r7, #4]
 80084ce:	fb02 f203 	mul.w	r2, r2, r3
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	4413      	add	r3, r2
 80084d6:	005b      	lsls	r3, r3, #1
 80084d8:	440b      	add	r3, r1
 80084da:	881b      	ldrh	r3, [r3, #0]
 80084dc:	b29b      	uxth	r3, r3
 80084de:	461a      	mov	r2, r3
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	601a      	str	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
 80084e4:	2300      	movs	r3, #0
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3714      	adds	r7, #20
 80084ea:	46bd      	mov	sp, r7
 80084ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f0:	4770      	bx	lr
 80084f2:	bf00      	nop
 80084f4:	24002068 	.word	0x24002068
 80084f8:	24001fc0 	.word	0x24001fc0

080084fc <BSP_LCD_WritePixel>:
  * @param  Ypos Y position
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b085      	sub	sp, #20
 8008500:	af00      	add	r7, sp, #0
 8008502:	60f8      	str	r0, [r7, #12]
 8008504:	60b9      	str	r1, [r7, #8]
 8008506:	607a      	str	r2, [r7, #4]
 8008508:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800850a:	492f      	ldr	r1, [pc, #188]	; (80085c8 <BSP_LCD_WritePixel+0xcc>)
 800850c:	68fa      	ldr	r2, [r7, #12]
 800850e:	4613      	mov	r3, r2
 8008510:	00db      	lsls	r3, r3, #3
 8008512:	1a9b      	subs	r3, r3, r2
 8008514:	009b      	lsls	r3, r3, #2
 8008516:	440b      	add	r3, r1
 8008518:	3308      	adds	r3, #8
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a2b      	ldr	r2, [pc, #172]	; (80085cc <BSP_LCD_WritePixel+0xd0>)
 800851e:	2134      	movs	r1, #52	; 0x34
 8008520:	fb01 f303 	mul.w	r3, r1, r3
 8008524:	4413      	add	r3, r2
 8008526:	3348      	adds	r3, #72	; 0x48
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d122      	bne.n	8008574 <BSP_LCD_WritePixel+0x78>
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 800852e:	4926      	ldr	r1, [pc, #152]	; (80085c8 <BSP_LCD_WritePixel+0xcc>)
 8008530:	68fa      	ldr	r2, [r7, #12]
 8008532:	4613      	mov	r3, r2
 8008534:	00db      	lsls	r3, r3, #3
 8008536:	1a9b      	subs	r3, r3, r2
 8008538:	009b      	lsls	r3, r3, #2
 800853a:	440b      	add	r3, r1
 800853c:	3308      	adds	r3, #8
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a22      	ldr	r2, [pc, #136]	; (80085cc <BSP_LCD_WritePixel+0xd0>)
 8008542:	2134      	movs	r1, #52	; 0x34
 8008544:	fb01 f303 	mul.w	r3, r1, r3
 8008548:	4413      	add	r3, r2
 800854a:	335c      	adds	r3, #92	; 0x5c
 800854c:	6819      	ldr	r1, [r3, #0]
 800854e:	481e      	ldr	r0, [pc, #120]	; (80085c8 <BSP_LCD_WritePixel+0xcc>)
 8008550:	68fa      	ldr	r2, [r7, #12]
 8008552:	4613      	mov	r3, r2
 8008554:	00db      	lsls	r3, r3, #3
 8008556:	1a9b      	subs	r3, r3, r2
 8008558:	009b      	lsls	r3, r3, #2
 800855a:	4403      	add	r3, r0
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	687a      	ldr	r2, [r7, #4]
 8008560:	fb02 f203 	mul.w	r2, r2, r3
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	4413      	add	r3, r2
 8008568:	009b      	lsls	r3, r3, #2
 800856a:	440b      	add	r3, r1
 800856c:	461a      	mov	r2, r3
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	6013      	str	r3, [r2, #0]
 8008572:	e021      	b.n	80085b8 <BSP_LCD_WritePixel+0xbc>
  }
  else
  {
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8008574:	4914      	ldr	r1, [pc, #80]	; (80085c8 <BSP_LCD_WritePixel+0xcc>)
 8008576:	68fa      	ldr	r2, [r7, #12]
 8008578:	4613      	mov	r3, r2
 800857a:	00db      	lsls	r3, r3, #3
 800857c:	1a9b      	subs	r3, r3, r2
 800857e:	009b      	lsls	r3, r3, #2
 8008580:	440b      	add	r3, r1
 8008582:	3308      	adds	r3, #8
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4a11      	ldr	r2, [pc, #68]	; (80085cc <BSP_LCD_WritePixel+0xd0>)
 8008588:	2134      	movs	r1, #52	; 0x34
 800858a:	fb01 f303 	mul.w	r3, r1, r3
 800858e:	4413      	add	r3, r2
 8008590:	335c      	adds	r3, #92	; 0x5c
 8008592:	6819      	ldr	r1, [r3, #0]
 8008594:	480c      	ldr	r0, [pc, #48]	; (80085c8 <BSP_LCD_WritePixel+0xcc>)
 8008596:	68fa      	ldr	r2, [r7, #12]
 8008598:	4613      	mov	r3, r2
 800859a:	00db      	lsls	r3, r3, #3
 800859c:	1a9b      	subs	r3, r3, r2
 800859e:	009b      	lsls	r3, r3, #2
 80085a0:	4403      	add	r3, r0
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	687a      	ldr	r2, [r7, #4]
 80085a6:	fb02 f203 	mul.w	r2, r2, r3
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	4413      	add	r3, r2
 80085ae:	005b      	lsls	r3, r3, #1
 80085b0:	440b      	add	r3, r1
 80085b2:	683a      	ldr	r2, [r7, #0]
 80085b4:	b292      	uxth	r2, r2
 80085b6:	801a      	strh	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
 80085b8:	2300      	movs	r3, #0
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3714      	adds	r7, #20
 80085be:	46bd      	mov	sp, r7
 80085c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c4:	4770      	bx	lr
 80085c6:	bf00      	nop
 80085c8:	24002068 	.word	0x24002068
 80085cc:	24001fc0 	.word	0x24001fc0

080085d0 <LL_FillBuffer>:
  * @param  ySize Buffer height
  * @param  OffLine Offset
  * @param  Color Color index
  */
static void LL_FillBuffer(uint32_t Instance, uint32_t *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t Color)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b088      	sub	sp, #32
 80085d4:	af02      	add	r7, sp, #8
 80085d6:	60f8      	str	r0, [r7, #12]
 80085d8:	60b9      	str	r1, [r7, #8]
 80085da:	607a      	str	r2, [r7, #4]
 80085dc:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode, input_color = Color;
 80085de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e0:	613b      	str	r3, [r7, #16]

  switch(Lcd_Ctx[Instance].PixelFormat)
 80085e2:	4932      	ldr	r1, [pc, #200]	; (80086ac <LL_FillBuffer+0xdc>)
 80085e4:	68fa      	ldr	r2, [r7, #12]
 80085e6:	4613      	mov	r3, r2
 80085e8:	00db      	lsls	r3, r3, #3
 80085ea:	1a9b      	subs	r3, r3, r2
 80085ec:	009b      	lsls	r3, r3, #2
 80085ee:	440b      	add	r3, r1
 80085f0:	330c      	adds	r3, #12
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	2b02      	cmp	r3, #2
 80085f6:	d129      	bne.n	800864c <LL_FillBuffer+0x7c>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
 80085f8:	2302      	movs	r3, #2
 80085fa:	617b      	str	r3, [r7, #20]
    input_color = CONVERTRGB5652ARGB8888(Color);
 80085fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fe:	0adb      	lsrs	r3, r3, #11
 8008600:	f003 021f 	and.w	r2, r3, #31
 8008604:	4613      	mov	r3, r2
 8008606:	011b      	lsls	r3, r3, #4
 8008608:	4413      	add	r3, r2
 800860a:	015a      	lsls	r2, r3, #5
 800860c:	1ad3      	subs	r3, r2, r3
 800860e:	3317      	adds	r3, #23
 8008610:	099b      	lsrs	r3, r3, #6
 8008612:	0419      	lsls	r1, r3, #16
 8008614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008616:	095b      	lsrs	r3, r3, #5
 8008618:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800861c:	4613      	mov	r3, r2
 800861e:	01db      	lsls	r3, r3, #7
 8008620:	4413      	add	r3, r2
 8008622:	005b      	lsls	r3, r3, #1
 8008624:	4413      	add	r3, r2
 8008626:	3321      	adds	r3, #33	; 0x21
 8008628:	099b      	lsrs	r3, r3, #6
 800862a:	021b      	lsls	r3, r3, #8
 800862c:	4319      	orrs	r1, r3
 800862e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008630:	f003 021f 	and.w	r2, r3, #31
 8008634:	4613      	mov	r3, r2
 8008636:	011b      	lsls	r3, r3, #4
 8008638:	4413      	add	r3, r2
 800863a:	015a      	lsls	r2, r3, #5
 800863c:	1ad3      	subs	r3, r2, r3
 800863e:	3317      	adds	r3, #23
 8008640:	099b      	lsrs	r3, r3, #6
 8008642:	430b      	orrs	r3, r1
 8008644:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008648:	613b      	str	r3, [r7, #16]
    break;
 800864a:	e002      	b.n	8008652 <LL_FillBuffer+0x82>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 800864c:	2300      	movs	r3, #0
 800864e:	617b      	str	r3, [r7, #20]
    break;
 8008650:	bf00      	nop
  }

  /* Register to memory mode with ARGB8888 as color Mode */
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 8008652:	4b17      	ldr	r3, [pc, #92]	; (80086b0 <LL_FillBuffer+0xe0>)
 8008654:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8008658:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 800865a:	4a15      	ldr	r2, [pc, #84]	; (80086b0 <LL_FillBuffer+0xe0>)
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
 8008660:	4a13      	ldr	r2, [pc, #76]	; (80086b0 <LL_FillBuffer+0xe0>)
 8008662:	6a3b      	ldr	r3, [r7, #32]
 8008664:	60d3      	str	r3, [r2, #12]

  hlcd_dma2d.Instance = DMA2D;
 8008666:	4b12      	ldr	r3, [pc, #72]	; (80086b0 <LL_FillBuffer+0xe0>)
 8008668:	4a12      	ldr	r2, [pc, #72]	; (80086b4 <LL_FillBuffer+0xe4>)
 800866a:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800866c:	4810      	ldr	r0, [pc, #64]	; (80086b0 <LL_FillBuffer+0xe0>)
 800866e:	f003 ffff 	bl	800c670 <HAL_DMA2D_Init>
 8008672:	4603      	mov	r3, r0
 8008674:	2b00      	cmp	r3, #0
 8008676:	d115      	bne.n	80086a4 <LL_FillBuffer+0xd4>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 8008678:	2101      	movs	r1, #1
 800867a:	480d      	ldr	r0, [pc, #52]	; (80086b0 <LL_FillBuffer+0xe0>)
 800867c:	f004 f97a 	bl	800c974 <HAL_DMA2D_ConfigLayer>
 8008680:	4603      	mov	r3, r0
 8008682:	2b00      	cmp	r3, #0
 8008684:	d10e      	bne.n	80086a4 <LL_FillBuffer+0xd4>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8008686:	68ba      	ldr	r2, [r7, #8]
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	9300      	str	r3, [sp, #0]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6939      	ldr	r1, [r7, #16]
 8008690:	4807      	ldr	r0, [pc, #28]	; (80086b0 <LL_FillBuffer+0xe0>)
 8008692:	f004 f85b 	bl	800c74c <HAL_DMA2D_Start>
 8008696:	4603      	mov	r3, r0
 8008698:	2b00      	cmp	r3, #0
 800869a:	d103      	bne.n	80086a4 <LL_FillBuffer+0xd4>
      {
        /* Polling For DMA transfer */
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 800869c:	2119      	movs	r1, #25
 800869e:	4804      	ldr	r0, [pc, #16]	; (80086b0 <LL_FillBuffer+0xe0>)
 80086a0:	f004 f87f 	bl	800c7a2 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 80086a4:	bf00      	nop
 80086a6:	3718      	adds	r7, #24
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}
 80086ac:	24002068 	.word	0x24002068
 80086b0:	240020a0 	.word	0x240020a0
 80086b4:	52001000 	.word	0x52001000

080086b8 <LL_ConvertLineToRGB>:
  * @param  pDst Output color
  * @param  xSize Buffer width
  * @param  ColorMode Input color mode
  */
static void LL_ConvertLineToRGB(uint32_t Instance, uint32_t *pSrc, uint32_t *pDst, uint32_t xSize, uint32_t ColorMode)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b088      	sub	sp, #32
 80086bc:	af02      	add	r7, sp, #8
 80086be:	60f8      	str	r0, [r7, #12]
 80086c0:	60b9      	str	r1, [r7, #8]
 80086c2:	607a      	str	r2, [r7, #4]
 80086c4:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode;

  switch(Lcd_Ctx[Instance].PixelFormat)
 80086c6:	4925      	ldr	r1, [pc, #148]	; (800875c <LL_ConvertLineToRGB+0xa4>)
 80086c8:	68fa      	ldr	r2, [r7, #12]
 80086ca:	4613      	mov	r3, r2
 80086cc:	00db      	lsls	r3, r3, #3
 80086ce:	1a9b      	subs	r3, r3, r2
 80086d0:	009b      	lsls	r3, r3, #2
 80086d2:	440b      	add	r3, r1
 80086d4:	330c      	adds	r3, #12
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	2b02      	cmp	r3, #2
 80086da:	d102      	bne.n	80086e2 <LL_ConvertLineToRGB+0x2a>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
 80086dc:	2302      	movs	r3, #2
 80086de:	617b      	str	r3, [r7, #20]
    break;
 80086e0:	e002      	b.n	80086e8 <LL_ConvertLineToRGB+0x30>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 80086e2:	2300      	movs	r3, #0
 80086e4:	617b      	str	r3, [r7, #20]
    break;
 80086e6:	bf00      	nop
  }

  /* Configure the DMA2D Mode, Color Mode and output offset */
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 80086e8:	4b1d      	ldr	r3, [pc, #116]	; (8008760 <LL_ConvertLineToRGB+0xa8>)
 80086ea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80086ee:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 80086f0:	4a1b      	ldr	r2, [pc, #108]	; (8008760 <LL_ConvertLineToRGB+0xa8>)
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = 0;
 80086f6:	4b1a      	ldr	r3, [pc, #104]	; (8008760 <LL_ConvertLineToRGB+0xa8>)
 80086f8:	2200      	movs	r2, #0
 80086fa:	60da      	str	r2, [r3, #12]

  /* Foreground Configuration */
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80086fc:	4b18      	ldr	r3, [pc, #96]	; (8008760 <LL_ConvertLineToRGB+0xa8>)
 80086fe:	2200      	movs	r2, #0
 8008700:	64da      	str	r2, [r3, #76]	; 0x4c
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 8008702:	4b17      	ldr	r3, [pc, #92]	; (8008760 <LL_ConvertLineToRGB+0xa8>)
 8008704:	22ff      	movs	r2, #255	; 0xff
 8008706:	651a      	str	r2, [r3, #80]	; 0x50
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
 8008708:	4a15      	ldr	r2, [pc, #84]	; (8008760 <LL_ConvertLineToRGB+0xa8>)
 800870a:	6a3b      	ldr	r3, [r7, #32]
 800870c:	6493      	str	r3, [r2, #72]	; 0x48
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 800870e:	4b14      	ldr	r3, [pc, #80]	; (8008760 <LL_ConvertLineToRGB+0xa8>)
 8008710:	2200      	movs	r2, #0
 8008712:	645a      	str	r2, [r3, #68]	; 0x44

  hlcd_dma2d.Instance = DMA2D;
 8008714:	4b12      	ldr	r3, [pc, #72]	; (8008760 <LL_ConvertLineToRGB+0xa8>)
 8008716:	4a13      	ldr	r2, [pc, #76]	; (8008764 <LL_ConvertLineToRGB+0xac>)
 8008718:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800871a:	4811      	ldr	r0, [pc, #68]	; (8008760 <LL_ConvertLineToRGB+0xa8>)
 800871c:	f003 ffa8 	bl	800c670 <HAL_DMA2D_Init>
 8008720:	4603      	mov	r3, r0
 8008722:	2b00      	cmp	r3, #0
 8008724:	d115      	bne.n	8008752 <LL_ConvertLineToRGB+0x9a>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 8008726:	2101      	movs	r1, #1
 8008728:	480d      	ldr	r0, [pc, #52]	; (8008760 <LL_ConvertLineToRGB+0xa8>)
 800872a:	f004 f923 	bl	800c974 <HAL_DMA2D_ConfigLayer>
 800872e:	4603      	mov	r3, r0
 8008730:	2b00      	cmp	r3, #0
 8008732:	d10e      	bne.n	8008752 <LL_ConvertLineToRGB+0x9a>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8008734:	68b9      	ldr	r1, [r7, #8]
 8008736:	687a      	ldr	r2, [r7, #4]
 8008738:	2301      	movs	r3, #1
 800873a:	9300      	str	r3, [sp, #0]
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	4808      	ldr	r0, [pc, #32]	; (8008760 <LL_ConvertLineToRGB+0xa8>)
 8008740:	f004 f804 	bl	800c74c <HAL_DMA2D_Start>
 8008744:	4603      	mov	r3, r0
 8008746:	2b00      	cmp	r3, #0
 8008748:	d103      	bne.n	8008752 <LL_ConvertLineToRGB+0x9a>
      {
        /* Polling For DMA transfer */
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 800874a:	2132      	movs	r1, #50	; 0x32
 800874c:	4804      	ldr	r0, [pc, #16]	; (8008760 <LL_ConvertLineToRGB+0xa8>)
 800874e:	f004 f828 	bl	800c7a2 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8008752:	bf00      	nop
 8008754:	3718      	adds	r7, #24
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}
 800875a:	bf00      	nop
 800875c:	24002068 	.word	0x24002068
 8008760:	240020a0 	.word	0x240020a0
 8008764:	52001000 	.word	0x52001000

08008768 <LTDC_MspInit>:
  * @brief  Initialize the BSP LTDC Msp.
  * @param  hltdc  LTDC handle
  * @retval None
  */
static void LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8008768:	b480      	push	{r7}
 800876a:	b085      	sub	sp, #20
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance == LTDC)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a13      	ldr	r2, [pc, #76]	; (80087c4 <LTDC_MspInit+0x5c>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d11e      	bne.n	80087b8 <LTDC_MspInit+0x50>
  {
    /** Enable the LTDC clock */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800877a:	4b13      	ldr	r3, [pc, #76]	; (80087c8 <LTDC_MspInit+0x60>)
 800877c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008780:	4a11      	ldr	r2, [pc, #68]	; (80087c8 <LTDC_MspInit+0x60>)
 8008782:	f043 0308 	orr.w	r3, r3, #8
 8008786:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800878a:	4b0f      	ldr	r3, [pc, #60]	; (80087c8 <LTDC_MspInit+0x60>)
 800878c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008790:	f003 0308 	and.w	r3, r3, #8
 8008794:	60fb      	str	r3, [r7, #12]
 8008796:	68fb      	ldr	r3, [r7, #12]


    /** Toggle Sw reset of LTDC IP */
    __HAL_RCC_LTDC_FORCE_RESET();
 8008798:	4b0b      	ldr	r3, [pc, #44]	; (80087c8 <LTDC_MspInit+0x60>)
 800879a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800879e:	4a0a      	ldr	r2, [pc, #40]	; (80087c8 <LTDC_MspInit+0x60>)
 80087a0:	f043 0308 	orr.w	r3, r3, #8
 80087a4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
 80087a8:	4b07      	ldr	r3, [pc, #28]	; (80087c8 <LTDC_MspInit+0x60>)
 80087aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80087ae:	4a06      	ldr	r2, [pc, #24]	; (80087c8 <LTDC_MspInit+0x60>)
 80087b0:	f023 0308 	bic.w	r3, r3, #8
 80087b4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }
}
 80087b8:	bf00      	nop
 80087ba:	3714      	adds	r7, #20
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr
 80087c4:	50001000 	.word	0x50001000
 80087c8:	58024400 	.word	0x58024400

080087cc <DMA2D_MspInit>:
  * @brief  Initialize the BSP DMA2D Msp.
  * @param  hdma2d  DMA2D handle
  * @retval None
  */
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b085      	sub	sp, #20
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance == DMA2D)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4a11      	ldr	r2, [pc, #68]	; (8008820 <DMA2D_MspInit+0x54>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d11a      	bne.n	8008814 <DMA2D_MspInit+0x48>
  {
    /** Enable the DMA2D clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80087de:	4b11      	ldr	r3, [pc, #68]	; (8008824 <DMA2D_MspInit+0x58>)
 80087e0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80087e4:	4a0f      	ldr	r2, [pc, #60]	; (8008824 <DMA2D_MspInit+0x58>)
 80087e6:	f043 0310 	orr.w	r3, r3, #16
 80087ea:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80087ee:	4b0d      	ldr	r3, [pc, #52]	; (8008824 <DMA2D_MspInit+0x58>)
 80087f0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80087f4:	f003 0310 	and.w	r3, r3, #16
 80087f8:	60fb      	str	r3, [r7, #12]
 80087fa:	68fb      	ldr	r3, [r7, #12]

    /** Toggle Sw reset of DMA2D IP */
    __HAL_RCC_DMA2D_FORCE_RESET();
 80087fc:	4b09      	ldr	r3, [pc, #36]	; (8008824 <DMA2D_MspInit+0x58>)
 80087fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008800:	4a08      	ldr	r2, [pc, #32]	; (8008824 <DMA2D_MspInit+0x58>)
 8008802:	f043 0310 	orr.w	r3, r3, #16
 8008806:	67d3      	str	r3, [r2, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8008808:	4b06      	ldr	r3, [pc, #24]	; (8008824 <DMA2D_MspInit+0x58>)
 800880a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800880c:	4a05      	ldr	r2, [pc, #20]	; (8008824 <DMA2D_MspInit+0x58>)
 800880e:	f023 0310 	bic.w	r3, r3, #16
 8008812:	67d3      	str	r3, [r2, #124]	; 0x7c
  }
}
 8008814:	bf00      	nop
 8008816:	3714      	adds	r7, #20
 8008818:	46bd      	mov	sp, r7
 800881a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881e:	4770      	bx	lr
 8008820:	52001000 	.word	0x52001000
 8008824:	58024400 	.word	0x58024400

08008828 <DSI_MspInit>:
  * @brief  Initialize the BSP DSI Msp.
  * @param  hdsi  DSI handle
  * @retval None
  */
static void DSI_MspInit(DSI_HandleTypeDef *hdsi)
{
 8008828:	b480      	push	{r7}
 800882a:	b085      	sub	sp, #20
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  if(hdsi->Instance == DSI)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008838:	d11e      	bne.n	8008878 <DSI_MspInit+0x50>
  {
    /** Enable DSI Host and wrapper clocks */
    __HAL_RCC_DSI_CLK_ENABLE();
 800883a:	4b12      	ldr	r3, [pc, #72]	; (8008884 <DSI_MspInit+0x5c>)
 800883c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008840:	4a10      	ldr	r2, [pc, #64]	; (8008884 <DSI_MspInit+0x5c>)
 8008842:	f043 0310 	orr.w	r3, r3, #16
 8008846:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800884a:	4b0e      	ldr	r3, [pc, #56]	; (8008884 <DSI_MspInit+0x5c>)
 800884c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008850:	f003 0310 	and.w	r3, r3, #16
 8008854:	60fb      	str	r3, [r7, #12]
 8008856:	68fb      	ldr	r3, [r7, #12]

    /** Soft Reset the DSI Host and wrapper */
    __HAL_RCC_DSI_FORCE_RESET();
 8008858:	4b0a      	ldr	r3, [pc, #40]	; (8008884 <DSI_MspInit+0x5c>)
 800885a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800885e:	4a09      	ldr	r2, [pc, #36]	; (8008884 <DSI_MspInit+0x5c>)
 8008860:	f043 0310 	orr.w	r3, r3, #16
 8008864:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_DSI_RELEASE_RESET();
 8008868:	4b06      	ldr	r3, [pc, #24]	; (8008884 <DSI_MspInit+0x5c>)
 800886a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800886e:	4a05      	ldr	r2, [pc, #20]	; (8008884 <DSI_MspInit+0x5c>)
 8008870:	f023 0310 	bic.w	r3, r3, #16
 8008874:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }
}
 8008878:	bf00      	nop
 800887a:	3714      	adds	r7, #20
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr
 8008884:	58024400 	.word	0x58024400

08008888 <DSI_IO_Write>:
  * @param  pData pointer to a buffer of data to be write
  * @param  Size To precise command to be used (short or long)
  * @retval BSP status
  */
static int32_t DSI_IO_Write(uint16_t ChannelNbr, uint16_t Reg, uint8_t *pData, uint16_t Size)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b088      	sub	sp, #32
 800888c:	af02      	add	r7, sp, #8
 800888e:	60ba      	str	r2, [r7, #8]
 8008890:	461a      	mov	r2, r3
 8008892:	4603      	mov	r3, r0
 8008894:	81fb      	strh	r3, [r7, #14]
 8008896:	460b      	mov	r3, r1
 8008898:	81bb      	strh	r3, [r7, #12]
 800889a:	4613      	mov	r3, r2
 800889c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800889e:	2300      	movs	r3, #0
 80088a0:	617b      	str	r3, [r7, #20]

  if(Size <= 1U)
 80088a2:	88fb      	ldrh	r3, [r7, #6]
 80088a4:	2b01      	cmp	r3, #1
 80088a6:	d812      	bhi.n	80088ce <DSI_IO_Write+0x46>
  {
    if(HAL_DSI_ShortWrite(&hlcd_dsi, ChannelNbr, DSI_DCS_SHORT_PKT_WRITE_P1, Reg, (uint32_t)pData[Size]) != HAL_OK)
 80088a8:	89f9      	ldrh	r1, [r7, #14]
 80088aa:	89b8      	ldrh	r0, [r7, #12]
 80088ac:	88fb      	ldrh	r3, [r7, #6]
 80088ae:	68ba      	ldr	r2, [r7, #8]
 80088b0:	4413      	add	r3, r2
 80088b2:	781b      	ldrb	r3, [r3, #0]
 80088b4:	9300      	str	r3, [sp, #0]
 80088b6:	4603      	mov	r3, r0
 80088b8:	2215      	movs	r2, #21
 80088ba:	4810      	ldr	r0, [pc, #64]	; (80088fc <DSI_IO_Write+0x74>)
 80088bc:	f004 fd84 	bl	800d3c8 <HAL_DSI_ShortWrite>
 80088c0:	4603      	mov	r3, r0
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d014      	beq.n	80088f0 <DSI_IO_Write+0x68>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 80088c6:	f06f 0307 	mvn.w	r3, #7
 80088ca:	617b      	str	r3, [r7, #20]
 80088cc:	e010      	b.n	80088f0 <DSI_IO_Write+0x68>
    }
  }
  else
  {
    if(HAL_DSI_LongWrite(&hlcd_dsi, ChannelNbr, DSI_DCS_LONG_PKT_WRITE, Size, (uint32_t)Reg, pData) != HAL_OK)
 80088ce:	89f9      	ldrh	r1, [r7, #14]
 80088d0:	88f8      	ldrh	r0, [r7, #6]
 80088d2:	89bb      	ldrh	r3, [r7, #12]
 80088d4:	68ba      	ldr	r2, [r7, #8]
 80088d6:	9201      	str	r2, [sp, #4]
 80088d8:	9300      	str	r3, [sp, #0]
 80088da:	4603      	mov	r3, r0
 80088dc:	2239      	movs	r2, #57	; 0x39
 80088de:	4807      	ldr	r0, [pc, #28]	; (80088fc <DSI_IO_Write+0x74>)
 80088e0:	f004 fd94 	bl	800d40c <HAL_DSI_LongWrite>
 80088e4:	4603      	mov	r3, r0
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d002      	beq.n	80088f0 <DSI_IO_Write+0x68>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 80088ea:	f06f 0307 	mvn.w	r3, #7
 80088ee:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80088f0:	697b      	ldr	r3, [r7, #20]
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3718      	adds	r7, #24
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}
 80088fa:	bf00      	nop
 80088fc:	24002084 	.word	0x24002084

08008900 <DSI_IO_Read>:
  * @param  pData pointer to a buffer to store the payload of a read back operation.
  * @param  Size  Data size to be read (in byte).
  * @retval BSP status
  */
static int32_t DSI_IO_Read(uint16_t ChannelNbr, uint16_t Reg, uint8_t *pData, uint16_t Size)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b08a      	sub	sp, #40	; 0x28
 8008904:	af04      	add	r7, sp, #16
 8008906:	60ba      	str	r2, [r7, #8]
 8008908:	461a      	mov	r2, r3
 800890a:	4603      	mov	r3, r0
 800890c:	81fb      	strh	r3, [r7, #14]
 800890e:	460b      	mov	r3, r1
 8008910:	81bb      	strh	r3, [r7, #12]
 8008912:	4613      	mov	r3, r2
 8008914:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8008916:	2300      	movs	r3, #0
 8008918:	617b      	str	r3, [r7, #20]

  if(HAL_DSI_Read(&hlcd_dsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 800891a:	89f9      	ldrh	r1, [r7, #14]
 800891c:	88f8      	ldrh	r0, [r7, #6]
 800891e:	89bb      	ldrh	r3, [r7, #12]
 8008920:	68ba      	ldr	r2, [r7, #8]
 8008922:	9202      	str	r2, [sp, #8]
 8008924:	9301      	str	r3, [sp, #4]
 8008926:	2306      	movs	r3, #6
 8008928:	9300      	str	r3, [sp, #0]
 800892a:	4603      	mov	r3, r0
 800892c:	68ba      	ldr	r2, [r7, #8]
 800892e:	4807      	ldr	r0, [pc, #28]	; (800894c <DSI_IO_Read+0x4c>)
 8008930:	f004 fe04 	bl	800d53c <HAL_DSI_Read>
 8008934:	4603      	mov	r3, r0
 8008936:	2b00      	cmp	r3, #0
 8008938:	d002      	beq.n	8008940 <DSI_IO_Read+0x40>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 800893a:	f06f 0307 	mvn.w	r3, #7
 800893e:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8008940:	697b      	ldr	r3, [r7, #20]
}
 8008942:	4618      	mov	r0, r3
 8008944:	3718      	adds	r7, #24
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}
 800894a:	bf00      	nop
 800894c:	24002084 	.word	0x24002084

08008950 <OTM8009A_Probe>:
/**
  * @brief  Register Bus IOs if component ID is OK
  * @retval error status
  */
static int32_t OTM8009A_Probe(uint32_t ColorCoding, uint32_t Orientation)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b088      	sub	sp, #32
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	6039      	str	r1, [r7, #0]
  uint32_t id;
  OTM8009A_IO_t              IOCtx;
  static OTM8009A_Object_t   OTM8009AObj;

  /* Configure the audio driver */
  IOCtx.Address     = 0;
 800895a:	2300      	movs	r3, #0
 800895c:	813b      	strh	r3, [r7, #8]
  IOCtx.GetTick     = BSP_GetTick;
 800895e:	4b1f      	ldr	r3, [pc, #124]	; (80089dc <OTM8009A_Probe+0x8c>)
 8008960:	617b      	str	r3, [r7, #20]
  IOCtx.WriteReg    = DSI_IO_Write;
 8008962:	4b1f      	ldr	r3, [pc, #124]	; (80089e0 <OTM8009A_Probe+0x90>)
 8008964:	60fb      	str	r3, [r7, #12]
  IOCtx.ReadReg     = DSI_IO_Read;
 8008966:	4b1f      	ldr	r3, [pc, #124]	; (80089e4 <OTM8009A_Probe+0x94>)
 8008968:	613b      	str	r3, [r7, #16]

  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 800896a:	f107 0308 	add.w	r3, r7, #8
 800896e:	4619      	mov	r1, r3
 8008970:	481d      	ldr	r0, [pc, #116]	; (80089e8 <OTM8009A_Probe+0x98>)
 8008972:	f7f9 fd31 	bl	80023d8 <OTM8009A_RegisterBusIO>
 8008976:	4603      	mov	r3, r0
 8008978:	2b00      	cmp	r3, #0
 800897a:	d003      	beq.n	8008984 <OTM8009A_Probe+0x34>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 800897c:	f06f 0307 	mvn.w	r3, #7
 8008980:	61fb      	str	r3, [r7, #28]
 8008982:	e025      	b.n	80089d0 <OTM8009A_Probe+0x80>
  }
  else
  {
    Lcd_CompObj = &OTM8009AObj;
 8008984:	4b19      	ldr	r3, [pc, #100]	; (80089ec <OTM8009A_Probe+0x9c>)
 8008986:	4a18      	ldr	r2, [pc, #96]	; (80089e8 <OTM8009A_Probe+0x98>)
 8008988:	601a      	str	r2, [r3, #0]

    if(OTM8009A_ReadID(Lcd_CompObj, &id) != OTM8009A_OK)
 800898a:	4b18      	ldr	r3, [pc, #96]	; (80089ec <OTM8009A_Probe+0x9c>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f107 0218 	add.w	r2, r7, #24
 8008992:	4611      	mov	r1, r2
 8008994:	4618      	mov	r0, r3
 8008996:	f7fa fb23 	bl	8002fe0 <OTM8009A_ReadID>
 800899a:	4603      	mov	r3, r0
 800899c:	2b00      	cmp	r3, #0
 800899e:	d003      	beq.n	80089a8 <OTM8009A_Probe+0x58>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80089a0:	f06f 0304 	mvn.w	r3, #4
 80089a4:	61fb      	str	r3, [r7, #28]
 80089a6:	e013      	b.n	80089d0 <OTM8009A_Probe+0x80>
    }

    else
    {
      Lcd_Drv = (LCD_Drv_t *)(void *) &OTM8009A_LCD_Driver;
 80089a8:	4b11      	ldr	r3, [pc, #68]	; (80089f0 <OTM8009A_Probe+0xa0>)
 80089aa:	4a12      	ldr	r2, [pc, #72]	; (80089f4 <OTM8009A_Probe+0xa4>)
 80089ac:	601a      	str	r2, [r3, #0]
      if(Lcd_Drv->Init(Lcd_CompObj, ColorCoding, Orientation) != OTM8009A_OK)
 80089ae:	4b10      	ldr	r3, [pc, #64]	; (80089f0 <OTM8009A_Probe+0xa0>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	4a0d      	ldr	r2, [pc, #52]	; (80089ec <OTM8009A_Probe+0x9c>)
 80089b6:	6810      	ldr	r0, [r2, #0]
 80089b8:	683a      	ldr	r2, [r7, #0]
 80089ba:	6879      	ldr	r1, [r7, #4]
 80089bc:	4798      	blx	r3
 80089be:	4603      	mov	r3, r0
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d003      	beq.n	80089cc <OTM8009A_Probe+0x7c>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80089c4:	f06f 0304 	mvn.w	r3, #4
 80089c8:	61fb      	str	r3, [r7, #28]
 80089ca:	e001      	b.n	80089d0 <OTM8009A_Probe+0x80>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80089cc:	2300      	movs	r3, #0
 80089ce:	61fb      	str	r3, [r7, #28]
      }
    }
  }
  return ret;
 80089d0:	69fb      	ldr	r3, [r7, #28]
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3720      	adds	r7, #32
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}
 80089da:	bf00      	nop
 80089dc:	080070f9 	.word	0x080070f9
 80089e0:	08008889 	.word	0x08008889
 80089e4:	08008901 	.word	0x08008901
 80089e8:	2400130c 	.word	0x2400130c
 80089ec:	240012e0 	.word	0x240012e0
 80089f0:	240012dc 	.word	0x240012dc
 80089f4:	24000000 	.word	0x24000000

080089f8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd  SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b082      	sub	sp, #8
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback((hsd == &hsd_sdmmc[0]) ? 0UL : 1UL);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	4a06      	ldr	r2, [pc, #24]	; (8008a1c <HAL_SD_TxCpltCallback+0x24>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	bf14      	ite	ne
 8008a08:	2301      	movne	r3, #1
 8008a0a:	2300      	moveq	r3, #0
 8008a0c:	b2db      	uxtb	r3, r3
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f00c f89c 	bl	8014b4c <BSP_SD_WriteCpltCallback>
}
 8008a14:	bf00      	nop
 8008a16:	3708      	adds	r7, #8
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}
 8008a1c:	24002108 	.word	0x24002108

08008a20 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd  SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b082      	sub	sp, #8
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback((hsd == &hsd_sdmmc[0]) ? 0UL : 1UL);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	4a06      	ldr	r2, [pc, #24]	; (8008a44 <HAL_SD_RxCpltCallback+0x24>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	bf14      	ite	ne
 8008a30:	2301      	movne	r3, #1
 8008a32:	2300      	moveq	r3, #0
 8008a34:	b2db      	uxtb	r3, r3
 8008a36:	4618      	mov	r0, r3
 8008a38:	f00c f898 	bl	8014b6c <BSP_SD_ReadCpltCallback>
}
 8008a3c:	bf00      	nop
 8008a3e:	3708      	adds	r7, #8
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}
 8008a44:	24002108 	.word	0x24002108

08008a48 <BSP_SD_IRQHandler>:
  * @brief  This function handles SDMMC interrupt requests.
  * @param  Instance  SD Instance
  * @retval None
  */
void BSP_SD_IRQHandler(uint32_t Instance)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b082      	sub	sp, #8
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  HAL_SD_IRQHandler(&hsd_sdmmc[Instance]);
 8008a50:	687a      	ldr	r2, [r7, #4]
 8008a52:	4613      	mov	r3, r2
 8008a54:	015b      	lsls	r3, r3, #5
 8008a56:	1a9b      	subs	r3, r3, r2
 8008a58:	009b      	lsls	r3, r3, #2
 8008a5a:	4a04      	ldr	r2, [pc, #16]	; (8008a6c <BSP_SD_IRQHandler+0x24>)
 8008a5c:	4413      	add	r3, r2
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f00a fd9a 	bl	8013598 <HAL_SD_IRQHandler>
}
 8008a64:	bf00      	nop
 8008a66:	3708      	adds	r7, #8
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}
 8008a6c:	24002108 	.word	0x24002108

08008a70 <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_Init(uint32_t Instance)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b084      	sub	sp, #16
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  int32_t ret;
  static IS42S32800J_Context_t pRegMode;

  if(Instance >=SDRAM_INSTANCES_NBR)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d003      	beq.n	8008a86 <BSP_SDRAM_Init+0x16>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 8008a7e:	f06f 0301 	mvn.w	r3, #1
 8008a82:	60fb      	str	r3, [r7, #12]
 8008a84:	e033      	b.n	8008aee <BSP_SDRAM_Init+0x7e>
          return BSP_ERROR_PERIPH_FAILURE;
        }
      }
#else
      /* Msp SDRAM initialization */
      SDRAM_MspInit(&hsdram[0]);
 8008a86:	481c      	ldr	r0, [pc, #112]	; (8008af8 <BSP_SDRAM_Init+0x88>)
 8008a88:	f000 f89a 	bl	8008bc0 <SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

    if(MX_SDRAM_Init(&hsdram[0]) != HAL_OK)
 8008a8c:	481a      	ldr	r0, [pc, #104]	; (8008af8 <BSP_SDRAM_Init+0x88>)
 8008a8e:	f000 f837 	bl	8008b00 <MX_SDRAM_Init>
 8008a92:	4603      	mov	r3, r0
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d003      	beq.n	8008aa0 <BSP_SDRAM_Init+0x30>
    {
      ret = BSP_ERROR_NO_INIT;
 8008a98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008a9c:	60fb      	str	r3, [r7, #12]
 8008a9e:	e026      	b.n	8008aee <BSP_SDRAM_Init+0x7e>
    }
    else
    {
      /* External memory mode register configuration */
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 8008aa0:	4b16      	ldr	r3, [pc, #88]	; (8008afc <BSP_SDRAM_Init+0x8c>)
 8008aa2:	2208      	movs	r2, #8
 8008aa4:	601a      	str	r2, [r3, #0]
      pRegMode.RefreshMode     = IS42S32800J_AUTOREFRESH_MODE_CMD;
 8008aa6:	4b15      	ldr	r3, [pc, #84]	; (8008afc <BSP_SDRAM_Init+0x8c>)
 8008aa8:	2203      	movs	r2, #3
 8008aaa:	605a      	str	r2, [r3, #4]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 8008aac:	4b13      	ldr	r3, [pc, #76]	; (8008afc <BSP_SDRAM_Init+0x8c>)
 8008aae:	f240 6203 	movw	r2, #1539	; 0x603
 8008ab2:	609a      	str	r2, [r3, #8]
      pRegMode.BurstLength     = IS42S32800J_BURST_LENGTH_1;
 8008ab4:	4b11      	ldr	r3, [pc, #68]	; (8008afc <BSP_SDRAM_Init+0x8c>)
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	60da      	str	r2, [r3, #12]
      pRegMode.BurstType       = IS42S32800J_BURST_TYPE_SEQUENTIAL;
 8008aba:	4b10      	ldr	r3, [pc, #64]	; (8008afc <BSP_SDRAM_Init+0x8c>)
 8008abc:	2200      	movs	r2, #0
 8008abe:	611a      	str	r2, [r3, #16]
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 8008ac0:	4b0e      	ldr	r3, [pc, #56]	; (8008afc <BSP_SDRAM_Init+0x8c>)
 8008ac2:	2230      	movs	r2, #48	; 0x30
 8008ac4:	615a      	str	r2, [r3, #20]
      pRegMode.OperationMode   = IS42S32800J_OPERATING_MODE_STANDARD;
 8008ac6:	4b0d      	ldr	r3, [pc, #52]	; (8008afc <BSP_SDRAM_Init+0x8c>)
 8008ac8:	2200      	movs	r2, #0
 8008aca:	619a      	str	r2, [r3, #24]
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 8008acc:	4b0b      	ldr	r3, [pc, #44]	; (8008afc <BSP_SDRAM_Init+0x8c>)
 8008ace:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ad2:	61da      	str	r2, [r3, #28]

      /* SDRAM initialization sequence */
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 8008ad4:	4909      	ldr	r1, [pc, #36]	; (8008afc <BSP_SDRAM_Init+0x8c>)
 8008ad6:	4808      	ldr	r0, [pc, #32]	; (8008af8 <BSP_SDRAM_Init+0x88>)
 8008ad8:	f7f9 fb73 	bl	80021c2 <IS42S32800J_Init>
 8008adc:	4603      	mov	r3, r0
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d003      	beq.n	8008aea <BSP_SDRAM_Init+0x7a>
      {
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 8008ae2:	f06f 0304 	mvn.w	r3, #4
 8008ae6:	60fb      	str	r3, [r7, #12]
 8008ae8:	e001      	b.n	8008aee <BSP_SDRAM_Init+0x7e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008aea:	2300      	movs	r3, #0
 8008aec:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 8008aee:	68fb      	ldr	r3, [r7, #12]
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3710      	adds	r7, #16
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}
 8008af8:	2400218c 	.word	0x2400218c
 8008afc:	2400132c 	.word	0x2400132c

08008b00 <MX_SDRAM_Init>:
  * @param  hSdram SDRAM handle
  * @retval HAL status
  */

__weak HAL_StatusTypeDef MX_SDRAM_Init(SDRAM_HandleTypeDef *hSdram)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b08a      	sub	sp, #40	; 0x28
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hSdram->Instance = FMC_SDRAM_DEVICE;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	4a20      	ldr	r2, [pc, #128]	; (8008b8c <MX_SDRAM_Init+0x8c>)
 8008b0c:	601a      	str	r2, [r3, #0]

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2201      	movs	r2, #1
 8008b12:	605a      	str	r2, [r3, #4]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2201      	movs	r2, #1
 8008b18:	609a      	str	r2, [r3, #8]
  hSdram->Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2204      	movs	r2, #4
 8008b1e:	60da      	str	r2, [r3, #12]
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2220      	movs	r2, #32
 8008b24:	611a      	str	r2, [r3, #16]
  hSdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2240      	movs	r2, #64	; 0x40
 8008b2a:	615a      	str	r2, [r3, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8008b32:	619a      	str	r2, [r3, #24]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2200      	movs	r2, #0
 8008b38:	61da      	str	r2, [r3, #28]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008b40:	621a      	str	r2, [r3, #32]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008b48:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8008b4a:	4b11      	ldr	r3, [pc, #68]	; (8008b90 <MX_SDRAM_Init+0x90>)
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Timing configuration for 100Mhz as SDRAM clock frequency (System clock is up to 200Mhz) */
  sdram_timing.LoadToActiveDelay    = 2;
 8008b50:	2302      	movs	r3, #2
 8008b52:	60fb      	str	r3, [r7, #12]
  sdram_timing.ExitSelfRefreshDelay = 7;
 8008b54:	2307      	movs	r3, #7
 8008b56:	613b      	str	r3, [r7, #16]
  sdram_timing.SelfRefreshTime      = 4;
 8008b58:	2304      	movs	r3, #4
 8008b5a:	617b      	str	r3, [r7, #20]
  sdram_timing.RowCycleDelay        = 7;
 8008b5c:	2307      	movs	r3, #7
 8008b5e:	61bb      	str	r3, [r7, #24]
  sdram_timing.WriteRecoveryTime    = 2;
 8008b60:	2302      	movs	r3, #2
 8008b62:	61fb      	str	r3, [r7, #28]
  sdram_timing.RPDelay              = 2;
 8008b64:	2302      	movs	r3, #2
 8008b66:	623b      	str	r3, [r7, #32]
  sdram_timing.RCDDelay             = 2;
 8008b68:	2302      	movs	r3, #2
 8008b6a:	627b      	str	r3, [r7, #36]	; 0x24

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8008b6c:	f107 030c 	add.w	r3, r7, #12
 8008b70:	4619      	mov	r1, r3
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f00a ff88 	bl	8013a88 <HAL_SDRAM_Init>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d001      	beq.n	8008b82 <MX_SDRAM_Init+0x82>
  {
    return  HAL_ERROR;
 8008b7e:	2301      	movs	r3, #1
 8008b80:	e000      	b.n	8008b84 <MX_SDRAM_Init+0x84>
  }
  return HAL_OK;
 8008b82:	2300      	movs	r3, #0
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3728      	adds	r7, #40	; 0x28
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}
 8008b8c:	52004140 	.word	0x52004140
 8008b90:	2400218c 	.word	0x2400218c

08008b94 <BSP_SDRAM_IRQHandler>:
/**
  * @brief  This function handles MDMA_MDMA_Channel0 for SDRAM interrupt request.
  * @retval None
  */
void BSP_SDRAM_IRQHandler(uint32_t Instance)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b082      	sub	sp, #8
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);

  HAL_MDMA_IRQHandler(hsdram[Instance].hmdma);
 8008b9c:	4a07      	ldr	r2, [pc, #28]	; (8008bbc <BSP_SDRAM_IRQHandler+0x28>)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2134      	movs	r1, #52	; 0x34
 8008ba2:	fb01 f303 	mul.w	r3, r1, r3
 8008ba6:	4413      	add	r3, r2
 8008ba8:	3330      	adds	r3, #48	; 0x30
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	4618      	mov	r0, r3
 8008bae:	f006 f9f7 	bl	800efa0 <HAL_MDMA_IRQHandler>
}
 8008bb2:	bf00      	nop
 8008bb4:	3708      	adds	r7, #8
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}
 8008bba:	bf00      	nop
 8008bbc:	2400218c 	.word	0x2400218c

08008bc0 <SDRAM_MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  hsdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b090      	sub	sp, #64	; 0x40
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8008bc8:	4b7f      	ldr	r3, [pc, #508]	; (8008dc8 <SDRAM_MspInit+0x208>)
 8008bca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8008bce:	4a7e      	ldr	r2, [pc, #504]	; (8008dc8 <SDRAM_MspInit+0x208>)
 8008bd0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008bd4:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8008bd8:	4b7b      	ldr	r3, [pc, #492]	; (8008dc8 <SDRAM_MspInit+0x208>)
 8008bda:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8008bde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008be2:	62bb      	str	r3, [r7, #40]	; 0x28
 8008be4:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen MDMAx clock */
  SDRAM_MDMAx_CLK_ENABLE();
 8008be6:	4b78      	ldr	r3, [pc, #480]	; (8008dc8 <SDRAM_MspInit+0x208>)
 8008be8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8008bec:	4a76      	ldr	r2, [pc, #472]	; (8008dc8 <SDRAM_MspInit+0x208>)
 8008bee:	f043 0301 	orr.w	r3, r3, #1
 8008bf2:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8008bf6:	4b74      	ldr	r3, [pc, #464]	; (8008dc8 <SDRAM_MspInit+0x208>)
 8008bf8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8008bfc:	f003 0301 	and.w	r3, r3, #1
 8008c00:	627b      	str	r3, [r7, #36]	; 0x24
 8008c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008c04:	4b70      	ldr	r3, [pc, #448]	; (8008dc8 <SDRAM_MspInit+0x208>)
 8008c06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008c0a:	4a6f      	ldr	r2, [pc, #444]	; (8008dc8 <SDRAM_MspInit+0x208>)
 8008c0c:	f043 0308 	orr.w	r3, r3, #8
 8008c10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008c14:	4b6c      	ldr	r3, [pc, #432]	; (8008dc8 <SDRAM_MspInit+0x208>)
 8008c16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008c1a:	f003 0308 	and.w	r3, r3, #8
 8008c1e:	623b      	str	r3, [r7, #32]
 8008c20:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8008c22:	4b69      	ldr	r3, [pc, #420]	; (8008dc8 <SDRAM_MspInit+0x208>)
 8008c24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008c28:	4a67      	ldr	r2, [pc, #412]	; (8008dc8 <SDRAM_MspInit+0x208>)
 8008c2a:	f043 0310 	orr.w	r3, r3, #16
 8008c2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008c32:	4b65      	ldr	r3, [pc, #404]	; (8008dc8 <SDRAM_MspInit+0x208>)
 8008c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008c38:	f003 0310 	and.w	r3, r3, #16
 8008c3c:	61fb      	str	r3, [r7, #28]
 8008c3e:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8008c40:	4b61      	ldr	r3, [pc, #388]	; (8008dc8 <SDRAM_MspInit+0x208>)
 8008c42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008c46:	4a60      	ldr	r2, [pc, #384]	; (8008dc8 <SDRAM_MspInit+0x208>)
 8008c48:	f043 0320 	orr.w	r3, r3, #32
 8008c4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008c50:	4b5d      	ldr	r3, [pc, #372]	; (8008dc8 <SDRAM_MspInit+0x208>)
 8008c52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008c56:	f003 0320 	and.w	r3, r3, #32
 8008c5a:	61bb      	str	r3, [r7, #24]
 8008c5c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8008c5e:	4b5a      	ldr	r3, [pc, #360]	; (8008dc8 <SDRAM_MspInit+0x208>)
 8008c60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008c64:	4a58      	ldr	r2, [pc, #352]	; (8008dc8 <SDRAM_MspInit+0x208>)
 8008c66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008c6e:	4b56      	ldr	r3, [pc, #344]	; (8008dc8 <SDRAM_MspInit+0x208>)
 8008c70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c78:	617b      	str	r3, [r7, #20]
 8008c7a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008c7c:	4b52      	ldr	r3, [pc, #328]	; (8008dc8 <SDRAM_MspInit+0x208>)
 8008c7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008c82:	4a51      	ldr	r2, [pc, #324]	; (8008dc8 <SDRAM_MspInit+0x208>)
 8008c84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008c8c:	4b4e      	ldr	r3, [pc, #312]	; (8008dc8 <SDRAM_MspInit+0x208>)
 8008c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c96:	613b      	str	r3, [r7, #16]
 8008c98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8008c9a:	4b4b      	ldr	r3, [pc, #300]	; (8008dc8 <SDRAM_MspInit+0x208>)
 8008c9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008ca0:	4a49      	ldr	r2, [pc, #292]	; (8008dc8 <SDRAM_MspInit+0x208>)
 8008ca2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ca6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008caa:	4b47      	ldr	r3, [pc, #284]	; (8008dc8 <SDRAM_MspInit+0x208>)
 8008cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cb4:	60fb      	str	r3, [r7, #12]
 8008cb6:	68fb      	ldr	r3, [r7, #12]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8008cb8:	2302      	movs	r3, #2
 8008cba:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8008cc0:	2303      	movs	r3, #3
 8008cc2:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8008cc4:	230c      	movs	r3, #12
 8008cc6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8008cc8:	f24c 7303 	movw	r3, #50947	; 0xc703
 8008ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_14 | GPIO_PIN_15;

  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8008cce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008cd2:	4619      	mov	r1, r3
 8008cd4:	483d      	ldr	r0, [pc, #244]	; (8008dcc <SDRAM_MspInit+0x20c>)
 8008cd6:	f004 fd51 	bl	800d77c <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8008cda:	f64f 7383 	movw	r3, #65411	; 0xff83
 8008cde:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8008ce0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008ce4:	4619      	mov	r1, r3
 8008ce6:	483a      	ldr	r0, [pc, #232]	; (8008dd0 <SDRAM_MspInit+0x210>)
 8008ce8:	f004 fd48 	bl	800d77c <HAL_GPIO_Init>
  /* GPIOF configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8008cec:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8008cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8008cf2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008cf6:	4619      	mov	r1, r3
 8008cf8:	4836      	ldr	r0, [pc, #216]	; (8008dd4 <SDRAM_MspInit+0x214>)
 8008cfa:	f004 fd3f 	bl	800d77c <HAL_GPIO_Init>
  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 8008cfe:	f248 1337 	movw	r3, #33079	; 0x8137
 8008d02:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8008d04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008d08:	4619      	mov	r1, r3
 8008d0a:	4833      	ldr	r0, [pc, #204]	; (8008dd8 <SDRAM_MspInit+0x218>)
 8008d0c:	f004 fd36 	bl	800d77c <HAL_GPIO_Init>

  /* GPIOH configuration */
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8008d10:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8008d14:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8008d16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008d1a:	4619      	mov	r1, r3
 8008d1c:	482f      	ldr	r0, [pc, #188]	; (8008ddc <SDRAM_MspInit+0x21c>)
 8008d1e:	f004 fd2d 	bl	800d77c <HAL_GPIO_Init>

  /* GPIOI configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8008d22:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8008d26:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;

  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8008d28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008d2c:	4619      	mov	r1, r3
 8008d2e:	482c      	ldr	r0, [pc, #176]	; (8008de0 <SDRAM_MspInit+0x220>)
 8008d30:	f004 fd24 	bl	800d77c <HAL_GPIO_Init>

  /* Configure common MDMA parameters */
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 8008d34:	4b2b      	ldr	r3, [pc, #172]	; (8008de4 <SDRAM_MspInit+0x224>)
 8008d36:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008d3a:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8008d3c:	4b29      	ldr	r3, [pc, #164]	; (8008de4 <SDRAM_MspInit+0x224>)
 8008d3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d42:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 8008d44:	4b27      	ldr	r3, [pc, #156]	; (8008de4 <SDRAM_MspInit+0x224>)
 8008d46:	2280      	movs	r2, #128	; 0x80
 8008d48:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8008d4a:	4b26      	ldr	r3, [pc, #152]	; (8008de4 <SDRAM_MspInit+0x224>)
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	611a      	str	r2, [r3, #16]
  mdma_handle.Init.SourceInc                = MDMA_SRC_INC_WORD;
 8008d50:	4b24      	ldr	r3, [pc, #144]	; (8008de4 <SDRAM_MspInit+0x224>)
 8008d52:	f240 2202 	movw	r2, #514	; 0x202
 8008d56:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8008d58:	4b22      	ldr	r3, [pc, #136]	; (8008de4 <SDRAM_MspInit+0x224>)
 8008d5a:	f640 0208 	movw	r2, #2056	; 0x808
 8008d5e:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 8008d60:	4b20      	ldr	r3, [pc, #128]	; (8008de4 <SDRAM_MspInit+0x224>)
 8008d62:	2220      	movs	r2, #32
 8008d64:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 8008d66:	4b1f      	ldr	r3, [pc, #124]	; (8008de4 <SDRAM_MspInit+0x224>)
 8008d68:	2280      	movs	r2, #128	; 0x80
 8008d6a:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8008d6c:	4b1d      	ldr	r3, [pc, #116]	; (8008de4 <SDRAM_MspInit+0x224>)
 8008d6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008d72:	625a      	str	r2, [r3, #36]	; 0x24
  mdma_handle.Init.SourceBurst              = MDMA_SOURCE_BURST_SINGLE;
 8008d74:	4b1b      	ldr	r3, [pc, #108]	; (8008de4 <SDRAM_MspInit+0x224>)
 8008d76:	2200      	movs	r2, #0
 8008d78:	62da      	str	r2, [r3, #44]	; 0x2c
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 8008d7a:	4b1a      	ldr	r3, [pc, #104]	; (8008de4 <SDRAM_MspInit+0x224>)
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	631a      	str	r2, [r3, #48]	; 0x30
  mdma_handle.Init.BufferTransferLength     = 128;
 8008d80:	4b18      	ldr	r3, [pc, #96]	; (8008de4 <SDRAM_MspInit+0x224>)
 8008d82:	2280      	movs	r2, #128	; 0x80
 8008d84:	629a      	str	r2, [r3, #40]	; 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
 8008d86:	4b17      	ldr	r3, [pc, #92]	; (8008de4 <SDRAM_MspInit+0x224>)
 8008d88:	2200      	movs	r2, #0
 8008d8a:	635a      	str	r2, [r3, #52]	; 0x34
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 8008d8c:	4b15      	ldr	r3, [pc, #84]	; (8008de4 <SDRAM_MspInit+0x224>)
 8008d8e:	2200      	movs	r2, #0
 8008d90:	639a      	str	r2, [r3, #56]	; 0x38
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 8008d92:	4b14      	ldr	r3, [pc, #80]	; (8008de4 <SDRAM_MspInit+0x224>)
 8008d94:	4a14      	ldr	r2, [pc, #80]	; (8008de8 <SDRAM_MspInit+0x228>)
 8008d96:	601a      	str	r2, [r3, #0]

   /* Associate the MDMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	4a12      	ldr	r2, [pc, #72]	; (8008de4 <SDRAM_MspInit+0x224>)
 8008d9c:	631a      	str	r2, [r3, #48]	; 0x30
 8008d9e:	4a11      	ldr	r2, [pc, #68]	; (8008de4 <SDRAM_MspInit+0x224>)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6413      	str	r3, [r2, #64]	; 0x40

  /* Deinitialize the stream for new transfer */
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8008da4:	480f      	ldr	r0, [pc, #60]	; (8008de4 <SDRAM_MspInit+0x224>)
 8008da6:	f006 f8a3 	bl	800eef0 <HAL_MDMA_DeInit>

  /* Configure the MDMA stream */
  (void)HAL_MDMA_Init(&mdma_handle);
 8008daa:	480e      	ldr	r0, [pc, #56]	; (8008de4 <SDRAM_MspInit+0x224>)
 8008dac:	f006 f854 	bl	800ee58 <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, BSP_SDRAM_IT_PRIORITY, 0);
 8008db0:	2200      	movs	r2, #0
 8008db2:	210f      	movs	r1, #15
 8008db4:	207a      	movs	r0, #122	; 0x7a
 8008db6:	f000 fa68 	bl	800928a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 8008dba:	207a      	movs	r0, #122	; 0x7a
 8008dbc:	f000 fa7f 	bl	80092be <HAL_NVIC_EnableIRQ>
}
 8008dc0:	bf00      	nop
 8008dc2:	3740      	adds	r7, #64	; 0x40
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}
 8008dc8:	58024400 	.word	0x58024400
 8008dcc:	58020c00 	.word	0x58020c00
 8008dd0:	58021000 	.word	0x58021000
 8008dd4:	58021400 	.word	0x58021400
 8008dd8:	58021800 	.word	0x58021800
 8008ddc:	58021c00 	.word	0x58021c00
 8008de0:	58022000 	.word	0x58022000
 8008de4:	2400134c 	.word	0x2400134c
 8008de8:	52000040 	.word	0x52000040

08008dec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{    
 8008dec:	b480      	push	{r7}
 8008dee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008df0:	4b31      	ldr	r3, [pc, #196]	; (8008eb8 <SystemInit+0xcc>)
 8008df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008df6:	4a30      	ldr	r2, [pc, #192]	; (8008eb8 <SystemInit+0xcc>)
 8008df8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008dfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
    detectable by the CPU after a WFI/WFE instruction.*/ 
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8008e00:	4b2d      	ldr	r3, [pc, #180]	; (8008eb8 <SystemInit+0xcc>)
 8008e02:	691b      	ldr	r3, [r3, #16]
 8008e04:	4a2c      	ldr	r2, [pc, #176]	; (8008eb8 <SystemInit+0xcc>)
 8008e06:	f043 0310 	orr.w	r3, r3, #16
 8008e0a:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7 
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8008e0c:	4b2b      	ldr	r3, [pc, #172]	; (8008ebc <SystemInit+0xd0>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	4a2a      	ldr	r2, [pc, #168]	; (8008ebc <SystemInit+0xd0>)
 8008e12:	f043 0301 	orr.w	r3, r3, #1
 8008e16:	6013      	str	r3, [r2, #0]
  
  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008e18:	4b28      	ldr	r3, [pc, #160]	; (8008ebc <SystemInit+0xd0>)
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8008e1e:	4b27      	ldr	r3, [pc, #156]	; (8008ebc <SystemInit+0xd0>)
 8008e20:	681a      	ldr	r2, [r3, #0]
 8008e22:	4926      	ldr	r1, [pc, #152]	; (8008ebc <SystemInit+0xd0>)
 8008e24:	4b26      	ldr	r3, [pc, #152]	; (8008ec0 <SystemInit+0xd4>)
 8008e26:	4013      	ands	r3, r2
 8008e28:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8008e2a:	4b24      	ldr	r3, [pc, #144]	; (8008ebc <SystemInit+0xd0>)
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8008e30:	4b22      	ldr	r3, [pc, #136]	; (8008ebc <SystemInit+0xd0>)
 8008e32:	2200      	movs	r2, #0
 8008e34:	61da      	str	r2, [r3, #28]
  
  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8008e36:	4b21      	ldr	r3, [pc, #132]	; (8008ebc <SystemInit+0xd0>)
 8008e38:	2200      	movs	r2, #0
 8008e3a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8008e3c:	4b1f      	ldr	r3, [pc, #124]	; (8008ebc <SystemInit+0xd0>)
 8008e3e:	2200      	movs	r2, #0
 8008e40:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8008e42:	4b1e      	ldr	r3, [pc, #120]	; (8008ebc <SystemInit+0xd0>)
 8008e44:	2200      	movs	r2, #0
 8008e46:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8008e48:	4b1c      	ldr	r3, [pc, #112]	; (8008ebc <SystemInit+0xd0>)
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8008e4e:	4b1b      	ldr	r3, [pc, #108]	; (8008ebc <SystemInit+0xd0>)
 8008e50:	2200      	movs	r2, #0
 8008e52:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8008e54:	4b19      	ldr	r3, [pc, #100]	; (8008ebc <SystemInit+0xd0>)
 8008e56:	2200      	movs	r2, #0
 8008e58:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */
  
  RCC->PLL2FRACR = 0x00000000;
 8008e5a:	4b18      	ldr	r3, [pc, #96]	; (8008ebc <SystemInit+0xd0>)
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8008e60:	4b16      	ldr	r3, [pc, #88]	; (8008ebc <SystemInit+0xd0>)
 8008e62:	2200      	movs	r2, #0
 8008e64:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8008e66:	4b15      	ldr	r3, [pc, #84]	; (8008ebc <SystemInit+0xd0>)
 8008e68:	2200      	movs	r2, #0
 8008e6a:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8008e6c:	4b13      	ldr	r3, [pc, #76]	; (8008ebc <SystemInit+0xd0>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a12      	ldr	r2, [pc, #72]	; (8008ebc <SystemInit+0xd0>)
 8008e72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008e76:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8008e78:	4b10      	ldr	r3, [pc, #64]	; (8008ebc <SystemInit+0xd0>)
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;  
 8008e7e:	4b11      	ldr	r3, [pc, #68]	; (8008ec4 <SystemInit+0xd8>)
 8008e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e82:	4a10      	ldr	r2, [pc, #64]	; (8008ec4 <SystemInit+0xd8>)
 8008e84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008e88:	6253      	str	r3, [r2, #36]	; 0x24

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8008e8a:	4b0f      	ldr	r3, [pc, #60]	; (8008ec8 <SystemInit+0xdc>)
 8008e8c:	681a      	ldr	r2, [r3, #0]
 8008e8e:	4b0f      	ldr	r3, [pc, #60]	; (8008ecc <SystemInit+0xe0>)
 8008e90:	4013      	ands	r3, r2
 8008e92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e96:	d202      	bcs.n	8008e9e <SystemInit+0xb2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x00000001U;
 8008e98:	4b0d      	ldr	r3, [pc, #52]	; (8008ed0 <SystemInit+0xe4>)
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	601a      	str	r2, [r3, #0]
/*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8008e9e:	4b0d      	ldr	r3, [pc, #52]	; (8008ed4 <SystemInit+0xe8>)
 8008ea0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8008ea4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8008ea6:	4b04      	ldr	r3, [pc, #16]	; (8008eb8 <SystemInit+0xcc>)
 8008ea8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008eac:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif                       
#endif

}
 8008eae:	bf00      	nop
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb6:	4770      	bx	lr
 8008eb8:	e000ed00 	.word	0xe000ed00
 8008ebc:	58024400 	.word	0x58024400
 8008ec0:	eaf6ed7f 	.word	0xeaf6ed7f
 8008ec4:	580000c0 	.word	0x580000c0
 8008ec8:	5c001000 	.word	0x5c001000
 8008ecc:	ffff0000 	.word	0xffff0000
 8008ed0:	51008108 	.word	0x51008108
 8008ed4:	52004000 	.word	0x52004000

08008ed8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b082      	sub	sp, #8
 8008edc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008ede:	2003      	movs	r0, #3
 8008ee0:	f000 f9c8 	bl	8009274 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008ee4:	f007 f86a 	bl	800ffbc <HAL_RCC_GetSysClockFreq>
 8008ee8:	4602      	mov	r2, r0
 8008eea:	4b15      	ldr	r3, [pc, #84]	; (8008f40 <HAL_Init+0x68>)
 8008eec:	699b      	ldr	r3, [r3, #24]
 8008eee:	0a1b      	lsrs	r3, r3, #8
 8008ef0:	f003 030f 	and.w	r3, r3, #15
 8008ef4:	4913      	ldr	r1, [pc, #76]	; (8008f44 <HAL_Init+0x6c>)
 8008ef6:	5ccb      	ldrb	r3, [r1, r3]
 8008ef8:	f003 031f 	and.w	r3, r3, #31
 8008efc:	fa22 f303 	lsr.w	r3, r2, r3
 8008f00:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008f02:	4b0f      	ldr	r3, [pc, #60]	; (8008f40 <HAL_Init+0x68>)
 8008f04:	699b      	ldr	r3, [r3, #24]
 8008f06:	f003 030f 	and.w	r3, r3, #15
 8008f0a:	4a0e      	ldr	r2, [pc, #56]	; (8008f44 <HAL_Init+0x6c>)
 8008f0c:	5cd3      	ldrb	r3, [r2, r3]
 8008f0e:	f003 031f 	and.w	r3, r3, #31
 8008f12:	687a      	ldr	r2, [r7, #4]
 8008f14:	fa22 f303 	lsr.w	r3, r2, r3
 8008f18:	4a0b      	ldr	r2, [pc, #44]	; (8008f48 <HAL_Init+0x70>)
 8008f1a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008f1c:	4a0b      	ldr	r2, [pc, #44]	; (8008f4c <HAL_Init+0x74>)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008f22:	200f      	movs	r0, #15
 8008f24:	f000 f81c 	bl	8008f60 <HAL_InitTick>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d001      	beq.n	8008f32 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8008f2e:	2301      	movs	r3, #1
 8008f30:	e002      	b.n	8008f38 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8008f32:	f000 f80d 	bl	8008f50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008f36:	2300      	movs	r3, #0
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	3708      	adds	r7, #8
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}
 8008f40:	58024400 	.word	0x58024400
 8008f44:	08015b6c 	.word	0x08015b6c
 8008f48:	240000f8 	.word	0x240000f8
 8008f4c:	240000f4 	.word	0x240000f4

08008f50 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8008f50:	b480      	push	{r7}
 8008f52:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8008f54:	bf00      	nop
 8008f56:	46bd      	mov	sp, r7
 8008f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5c:	4770      	bx	lr
	...

08008f60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b082      	sub	sp, #8
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8008f68:	4b15      	ldr	r3, [pc, #84]	; (8008fc0 <HAL_InitTick+0x60>)
 8008f6a:	781b      	ldrb	r3, [r3, #0]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d101      	bne.n	8008f74 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8008f70:	2301      	movs	r3, #1
 8008f72:	e021      	b.n	8008fb8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8008f74:	4b13      	ldr	r3, [pc, #76]	; (8008fc4 <HAL_InitTick+0x64>)
 8008f76:	681a      	ldr	r2, [r3, #0]
 8008f78:	4b11      	ldr	r3, [pc, #68]	; (8008fc0 <HAL_InitTick+0x60>)
 8008f7a:	781b      	ldrb	r3, [r3, #0]
 8008f7c:	4619      	mov	r1, r3
 8008f7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008f82:	fbb3 f3f1 	udiv	r3, r3, r1
 8008f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f000 f9b3 	bl	80092f6 <HAL_SYSTICK_Config>
 8008f90:	4603      	mov	r3, r0
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d001      	beq.n	8008f9a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8008f96:	2301      	movs	r3, #1
 8008f98:	e00e      	b.n	8008fb8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2b0f      	cmp	r3, #15
 8008f9e:	d80a      	bhi.n	8008fb6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	6879      	ldr	r1, [r7, #4]
 8008fa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008fa8:	f000 f96f 	bl	800928a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008fac:	4a06      	ldr	r2, [pc, #24]	; (8008fc8 <HAL_InitTick+0x68>)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	e000      	b.n	8008fb8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8008fb6:	2301      	movs	r3, #1
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3708      	adds	r7, #8
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}
 8008fc0:	24000100 	.word	0x24000100
 8008fc4:	240000f4 	.word	0x240000f4
 8008fc8:	240000fc 	.word	0x240000fc

08008fcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008fcc:	b480      	push	{r7}
 8008fce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8008fd0:	4b06      	ldr	r3, [pc, #24]	; (8008fec <HAL_IncTick+0x20>)
 8008fd2:	781b      	ldrb	r3, [r3, #0]
 8008fd4:	461a      	mov	r2, r3
 8008fd6:	4b06      	ldr	r3, [pc, #24]	; (8008ff0 <HAL_IncTick+0x24>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	4413      	add	r3, r2
 8008fdc:	4a04      	ldr	r2, [pc, #16]	; (8008ff0 <HAL_IncTick+0x24>)
 8008fde:	6013      	str	r3, [r2, #0]
}
 8008fe0:	bf00      	nop
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe8:	4770      	bx	lr
 8008fea:	bf00      	nop
 8008fec:	24000100 	.word	0x24000100
 8008ff0:	240021c0 	.word	0x240021c0

08008ff4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	af00      	add	r7, sp, #0
  return uwTick;
 8008ff8:	4b03      	ldr	r3, [pc, #12]	; (8009008 <HAL_GetTick+0x14>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	46bd      	mov	sp, r7
 8009000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009004:	4770      	bx	lr
 8009006:	bf00      	nop
 8009008:	240021c0 	.word	0x240021c0

0800900c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b084      	sub	sp, #16
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009014:	f7ff ffee 	bl	8008ff4 <HAL_GetTick>
 8009018:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009024:	d005      	beq.n	8009032 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009026:	4b0a      	ldr	r3, [pc, #40]	; (8009050 <HAL_Delay+0x44>)
 8009028:	781b      	ldrb	r3, [r3, #0]
 800902a:	461a      	mov	r2, r3
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	4413      	add	r3, r2
 8009030:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009032:	bf00      	nop
 8009034:	f7ff ffde 	bl	8008ff4 <HAL_GetTick>
 8009038:	4602      	mov	r2, r0
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	1ad3      	subs	r3, r2, r3
 800903e:	68fa      	ldr	r2, [r7, #12]
 8009040:	429a      	cmp	r2, r3
 8009042:	d8f7      	bhi.n	8009034 <HAL_Delay+0x28>
  {
  }
}
 8009044:	bf00      	nop
 8009046:	bf00      	nop
 8009048:	3710      	adds	r7, #16
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}
 800904e:	bf00      	nop
 8009050:	24000100 	.word	0x24000100

08009054 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8009054:	b480      	push	{r7}
 8009056:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8009058:	4b03      	ldr	r3, [pc, #12]	; (8009068 <HAL_GetREVID+0x14>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	0c1b      	lsrs	r3, r3, #16
}
 800905e:	4618      	mov	r0, r3
 8009060:	46bd      	mov	sp, r7
 8009062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009066:	4770      	bx	lr
 8009068:	5c001000 	.word	0x5c001000

0800906c <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 800906c:	b480      	push	{r7}
 800906e:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 8009070:	4b05      	ldr	r3, [pc, #20]	; (8009088 <HAL_EnableCompensationCell+0x1c>)
 8009072:	6a1b      	ldr	r3, [r3, #32]
 8009074:	4a04      	ldr	r2, [pc, #16]	; (8009088 <HAL_EnableCompensationCell+0x1c>)
 8009076:	f043 0301 	orr.w	r3, r3, #1
 800907a:	6213      	str	r3, [r2, #32]
}
 800907c:	bf00      	nop
 800907e:	46bd      	mov	sp, r7
 8009080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009084:	4770      	bx	lr
 8009086:	bf00      	nop
 8009088:	58000400 	.word	0x58000400

0800908c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800908c:	b480      	push	{r7}
 800908e:	b085      	sub	sp, #20
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f003 0307 	and.w	r3, r3, #7
 800909a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800909c:	4b0b      	ldr	r3, [pc, #44]	; (80090cc <__NVIC_SetPriorityGrouping+0x40>)
 800909e:	68db      	ldr	r3, [r3, #12]
 80090a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80090a2:	68ba      	ldr	r2, [r7, #8]
 80090a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80090a8:	4013      	ands	r3, r2
 80090aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80090b4:	4b06      	ldr	r3, [pc, #24]	; (80090d0 <__NVIC_SetPriorityGrouping+0x44>)
 80090b6:	4313      	orrs	r3, r2
 80090b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80090ba:	4a04      	ldr	r2, [pc, #16]	; (80090cc <__NVIC_SetPriorityGrouping+0x40>)
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	60d3      	str	r3, [r2, #12]
}
 80090c0:	bf00      	nop
 80090c2:	3714      	adds	r7, #20
 80090c4:	46bd      	mov	sp, r7
 80090c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ca:	4770      	bx	lr
 80090cc:	e000ed00 	.word	0xe000ed00
 80090d0:	05fa0000 	.word	0x05fa0000

080090d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80090d4:	b480      	push	{r7}
 80090d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80090d8:	4b04      	ldr	r3, [pc, #16]	; (80090ec <__NVIC_GetPriorityGrouping+0x18>)
 80090da:	68db      	ldr	r3, [r3, #12]
 80090dc:	0a1b      	lsrs	r3, r3, #8
 80090de:	f003 0307 	and.w	r3, r3, #7
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	46bd      	mov	sp, r7
 80090e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ea:	4770      	bx	lr
 80090ec:	e000ed00 	.word	0xe000ed00

080090f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80090f0:	b480      	push	{r7}
 80090f2:	b083      	sub	sp, #12
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	4603      	mov	r3, r0
 80090f8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80090fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	db0b      	blt.n	800911a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009102:	88fb      	ldrh	r3, [r7, #6]
 8009104:	f003 021f 	and.w	r2, r3, #31
 8009108:	4907      	ldr	r1, [pc, #28]	; (8009128 <__NVIC_EnableIRQ+0x38>)
 800910a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800910e:	095b      	lsrs	r3, r3, #5
 8009110:	2001      	movs	r0, #1
 8009112:	fa00 f202 	lsl.w	r2, r0, r2
 8009116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800911a:	bf00      	nop
 800911c:	370c      	adds	r7, #12
 800911e:	46bd      	mov	sp, r7
 8009120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009124:	4770      	bx	lr
 8009126:	bf00      	nop
 8009128:	e000e100 	.word	0xe000e100

0800912c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800912c:	b480      	push	{r7}
 800912e:	b083      	sub	sp, #12
 8009130:	af00      	add	r7, sp, #0
 8009132:	4603      	mov	r3, r0
 8009134:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8009136:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800913a:	2b00      	cmp	r3, #0
 800913c:	db12      	blt.n	8009164 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800913e:	88fb      	ldrh	r3, [r7, #6]
 8009140:	f003 021f 	and.w	r2, r3, #31
 8009144:	490a      	ldr	r1, [pc, #40]	; (8009170 <__NVIC_DisableIRQ+0x44>)
 8009146:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800914a:	095b      	lsrs	r3, r3, #5
 800914c:	2001      	movs	r0, #1
 800914e:	fa00 f202 	lsl.w	r2, r0, r2
 8009152:	3320      	adds	r3, #32
 8009154:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8009158:	f3bf 8f4f 	dsb	sy
}
 800915c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800915e:	f3bf 8f6f 	isb	sy
}
 8009162:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8009164:	bf00      	nop
 8009166:	370c      	adds	r7, #12
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	4770      	bx	lr
 8009170:	e000e100 	.word	0xe000e100

08009174 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009174:	b480      	push	{r7}
 8009176:	b083      	sub	sp, #12
 8009178:	af00      	add	r7, sp, #0
 800917a:	4603      	mov	r3, r0
 800917c:	6039      	str	r1, [r7, #0]
 800917e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8009180:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009184:	2b00      	cmp	r3, #0
 8009186:	db0a      	blt.n	800919e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	b2da      	uxtb	r2, r3
 800918c:	490c      	ldr	r1, [pc, #48]	; (80091c0 <__NVIC_SetPriority+0x4c>)
 800918e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009192:	0112      	lsls	r2, r2, #4
 8009194:	b2d2      	uxtb	r2, r2
 8009196:	440b      	add	r3, r1
 8009198:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800919c:	e00a      	b.n	80091b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	b2da      	uxtb	r2, r3
 80091a2:	4908      	ldr	r1, [pc, #32]	; (80091c4 <__NVIC_SetPriority+0x50>)
 80091a4:	88fb      	ldrh	r3, [r7, #6]
 80091a6:	f003 030f 	and.w	r3, r3, #15
 80091aa:	3b04      	subs	r3, #4
 80091ac:	0112      	lsls	r2, r2, #4
 80091ae:	b2d2      	uxtb	r2, r2
 80091b0:	440b      	add	r3, r1
 80091b2:	761a      	strb	r2, [r3, #24]
}
 80091b4:	bf00      	nop
 80091b6:	370c      	adds	r7, #12
 80091b8:	46bd      	mov	sp, r7
 80091ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091be:	4770      	bx	lr
 80091c0:	e000e100 	.word	0xe000e100
 80091c4:	e000ed00 	.word	0xe000ed00

080091c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b089      	sub	sp, #36	; 0x24
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	60f8      	str	r0, [r7, #12]
 80091d0:	60b9      	str	r1, [r7, #8]
 80091d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	f003 0307 	and.w	r3, r3, #7
 80091da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80091dc:	69fb      	ldr	r3, [r7, #28]
 80091de:	f1c3 0307 	rsb	r3, r3, #7
 80091e2:	2b04      	cmp	r3, #4
 80091e4:	bf28      	it	cs
 80091e6:	2304      	movcs	r3, #4
 80091e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80091ea:	69fb      	ldr	r3, [r7, #28]
 80091ec:	3304      	adds	r3, #4
 80091ee:	2b06      	cmp	r3, #6
 80091f0:	d902      	bls.n	80091f8 <NVIC_EncodePriority+0x30>
 80091f2:	69fb      	ldr	r3, [r7, #28]
 80091f4:	3b03      	subs	r3, #3
 80091f6:	e000      	b.n	80091fa <NVIC_EncodePriority+0x32>
 80091f8:	2300      	movs	r3, #0
 80091fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80091fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009200:	69bb      	ldr	r3, [r7, #24]
 8009202:	fa02 f303 	lsl.w	r3, r2, r3
 8009206:	43da      	mvns	r2, r3
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	401a      	ands	r2, r3
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009210:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	fa01 f303 	lsl.w	r3, r1, r3
 800921a:	43d9      	mvns	r1, r3
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009220:	4313      	orrs	r3, r2
         );
}
 8009222:	4618      	mov	r0, r3
 8009224:	3724      	adds	r7, #36	; 0x24
 8009226:	46bd      	mov	sp, r7
 8009228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922c:	4770      	bx	lr
	...

08009230 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b082      	sub	sp, #8
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	3b01      	subs	r3, #1
 800923c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009240:	d301      	bcc.n	8009246 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009242:	2301      	movs	r3, #1
 8009244:	e00f      	b.n	8009266 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009246:	4a0a      	ldr	r2, [pc, #40]	; (8009270 <SysTick_Config+0x40>)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	3b01      	subs	r3, #1
 800924c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800924e:	210f      	movs	r1, #15
 8009250:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009254:	f7ff ff8e 	bl	8009174 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009258:	4b05      	ldr	r3, [pc, #20]	; (8009270 <SysTick_Config+0x40>)
 800925a:	2200      	movs	r2, #0
 800925c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800925e:	4b04      	ldr	r3, [pc, #16]	; (8009270 <SysTick_Config+0x40>)
 8009260:	2207      	movs	r2, #7
 8009262:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009264:	2300      	movs	r3, #0
}
 8009266:	4618      	mov	r0, r3
 8009268:	3708      	adds	r7, #8
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}
 800926e:	bf00      	nop
 8009270:	e000e010 	.word	0xe000e010

08009274 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b082      	sub	sp, #8
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f7ff ff05 	bl	800908c <__NVIC_SetPriorityGrouping>
}
 8009282:	bf00      	nop
 8009284:	3708      	adds	r7, #8
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}

0800928a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800928a:	b580      	push	{r7, lr}
 800928c:	b086      	sub	sp, #24
 800928e:	af00      	add	r7, sp, #0
 8009290:	4603      	mov	r3, r0
 8009292:	60b9      	str	r1, [r7, #8]
 8009294:	607a      	str	r2, [r7, #4]
 8009296:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009298:	f7ff ff1c 	bl	80090d4 <__NVIC_GetPriorityGrouping>
 800929c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800929e:	687a      	ldr	r2, [r7, #4]
 80092a0:	68b9      	ldr	r1, [r7, #8]
 80092a2:	6978      	ldr	r0, [r7, #20]
 80092a4:	f7ff ff90 	bl	80091c8 <NVIC_EncodePriority>
 80092a8:	4602      	mov	r2, r0
 80092aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80092ae:	4611      	mov	r1, r2
 80092b0:	4618      	mov	r0, r3
 80092b2:	f7ff ff5f 	bl	8009174 <__NVIC_SetPriority>
}
 80092b6:	bf00      	nop
 80092b8:	3718      	adds	r7, #24
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}

080092be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80092be:	b580      	push	{r7, lr}
 80092c0:	b082      	sub	sp, #8
 80092c2:	af00      	add	r7, sp, #0
 80092c4:	4603      	mov	r3, r0
 80092c6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80092c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80092cc:	4618      	mov	r0, r3
 80092ce:	f7ff ff0f 	bl	80090f0 <__NVIC_EnableIRQ>
}
 80092d2:	bf00      	nop
 80092d4:	3708      	adds	r7, #8
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}

080092da <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80092da:	b580      	push	{r7, lr}
 80092dc:	b082      	sub	sp, #8
 80092de:	af00      	add	r7, sp, #0
 80092e0:	4603      	mov	r3, r0
 80092e2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80092e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80092e8:	4618      	mov	r0, r3
 80092ea:	f7ff ff1f 	bl	800912c <__NVIC_DisableIRQ>
}
 80092ee:	bf00      	nop
 80092f0:	3708      	adds	r7, #8
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}

080092f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80092f6:	b580      	push	{r7, lr}
 80092f8:	b082      	sub	sp, #8
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f7ff ff96 	bl	8009230 <SysTick_Config>
 8009304:	4603      	mov	r3, r0
}
 8009306:	4618      	mov	r0, r3
 8009308:	3708      	adds	r7, #8
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}
	...

08009310 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8009310:	b480      	push	{r7}
 8009312:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8009314:	f3bf 8f5f 	dmb	sy
}
 8009318:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800931a:	4b07      	ldr	r3, [pc, #28]	; (8009338 <HAL_MPU_Disable+0x28>)
 800931c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800931e:	4a06      	ldr	r2, [pc, #24]	; (8009338 <HAL_MPU_Disable+0x28>)
 8009320:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009324:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8009326:	4b05      	ldr	r3, [pc, #20]	; (800933c <HAL_MPU_Disable+0x2c>)
 8009328:	2200      	movs	r2, #0
 800932a:	605a      	str	r2, [r3, #4]
}
 800932c:	bf00      	nop
 800932e:	46bd      	mov	sp, r7
 8009330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009334:	4770      	bx	lr
 8009336:	bf00      	nop
 8009338:	e000ed00 	.word	0xe000ed00
 800933c:	e000ed90 	.word	0xe000ed90

08009340 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8009340:	b480      	push	{r7}
 8009342:	b083      	sub	sp, #12
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8009348:	4a0b      	ldr	r2, [pc, #44]	; (8009378 <HAL_MPU_Enable+0x38>)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f043 0301 	orr.w	r3, r3, #1
 8009350:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8009352:	4b0a      	ldr	r3, [pc, #40]	; (800937c <HAL_MPU_Enable+0x3c>)
 8009354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009356:	4a09      	ldr	r2, [pc, #36]	; (800937c <HAL_MPU_Enable+0x3c>)
 8009358:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800935c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800935e:	f3bf 8f4f 	dsb	sy
}
 8009362:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009364:	f3bf 8f6f 	isb	sy
}
 8009368:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800936a:	bf00      	nop
 800936c:	370c      	adds	r7, #12
 800936e:	46bd      	mov	sp, r7
 8009370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009374:	4770      	bx	lr
 8009376:	bf00      	nop
 8009378:	e000ed90 	.word	0xe000ed90
 800937c:	e000ed00 	.word	0xe000ed00

08009380 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8009380:	b480      	push	{r7}
 8009382:	b083      	sub	sp, #12
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	785a      	ldrb	r2, [r3, #1]
 800938c:	4b1d      	ldr	r3, [pc, #116]	; (8009404 <HAL_MPU_ConfigRegion+0x84>)
 800938e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	781b      	ldrb	r3, [r3, #0]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d029      	beq.n	80093ec <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8009398:	4a1a      	ldr	r2, [pc, #104]	; (8009404 <HAL_MPU_ConfigRegion+0x84>)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	685b      	ldr	r3, [r3, #4]
 800939e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	7b1b      	ldrb	r3, [r3, #12]
 80093a4:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	7adb      	ldrb	r3, [r3, #11]
 80093aa:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80093ac:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	7a9b      	ldrb	r3, [r3, #10]
 80093b2:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80093b4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	7b5b      	ldrb	r3, [r3, #13]
 80093ba:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80093bc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	7b9b      	ldrb	r3, [r3, #14]
 80093c2:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80093c4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	7bdb      	ldrb	r3, [r3, #15]
 80093ca:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80093cc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	7a5b      	ldrb	r3, [r3, #9]
 80093d2:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80093d4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	7a1b      	ldrb	r3, [r3, #8]
 80093da:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80093dc:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80093de:	687a      	ldr	r2, [r7, #4]
 80093e0:	7812      	ldrb	r2, [r2, #0]
 80093e2:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80093e4:	4a07      	ldr	r2, [pc, #28]	; (8009404 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80093e6:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80093e8:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80093ea:	e005      	b.n	80093f8 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80093ec:	4b05      	ldr	r3, [pc, #20]	; (8009404 <HAL_MPU_ConfigRegion+0x84>)
 80093ee:	2200      	movs	r2, #0
 80093f0:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80093f2:	4b04      	ldr	r3, [pc, #16]	; (8009404 <HAL_MPU_ConfigRegion+0x84>)
 80093f4:	2200      	movs	r2, #0
 80093f6:	611a      	str	r2, [r3, #16]
}
 80093f8:	bf00      	nop
 80093fa:	370c      	adds	r7, #12
 80093fc:	46bd      	mov	sp, r7
 80093fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009402:	4770      	bx	lr
 8009404:	e000ed90 	.word	0xe000ed90

08009408 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8009408:	b480      	push	{r7}
 800940a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 800940c:	4b07      	ldr	r3, [pc, #28]	; (800942c <HAL_GetCurrentCPUID+0x24>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	091b      	lsrs	r3, r3, #4
 8009412:	f003 030f 	and.w	r3, r3, #15
 8009416:	2b07      	cmp	r3, #7
 8009418:	d101      	bne.n	800941e <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 800941a:	2303      	movs	r3, #3
 800941c:	e000      	b.n	8009420 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 800941e:	2301      	movs	r3, #1
  }
}
 8009420:	4618      	mov	r0, r3
 8009422:	46bd      	mov	sp, r7
 8009424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009428:	4770      	bx	lr
 800942a:	bf00      	nop
 800942c:	e000ed00 	.word	0xe000ed00

08009430 <HAL_DCMI_Suspend>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Suspend(DCMI_HandleTypeDef *hdcmi)
{
 8009430:	b480      	push	{r7}
 8009432:	b085      	sub	sp, #20
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8009438:	4b27      	ldr	r3, [pc, #156]	; (80094d8 <HAL_DCMI_Suspend+0xa8>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	4a27      	ldr	r2, [pc, #156]	; (80094dc <HAL_DCMI_Suspend+0xac>)
 800943e:	fba2 2303 	umull	r2, r3, r2, r3
 8009442:	0a5b      	lsrs	r3, r3, #9
 8009444:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009448:	fb02 f303 	mul.w	r3, r2, r3
 800944c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800944e:	2300      	movs	r3, #0
 8009450:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009458:	2b01      	cmp	r3, #1
 800945a:	d101      	bne.n	8009460 <HAL_DCMI_Suspend+0x30>
 800945c:	2302      	movs	r3, #2
 800945e:	e034      	b.n	80094ca <HAL_DCMI_Suspend+0x9a>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2201      	movs	r2, #1
 8009464:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if (hdcmi->State == HAL_DCMI_STATE_BUSY)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800946e:	b2db      	uxtb	r3, r3
 8009470:	2b02      	cmp	r3, #2
 8009472:	d125      	bne.n	80094c0 <HAL_DCMI_Suspend+0x90>
  {
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_SUSPENDED;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2205      	movs	r2, #5
 8009478:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable Capture */
    hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	681a      	ldr	r2, [r3, #0]
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f022 0201 	bic.w	r2, r2, #1
 800948a:	601a      	str	r2, [r3, #0]

    /* Check if the DCMI capture effectively disabled */
    do
    {
      count-- ;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	3b01      	subs	r3, #1
 8009490:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d10c      	bne.n	80094b2 <HAL_DCMI_Suspend+0x82>
      {
        /* Update error code */
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800949c:	f043 0220 	orr.w	r2, r3, #32
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Change DCMI state */
        hdcmi->State = HAL_DCMI_STATE_READY;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2201      	movs	r2, #1
 80094a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        status = HAL_TIMEOUT;
 80094ac:	2303      	movs	r3, #3
 80094ae:	72fb      	strb	r3, [r7, #11]
        break;
 80094b0:	e006      	b.n	80094c0 <HAL_DCMI_Suspend+0x90>
      }
    }
    while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f003 0301 	and.w	r3, r3, #1
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d1e5      	bne.n	800948c <HAL_DCMI_Suspend+0x5c>
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2200      	movs	r2, #0
 80094c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 80094c8:	7afb      	ldrb	r3, [r7, #11]
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	3714      	adds	r7, #20
 80094ce:	46bd      	mov	sp, r7
 80094d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d4:	4770      	bx	lr
 80094d6:	bf00      	nop
 80094d8:	240000f4 	.word	0x240000f4
 80094dc:	10624dd3 	.word	0x10624dd3

080094e0 <HAL_DCMI_Resume>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Resume(DCMI_HandleTypeDef *hdcmi)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b083      	sub	sp, #12
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdcmi);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80094ee:	2b01      	cmp	r3, #1
 80094f0:	d101      	bne.n	80094f6 <HAL_DCMI_Resume+0x16>
 80094f2:	2302      	movs	r3, #2
 80094f4:	e01a      	b.n	800952c <HAL_DCMI_Resume+0x4c>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2201      	movs	r2, #1
 80094fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if (hdcmi->State == HAL_DCMI_STATE_SUSPENDED)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009504:	b2db      	uxtb	r3, r3
 8009506:	2b05      	cmp	r3, #5
 8009508:	d10b      	bne.n	8009522 <HAL_DCMI_Resume+0x42>
  {
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_BUSY;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2202      	movs	r2, #2
 800950e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Enable Capture */
    hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	681a      	ldr	r2, [r3, #0]
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f042 0201 	orr.w	r2, r2, #1
 8009520:	601a      	str	r2, [r3, #0]
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2200      	movs	r2, #0
 8009526:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 800952a:	2300      	movs	r3, #0
}
 800952c:	4618      	mov	r0, r3
 800952e:	370c      	adds	r7, #12
 8009530:	46bd      	mov	sp, r7
 8009532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009536:	4770      	bx	lr

08009538 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b084      	sub	sp, #16
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	691b      	ldr	r3, [r3, #16]
 8009546:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	f003 0304 	and.w	r3, r3, #4
 800954e:	2b00      	cmp	r3, #0
 8009550:	d016      	beq.n	8009580 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	2204      	movs	r2, #4
 8009558:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800955e:	f043 0202 	orr.w	r2, r3, #2
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2204      	movs	r2, #4
 800956a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009572:	4a31      	ldr	r2, [pc, #196]	; (8009638 <HAL_DCMI_IRQHandler+0x100>)
 8009574:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800957a:	4618      	mov	r0, r3
 800957c:	f001 fb16 	bl	800abac <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	f003 0302 	and.w	r3, r3, #2
 8009586:	2b00      	cmp	r3, #0
 8009588:	d016      	beq.n	80095b8 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	2202      	movs	r2, #2
 8009590:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009596:	f043 0201 	orr.w	r2, r3, #1
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2204      	movs	r2, #4
 80095a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095aa:	4a23      	ldr	r2, [pc, #140]	; (8009638 <HAL_DCMI_IRQHandler+0x100>)
 80095ac:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095b2:	4618      	mov	r0, r3
 80095b4:	f001 fafa 	bl	800abac <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	f003 0310 	and.w	r3, r3, #16
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d006      	beq.n	80095d0 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	2210      	movs	r2, #16
 80095c8:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f7fe f948 	bl	8007860 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	f003 0308 	and.w	r3, r3, #8
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d006      	beq.n	80095e8 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	2208      	movs	r2, #8
 80095e0:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f7fe f952 	bl	800788c <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f003 0301 	and.w	r3, r3, #1
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d01d      	beq.n	800962e <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f003 0302 	and.w	r3, r3, #2
 80095fc:	2b02      	cmp	r3, #2
 80095fe:	d107      	bne.n	8009610 <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	68da      	ldr	r2, [r3, #12]
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f022 021e 	bic.w	r2, r2, #30
 800960e:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	68da      	ldr	r2, [r3, #12]
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f022 0201 	bic.w	r2, r2, #1
 800961e:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	2201      	movs	r2, #1
 8009626:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f7fe f924 	bl	8007876 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 800962e:	bf00      	nop
 8009630:	3710      	adds	r7, #16
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}
 8009636:	bf00      	nop
 8009638:	0800963d 	.word	0x0800963d

0800963c <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b084      	sub	sp, #16
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009648:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800964e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009650:	2b02      	cmp	r3, #2
 8009652:	d009      	beq.n	8009668 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	2201      	movs	r2, #1
 8009658:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009660:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8009668:	68f8      	ldr	r0, [r7, #12]
 800966a:	f7fe f91a 	bl	80078a2 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 800966e:	bf00      	nop
 8009670:	3710      	adds	r7, #16
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}
	...

08009678 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b086      	sub	sp, #24
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8009680:	f7ff fcb8 	bl	8008ff4 <HAL_GetTick>
 8009684:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d101      	bne.n	8009690 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800968c:	2301      	movs	r3, #1
 800968e:	e316      	b.n	8009cbe <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4a66      	ldr	r2, [pc, #408]	; (8009830 <HAL_DMA_Init+0x1b8>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d04a      	beq.n	8009730 <HAL_DMA_Init+0xb8>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	4a65      	ldr	r2, [pc, #404]	; (8009834 <HAL_DMA_Init+0x1bc>)
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d045      	beq.n	8009730 <HAL_DMA_Init+0xb8>
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	4a63      	ldr	r2, [pc, #396]	; (8009838 <HAL_DMA_Init+0x1c0>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d040      	beq.n	8009730 <HAL_DMA_Init+0xb8>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	4a62      	ldr	r2, [pc, #392]	; (800983c <HAL_DMA_Init+0x1c4>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d03b      	beq.n	8009730 <HAL_DMA_Init+0xb8>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	4a60      	ldr	r2, [pc, #384]	; (8009840 <HAL_DMA_Init+0x1c8>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d036      	beq.n	8009730 <HAL_DMA_Init+0xb8>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	4a5f      	ldr	r2, [pc, #380]	; (8009844 <HAL_DMA_Init+0x1cc>)
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d031      	beq.n	8009730 <HAL_DMA_Init+0xb8>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	4a5d      	ldr	r2, [pc, #372]	; (8009848 <HAL_DMA_Init+0x1d0>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d02c      	beq.n	8009730 <HAL_DMA_Init+0xb8>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	4a5c      	ldr	r2, [pc, #368]	; (800984c <HAL_DMA_Init+0x1d4>)
 80096dc:	4293      	cmp	r3, r2
 80096de:	d027      	beq.n	8009730 <HAL_DMA_Init+0xb8>
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	4a5a      	ldr	r2, [pc, #360]	; (8009850 <HAL_DMA_Init+0x1d8>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d022      	beq.n	8009730 <HAL_DMA_Init+0xb8>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	4a59      	ldr	r2, [pc, #356]	; (8009854 <HAL_DMA_Init+0x1dc>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d01d      	beq.n	8009730 <HAL_DMA_Init+0xb8>
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	4a57      	ldr	r2, [pc, #348]	; (8009858 <HAL_DMA_Init+0x1e0>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d018      	beq.n	8009730 <HAL_DMA_Init+0xb8>
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	4a56      	ldr	r2, [pc, #344]	; (800985c <HAL_DMA_Init+0x1e4>)
 8009704:	4293      	cmp	r3, r2
 8009706:	d013      	beq.n	8009730 <HAL_DMA_Init+0xb8>
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	4a54      	ldr	r2, [pc, #336]	; (8009860 <HAL_DMA_Init+0x1e8>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d00e      	beq.n	8009730 <HAL_DMA_Init+0xb8>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4a53      	ldr	r2, [pc, #332]	; (8009864 <HAL_DMA_Init+0x1ec>)
 8009718:	4293      	cmp	r3, r2
 800971a:	d009      	beq.n	8009730 <HAL_DMA_Init+0xb8>
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	4a51      	ldr	r2, [pc, #324]	; (8009868 <HAL_DMA_Init+0x1f0>)
 8009722:	4293      	cmp	r3, r2
 8009724:	d004      	beq.n	8009730 <HAL_DMA_Init+0xb8>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	4a50      	ldr	r2, [pc, #320]	; (800986c <HAL_DMA_Init+0x1f4>)
 800972c:	4293      	cmp	r3, r2
 800972e:	d101      	bne.n	8009734 <HAL_DMA_Init+0xbc>
 8009730:	2301      	movs	r3, #1
 8009732:	e000      	b.n	8009736 <HAL_DMA_Init+0xbe>
 8009734:	2300      	movs	r3, #0
 8009736:	2b00      	cmp	r3, #0
 8009738:	f000 813b 	beq.w	80099b2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2200      	movs	r2, #0
 8009740:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2202      	movs	r2, #2
 8009748:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	4a37      	ldr	r2, [pc, #220]	; (8009830 <HAL_DMA_Init+0x1b8>)
 8009752:	4293      	cmp	r3, r2
 8009754:	d04a      	beq.n	80097ec <HAL_DMA_Init+0x174>
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	4a36      	ldr	r2, [pc, #216]	; (8009834 <HAL_DMA_Init+0x1bc>)
 800975c:	4293      	cmp	r3, r2
 800975e:	d045      	beq.n	80097ec <HAL_DMA_Init+0x174>
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	4a34      	ldr	r2, [pc, #208]	; (8009838 <HAL_DMA_Init+0x1c0>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d040      	beq.n	80097ec <HAL_DMA_Init+0x174>
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	4a33      	ldr	r2, [pc, #204]	; (800983c <HAL_DMA_Init+0x1c4>)
 8009770:	4293      	cmp	r3, r2
 8009772:	d03b      	beq.n	80097ec <HAL_DMA_Init+0x174>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	4a31      	ldr	r2, [pc, #196]	; (8009840 <HAL_DMA_Init+0x1c8>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d036      	beq.n	80097ec <HAL_DMA_Init+0x174>
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	4a30      	ldr	r2, [pc, #192]	; (8009844 <HAL_DMA_Init+0x1cc>)
 8009784:	4293      	cmp	r3, r2
 8009786:	d031      	beq.n	80097ec <HAL_DMA_Init+0x174>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	4a2e      	ldr	r2, [pc, #184]	; (8009848 <HAL_DMA_Init+0x1d0>)
 800978e:	4293      	cmp	r3, r2
 8009790:	d02c      	beq.n	80097ec <HAL_DMA_Init+0x174>
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	4a2d      	ldr	r2, [pc, #180]	; (800984c <HAL_DMA_Init+0x1d4>)
 8009798:	4293      	cmp	r3, r2
 800979a:	d027      	beq.n	80097ec <HAL_DMA_Init+0x174>
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	4a2b      	ldr	r2, [pc, #172]	; (8009850 <HAL_DMA_Init+0x1d8>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d022      	beq.n	80097ec <HAL_DMA_Init+0x174>
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	4a2a      	ldr	r2, [pc, #168]	; (8009854 <HAL_DMA_Init+0x1dc>)
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d01d      	beq.n	80097ec <HAL_DMA_Init+0x174>
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	4a28      	ldr	r2, [pc, #160]	; (8009858 <HAL_DMA_Init+0x1e0>)
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d018      	beq.n	80097ec <HAL_DMA_Init+0x174>
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	4a27      	ldr	r2, [pc, #156]	; (800985c <HAL_DMA_Init+0x1e4>)
 80097c0:	4293      	cmp	r3, r2
 80097c2:	d013      	beq.n	80097ec <HAL_DMA_Init+0x174>
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	4a25      	ldr	r2, [pc, #148]	; (8009860 <HAL_DMA_Init+0x1e8>)
 80097ca:	4293      	cmp	r3, r2
 80097cc:	d00e      	beq.n	80097ec <HAL_DMA_Init+0x174>
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	4a24      	ldr	r2, [pc, #144]	; (8009864 <HAL_DMA_Init+0x1ec>)
 80097d4:	4293      	cmp	r3, r2
 80097d6:	d009      	beq.n	80097ec <HAL_DMA_Init+0x174>
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	4a22      	ldr	r2, [pc, #136]	; (8009868 <HAL_DMA_Init+0x1f0>)
 80097de:	4293      	cmp	r3, r2
 80097e0:	d004      	beq.n	80097ec <HAL_DMA_Init+0x174>
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	4a21      	ldr	r2, [pc, #132]	; (800986c <HAL_DMA_Init+0x1f4>)
 80097e8:	4293      	cmp	r3, r2
 80097ea:	d108      	bne.n	80097fe <HAL_DMA_Init+0x186>
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	681a      	ldr	r2, [r3, #0]
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f022 0201 	bic.w	r2, r2, #1
 80097fa:	601a      	str	r2, [r3, #0]
 80097fc:	e007      	b.n	800980e <HAL_DMA_Init+0x196>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	681a      	ldr	r2, [r3, #0]
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f022 0201 	bic.w	r2, r2, #1
 800980c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800980e:	e02f      	b.n	8009870 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009810:	f7ff fbf0 	bl	8008ff4 <HAL_GetTick>
 8009814:	4602      	mov	r2, r0
 8009816:	693b      	ldr	r3, [r7, #16]
 8009818:	1ad3      	subs	r3, r2, r3
 800981a:	2b05      	cmp	r3, #5
 800981c:	d928      	bls.n	8009870 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2220      	movs	r2, #32
 8009822:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2203      	movs	r2, #3
 8009828:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800982c:	2301      	movs	r3, #1
 800982e:	e246      	b.n	8009cbe <HAL_DMA_Init+0x646>
 8009830:	40020010 	.word	0x40020010
 8009834:	40020028 	.word	0x40020028
 8009838:	40020040 	.word	0x40020040
 800983c:	40020058 	.word	0x40020058
 8009840:	40020070 	.word	0x40020070
 8009844:	40020088 	.word	0x40020088
 8009848:	400200a0 	.word	0x400200a0
 800984c:	400200b8 	.word	0x400200b8
 8009850:	40020410 	.word	0x40020410
 8009854:	40020428 	.word	0x40020428
 8009858:	40020440 	.word	0x40020440
 800985c:	40020458 	.word	0x40020458
 8009860:	40020470 	.word	0x40020470
 8009864:	40020488 	.word	0x40020488
 8009868:	400204a0 	.word	0x400204a0
 800986c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f003 0301 	and.w	r3, r3, #1
 800987a:	2b00      	cmp	r3, #0
 800987c:	d1c8      	bne.n	8009810 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8009886:	697a      	ldr	r2, [r7, #20]
 8009888:	4b83      	ldr	r3, [pc, #524]	; (8009a98 <HAL_DMA_Init+0x420>)
 800988a:	4013      	ands	r3, r2
 800988c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8009896:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	691b      	ldr	r3, [r3, #16]
 800989c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80098a2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	699b      	ldr	r3, [r3, #24]
 80098a8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80098ae:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6a1b      	ldr	r3, [r3, #32]
 80098b4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80098b6:	697a      	ldr	r2, [r7, #20]
 80098b8:	4313      	orrs	r3, r2
 80098ba:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098c0:	2b04      	cmp	r3, #4
 80098c2:	d107      	bne.n	80098d4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098cc:	4313      	orrs	r3, r2
 80098ce:	697a      	ldr	r2, [r7, #20]
 80098d0:	4313      	orrs	r3, r2
 80098d2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80098d4:	4b71      	ldr	r3, [pc, #452]	; (8009a9c <HAL_DMA_Init+0x424>)
 80098d6:	681a      	ldr	r2, [r3, #0]
 80098d8:	4b71      	ldr	r3, [pc, #452]	; (8009aa0 <HAL_DMA_Init+0x428>)
 80098da:	4013      	ands	r3, r2
 80098dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098e0:	d328      	bcc.n	8009934 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	685b      	ldr	r3, [r3, #4]
 80098e6:	2b28      	cmp	r3, #40	; 0x28
 80098e8:	d903      	bls.n	80098f2 <HAL_DMA_Init+0x27a>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	685b      	ldr	r3, [r3, #4]
 80098ee:	2b2e      	cmp	r3, #46	; 0x2e
 80098f0:	d917      	bls.n	8009922 <HAL_DMA_Init+0x2aa>
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	685b      	ldr	r3, [r3, #4]
 80098f6:	2b3e      	cmp	r3, #62	; 0x3e
 80098f8:	d903      	bls.n	8009902 <HAL_DMA_Init+0x28a>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	685b      	ldr	r3, [r3, #4]
 80098fe:	2b42      	cmp	r3, #66	; 0x42
 8009900:	d90f      	bls.n	8009922 <HAL_DMA_Init+0x2aa>
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	685b      	ldr	r3, [r3, #4]
 8009906:	2b46      	cmp	r3, #70	; 0x46
 8009908:	d903      	bls.n	8009912 <HAL_DMA_Init+0x29a>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	685b      	ldr	r3, [r3, #4]
 800990e:	2b48      	cmp	r3, #72	; 0x48
 8009910:	d907      	bls.n	8009922 <HAL_DMA_Init+0x2aa>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	685b      	ldr	r3, [r3, #4]
 8009916:	2b4e      	cmp	r3, #78	; 0x4e
 8009918:	d905      	bls.n	8009926 <HAL_DMA_Init+0x2ae>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	685b      	ldr	r3, [r3, #4]
 800991e:	2b52      	cmp	r3, #82	; 0x52
 8009920:	d801      	bhi.n	8009926 <HAL_DMA_Init+0x2ae>
 8009922:	2301      	movs	r3, #1
 8009924:	e000      	b.n	8009928 <HAL_DMA_Init+0x2b0>
 8009926:	2300      	movs	r3, #0
 8009928:	2b00      	cmp	r3, #0
 800992a:	d003      	beq.n	8009934 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009932:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	697a      	ldr	r2, [r7, #20]
 800993a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	695b      	ldr	r3, [r3, #20]
 8009942:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	f023 0307 	bic.w	r3, r3, #7
 800994a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009950:	697a      	ldr	r2, [r7, #20]
 8009952:	4313      	orrs	r3, r2
 8009954:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800995a:	2b04      	cmp	r3, #4
 800995c:	d117      	bne.n	800998e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009962:	697a      	ldr	r2, [r7, #20]
 8009964:	4313      	orrs	r3, r2
 8009966:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800996c:	2b00      	cmp	r3, #0
 800996e:	d00e      	beq.n	800998e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f002 fcf3 	bl	800c35c <DMA_CheckFifoParam>
 8009976:	4603      	mov	r3, r0
 8009978:	2b00      	cmp	r3, #0
 800997a:	d008      	beq.n	800998e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2240      	movs	r2, #64	; 0x40
 8009980:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2201      	movs	r2, #1
 8009986:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800998a:	2301      	movs	r3, #1
 800998c:	e197      	b.n	8009cbe <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	697a      	ldr	r2, [r7, #20]
 8009994:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f002 fc2e 	bl	800c1f8 <DMA_CalcBaseAndBitshift>
 800999c:	4603      	mov	r3, r0
 800999e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099a4:	f003 031f 	and.w	r3, r3, #31
 80099a8:	223f      	movs	r2, #63	; 0x3f
 80099aa:	409a      	lsls	r2, r3
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	609a      	str	r2, [r3, #8]
 80099b0:	e0cd      	b.n	8009b4e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	4a3b      	ldr	r2, [pc, #236]	; (8009aa4 <HAL_DMA_Init+0x42c>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d022      	beq.n	8009a02 <HAL_DMA_Init+0x38a>
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	4a39      	ldr	r2, [pc, #228]	; (8009aa8 <HAL_DMA_Init+0x430>)
 80099c2:	4293      	cmp	r3, r2
 80099c4:	d01d      	beq.n	8009a02 <HAL_DMA_Init+0x38a>
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	4a38      	ldr	r2, [pc, #224]	; (8009aac <HAL_DMA_Init+0x434>)
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d018      	beq.n	8009a02 <HAL_DMA_Init+0x38a>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	4a36      	ldr	r2, [pc, #216]	; (8009ab0 <HAL_DMA_Init+0x438>)
 80099d6:	4293      	cmp	r3, r2
 80099d8:	d013      	beq.n	8009a02 <HAL_DMA_Init+0x38a>
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	4a35      	ldr	r2, [pc, #212]	; (8009ab4 <HAL_DMA_Init+0x43c>)
 80099e0:	4293      	cmp	r3, r2
 80099e2:	d00e      	beq.n	8009a02 <HAL_DMA_Init+0x38a>
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	4a33      	ldr	r2, [pc, #204]	; (8009ab8 <HAL_DMA_Init+0x440>)
 80099ea:	4293      	cmp	r3, r2
 80099ec:	d009      	beq.n	8009a02 <HAL_DMA_Init+0x38a>
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	4a32      	ldr	r2, [pc, #200]	; (8009abc <HAL_DMA_Init+0x444>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d004      	beq.n	8009a02 <HAL_DMA_Init+0x38a>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	4a30      	ldr	r2, [pc, #192]	; (8009ac0 <HAL_DMA_Init+0x448>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d101      	bne.n	8009a06 <HAL_DMA_Init+0x38e>
 8009a02:	2301      	movs	r3, #1
 8009a04:	e000      	b.n	8009a08 <HAL_DMA_Init+0x390>
 8009a06:	2300      	movs	r3, #0
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	f000 8097 	beq.w	8009b3c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	4a24      	ldr	r2, [pc, #144]	; (8009aa4 <HAL_DMA_Init+0x42c>)
 8009a14:	4293      	cmp	r3, r2
 8009a16:	d021      	beq.n	8009a5c <HAL_DMA_Init+0x3e4>
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	4a22      	ldr	r2, [pc, #136]	; (8009aa8 <HAL_DMA_Init+0x430>)
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d01c      	beq.n	8009a5c <HAL_DMA_Init+0x3e4>
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	4a21      	ldr	r2, [pc, #132]	; (8009aac <HAL_DMA_Init+0x434>)
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	d017      	beq.n	8009a5c <HAL_DMA_Init+0x3e4>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	4a1f      	ldr	r2, [pc, #124]	; (8009ab0 <HAL_DMA_Init+0x438>)
 8009a32:	4293      	cmp	r3, r2
 8009a34:	d012      	beq.n	8009a5c <HAL_DMA_Init+0x3e4>
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	4a1e      	ldr	r2, [pc, #120]	; (8009ab4 <HAL_DMA_Init+0x43c>)
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	d00d      	beq.n	8009a5c <HAL_DMA_Init+0x3e4>
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	4a1c      	ldr	r2, [pc, #112]	; (8009ab8 <HAL_DMA_Init+0x440>)
 8009a46:	4293      	cmp	r3, r2
 8009a48:	d008      	beq.n	8009a5c <HAL_DMA_Init+0x3e4>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	4a1b      	ldr	r2, [pc, #108]	; (8009abc <HAL_DMA_Init+0x444>)
 8009a50:	4293      	cmp	r3, r2
 8009a52:	d003      	beq.n	8009a5c <HAL_DMA_Init+0x3e4>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	4a19      	ldr	r2, [pc, #100]	; (8009ac0 <HAL_DMA_Init+0x448>)
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2200      	movs	r2, #0
 8009a62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2202      	movs	r2, #2
 8009a6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8009a76:	697a      	ldr	r2, [r7, #20]
 8009a78:	4b12      	ldr	r3, [pc, #72]	; (8009ac4 <HAL_DMA_Init+0x44c>)
 8009a7a:	4013      	ands	r3, r2
 8009a7c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	689b      	ldr	r3, [r3, #8]
 8009a82:	2b40      	cmp	r3, #64	; 0x40
 8009a84:	d020      	beq.n	8009ac8 <HAL_DMA_Init+0x450>
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	689b      	ldr	r3, [r3, #8]
 8009a8a:	2b80      	cmp	r3, #128	; 0x80
 8009a8c:	d102      	bne.n	8009a94 <HAL_DMA_Init+0x41c>
 8009a8e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009a92:	e01a      	b.n	8009aca <HAL_DMA_Init+0x452>
 8009a94:	2300      	movs	r3, #0
 8009a96:	e018      	b.n	8009aca <HAL_DMA_Init+0x452>
 8009a98:	fe10803f 	.word	0xfe10803f
 8009a9c:	5c001000 	.word	0x5c001000
 8009aa0:	ffff0000 	.word	0xffff0000
 8009aa4:	58025408 	.word	0x58025408
 8009aa8:	5802541c 	.word	0x5802541c
 8009aac:	58025430 	.word	0x58025430
 8009ab0:	58025444 	.word	0x58025444
 8009ab4:	58025458 	.word	0x58025458
 8009ab8:	5802546c 	.word	0x5802546c
 8009abc:	58025480 	.word	0x58025480
 8009ac0:	58025494 	.word	0x58025494
 8009ac4:	fffe000f 	.word	0xfffe000f
 8009ac8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8009aca:	687a      	ldr	r2, [r7, #4]
 8009acc:	68d2      	ldr	r2, [r2, #12]
 8009ace:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8009ad0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	691b      	ldr	r3, [r3, #16]
 8009ad6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8009ad8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	695b      	ldr	r3, [r3, #20]
 8009ade:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8009ae0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	699b      	ldr	r3, [r3, #24]
 8009ae6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8009ae8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	69db      	ldr	r3, [r3, #28]
 8009aee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8009af0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6a1b      	ldr	r3, [r3, #32]
 8009af6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8009af8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8009afa:	697a      	ldr	r2, [r7, #20]
 8009afc:	4313      	orrs	r3, r2
 8009afe:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	697a      	ldr	r2, [r7, #20]
 8009b06:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	461a      	mov	r2, r3
 8009b0e:	4b6e      	ldr	r3, [pc, #440]	; (8009cc8 <HAL_DMA_Init+0x650>)
 8009b10:	4413      	add	r3, r2
 8009b12:	4a6e      	ldr	r2, [pc, #440]	; (8009ccc <HAL_DMA_Init+0x654>)
 8009b14:	fba2 2303 	umull	r2, r3, r2, r3
 8009b18:	091b      	lsrs	r3, r3, #4
 8009b1a:	009a      	lsls	r2, r3, #2
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f002 fb69 	bl	800c1f8 <DMA_CalcBaseAndBitshift>
 8009b26:	4603      	mov	r3, r0
 8009b28:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b2e:	f003 031f 	and.w	r3, r3, #31
 8009b32:	2201      	movs	r2, #1
 8009b34:	409a      	lsls	r2, r3
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	605a      	str	r2, [r3, #4]
 8009b3a:	e008      	b.n	8009b4e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2240      	movs	r2, #64	; 0x40
 8009b40:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2203      	movs	r2, #3
 8009b46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	e0b7      	b.n	8009cbe <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	4a5f      	ldr	r2, [pc, #380]	; (8009cd0 <HAL_DMA_Init+0x658>)
 8009b54:	4293      	cmp	r3, r2
 8009b56:	d072      	beq.n	8009c3e <HAL_DMA_Init+0x5c6>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	4a5d      	ldr	r2, [pc, #372]	; (8009cd4 <HAL_DMA_Init+0x65c>)
 8009b5e:	4293      	cmp	r3, r2
 8009b60:	d06d      	beq.n	8009c3e <HAL_DMA_Init+0x5c6>
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	4a5c      	ldr	r2, [pc, #368]	; (8009cd8 <HAL_DMA_Init+0x660>)
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d068      	beq.n	8009c3e <HAL_DMA_Init+0x5c6>
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4a5a      	ldr	r2, [pc, #360]	; (8009cdc <HAL_DMA_Init+0x664>)
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d063      	beq.n	8009c3e <HAL_DMA_Init+0x5c6>
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	4a59      	ldr	r2, [pc, #356]	; (8009ce0 <HAL_DMA_Init+0x668>)
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	d05e      	beq.n	8009c3e <HAL_DMA_Init+0x5c6>
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	4a57      	ldr	r2, [pc, #348]	; (8009ce4 <HAL_DMA_Init+0x66c>)
 8009b86:	4293      	cmp	r3, r2
 8009b88:	d059      	beq.n	8009c3e <HAL_DMA_Init+0x5c6>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	4a56      	ldr	r2, [pc, #344]	; (8009ce8 <HAL_DMA_Init+0x670>)
 8009b90:	4293      	cmp	r3, r2
 8009b92:	d054      	beq.n	8009c3e <HAL_DMA_Init+0x5c6>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	4a54      	ldr	r2, [pc, #336]	; (8009cec <HAL_DMA_Init+0x674>)
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d04f      	beq.n	8009c3e <HAL_DMA_Init+0x5c6>
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	4a53      	ldr	r2, [pc, #332]	; (8009cf0 <HAL_DMA_Init+0x678>)
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	d04a      	beq.n	8009c3e <HAL_DMA_Init+0x5c6>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	4a51      	ldr	r2, [pc, #324]	; (8009cf4 <HAL_DMA_Init+0x67c>)
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d045      	beq.n	8009c3e <HAL_DMA_Init+0x5c6>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	4a50      	ldr	r2, [pc, #320]	; (8009cf8 <HAL_DMA_Init+0x680>)
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d040      	beq.n	8009c3e <HAL_DMA_Init+0x5c6>
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	4a4e      	ldr	r2, [pc, #312]	; (8009cfc <HAL_DMA_Init+0x684>)
 8009bc2:	4293      	cmp	r3, r2
 8009bc4:	d03b      	beq.n	8009c3e <HAL_DMA_Init+0x5c6>
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	4a4d      	ldr	r2, [pc, #308]	; (8009d00 <HAL_DMA_Init+0x688>)
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	d036      	beq.n	8009c3e <HAL_DMA_Init+0x5c6>
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	4a4b      	ldr	r2, [pc, #300]	; (8009d04 <HAL_DMA_Init+0x68c>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d031      	beq.n	8009c3e <HAL_DMA_Init+0x5c6>
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	4a4a      	ldr	r2, [pc, #296]	; (8009d08 <HAL_DMA_Init+0x690>)
 8009be0:	4293      	cmp	r3, r2
 8009be2:	d02c      	beq.n	8009c3e <HAL_DMA_Init+0x5c6>
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	4a48      	ldr	r2, [pc, #288]	; (8009d0c <HAL_DMA_Init+0x694>)
 8009bea:	4293      	cmp	r3, r2
 8009bec:	d027      	beq.n	8009c3e <HAL_DMA_Init+0x5c6>
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	4a47      	ldr	r2, [pc, #284]	; (8009d10 <HAL_DMA_Init+0x698>)
 8009bf4:	4293      	cmp	r3, r2
 8009bf6:	d022      	beq.n	8009c3e <HAL_DMA_Init+0x5c6>
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	4a45      	ldr	r2, [pc, #276]	; (8009d14 <HAL_DMA_Init+0x69c>)
 8009bfe:	4293      	cmp	r3, r2
 8009c00:	d01d      	beq.n	8009c3e <HAL_DMA_Init+0x5c6>
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	4a44      	ldr	r2, [pc, #272]	; (8009d18 <HAL_DMA_Init+0x6a0>)
 8009c08:	4293      	cmp	r3, r2
 8009c0a:	d018      	beq.n	8009c3e <HAL_DMA_Init+0x5c6>
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	4a42      	ldr	r2, [pc, #264]	; (8009d1c <HAL_DMA_Init+0x6a4>)
 8009c12:	4293      	cmp	r3, r2
 8009c14:	d013      	beq.n	8009c3e <HAL_DMA_Init+0x5c6>
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	4a41      	ldr	r2, [pc, #260]	; (8009d20 <HAL_DMA_Init+0x6a8>)
 8009c1c:	4293      	cmp	r3, r2
 8009c1e:	d00e      	beq.n	8009c3e <HAL_DMA_Init+0x5c6>
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	4a3f      	ldr	r2, [pc, #252]	; (8009d24 <HAL_DMA_Init+0x6ac>)
 8009c26:	4293      	cmp	r3, r2
 8009c28:	d009      	beq.n	8009c3e <HAL_DMA_Init+0x5c6>
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	4a3e      	ldr	r2, [pc, #248]	; (8009d28 <HAL_DMA_Init+0x6b0>)
 8009c30:	4293      	cmp	r3, r2
 8009c32:	d004      	beq.n	8009c3e <HAL_DMA_Init+0x5c6>
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	4a3c      	ldr	r2, [pc, #240]	; (8009d2c <HAL_DMA_Init+0x6b4>)
 8009c3a:	4293      	cmp	r3, r2
 8009c3c:	d101      	bne.n	8009c42 <HAL_DMA_Init+0x5ca>
 8009c3e:	2301      	movs	r3, #1
 8009c40:	e000      	b.n	8009c44 <HAL_DMA_Init+0x5cc>
 8009c42:	2300      	movs	r3, #0
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d032      	beq.n	8009cae <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f002 fc03 	bl	800c454 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	689b      	ldr	r3, [r3, #8]
 8009c52:	2b80      	cmp	r3, #128	; 0x80
 8009c54:	d102      	bne.n	8009c5c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2200      	movs	r2, #0
 8009c5a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	685a      	ldr	r2, [r3, #4]
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c64:	b2d2      	uxtb	r2, r2
 8009c66:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c6c:	687a      	ldr	r2, [r7, #4]
 8009c6e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009c70:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	685b      	ldr	r3, [r3, #4]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d010      	beq.n	8009c9c <HAL_DMA_Init+0x624>
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	685b      	ldr	r3, [r3, #4]
 8009c7e:	2b08      	cmp	r3, #8
 8009c80:	d80c      	bhi.n	8009c9c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f002 fc80 	bl	800c588 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c94:	687a      	ldr	r2, [r7, #4]
 8009c96:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009c98:	605a      	str	r2, [r3, #4]
 8009c9a:	e008      	b.n	8009cae <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2200      	movs	r2, #0
 8009cac:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2201      	movs	r2, #1
 8009cb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8009cbc:	2300      	movs	r3, #0
}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	3718      	adds	r7, #24
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}
 8009cc6:	bf00      	nop
 8009cc8:	a7fdabf8 	.word	0xa7fdabf8
 8009ccc:	cccccccd 	.word	0xcccccccd
 8009cd0:	40020010 	.word	0x40020010
 8009cd4:	40020028 	.word	0x40020028
 8009cd8:	40020040 	.word	0x40020040
 8009cdc:	40020058 	.word	0x40020058
 8009ce0:	40020070 	.word	0x40020070
 8009ce4:	40020088 	.word	0x40020088
 8009ce8:	400200a0 	.word	0x400200a0
 8009cec:	400200b8 	.word	0x400200b8
 8009cf0:	40020410 	.word	0x40020410
 8009cf4:	40020428 	.word	0x40020428
 8009cf8:	40020440 	.word	0x40020440
 8009cfc:	40020458 	.word	0x40020458
 8009d00:	40020470 	.word	0x40020470
 8009d04:	40020488 	.word	0x40020488
 8009d08:	400204a0 	.word	0x400204a0
 8009d0c:	400204b8 	.word	0x400204b8
 8009d10:	58025408 	.word	0x58025408
 8009d14:	5802541c 	.word	0x5802541c
 8009d18:	58025430 	.word	0x58025430
 8009d1c:	58025444 	.word	0x58025444
 8009d20:	58025458 	.word	0x58025458
 8009d24:	5802546c 	.word	0x5802546c
 8009d28:	58025480 	.word	0x58025480
 8009d2c:	58025494 	.word	0x58025494

08009d30 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b084      	sub	sp, #16
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d101      	bne.n	8009d42 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8009d3e:	2301      	movs	r3, #1
 8009d40:	e1a8      	b.n	800a094 <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	4a82      	ldr	r2, [pc, #520]	; (8009f50 <HAL_DMA_DeInit+0x220>)
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	d04a      	beq.n	8009de2 <HAL_DMA_DeInit+0xb2>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	4a80      	ldr	r2, [pc, #512]	; (8009f54 <HAL_DMA_DeInit+0x224>)
 8009d52:	4293      	cmp	r3, r2
 8009d54:	d045      	beq.n	8009de2 <HAL_DMA_DeInit+0xb2>
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	4a7f      	ldr	r2, [pc, #508]	; (8009f58 <HAL_DMA_DeInit+0x228>)
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d040      	beq.n	8009de2 <HAL_DMA_DeInit+0xb2>
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	4a7d      	ldr	r2, [pc, #500]	; (8009f5c <HAL_DMA_DeInit+0x22c>)
 8009d66:	4293      	cmp	r3, r2
 8009d68:	d03b      	beq.n	8009de2 <HAL_DMA_DeInit+0xb2>
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	4a7c      	ldr	r2, [pc, #496]	; (8009f60 <HAL_DMA_DeInit+0x230>)
 8009d70:	4293      	cmp	r3, r2
 8009d72:	d036      	beq.n	8009de2 <HAL_DMA_DeInit+0xb2>
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	4a7a      	ldr	r2, [pc, #488]	; (8009f64 <HAL_DMA_DeInit+0x234>)
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d031      	beq.n	8009de2 <HAL_DMA_DeInit+0xb2>
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	4a79      	ldr	r2, [pc, #484]	; (8009f68 <HAL_DMA_DeInit+0x238>)
 8009d84:	4293      	cmp	r3, r2
 8009d86:	d02c      	beq.n	8009de2 <HAL_DMA_DeInit+0xb2>
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	4a77      	ldr	r2, [pc, #476]	; (8009f6c <HAL_DMA_DeInit+0x23c>)
 8009d8e:	4293      	cmp	r3, r2
 8009d90:	d027      	beq.n	8009de2 <HAL_DMA_DeInit+0xb2>
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	4a76      	ldr	r2, [pc, #472]	; (8009f70 <HAL_DMA_DeInit+0x240>)
 8009d98:	4293      	cmp	r3, r2
 8009d9a:	d022      	beq.n	8009de2 <HAL_DMA_DeInit+0xb2>
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	4a74      	ldr	r2, [pc, #464]	; (8009f74 <HAL_DMA_DeInit+0x244>)
 8009da2:	4293      	cmp	r3, r2
 8009da4:	d01d      	beq.n	8009de2 <HAL_DMA_DeInit+0xb2>
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	4a73      	ldr	r2, [pc, #460]	; (8009f78 <HAL_DMA_DeInit+0x248>)
 8009dac:	4293      	cmp	r3, r2
 8009dae:	d018      	beq.n	8009de2 <HAL_DMA_DeInit+0xb2>
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	4a71      	ldr	r2, [pc, #452]	; (8009f7c <HAL_DMA_DeInit+0x24c>)
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d013      	beq.n	8009de2 <HAL_DMA_DeInit+0xb2>
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	4a70      	ldr	r2, [pc, #448]	; (8009f80 <HAL_DMA_DeInit+0x250>)
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	d00e      	beq.n	8009de2 <HAL_DMA_DeInit+0xb2>
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	4a6e      	ldr	r2, [pc, #440]	; (8009f84 <HAL_DMA_DeInit+0x254>)
 8009dca:	4293      	cmp	r3, r2
 8009dcc:	d009      	beq.n	8009de2 <HAL_DMA_DeInit+0xb2>
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	4a6d      	ldr	r2, [pc, #436]	; (8009f88 <HAL_DMA_DeInit+0x258>)
 8009dd4:	4293      	cmp	r3, r2
 8009dd6:	d004      	beq.n	8009de2 <HAL_DMA_DeInit+0xb2>
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	4a6b      	ldr	r2, [pc, #428]	; (8009f8c <HAL_DMA_DeInit+0x25c>)
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d108      	bne.n	8009df4 <HAL_DMA_DeInit+0xc4>
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	681a      	ldr	r2, [r3, #0]
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f022 0201 	bic.w	r2, r2, #1
 8009df0:	601a      	str	r2, [r3, #0]
 8009df2:	e007      	b.n	8009e04 <HAL_DMA_DeInit+0xd4>
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	681a      	ldr	r2, [r3, #0]
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f022 0201 	bic.w	r2, r2, #1
 8009e02:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	4a51      	ldr	r2, [pc, #324]	; (8009f50 <HAL_DMA_DeInit+0x220>)
 8009e0a:	4293      	cmp	r3, r2
 8009e0c:	d04a      	beq.n	8009ea4 <HAL_DMA_DeInit+0x174>
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	4a50      	ldr	r2, [pc, #320]	; (8009f54 <HAL_DMA_DeInit+0x224>)
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d045      	beq.n	8009ea4 <HAL_DMA_DeInit+0x174>
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	4a4e      	ldr	r2, [pc, #312]	; (8009f58 <HAL_DMA_DeInit+0x228>)
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d040      	beq.n	8009ea4 <HAL_DMA_DeInit+0x174>
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	4a4d      	ldr	r2, [pc, #308]	; (8009f5c <HAL_DMA_DeInit+0x22c>)
 8009e28:	4293      	cmp	r3, r2
 8009e2a:	d03b      	beq.n	8009ea4 <HAL_DMA_DeInit+0x174>
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	4a4b      	ldr	r2, [pc, #300]	; (8009f60 <HAL_DMA_DeInit+0x230>)
 8009e32:	4293      	cmp	r3, r2
 8009e34:	d036      	beq.n	8009ea4 <HAL_DMA_DeInit+0x174>
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	4a4a      	ldr	r2, [pc, #296]	; (8009f64 <HAL_DMA_DeInit+0x234>)
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	d031      	beq.n	8009ea4 <HAL_DMA_DeInit+0x174>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	4a48      	ldr	r2, [pc, #288]	; (8009f68 <HAL_DMA_DeInit+0x238>)
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d02c      	beq.n	8009ea4 <HAL_DMA_DeInit+0x174>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	4a47      	ldr	r2, [pc, #284]	; (8009f6c <HAL_DMA_DeInit+0x23c>)
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d027      	beq.n	8009ea4 <HAL_DMA_DeInit+0x174>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	4a45      	ldr	r2, [pc, #276]	; (8009f70 <HAL_DMA_DeInit+0x240>)
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d022      	beq.n	8009ea4 <HAL_DMA_DeInit+0x174>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4a44      	ldr	r2, [pc, #272]	; (8009f74 <HAL_DMA_DeInit+0x244>)
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d01d      	beq.n	8009ea4 <HAL_DMA_DeInit+0x174>
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	4a42      	ldr	r2, [pc, #264]	; (8009f78 <HAL_DMA_DeInit+0x248>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d018      	beq.n	8009ea4 <HAL_DMA_DeInit+0x174>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	4a41      	ldr	r2, [pc, #260]	; (8009f7c <HAL_DMA_DeInit+0x24c>)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d013      	beq.n	8009ea4 <HAL_DMA_DeInit+0x174>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	4a3f      	ldr	r2, [pc, #252]	; (8009f80 <HAL_DMA_DeInit+0x250>)
 8009e82:	4293      	cmp	r3, r2
 8009e84:	d00e      	beq.n	8009ea4 <HAL_DMA_DeInit+0x174>
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	4a3e      	ldr	r2, [pc, #248]	; (8009f84 <HAL_DMA_DeInit+0x254>)
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d009      	beq.n	8009ea4 <HAL_DMA_DeInit+0x174>
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	4a3c      	ldr	r2, [pc, #240]	; (8009f88 <HAL_DMA_DeInit+0x258>)
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d004      	beq.n	8009ea4 <HAL_DMA_DeInit+0x174>
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	4a3b      	ldr	r2, [pc, #236]	; (8009f8c <HAL_DMA_DeInit+0x25c>)
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d101      	bne.n	8009ea8 <HAL_DMA_DeInit+0x178>
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	e000      	b.n	8009eaa <HAL_DMA_DeInit+0x17a>
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d025      	beq.n	8009efa <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	2200      	movs	r2, #0
 8009ecc:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	2221      	movs	r2, #33	; 0x21
 8009edc:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f002 f98a 	bl	800c1f8 <DMA_CalcBaseAndBitshift>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009eec:	f003 031f 	and.w	r3, r3, #31
 8009ef0:	223f      	movs	r2, #63	; 0x3f
 8009ef2:	409a      	lsls	r2, r3
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	609a      	str	r2, [r3, #8]
 8009ef8:	e081      	b.n	8009ffe <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	4a24      	ldr	r2, [pc, #144]	; (8009f90 <HAL_DMA_DeInit+0x260>)
 8009f00:	4293      	cmp	r3, r2
 8009f02:	d022      	beq.n	8009f4a <HAL_DMA_DeInit+0x21a>
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	4a22      	ldr	r2, [pc, #136]	; (8009f94 <HAL_DMA_DeInit+0x264>)
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d01d      	beq.n	8009f4a <HAL_DMA_DeInit+0x21a>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	4a21      	ldr	r2, [pc, #132]	; (8009f98 <HAL_DMA_DeInit+0x268>)
 8009f14:	4293      	cmp	r3, r2
 8009f16:	d018      	beq.n	8009f4a <HAL_DMA_DeInit+0x21a>
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	4a1f      	ldr	r2, [pc, #124]	; (8009f9c <HAL_DMA_DeInit+0x26c>)
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	d013      	beq.n	8009f4a <HAL_DMA_DeInit+0x21a>
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	4a1e      	ldr	r2, [pc, #120]	; (8009fa0 <HAL_DMA_DeInit+0x270>)
 8009f28:	4293      	cmp	r3, r2
 8009f2a:	d00e      	beq.n	8009f4a <HAL_DMA_DeInit+0x21a>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	4a1c      	ldr	r2, [pc, #112]	; (8009fa4 <HAL_DMA_DeInit+0x274>)
 8009f32:	4293      	cmp	r3, r2
 8009f34:	d009      	beq.n	8009f4a <HAL_DMA_DeInit+0x21a>
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	4a1b      	ldr	r2, [pc, #108]	; (8009fa8 <HAL_DMA_DeInit+0x278>)
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d004      	beq.n	8009f4a <HAL_DMA_DeInit+0x21a>
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	4a19      	ldr	r2, [pc, #100]	; (8009fac <HAL_DMA_DeInit+0x27c>)
 8009f46:	4293      	cmp	r3, r2
 8009f48:	d132      	bne.n	8009fb0 <HAL_DMA_DeInit+0x280>
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	e031      	b.n	8009fb2 <HAL_DMA_DeInit+0x282>
 8009f4e:	bf00      	nop
 8009f50:	40020010 	.word	0x40020010
 8009f54:	40020028 	.word	0x40020028
 8009f58:	40020040 	.word	0x40020040
 8009f5c:	40020058 	.word	0x40020058
 8009f60:	40020070 	.word	0x40020070
 8009f64:	40020088 	.word	0x40020088
 8009f68:	400200a0 	.word	0x400200a0
 8009f6c:	400200b8 	.word	0x400200b8
 8009f70:	40020410 	.word	0x40020410
 8009f74:	40020428 	.word	0x40020428
 8009f78:	40020440 	.word	0x40020440
 8009f7c:	40020458 	.word	0x40020458
 8009f80:	40020470 	.word	0x40020470
 8009f84:	40020488 	.word	0x40020488
 8009f88:	400204a0 	.word	0x400204a0
 8009f8c:	400204b8 	.word	0x400204b8
 8009f90:	58025408 	.word	0x58025408
 8009f94:	5802541c 	.word	0x5802541c
 8009f98:	58025430 	.word	0x58025430
 8009f9c:	58025444 	.word	0x58025444
 8009fa0:	58025458 	.word	0x58025458
 8009fa4:	5802546c 	.word	0x5802546c
 8009fa8:	58025480 	.word	0x58025480
 8009fac:	58025494 	.word	0x58025494
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d021      	beq.n	8009ffa <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	2200      	movs	r2, #0
 8009fdc:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f002 f90a 	bl	800c1f8 <DMA_CalcBaseAndBitshift>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fec:	f003 031f 	and.w	r3, r3, #31
 8009ff0:	2201      	movs	r2, #1
 8009ff2:	409a      	lsls	r2, r3
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	605a      	str	r2, [r3, #4]
 8009ff8:	e001      	b.n	8009ffe <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	e04a      	b.n	800a094 <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f002 fa28 	bl	800c454 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d008      	beq.n	800a01e <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a010:	2200      	movs	r2, #0
 800a012:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a018:	687a      	ldr	r2, [r7, #4]
 800a01a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800a01c:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	685b      	ldr	r3, [r3, #4]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d00f      	beq.n	800a046 <HAL_DMA_DeInit+0x316>
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	685b      	ldr	r3, [r3, #4]
 800a02a:	2b08      	cmp	r3, #8
 800a02c:	d80b      	bhi.n	800a046 <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f002 faaa 	bl	800c588 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a038:	2200      	movs	r2, #0
 800a03a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a040:	687a      	ldr	r2, [r7, #4]
 800a042:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800a044:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2200      	movs	r2, #0
 800a04a:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2200      	movs	r2, #0
 800a050:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2200      	movs	r2, #0
 800a056:	675a      	str	r2, [r3, #116]	; 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2200      	movs	r2, #0
 800a05c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2200      	movs	r2, #0
 800a062:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback     = NULL;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2200      	movs	r2, #0
 800a068:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2200      	movs	r2, #0
 800a06e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback      = NULL;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2200      	movs	r2, #0
 800a074:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback      = NULL;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2200      	movs	r2, #0
 800a07a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2200      	movs	r2, #0
 800a080:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2200      	movs	r2, #0
 800a086:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2200      	movs	r2, #0
 800a08e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800a092:	2300      	movs	r3, #0
}
 800a094:	4618      	mov	r0, r3
 800a096:	3710      	adds	r7, #16
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}

0800a09c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b086      	sub	sp, #24
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	60f8      	str	r0, [r7, #12]
 800a0a4:	60b9      	str	r1, [r7, #8]
 800a0a6:	607a      	str	r2, [r7, #4]
 800a0a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d101      	bne.n	800a0b8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	e226      	b.n	800a506 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a0be:	2b01      	cmp	r3, #1
 800a0c0:	d101      	bne.n	800a0c6 <HAL_DMA_Start_IT+0x2a>
 800a0c2:	2302      	movs	r3, #2
 800a0c4:	e21f      	b.n	800a506 <HAL_DMA_Start_IT+0x46a>
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	2201      	movs	r2, #1
 800a0ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a0d4:	b2db      	uxtb	r3, r3
 800a0d6:	2b01      	cmp	r3, #1
 800a0d8:	f040 820a 	bne.w	800a4f0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	2202      	movs	r2, #2
 800a0e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	4a68      	ldr	r2, [pc, #416]	; (800a290 <HAL_DMA_Start_IT+0x1f4>)
 800a0f0:	4293      	cmp	r3, r2
 800a0f2:	d04a      	beq.n	800a18a <HAL_DMA_Start_IT+0xee>
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	4a66      	ldr	r2, [pc, #408]	; (800a294 <HAL_DMA_Start_IT+0x1f8>)
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	d045      	beq.n	800a18a <HAL_DMA_Start_IT+0xee>
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	4a65      	ldr	r2, [pc, #404]	; (800a298 <HAL_DMA_Start_IT+0x1fc>)
 800a104:	4293      	cmp	r3, r2
 800a106:	d040      	beq.n	800a18a <HAL_DMA_Start_IT+0xee>
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	4a63      	ldr	r2, [pc, #396]	; (800a29c <HAL_DMA_Start_IT+0x200>)
 800a10e:	4293      	cmp	r3, r2
 800a110:	d03b      	beq.n	800a18a <HAL_DMA_Start_IT+0xee>
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	4a62      	ldr	r2, [pc, #392]	; (800a2a0 <HAL_DMA_Start_IT+0x204>)
 800a118:	4293      	cmp	r3, r2
 800a11a:	d036      	beq.n	800a18a <HAL_DMA_Start_IT+0xee>
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	4a60      	ldr	r2, [pc, #384]	; (800a2a4 <HAL_DMA_Start_IT+0x208>)
 800a122:	4293      	cmp	r3, r2
 800a124:	d031      	beq.n	800a18a <HAL_DMA_Start_IT+0xee>
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	4a5f      	ldr	r2, [pc, #380]	; (800a2a8 <HAL_DMA_Start_IT+0x20c>)
 800a12c:	4293      	cmp	r3, r2
 800a12e:	d02c      	beq.n	800a18a <HAL_DMA_Start_IT+0xee>
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	4a5d      	ldr	r2, [pc, #372]	; (800a2ac <HAL_DMA_Start_IT+0x210>)
 800a136:	4293      	cmp	r3, r2
 800a138:	d027      	beq.n	800a18a <HAL_DMA_Start_IT+0xee>
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	4a5c      	ldr	r2, [pc, #368]	; (800a2b0 <HAL_DMA_Start_IT+0x214>)
 800a140:	4293      	cmp	r3, r2
 800a142:	d022      	beq.n	800a18a <HAL_DMA_Start_IT+0xee>
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	4a5a      	ldr	r2, [pc, #360]	; (800a2b4 <HAL_DMA_Start_IT+0x218>)
 800a14a:	4293      	cmp	r3, r2
 800a14c:	d01d      	beq.n	800a18a <HAL_DMA_Start_IT+0xee>
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	4a59      	ldr	r2, [pc, #356]	; (800a2b8 <HAL_DMA_Start_IT+0x21c>)
 800a154:	4293      	cmp	r3, r2
 800a156:	d018      	beq.n	800a18a <HAL_DMA_Start_IT+0xee>
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	4a57      	ldr	r2, [pc, #348]	; (800a2bc <HAL_DMA_Start_IT+0x220>)
 800a15e:	4293      	cmp	r3, r2
 800a160:	d013      	beq.n	800a18a <HAL_DMA_Start_IT+0xee>
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	4a56      	ldr	r2, [pc, #344]	; (800a2c0 <HAL_DMA_Start_IT+0x224>)
 800a168:	4293      	cmp	r3, r2
 800a16a:	d00e      	beq.n	800a18a <HAL_DMA_Start_IT+0xee>
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	4a54      	ldr	r2, [pc, #336]	; (800a2c4 <HAL_DMA_Start_IT+0x228>)
 800a172:	4293      	cmp	r3, r2
 800a174:	d009      	beq.n	800a18a <HAL_DMA_Start_IT+0xee>
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	4a53      	ldr	r2, [pc, #332]	; (800a2c8 <HAL_DMA_Start_IT+0x22c>)
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d004      	beq.n	800a18a <HAL_DMA_Start_IT+0xee>
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	4a51      	ldr	r2, [pc, #324]	; (800a2cc <HAL_DMA_Start_IT+0x230>)
 800a186:	4293      	cmp	r3, r2
 800a188:	d108      	bne.n	800a19c <HAL_DMA_Start_IT+0x100>
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	681a      	ldr	r2, [r3, #0]
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f022 0201 	bic.w	r2, r2, #1
 800a198:	601a      	str	r2, [r3, #0]
 800a19a:	e007      	b.n	800a1ac <HAL_DMA_Start_IT+0x110>
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	681a      	ldr	r2, [r3, #0]
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f022 0201 	bic.w	r2, r2, #1
 800a1aa:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	687a      	ldr	r2, [r7, #4]
 800a1b0:	68b9      	ldr	r1, [r7, #8]
 800a1b2:	68f8      	ldr	r0, [r7, #12]
 800a1b4:	f001 fe74 	bl	800bea0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	4a34      	ldr	r2, [pc, #208]	; (800a290 <HAL_DMA_Start_IT+0x1f4>)
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d04a      	beq.n	800a258 <HAL_DMA_Start_IT+0x1bc>
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	4a33      	ldr	r2, [pc, #204]	; (800a294 <HAL_DMA_Start_IT+0x1f8>)
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	d045      	beq.n	800a258 <HAL_DMA_Start_IT+0x1bc>
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	4a31      	ldr	r2, [pc, #196]	; (800a298 <HAL_DMA_Start_IT+0x1fc>)
 800a1d2:	4293      	cmp	r3, r2
 800a1d4:	d040      	beq.n	800a258 <HAL_DMA_Start_IT+0x1bc>
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	4a30      	ldr	r2, [pc, #192]	; (800a29c <HAL_DMA_Start_IT+0x200>)
 800a1dc:	4293      	cmp	r3, r2
 800a1de:	d03b      	beq.n	800a258 <HAL_DMA_Start_IT+0x1bc>
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	4a2e      	ldr	r2, [pc, #184]	; (800a2a0 <HAL_DMA_Start_IT+0x204>)
 800a1e6:	4293      	cmp	r3, r2
 800a1e8:	d036      	beq.n	800a258 <HAL_DMA_Start_IT+0x1bc>
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	4a2d      	ldr	r2, [pc, #180]	; (800a2a4 <HAL_DMA_Start_IT+0x208>)
 800a1f0:	4293      	cmp	r3, r2
 800a1f2:	d031      	beq.n	800a258 <HAL_DMA_Start_IT+0x1bc>
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	4a2b      	ldr	r2, [pc, #172]	; (800a2a8 <HAL_DMA_Start_IT+0x20c>)
 800a1fa:	4293      	cmp	r3, r2
 800a1fc:	d02c      	beq.n	800a258 <HAL_DMA_Start_IT+0x1bc>
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	4a2a      	ldr	r2, [pc, #168]	; (800a2ac <HAL_DMA_Start_IT+0x210>)
 800a204:	4293      	cmp	r3, r2
 800a206:	d027      	beq.n	800a258 <HAL_DMA_Start_IT+0x1bc>
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	4a28      	ldr	r2, [pc, #160]	; (800a2b0 <HAL_DMA_Start_IT+0x214>)
 800a20e:	4293      	cmp	r3, r2
 800a210:	d022      	beq.n	800a258 <HAL_DMA_Start_IT+0x1bc>
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	4a27      	ldr	r2, [pc, #156]	; (800a2b4 <HAL_DMA_Start_IT+0x218>)
 800a218:	4293      	cmp	r3, r2
 800a21a:	d01d      	beq.n	800a258 <HAL_DMA_Start_IT+0x1bc>
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	4a25      	ldr	r2, [pc, #148]	; (800a2b8 <HAL_DMA_Start_IT+0x21c>)
 800a222:	4293      	cmp	r3, r2
 800a224:	d018      	beq.n	800a258 <HAL_DMA_Start_IT+0x1bc>
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	4a24      	ldr	r2, [pc, #144]	; (800a2bc <HAL_DMA_Start_IT+0x220>)
 800a22c:	4293      	cmp	r3, r2
 800a22e:	d013      	beq.n	800a258 <HAL_DMA_Start_IT+0x1bc>
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	4a22      	ldr	r2, [pc, #136]	; (800a2c0 <HAL_DMA_Start_IT+0x224>)
 800a236:	4293      	cmp	r3, r2
 800a238:	d00e      	beq.n	800a258 <HAL_DMA_Start_IT+0x1bc>
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	4a21      	ldr	r2, [pc, #132]	; (800a2c4 <HAL_DMA_Start_IT+0x228>)
 800a240:	4293      	cmp	r3, r2
 800a242:	d009      	beq.n	800a258 <HAL_DMA_Start_IT+0x1bc>
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	4a1f      	ldr	r2, [pc, #124]	; (800a2c8 <HAL_DMA_Start_IT+0x22c>)
 800a24a:	4293      	cmp	r3, r2
 800a24c:	d004      	beq.n	800a258 <HAL_DMA_Start_IT+0x1bc>
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	4a1e      	ldr	r2, [pc, #120]	; (800a2cc <HAL_DMA_Start_IT+0x230>)
 800a254:	4293      	cmp	r3, r2
 800a256:	d101      	bne.n	800a25c <HAL_DMA_Start_IT+0x1c0>
 800a258:	2301      	movs	r3, #1
 800a25a:	e000      	b.n	800a25e <HAL_DMA_Start_IT+0x1c2>
 800a25c:	2300      	movs	r3, #0
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d036      	beq.n	800a2d0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f023 021e 	bic.w	r2, r3, #30
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f042 0216 	orr.w	r2, r2, #22
 800a274:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d03e      	beq.n	800a2fc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	681a      	ldr	r2, [r3, #0]
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	f042 0208 	orr.w	r2, r2, #8
 800a28c:	601a      	str	r2, [r3, #0]
 800a28e:	e035      	b.n	800a2fc <HAL_DMA_Start_IT+0x260>
 800a290:	40020010 	.word	0x40020010
 800a294:	40020028 	.word	0x40020028
 800a298:	40020040 	.word	0x40020040
 800a29c:	40020058 	.word	0x40020058
 800a2a0:	40020070 	.word	0x40020070
 800a2a4:	40020088 	.word	0x40020088
 800a2a8:	400200a0 	.word	0x400200a0
 800a2ac:	400200b8 	.word	0x400200b8
 800a2b0:	40020410 	.word	0x40020410
 800a2b4:	40020428 	.word	0x40020428
 800a2b8:	40020440 	.word	0x40020440
 800a2bc:	40020458 	.word	0x40020458
 800a2c0:	40020470 	.word	0x40020470
 800a2c4:	40020488 	.word	0x40020488
 800a2c8:	400204a0 	.word	0x400204a0
 800a2cc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	f023 020e 	bic.w	r2, r3, #14
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	f042 020a 	orr.w	r2, r2, #10
 800a2e2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d007      	beq.n	800a2fc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	681a      	ldr	r2, [r3, #0]
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f042 0204 	orr.w	r2, r2, #4
 800a2fa:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	4a83      	ldr	r2, [pc, #524]	; (800a510 <HAL_DMA_Start_IT+0x474>)
 800a302:	4293      	cmp	r3, r2
 800a304:	d072      	beq.n	800a3ec <HAL_DMA_Start_IT+0x350>
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	4a82      	ldr	r2, [pc, #520]	; (800a514 <HAL_DMA_Start_IT+0x478>)
 800a30c:	4293      	cmp	r3, r2
 800a30e:	d06d      	beq.n	800a3ec <HAL_DMA_Start_IT+0x350>
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	4a80      	ldr	r2, [pc, #512]	; (800a518 <HAL_DMA_Start_IT+0x47c>)
 800a316:	4293      	cmp	r3, r2
 800a318:	d068      	beq.n	800a3ec <HAL_DMA_Start_IT+0x350>
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	4a7f      	ldr	r2, [pc, #508]	; (800a51c <HAL_DMA_Start_IT+0x480>)
 800a320:	4293      	cmp	r3, r2
 800a322:	d063      	beq.n	800a3ec <HAL_DMA_Start_IT+0x350>
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	4a7d      	ldr	r2, [pc, #500]	; (800a520 <HAL_DMA_Start_IT+0x484>)
 800a32a:	4293      	cmp	r3, r2
 800a32c:	d05e      	beq.n	800a3ec <HAL_DMA_Start_IT+0x350>
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	4a7c      	ldr	r2, [pc, #496]	; (800a524 <HAL_DMA_Start_IT+0x488>)
 800a334:	4293      	cmp	r3, r2
 800a336:	d059      	beq.n	800a3ec <HAL_DMA_Start_IT+0x350>
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	4a7a      	ldr	r2, [pc, #488]	; (800a528 <HAL_DMA_Start_IT+0x48c>)
 800a33e:	4293      	cmp	r3, r2
 800a340:	d054      	beq.n	800a3ec <HAL_DMA_Start_IT+0x350>
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	4a79      	ldr	r2, [pc, #484]	; (800a52c <HAL_DMA_Start_IT+0x490>)
 800a348:	4293      	cmp	r3, r2
 800a34a:	d04f      	beq.n	800a3ec <HAL_DMA_Start_IT+0x350>
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	4a77      	ldr	r2, [pc, #476]	; (800a530 <HAL_DMA_Start_IT+0x494>)
 800a352:	4293      	cmp	r3, r2
 800a354:	d04a      	beq.n	800a3ec <HAL_DMA_Start_IT+0x350>
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	4a76      	ldr	r2, [pc, #472]	; (800a534 <HAL_DMA_Start_IT+0x498>)
 800a35c:	4293      	cmp	r3, r2
 800a35e:	d045      	beq.n	800a3ec <HAL_DMA_Start_IT+0x350>
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	4a74      	ldr	r2, [pc, #464]	; (800a538 <HAL_DMA_Start_IT+0x49c>)
 800a366:	4293      	cmp	r3, r2
 800a368:	d040      	beq.n	800a3ec <HAL_DMA_Start_IT+0x350>
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	4a73      	ldr	r2, [pc, #460]	; (800a53c <HAL_DMA_Start_IT+0x4a0>)
 800a370:	4293      	cmp	r3, r2
 800a372:	d03b      	beq.n	800a3ec <HAL_DMA_Start_IT+0x350>
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	4a71      	ldr	r2, [pc, #452]	; (800a540 <HAL_DMA_Start_IT+0x4a4>)
 800a37a:	4293      	cmp	r3, r2
 800a37c:	d036      	beq.n	800a3ec <HAL_DMA_Start_IT+0x350>
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	4a70      	ldr	r2, [pc, #448]	; (800a544 <HAL_DMA_Start_IT+0x4a8>)
 800a384:	4293      	cmp	r3, r2
 800a386:	d031      	beq.n	800a3ec <HAL_DMA_Start_IT+0x350>
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	4a6e      	ldr	r2, [pc, #440]	; (800a548 <HAL_DMA_Start_IT+0x4ac>)
 800a38e:	4293      	cmp	r3, r2
 800a390:	d02c      	beq.n	800a3ec <HAL_DMA_Start_IT+0x350>
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	4a6d      	ldr	r2, [pc, #436]	; (800a54c <HAL_DMA_Start_IT+0x4b0>)
 800a398:	4293      	cmp	r3, r2
 800a39a:	d027      	beq.n	800a3ec <HAL_DMA_Start_IT+0x350>
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	4a6b      	ldr	r2, [pc, #428]	; (800a550 <HAL_DMA_Start_IT+0x4b4>)
 800a3a2:	4293      	cmp	r3, r2
 800a3a4:	d022      	beq.n	800a3ec <HAL_DMA_Start_IT+0x350>
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	4a6a      	ldr	r2, [pc, #424]	; (800a554 <HAL_DMA_Start_IT+0x4b8>)
 800a3ac:	4293      	cmp	r3, r2
 800a3ae:	d01d      	beq.n	800a3ec <HAL_DMA_Start_IT+0x350>
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	4a68      	ldr	r2, [pc, #416]	; (800a558 <HAL_DMA_Start_IT+0x4bc>)
 800a3b6:	4293      	cmp	r3, r2
 800a3b8:	d018      	beq.n	800a3ec <HAL_DMA_Start_IT+0x350>
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	4a67      	ldr	r2, [pc, #412]	; (800a55c <HAL_DMA_Start_IT+0x4c0>)
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	d013      	beq.n	800a3ec <HAL_DMA_Start_IT+0x350>
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	4a65      	ldr	r2, [pc, #404]	; (800a560 <HAL_DMA_Start_IT+0x4c4>)
 800a3ca:	4293      	cmp	r3, r2
 800a3cc:	d00e      	beq.n	800a3ec <HAL_DMA_Start_IT+0x350>
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	4a64      	ldr	r2, [pc, #400]	; (800a564 <HAL_DMA_Start_IT+0x4c8>)
 800a3d4:	4293      	cmp	r3, r2
 800a3d6:	d009      	beq.n	800a3ec <HAL_DMA_Start_IT+0x350>
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	4a62      	ldr	r2, [pc, #392]	; (800a568 <HAL_DMA_Start_IT+0x4cc>)
 800a3de:	4293      	cmp	r3, r2
 800a3e0:	d004      	beq.n	800a3ec <HAL_DMA_Start_IT+0x350>
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	4a61      	ldr	r2, [pc, #388]	; (800a56c <HAL_DMA_Start_IT+0x4d0>)
 800a3e8:	4293      	cmp	r3, r2
 800a3ea:	d101      	bne.n	800a3f0 <HAL_DMA_Start_IT+0x354>
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	e000      	b.n	800a3f2 <HAL_DMA_Start_IT+0x356>
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d01a      	beq.n	800a42c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a400:	2b00      	cmp	r3, #0
 800a402:	d007      	beq.n	800a414 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a408:	681a      	ldr	r2, [r3, #0]
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a40e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a412:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d007      	beq.n	800a42c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a420:	681a      	ldr	r2, [r3, #0]
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a426:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a42a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	4a37      	ldr	r2, [pc, #220]	; (800a510 <HAL_DMA_Start_IT+0x474>)
 800a432:	4293      	cmp	r3, r2
 800a434:	d04a      	beq.n	800a4cc <HAL_DMA_Start_IT+0x430>
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	4a36      	ldr	r2, [pc, #216]	; (800a514 <HAL_DMA_Start_IT+0x478>)
 800a43c:	4293      	cmp	r3, r2
 800a43e:	d045      	beq.n	800a4cc <HAL_DMA_Start_IT+0x430>
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	4a34      	ldr	r2, [pc, #208]	; (800a518 <HAL_DMA_Start_IT+0x47c>)
 800a446:	4293      	cmp	r3, r2
 800a448:	d040      	beq.n	800a4cc <HAL_DMA_Start_IT+0x430>
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	4a33      	ldr	r2, [pc, #204]	; (800a51c <HAL_DMA_Start_IT+0x480>)
 800a450:	4293      	cmp	r3, r2
 800a452:	d03b      	beq.n	800a4cc <HAL_DMA_Start_IT+0x430>
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	4a31      	ldr	r2, [pc, #196]	; (800a520 <HAL_DMA_Start_IT+0x484>)
 800a45a:	4293      	cmp	r3, r2
 800a45c:	d036      	beq.n	800a4cc <HAL_DMA_Start_IT+0x430>
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	4a30      	ldr	r2, [pc, #192]	; (800a524 <HAL_DMA_Start_IT+0x488>)
 800a464:	4293      	cmp	r3, r2
 800a466:	d031      	beq.n	800a4cc <HAL_DMA_Start_IT+0x430>
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	4a2e      	ldr	r2, [pc, #184]	; (800a528 <HAL_DMA_Start_IT+0x48c>)
 800a46e:	4293      	cmp	r3, r2
 800a470:	d02c      	beq.n	800a4cc <HAL_DMA_Start_IT+0x430>
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	4a2d      	ldr	r2, [pc, #180]	; (800a52c <HAL_DMA_Start_IT+0x490>)
 800a478:	4293      	cmp	r3, r2
 800a47a:	d027      	beq.n	800a4cc <HAL_DMA_Start_IT+0x430>
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	4a2b      	ldr	r2, [pc, #172]	; (800a530 <HAL_DMA_Start_IT+0x494>)
 800a482:	4293      	cmp	r3, r2
 800a484:	d022      	beq.n	800a4cc <HAL_DMA_Start_IT+0x430>
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	4a2a      	ldr	r2, [pc, #168]	; (800a534 <HAL_DMA_Start_IT+0x498>)
 800a48c:	4293      	cmp	r3, r2
 800a48e:	d01d      	beq.n	800a4cc <HAL_DMA_Start_IT+0x430>
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	4a28      	ldr	r2, [pc, #160]	; (800a538 <HAL_DMA_Start_IT+0x49c>)
 800a496:	4293      	cmp	r3, r2
 800a498:	d018      	beq.n	800a4cc <HAL_DMA_Start_IT+0x430>
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	4a27      	ldr	r2, [pc, #156]	; (800a53c <HAL_DMA_Start_IT+0x4a0>)
 800a4a0:	4293      	cmp	r3, r2
 800a4a2:	d013      	beq.n	800a4cc <HAL_DMA_Start_IT+0x430>
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	4a25      	ldr	r2, [pc, #148]	; (800a540 <HAL_DMA_Start_IT+0x4a4>)
 800a4aa:	4293      	cmp	r3, r2
 800a4ac:	d00e      	beq.n	800a4cc <HAL_DMA_Start_IT+0x430>
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	4a24      	ldr	r2, [pc, #144]	; (800a544 <HAL_DMA_Start_IT+0x4a8>)
 800a4b4:	4293      	cmp	r3, r2
 800a4b6:	d009      	beq.n	800a4cc <HAL_DMA_Start_IT+0x430>
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	4a22      	ldr	r2, [pc, #136]	; (800a548 <HAL_DMA_Start_IT+0x4ac>)
 800a4be:	4293      	cmp	r3, r2
 800a4c0:	d004      	beq.n	800a4cc <HAL_DMA_Start_IT+0x430>
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	4a21      	ldr	r2, [pc, #132]	; (800a54c <HAL_DMA_Start_IT+0x4b0>)
 800a4c8:	4293      	cmp	r3, r2
 800a4ca:	d108      	bne.n	800a4de <HAL_DMA_Start_IT+0x442>
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	681a      	ldr	r2, [r3, #0]
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f042 0201 	orr.w	r2, r2, #1
 800a4da:	601a      	str	r2, [r3, #0]
 800a4dc:	e012      	b.n	800a504 <HAL_DMA_Start_IT+0x468>
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	681a      	ldr	r2, [r3, #0]
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	f042 0201 	orr.w	r2, r2, #1
 800a4ec:	601a      	str	r2, [r3, #0]
 800a4ee:	e009      	b.n	800a504 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a4fe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 800a500:	2301      	movs	r3, #1
 800a502:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800a504:	7dfb      	ldrb	r3, [r7, #23]
}
 800a506:	4618      	mov	r0, r3
 800a508:	3718      	adds	r7, #24
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}
 800a50e:	bf00      	nop
 800a510:	40020010 	.word	0x40020010
 800a514:	40020028 	.word	0x40020028
 800a518:	40020040 	.word	0x40020040
 800a51c:	40020058 	.word	0x40020058
 800a520:	40020070 	.word	0x40020070
 800a524:	40020088 	.word	0x40020088
 800a528:	400200a0 	.word	0x400200a0
 800a52c:	400200b8 	.word	0x400200b8
 800a530:	40020410 	.word	0x40020410
 800a534:	40020428 	.word	0x40020428
 800a538:	40020440 	.word	0x40020440
 800a53c:	40020458 	.word	0x40020458
 800a540:	40020470 	.word	0x40020470
 800a544:	40020488 	.word	0x40020488
 800a548:	400204a0 	.word	0x400204a0
 800a54c:	400204b8 	.word	0x400204b8
 800a550:	58025408 	.word	0x58025408
 800a554:	5802541c 	.word	0x5802541c
 800a558:	58025430 	.word	0x58025430
 800a55c:	58025444 	.word	0x58025444
 800a560:	58025458 	.word	0x58025458
 800a564:	5802546c 	.word	0x5802546c
 800a568:	58025480 	.word	0x58025480
 800a56c:	58025494 	.word	0x58025494

0800a570 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b086      	sub	sp, #24
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800a578:	f7fe fd3c 	bl	8008ff4 <HAL_GetTick>
 800a57c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d101      	bne.n	800a588 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800a584:	2301      	movs	r3, #1
 800a586:	e2dc      	b.n	800ab42 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a58e:	b2db      	uxtb	r3, r3
 800a590:	2b02      	cmp	r3, #2
 800a592:	d008      	beq.n	800a5a6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2280      	movs	r2, #128	; 0x80
 800a598:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	2200      	movs	r2, #0
 800a59e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	e2cd      	b.n	800ab42 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	4a76      	ldr	r2, [pc, #472]	; (800a784 <HAL_DMA_Abort+0x214>)
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d04a      	beq.n	800a646 <HAL_DMA_Abort+0xd6>
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	4a74      	ldr	r2, [pc, #464]	; (800a788 <HAL_DMA_Abort+0x218>)
 800a5b6:	4293      	cmp	r3, r2
 800a5b8:	d045      	beq.n	800a646 <HAL_DMA_Abort+0xd6>
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	4a73      	ldr	r2, [pc, #460]	; (800a78c <HAL_DMA_Abort+0x21c>)
 800a5c0:	4293      	cmp	r3, r2
 800a5c2:	d040      	beq.n	800a646 <HAL_DMA_Abort+0xd6>
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	4a71      	ldr	r2, [pc, #452]	; (800a790 <HAL_DMA_Abort+0x220>)
 800a5ca:	4293      	cmp	r3, r2
 800a5cc:	d03b      	beq.n	800a646 <HAL_DMA_Abort+0xd6>
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	4a70      	ldr	r2, [pc, #448]	; (800a794 <HAL_DMA_Abort+0x224>)
 800a5d4:	4293      	cmp	r3, r2
 800a5d6:	d036      	beq.n	800a646 <HAL_DMA_Abort+0xd6>
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	4a6e      	ldr	r2, [pc, #440]	; (800a798 <HAL_DMA_Abort+0x228>)
 800a5de:	4293      	cmp	r3, r2
 800a5e0:	d031      	beq.n	800a646 <HAL_DMA_Abort+0xd6>
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	4a6d      	ldr	r2, [pc, #436]	; (800a79c <HAL_DMA_Abort+0x22c>)
 800a5e8:	4293      	cmp	r3, r2
 800a5ea:	d02c      	beq.n	800a646 <HAL_DMA_Abort+0xd6>
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	4a6b      	ldr	r2, [pc, #428]	; (800a7a0 <HAL_DMA_Abort+0x230>)
 800a5f2:	4293      	cmp	r3, r2
 800a5f4:	d027      	beq.n	800a646 <HAL_DMA_Abort+0xd6>
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	4a6a      	ldr	r2, [pc, #424]	; (800a7a4 <HAL_DMA_Abort+0x234>)
 800a5fc:	4293      	cmp	r3, r2
 800a5fe:	d022      	beq.n	800a646 <HAL_DMA_Abort+0xd6>
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	4a68      	ldr	r2, [pc, #416]	; (800a7a8 <HAL_DMA_Abort+0x238>)
 800a606:	4293      	cmp	r3, r2
 800a608:	d01d      	beq.n	800a646 <HAL_DMA_Abort+0xd6>
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	4a67      	ldr	r2, [pc, #412]	; (800a7ac <HAL_DMA_Abort+0x23c>)
 800a610:	4293      	cmp	r3, r2
 800a612:	d018      	beq.n	800a646 <HAL_DMA_Abort+0xd6>
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	4a65      	ldr	r2, [pc, #404]	; (800a7b0 <HAL_DMA_Abort+0x240>)
 800a61a:	4293      	cmp	r3, r2
 800a61c:	d013      	beq.n	800a646 <HAL_DMA_Abort+0xd6>
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	4a64      	ldr	r2, [pc, #400]	; (800a7b4 <HAL_DMA_Abort+0x244>)
 800a624:	4293      	cmp	r3, r2
 800a626:	d00e      	beq.n	800a646 <HAL_DMA_Abort+0xd6>
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	4a62      	ldr	r2, [pc, #392]	; (800a7b8 <HAL_DMA_Abort+0x248>)
 800a62e:	4293      	cmp	r3, r2
 800a630:	d009      	beq.n	800a646 <HAL_DMA_Abort+0xd6>
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	4a61      	ldr	r2, [pc, #388]	; (800a7bc <HAL_DMA_Abort+0x24c>)
 800a638:	4293      	cmp	r3, r2
 800a63a:	d004      	beq.n	800a646 <HAL_DMA_Abort+0xd6>
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	4a5f      	ldr	r2, [pc, #380]	; (800a7c0 <HAL_DMA_Abort+0x250>)
 800a642:	4293      	cmp	r3, r2
 800a644:	d101      	bne.n	800a64a <HAL_DMA_Abort+0xda>
 800a646:	2301      	movs	r3, #1
 800a648:	e000      	b.n	800a64c <HAL_DMA_Abort+0xdc>
 800a64a:	2300      	movs	r3, #0
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d013      	beq.n	800a678 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	681a      	ldr	r2, [r3, #0]
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	f022 021e 	bic.w	r2, r2, #30
 800a65e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	695a      	ldr	r2, [r3, #20]
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a66e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	617b      	str	r3, [r7, #20]
 800a676:	e00a      	b.n	800a68e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	681a      	ldr	r2, [r3, #0]
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	f022 020e 	bic.w	r2, r2, #14
 800a686:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	4a3c      	ldr	r2, [pc, #240]	; (800a784 <HAL_DMA_Abort+0x214>)
 800a694:	4293      	cmp	r3, r2
 800a696:	d072      	beq.n	800a77e <HAL_DMA_Abort+0x20e>
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	4a3a      	ldr	r2, [pc, #232]	; (800a788 <HAL_DMA_Abort+0x218>)
 800a69e:	4293      	cmp	r3, r2
 800a6a0:	d06d      	beq.n	800a77e <HAL_DMA_Abort+0x20e>
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	4a39      	ldr	r2, [pc, #228]	; (800a78c <HAL_DMA_Abort+0x21c>)
 800a6a8:	4293      	cmp	r3, r2
 800a6aa:	d068      	beq.n	800a77e <HAL_DMA_Abort+0x20e>
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	4a37      	ldr	r2, [pc, #220]	; (800a790 <HAL_DMA_Abort+0x220>)
 800a6b2:	4293      	cmp	r3, r2
 800a6b4:	d063      	beq.n	800a77e <HAL_DMA_Abort+0x20e>
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	4a36      	ldr	r2, [pc, #216]	; (800a794 <HAL_DMA_Abort+0x224>)
 800a6bc:	4293      	cmp	r3, r2
 800a6be:	d05e      	beq.n	800a77e <HAL_DMA_Abort+0x20e>
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	4a34      	ldr	r2, [pc, #208]	; (800a798 <HAL_DMA_Abort+0x228>)
 800a6c6:	4293      	cmp	r3, r2
 800a6c8:	d059      	beq.n	800a77e <HAL_DMA_Abort+0x20e>
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	4a33      	ldr	r2, [pc, #204]	; (800a79c <HAL_DMA_Abort+0x22c>)
 800a6d0:	4293      	cmp	r3, r2
 800a6d2:	d054      	beq.n	800a77e <HAL_DMA_Abort+0x20e>
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	4a31      	ldr	r2, [pc, #196]	; (800a7a0 <HAL_DMA_Abort+0x230>)
 800a6da:	4293      	cmp	r3, r2
 800a6dc:	d04f      	beq.n	800a77e <HAL_DMA_Abort+0x20e>
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	4a30      	ldr	r2, [pc, #192]	; (800a7a4 <HAL_DMA_Abort+0x234>)
 800a6e4:	4293      	cmp	r3, r2
 800a6e6:	d04a      	beq.n	800a77e <HAL_DMA_Abort+0x20e>
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	4a2e      	ldr	r2, [pc, #184]	; (800a7a8 <HAL_DMA_Abort+0x238>)
 800a6ee:	4293      	cmp	r3, r2
 800a6f0:	d045      	beq.n	800a77e <HAL_DMA_Abort+0x20e>
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	4a2d      	ldr	r2, [pc, #180]	; (800a7ac <HAL_DMA_Abort+0x23c>)
 800a6f8:	4293      	cmp	r3, r2
 800a6fa:	d040      	beq.n	800a77e <HAL_DMA_Abort+0x20e>
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	4a2b      	ldr	r2, [pc, #172]	; (800a7b0 <HAL_DMA_Abort+0x240>)
 800a702:	4293      	cmp	r3, r2
 800a704:	d03b      	beq.n	800a77e <HAL_DMA_Abort+0x20e>
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	4a2a      	ldr	r2, [pc, #168]	; (800a7b4 <HAL_DMA_Abort+0x244>)
 800a70c:	4293      	cmp	r3, r2
 800a70e:	d036      	beq.n	800a77e <HAL_DMA_Abort+0x20e>
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	4a28      	ldr	r2, [pc, #160]	; (800a7b8 <HAL_DMA_Abort+0x248>)
 800a716:	4293      	cmp	r3, r2
 800a718:	d031      	beq.n	800a77e <HAL_DMA_Abort+0x20e>
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	4a27      	ldr	r2, [pc, #156]	; (800a7bc <HAL_DMA_Abort+0x24c>)
 800a720:	4293      	cmp	r3, r2
 800a722:	d02c      	beq.n	800a77e <HAL_DMA_Abort+0x20e>
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	4a25      	ldr	r2, [pc, #148]	; (800a7c0 <HAL_DMA_Abort+0x250>)
 800a72a:	4293      	cmp	r3, r2
 800a72c:	d027      	beq.n	800a77e <HAL_DMA_Abort+0x20e>
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	4a24      	ldr	r2, [pc, #144]	; (800a7c4 <HAL_DMA_Abort+0x254>)
 800a734:	4293      	cmp	r3, r2
 800a736:	d022      	beq.n	800a77e <HAL_DMA_Abort+0x20e>
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	4a22      	ldr	r2, [pc, #136]	; (800a7c8 <HAL_DMA_Abort+0x258>)
 800a73e:	4293      	cmp	r3, r2
 800a740:	d01d      	beq.n	800a77e <HAL_DMA_Abort+0x20e>
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	4a21      	ldr	r2, [pc, #132]	; (800a7cc <HAL_DMA_Abort+0x25c>)
 800a748:	4293      	cmp	r3, r2
 800a74a:	d018      	beq.n	800a77e <HAL_DMA_Abort+0x20e>
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	4a1f      	ldr	r2, [pc, #124]	; (800a7d0 <HAL_DMA_Abort+0x260>)
 800a752:	4293      	cmp	r3, r2
 800a754:	d013      	beq.n	800a77e <HAL_DMA_Abort+0x20e>
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	4a1e      	ldr	r2, [pc, #120]	; (800a7d4 <HAL_DMA_Abort+0x264>)
 800a75c:	4293      	cmp	r3, r2
 800a75e:	d00e      	beq.n	800a77e <HAL_DMA_Abort+0x20e>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	4a1c      	ldr	r2, [pc, #112]	; (800a7d8 <HAL_DMA_Abort+0x268>)
 800a766:	4293      	cmp	r3, r2
 800a768:	d009      	beq.n	800a77e <HAL_DMA_Abort+0x20e>
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	4a1b      	ldr	r2, [pc, #108]	; (800a7dc <HAL_DMA_Abort+0x26c>)
 800a770:	4293      	cmp	r3, r2
 800a772:	d004      	beq.n	800a77e <HAL_DMA_Abort+0x20e>
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	4a19      	ldr	r2, [pc, #100]	; (800a7e0 <HAL_DMA_Abort+0x270>)
 800a77a:	4293      	cmp	r3, r2
 800a77c:	d132      	bne.n	800a7e4 <HAL_DMA_Abort+0x274>
 800a77e:	2301      	movs	r3, #1
 800a780:	e031      	b.n	800a7e6 <HAL_DMA_Abort+0x276>
 800a782:	bf00      	nop
 800a784:	40020010 	.word	0x40020010
 800a788:	40020028 	.word	0x40020028
 800a78c:	40020040 	.word	0x40020040
 800a790:	40020058 	.word	0x40020058
 800a794:	40020070 	.word	0x40020070
 800a798:	40020088 	.word	0x40020088
 800a79c:	400200a0 	.word	0x400200a0
 800a7a0:	400200b8 	.word	0x400200b8
 800a7a4:	40020410 	.word	0x40020410
 800a7a8:	40020428 	.word	0x40020428
 800a7ac:	40020440 	.word	0x40020440
 800a7b0:	40020458 	.word	0x40020458
 800a7b4:	40020470 	.word	0x40020470
 800a7b8:	40020488 	.word	0x40020488
 800a7bc:	400204a0 	.word	0x400204a0
 800a7c0:	400204b8 	.word	0x400204b8
 800a7c4:	58025408 	.word	0x58025408
 800a7c8:	5802541c 	.word	0x5802541c
 800a7cc:	58025430 	.word	0x58025430
 800a7d0:	58025444 	.word	0x58025444
 800a7d4:	58025458 	.word	0x58025458
 800a7d8:	5802546c 	.word	0x5802546c
 800a7dc:	58025480 	.word	0x58025480
 800a7e0:	58025494 	.word	0x58025494
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d007      	beq.n	800a7fa <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a7ee:	681a      	ldr	r2, [r3, #0]
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a7f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a7f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	4a6d      	ldr	r2, [pc, #436]	; (800a9b4 <HAL_DMA_Abort+0x444>)
 800a800:	4293      	cmp	r3, r2
 800a802:	d04a      	beq.n	800a89a <HAL_DMA_Abort+0x32a>
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	4a6b      	ldr	r2, [pc, #428]	; (800a9b8 <HAL_DMA_Abort+0x448>)
 800a80a:	4293      	cmp	r3, r2
 800a80c:	d045      	beq.n	800a89a <HAL_DMA_Abort+0x32a>
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	4a6a      	ldr	r2, [pc, #424]	; (800a9bc <HAL_DMA_Abort+0x44c>)
 800a814:	4293      	cmp	r3, r2
 800a816:	d040      	beq.n	800a89a <HAL_DMA_Abort+0x32a>
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	4a68      	ldr	r2, [pc, #416]	; (800a9c0 <HAL_DMA_Abort+0x450>)
 800a81e:	4293      	cmp	r3, r2
 800a820:	d03b      	beq.n	800a89a <HAL_DMA_Abort+0x32a>
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	4a67      	ldr	r2, [pc, #412]	; (800a9c4 <HAL_DMA_Abort+0x454>)
 800a828:	4293      	cmp	r3, r2
 800a82a:	d036      	beq.n	800a89a <HAL_DMA_Abort+0x32a>
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	4a65      	ldr	r2, [pc, #404]	; (800a9c8 <HAL_DMA_Abort+0x458>)
 800a832:	4293      	cmp	r3, r2
 800a834:	d031      	beq.n	800a89a <HAL_DMA_Abort+0x32a>
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	4a64      	ldr	r2, [pc, #400]	; (800a9cc <HAL_DMA_Abort+0x45c>)
 800a83c:	4293      	cmp	r3, r2
 800a83e:	d02c      	beq.n	800a89a <HAL_DMA_Abort+0x32a>
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	4a62      	ldr	r2, [pc, #392]	; (800a9d0 <HAL_DMA_Abort+0x460>)
 800a846:	4293      	cmp	r3, r2
 800a848:	d027      	beq.n	800a89a <HAL_DMA_Abort+0x32a>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	4a61      	ldr	r2, [pc, #388]	; (800a9d4 <HAL_DMA_Abort+0x464>)
 800a850:	4293      	cmp	r3, r2
 800a852:	d022      	beq.n	800a89a <HAL_DMA_Abort+0x32a>
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	4a5f      	ldr	r2, [pc, #380]	; (800a9d8 <HAL_DMA_Abort+0x468>)
 800a85a:	4293      	cmp	r3, r2
 800a85c:	d01d      	beq.n	800a89a <HAL_DMA_Abort+0x32a>
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	4a5e      	ldr	r2, [pc, #376]	; (800a9dc <HAL_DMA_Abort+0x46c>)
 800a864:	4293      	cmp	r3, r2
 800a866:	d018      	beq.n	800a89a <HAL_DMA_Abort+0x32a>
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	4a5c      	ldr	r2, [pc, #368]	; (800a9e0 <HAL_DMA_Abort+0x470>)
 800a86e:	4293      	cmp	r3, r2
 800a870:	d013      	beq.n	800a89a <HAL_DMA_Abort+0x32a>
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	4a5b      	ldr	r2, [pc, #364]	; (800a9e4 <HAL_DMA_Abort+0x474>)
 800a878:	4293      	cmp	r3, r2
 800a87a:	d00e      	beq.n	800a89a <HAL_DMA_Abort+0x32a>
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	4a59      	ldr	r2, [pc, #356]	; (800a9e8 <HAL_DMA_Abort+0x478>)
 800a882:	4293      	cmp	r3, r2
 800a884:	d009      	beq.n	800a89a <HAL_DMA_Abort+0x32a>
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	4a58      	ldr	r2, [pc, #352]	; (800a9ec <HAL_DMA_Abort+0x47c>)
 800a88c:	4293      	cmp	r3, r2
 800a88e:	d004      	beq.n	800a89a <HAL_DMA_Abort+0x32a>
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	4a56      	ldr	r2, [pc, #344]	; (800a9f0 <HAL_DMA_Abort+0x480>)
 800a896:	4293      	cmp	r3, r2
 800a898:	d108      	bne.n	800a8ac <HAL_DMA_Abort+0x33c>
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	681a      	ldr	r2, [r3, #0]
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	f022 0201 	bic.w	r2, r2, #1
 800a8a8:	601a      	str	r2, [r3, #0]
 800a8aa:	e007      	b.n	800a8bc <HAL_DMA_Abort+0x34c>
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	681a      	ldr	r2, [r3, #0]
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f022 0201 	bic.w	r2, r2, #1
 800a8ba:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800a8bc:	e013      	b.n	800a8e6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a8be:	f7fe fb99 	bl	8008ff4 <HAL_GetTick>
 800a8c2:	4602      	mov	r2, r0
 800a8c4:	693b      	ldr	r3, [r7, #16]
 800a8c6:	1ad3      	subs	r3, r2, r3
 800a8c8:	2b05      	cmp	r3, #5
 800a8ca:	d90c      	bls.n	800a8e6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2220      	movs	r2, #32
 800a8d0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2203      	movs	r2, #3
 800a8de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	e12d      	b.n	800ab42 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800a8e6:	697b      	ldr	r3, [r7, #20]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f003 0301 	and.w	r3, r3, #1
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d1e5      	bne.n	800a8be <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	4a2f      	ldr	r2, [pc, #188]	; (800a9b4 <HAL_DMA_Abort+0x444>)
 800a8f8:	4293      	cmp	r3, r2
 800a8fa:	d04a      	beq.n	800a992 <HAL_DMA_Abort+0x422>
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	4a2d      	ldr	r2, [pc, #180]	; (800a9b8 <HAL_DMA_Abort+0x448>)
 800a902:	4293      	cmp	r3, r2
 800a904:	d045      	beq.n	800a992 <HAL_DMA_Abort+0x422>
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	4a2c      	ldr	r2, [pc, #176]	; (800a9bc <HAL_DMA_Abort+0x44c>)
 800a90c:	4293      	cmp	r3, r2
 800a90e:	d040      	beq.n	800a992 <HAL_DMA_Abort+0x422>
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	4a2a      	ldr	r2, [pc, #168]	; (800a9c0 <HAL_DMA_Abort+0x450>)
 800a916:	4293      	cmp	r3, r2
 800a918:	d03b      	beq.n	800a992 <HAL_DMA_Abort+0x422>
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	4a29      	ldr	r2, [pc, #164]	; (800a9c4 <HAL_DMA_Abort+0x454>)
 800a920:	4293      	cmp	r3, r2
 800a922:	d036      	beq.n	800a992 <HAL_DMA_Abort+0x422>
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	4a27      	ldr	r2, [pc, #156]	; (800a9c8 <HAL_DMA_Abort+0x458>)
 800a92a:	4293      	cmp	r3, r2
 800a92c:	d031      	beq.n	800a992 <HAL_DMA_Abort+0x422>
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	4a26      	ldr	r2, [pc, #152]	; (800a9cc <HAL_DMA_Abort+0x45c>)
 800a934:	4293      	cmp	r3, r2
 800a936:	d02c      	beq.n	800a992 <HAL_DMA_Abort+0x422>
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	4a24      	ldr	r2, [pc, #144]	; (800a9d0 <HAL_DMA_Abort+0x460>)
 800a93e:	4293      	cmp	r3, r2
 800a940:	d027      	beq.n	800a992 <HAL_DMA_Abort+0x422>
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	4a23      	ldr	r2, [pc, #140]	; (800a9d4 <HAL_DMA_Abort+0x464>)
 800a948:	4293      	cmp	r3, r2
 800a94a:	d022      	beq.n	800a992 <HAL_DMA_Abort+0x422>
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	4a21      	ldr	r2, [pc, #132]	; (800a9d8 <HAL_DMA_Abort+0x468>)
 800a952:	4293      	cmp	r3, r2
 800a954:	d01d      	beq.n	800a992 <HAL_DMA_Abort+0x422>
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	4a20      	ldr	r2, [pc, #128]	; (800a9dc <HAL_DMA_Abort+0x46c>)
 800a95c:	4293      	cmp	r3, r2
 800a95e:	d018      	beq.n	800a992 <HAL_DMA_Abort+0x422>
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	4a1e      	ldr	r2, [pc, #120]	; (800a9e0 <HAL_DMA_Abort+0x470>)
 800a966:	4293      	cmp	r3, r2
 800a968:	d013      	beq.n	800a992 <HAL_DMA_Abort+0x422>
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	4a1d      	ldr	r2, [pc, #116]	; (800a9e4 <HAL_DMA_Abort+0x474>)
 800a970:	4293      	cmp	r3, r2
 800a972:	d00e      	beq.n	800a992 <HAL_DMA_Abort+0x422>
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	4a1b      	ldr	r2, [pc, #108]	; (800a9e8 <HAL_DMA_Abort+0x478>)
 800a97a:	4293      	cmp	r3, r2
 800a97c:	d009      	beq.n	800a992 <HAL_DMA_Abort+0x422>
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	4a1a      	ldr	r2, [pc, #104]	; (800a9ec <HAL_DMA_Abort+0x47c>)
 800a984:	4293      	cmp	r3, r2
 800a986:	d004      	beq.n	800a992 <HAL_DMA_Abort+0x422>
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	4a18      	ldr	r2, [pc, #96]	; (800a9f0 <HAL_DMA_Abort+0x480>)
 800a98e:	4293      	cmp	r3, r2
 800a990:	d101      	bne.n	800a996 <HAL_DMA_Abort+0x426>
 800a992:	2301      	movs	r3, #1
 800a994:	e000      	b.n	800a998 <HAL_DMA_Abort+0x428>
 800a996:	2300      	movs	r3, #0
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d02b      	beq.n	800a9f4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9a0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9a6:	f003 031f 	and.w	r3, r3, #31
 800a9aa:	223f      	movs	r2, #63	; 0x3f
 800a9ac:	409a      	lsls	r2, r3
 800a9ae:	68bb      	ldr	r3, [r7, #8]
 800a9b0:	609a      	str	r2, [r3, #8]
 800a9b2:	e02a      	b.n	800aa0a <HAL_DMA_Abort+0x49a>
 800a9b4:	40020010 	.word	0x40020010
 800a9b8:	40020028 	.word	0x40020028
 800a9bc:	40020040 	.word	0x40020040
 800a9c0:	40020058 	.word	0x40020058
 800a9c4:	40020070 	.word	0x40020070
 800a9c8:	40020088 	.word	0x40020088
 800a9cc:	400200a0 	.word	0x400200a0
 800a9d0:	400200b8 	.word	0x400200b8
 800a9d4:	40020410 	.word	0x40020410
 800a9d8:	40020428 	.word	0x40020428
 800a9dc:	40020440 	.word	0x40020440
 800a9e0:	40020458 	.word	0x40020458
 800a9e4:	40020470 	.word	0x40020470
 800a9e8:	40020488 	.word	0x40020488
 800a9ec:	400204a0 	.word	0x400204a0
 800a9f0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9f8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9fe:	f003 031f 	and.w	r3, r3, #31
 800aa02:	2201      	movs	r2, #1
 800aa04:	409a      	lsls	r2, r3
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	4a4f      	ldr	r2, [pc, #316]	; (800ab4c <HAL_DMA_Abort+0x5dc>)
 800aa10:	4293      	cmp	r3, r2
 800aa12:	d072      	beq.n	800aafa <HAL_DMA_Abort+0x58a>
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	4a4d      	ldr	r2, [pc, #308]	; (800ab50 <HAL_DMA_Abort+0x5e0>)
 800aa1a:	4293      	cmp	r3, r2
 800aa1c:	d06d      	beq.n	800aafa <HAL_DMA_Abort+0x58a>
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	4a4c      	ldr	r2, [pc, #304]	; (800ab54 <HAL_DMA_Abort+0x5e4>)
 800aa24:	4293      	cmp	r3, r2
 800aa26:	d068      	beq.n	800aafa <HAL_DMA_Abort+0x58a>
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	4a4a      	ldr	r2, [pc, #296]	; (800ab58 <HAL_DMA_Abort+0x5e8>)
 800aa2e:	4293      	cmp	r3, r2
 800aa30:	d063      	beq.n	800aafa <HAL_DMA_Abort+0x58a>
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	4a49      	ldr	r2, [pc, #292]	; (800ab5c <HAL_DMA_Abort+0x5ec>)
 800aa38:	4293      	cmp	r3, r2
 800aa3a:	d05e      	beq.n	800aafa <HAL_DMA_Abort+0x58a>
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	4a47      	ldr	r2, [pc, #284]	; (800ab60 <HAL_DMA_Abort+0x5f0>)
 800aa42:	4293      	cmp	r3, r2
 800aa44:	d059      	beq.n	800aafa <HAL_DMA_Abort+0x58a>
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	4a46      	ldr	r2, [pc, #280]	; (800ab64 <HAL_DMA_Abort+0x5f4>)
 800aa4c:	4293      	cmp	r3, r2
 800aa4e:	d054      	beq.n	800aafa <HAL_DMA_Abort+0x58a>
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	4a44      	ldr	r2, [pc, #272]	; (800ab68 <HAL_DMA_Abort+0x5f8>)
 800aa56:	4293      	cmp	r3, r2
 800aa58:	d04f      	beq.n	800aafa <HAL_DMA_Abort+0x58a>
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	4a43      	ldr	r2, [pc, #268]	; (800ab6c <HAL_DMA_Abort+0x5fc>)
 800aa60:	4293      	cmp	r3, r2
 800aa62:	d04a      	beq.n	800aafa <HAL_DMA_Abort+0x58a>
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	4a41      	ldr	r2, [pc, #260]	; (800ab70 <HAL_DMA_Abort+0x600>)
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d045      	beq.n	800aafa <HAL_DMA_Abort+0x58a>
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	4a40      	ldr	r2, [pc, #256]	; (800ab74 <HAL_DMA_Abort+0x604>)
 800aa74:	4293      	cmp	r3, r2
 800aa76:	d040      	beq.n	800aafa <HAL_DMA_Abort+0x58a>
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	4a3e      	ldr	r2, [pc, #248]	; (800ab78 <HAL_DMA_Abort+0x608>)
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	d03b      	beq.n	800aafa <HAL_DMA_Abort+0x58a>
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	4a3d      	ldr	r2, [pc, #244]	; (800ab7c <HAL_DMA_Abort+0x60c>)
 800aa88:	4293      	cmp	r3, r2
 800aa8a:	d036      	beq.n	800aafa <HAL_DMA_Abort+0x58a>
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	4a3b      	ldr	r2, [pc, #236]	; (800ab80 <HAL_DMA_Abort+0x610>)
 800aa92:	4293      	cmp	r3, r2
 800aa94:	d031      	beq.n	800aafa <HAL_DMA_Abort+0x58a>
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	4a3a      	ldr	r2, [pc, #232]	; (800ab84 <HAL_DMA_Abort+0x614>)
 800aa9c:	4293      	cmp	r3, r2
 800aa9e:	d02c      	beq.n	800aafa <HAL_DMA_Abort+0x58a>
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	4a38      	ldr	r2, [pc, #224]	; (800ab88 <HAL_DMA_Abort+0x618>)
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	d027      	beq.n	800aafa <HAL_DMA_Abort+0x58a>
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	4a37      	ldr	r2, [pc, #220]	; (800ab8c <HAL_DMA_Abort+0x61c>)
 800aab0:	4293      	cmp	r3, r2
 800aab2:	d022      	beq.n	800aafa <HAL_DMA_Abort+0x58a>
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	4a35      	ldr	r2, [pc, #212]	; (800ab90 <HAL_DMA_Abort+0x620>)
 800aaba:	4293      	cmp	r3, r2
 800aabc:	d01d      	beq.n	800aafa <HAL_DMA_Abort+0x58a>
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	4a34      	ldr	r2, [pc, #208]	; (800ab94 <HAL_DMA_Abort+0x624>)
 800aac4:	4293      	cmp	r3, r2
 800aac6:	d018      	beq.n	800aafa <HAL_DMA_Abort+0x58a>
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	4a32      	ldr	r2, [pc, #200]	; (800ab98 <HAL_DMA_Abort+0x628>)
 800aace:	4293      	cmp	r3, r2
 800aad0:	d013      	beq.n	800aafa <HAL_DMA_Abort+0x58a>
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	4a31      	ldr	r2, [pc, #196]	; (800ab9c <HAL_DMA_Abort+0x62c>)
 800aad8:	4293      	cmp	r3, r2
 800aada:	d00e      	beq.n	800aafa <HAL_DMA_Abort+0x58a>
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	4a2f      	ldr	r2, [pc, #188]	; (800aba0 <HAL_DMA_Abort+0x630>)
 800aae2:	4293      	cmp	r3, r2
 800aae4:	d009      	beq.n	800aafa <HAL_DMA_Abort+0x58a>
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	4a2e      	ldr	r2, [pc, #184]	; (800aba4 <HAL_DMA_Abort+0x634>)
 800aaec:	4293      	cmp	r3, r2
 800aaee:	d004      	beq.n	800aafa <HAL_DMA_Abort+0x58a>
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	4a2c      	ldr	r2, [pc, #176]	; (800aba8 <HAL_DMA_Abort+0x638>)
 800aaf6:	4293      	cmp	r3, r2
 800aaf8:	d101      	bne.n	800aafe <HAL_DMA_Abort+0x58e>
 800aafa:	2301      	movs	r3, #1
 800aafc:	e000      	b.n	800ab00 <HAL_DMA_Abort+0x590>
 800aafe:	2300      	movs	r3, #0
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d015      	beq.n	800ab30 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ab08:	687a      	ldr	r2, [r7, #4]
 800ab0a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800ab0c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d00c      	beq.n	800ab30 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab1a:	681a      	ldr	r2, [r3, #0]
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ab24:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab2a:	687a      	ldr	r2, [r7, #4]
 800ab2c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800ab2e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2200      	movs	r2, #0
 800ab34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2201      	movs	r2, #1
 800ab3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 800ab40:	2300      	movs	r3, #0
}
 800ab42:	4618      	mov	r0, r3
 800ab44:	3718      	adds	r7, #24
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}
 800ab4a:	bf00      	nop
 800ab4c:	40020010 	.word	0x40020010
 800ab50:	40020028 	.word	0x40020028
 800ab54:	40020040 	.word	0x40020040
 800ab58:	40020058 	.word	0x40020058
 800ab5c:	40020070 	.word	0x40020070
 800ab60:	40020088 	.word	0x40020088
 800ab64:	400200a0 	.word	0x400200a0
 800ab68:	400200b8 	.word	0x400200b8
 800ab6c:	40020410 	.word	0x40020410
 800ab70:	40020428 	.word	0x40020428
 800ab74:	40020440 	.word	0x40020440
 800ab78:	40020458 	.word	0x40020458
 800ab7c:	40020470 	.word	0x40020470
 800ab80:	40020488 	.word	0x40020488
 800ab84:	400204a0 	.word	0x400204a0
 800ab88:	400204b8 	.word	0x400204b8
 800ab8c:	58025408 	.word	0x58025408
 800ab90:	5802541c 	.word	0x5802541c
 800ab94:	58025430 	.word	0x58025430
 800ab98:	58025444 	.word	0x58025444
 800ab9c:	58025458 	.word	0x58025458
 800aba0:	5802546c 	.word	0x5802546c
 800aba4:	58025480 	.word	0x58025480
 800aba8:	58025494 	.word	0x58025494

0800abac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b084      	sub	sp, #16
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d101      	bne.n	800abbe <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800abba:	2301      	movs	r3, #1
 800abbc:	e205      	b.n	800afca <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800abc4:	b2db      	uxtb	r3, r3
 800abc6:	2b02      	cmp	r3, #2
 800abc8:	d004      	beq.n	800abd4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2280      	movs	r2, #128	; 0x80
 800abce:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800abd0:	2301      	movs	r3, #1
 800abd2:	e1fa      	b.n	800afca <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	4a8c      	ldr	r2, [pc, #560]	; (800ae0c <HAL_DMA_Abort_IT+0x260>)
 800abda:	4293      	cmp	r3, r2
 800abdc:	d04a      	beq.n	800ac74 <HAL_DMA_Abort_IT+0xc8>
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	4a8b      	ldr	r2, [pc, #556]	; (800ae10 <HAL_DMA_Abort_IT+0x264>)
 800abe4:	4293      	cmp	r3, r2
 800abe6:	d045      	beq.n	800ac74 <HAL_DMA_Abort_IT+0xc8>
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	4a89      	ldr	r2, [pc, #548]	; (800ae14 <HAL_DMA_Abort_IT+0x268>)
 800abee:	4293      	cmp	r3, r2
 800abf0:	d040      	beq.n	800ac74 <HAL_DMA_Abort_IT+0xc8>
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	4a88      	ldr	r2, [pc, #544]	; (800ae18 <HAL_DMA_Abort_IT+0x26c>)
 800abf8:	4293      	cmp	r3, r2
 800abfa:	d03b      	beq.n	800ac74 <HAL_DMA_Abort_IT+0xc8>
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	4a86      	ldr	r2, [pc, #536]	; (800ae1c <HAL_DMA_Abort_IT+0x270>)
 800ac02:	4293      	cmp	r3, r2
 800ac04:	d036      	beq.n	800ac74 <HAL_DMA_Abort_IT+0xc8>
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	4a85      	ldr	r2, [pc, #532]	; (800ae20 <HAL_DMA_Abort_IT+0x274>)
 800ac0c:	4293      	cmp	r3, r2
 800ac0e:	d031      	beq.n	800ac74 <HAL_DMA_Abort_IT+0xc8>
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	4a83      	ldr	r2, [pc, #524]	; (800ae24 <HAL_DMA_Abort_IT+0x278>)
 800ac16:	4293      	cmp	r3, r2
 800ac18:	d02c      	beq.n	800ac74 <HAL_DMA_Abort_IT+0xc8>
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	4a82      	ldr	r2, [pc, #520]	; (800ae28 <HAL_DMA_Abort_IT+0x27c>)
 800ac20:	4293      	cmp	r3, r2
 800ac22:	d027      	beq.n	800ac74 <HAL_DMA_Abort_IT+0xc8>
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	4a80      	ldr	r2, [pc, #512]	; (800ae2c <HAL_DMA_Abort_IT+0x280>)
 800ac2a:	4293      	cmp	r3, r2
 800ac2c:	d022      	beq.n	800ac74 <HAL_DMA_Abort_IT+0xc8>
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	4a7f      	ldr	r2, [pc, #508]	; (800ae30 <HAL_DMA_Abort_IT+0x284>)
 800ac34:	4293      	cmp	r3, r2
 800ac36:	d01d      	beq.n	800ac74 <HAL_DMA_Abort_IT+0xc8>
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	4a7d      	ldr	r2, [pc, #500]	; (800ae34 <HAL_DMA_Abort_IT+0x288>)
 800ac3e:	4293      	cmp	r3, r2
 800ac40:	d018      	beq.n	800ac74 <HAL_DMA_Abort_IT+0xc8>
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	4a7c      	ldr	r2, [pc, #496]	; (800ae38 <HAL_DMA_Abort_IT+0x28c>)
 800ac48:	4293      	cmp	r3, r2
 800ac4a:	d013      	beq.n	800ac74 <HAL_DMA_Abort_IT+0xc8>
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	4a7a      	ldr	r2, [pc, #488]	; (800ae3c <HAL_DMA_Abort_IT+0x290>)
 800ac52:	4293      	cmp	r3, r2
 800ac54:	d00e      	beq.n	800ac74 <HAL_DMA_Abort_IT+0xc8>
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	4a79      	ldr	r2, [pc, #484]	; (800ae40 <HAL_DMA_Abort_IT+0x294>)
 800ac5c:	4293      	cmp	r3, r2
 800ac5e:	d009      	beq.n	800ac74 <HAL_DMA_Abort_IT+0xc8>
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	4a77      	ldr	r2, [pc, #476]	; (800ae44 <HAL_DMA_Abort_IT+0x298>)
 800ac66:	4293      	cmp	r3, r2
 800ac68:	d004      	beq.n	800ac74 <HAL_DMA_Abort_IT+0xc8>
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	4a76      	ldr	r2, [pc, #472]	; (800ae48 <HAL_DMA_Abort_IT+0x29c>)
 800ac70:	4293      	cmp	r3, r2
 800ac72:	d101      	bne.n	800ac78 <HAL_DMA_Abort_IT+0xcc>
 800ac74:	2301      	movs	r3, #1
 800ac76:	e000      	b.n	800ac7a <HAL_DMA_Abort_IT+0xce>
 800ac78:	2300      	movs	r3, #0
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d065      	beq.n	800ad4a <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2204      	movs	r2, #4
 800ac82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	4a60      	ldr	r2, [pc, #384]	; (800ae0c <HAL_DMA_Abort_IT+0x260>)
 800ac8c:	4293      	cmp	r3, r2
 800ac8e:	d04a      	beq.n	800ad26 <HAL_DMA_Abort_IT+0x17a>
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	4a5e      	ldr	r2, [pc, #376]	; (800ae10 <HAL_DMA_Abort_IT+0x264>)
 800ac96:	4293      	cmp	r3, r2
 800ac98:	d045      	beq.n	800ad26 <HAL_DMA_Abort_IT+0x17a>
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	4a5d      	ldr	r2, [pc, #372]	; (800ae14 <HAL_DMA_Abort_IT+0x268>)
 800aca0:	4293      	cmp	r3, r2
 800aca2:	d040      	beq.n	800ad26 <HAL_DMA_Abort_IT+0x17a>
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	4a5b      	ldr	r2, [pc, #364]	; (800ae18 <HAL_DMA_Abort_IT+0x26c>)
 800acaa:	4293      	cmp	r3, r2
 800acac:	d03b      	beq.n	800ad26 <HAL_DMA_Abort_IT+0x17a>
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	4a5a      	ldr	r2, [pc, #360]	; (800ae1c <HAL_DMA_Abort_IT+0x270>)
 800acb4:	4293      	cmp	r3, r2
 800acb6:	d036      	beq.n	800ad26 <HAL_DMA_Abort_IT+0x17a>
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	4a58      	ldr	r2, [pc, #352]	; (800ae20 <HAL_DMA_Abort_IT+0x274>)
 800acbe:	4293      	cmp	r3, r2
 800acc0:	d031      	beq.n	800ad26 <HAL_DMA_Abort_IT+0x17a>
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	4a57      	ldr	r2, [pc, #348]	; (800ae24 <HAL_DMA_Abort_IT+0x278>)
 800acc8:	4293      	cmp	r3, r2
 800acca:	d02c      	beq.n	800ad26 <HAL_DMA_Abort_IT+0x17a>
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	4a55      	ldr	r2, [pc, #340]	; (800ae28 <HAL_DMA_Abort_IT+0x27c>)
 800acd2:	4293      	cmp	r3, r2
 800acd4:	d027      	beq.n	800ad26 <HAL_DMA_Abort_IT+0x17a>
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	4a54      	ldr	r2, [pc, #336]	; (800ae2c <HAL_DMA_Abort_IT+0x280>)
 800acdc:	4293      	cmp	r3, r2
 800acde:	d022      	beq.n	800ad26 <HAL_DMA_Abort_IT+0x17a>
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	4a52      	ldr	r2, [pc, #328]	; (800ae30 <HAL_DMA_Abort_IT+0x284>)
 800ace6:	4293      	cmp	r3, r2
 800ace8:	d01d      	beq.n	800ad26 <HAL_DMA_Abort_IT+0x17a>
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	4a51      	ldr	r2, [pc, #324]	; (800ae34 <HAL_DMA_Abort_IT+0x288>)
 800acf0:	4293      	cmp	r3, r2
 800acf2:	d018      	beq.n	800ad26 <HAL_DMA_Abort_IT+0x17a>
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	4a4f      	ldr	r2, [pc, #316]	; (800ae38 <HAL_DMA_Abort_IT+0x28c>)
 800acfa:	4293      	cmp	r3, r2
 800acfc:	d013      	beq.n	800ad26 <HAL_DMA_Abort_IT+0x17a>
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	4a4e      	ldr	r2, [pc, #312]	; (800ae3c <HAL_DMA_Abort_IT+0x290>)
 800ad04:	4293      	cmp	r3, r2
 800ad06:	d00e      	beq.n	800ad26 <HAL_DMA_Abort_IT+0x17a>
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	4a4c      	ldr	r2, [pc, #304]	; (800ae40 <HAL_DMA_Abort_IT+0x294>)
 800ad0e:	4293      	cmp	r3, r2
 800ad10:	d009      	beq.n	800ad26 <HAL_DMA_Abort_IT+0x17a>
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	4a4b      	ldr	r2, [pc, #300]	; (800ae44 <HAL_DMA_Abort_IT+0x298>)
 800ad18:	4293      	cmp	r3, r2
 800ad1a:	d004      	beq.n	800ad26 <HAL_DMA_Abort_IT+0x17a>
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	4a49      	ldr	r2, [pc, #292]	; (800ae48 <HAL_DMA_Abort_IT+0x29c>)
 800ad22:	4293      	cmp	r3, r2
 800ad24:	d108      	bne.n	800ad38 <HAL_DMA_Abort_IT+0x18c>
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	681a      	ldr	r2, [r3, #0]
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	f022 0201 	bic.w	r2, r2, #1
 800ad34:	601a      	str	r2, [r3, #0]
 800ad36:	e147      	b.n	800afc8 <HAL_DMA_Abort_IT+0x41c>
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	681a      	ldr	r2, [r3, #0]
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	f022 0201 	bic.w	r2, r2, #1
 800ad46:	601a      	str	r2, [r3, #0]
 800ad48:	e13e      	b.n	800afc8 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	681a      	ldr	r2, [r3, #0]
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	f022 020e 	bic.w	r2, r2, #14
 800ad58:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	4a2b      	ldr	r2, [pc, #172]	; (800ae0c <HAL_DMA_Abort_IT+0x260>)
 800ad60:	4293      	cmp	r3, r2
 800ad62:	d04a      	beq.n	800adfa <HAL_DMA_Abort_IT+0x24e>
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	4a29      	ldr	r2, [pc, #164]	; (800ae10 <HAL_DMA_Abort_IT+0x264>)
 800ad6a:	4293      	cmp	r3, r2
 800ad6c:	d045      	beq.n	800adfa <HAL_DMA_Abort_IT+0x24e>
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	4a28      	ldr	r2, [pc, #160]	; (800ae14 <HAL_DMA_Abort_IT+0x268>)
 800ad74:	4293      	cmp	r3, r2
 800ad76:	d040      	beq.n	800adfa <HAL_DMA_Abort_IT+0x24e>
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	4a26      	ldr	r2, [pc, #152]	; (800ae18 <HAL_DMA_Abort_IT+0x26c>)
 800ad7e:	4293      	cmp	r3, r2
 800ad80:	d03b      	beq.n	800adfa <HAL_DMA_Abort_IT+0x24e>
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	4a25      	ldr	r2, [pc, #148]	; (800ae1c <HAL_DMA_Abort_IT+0x270>)
 800ad88:	4293      	cmp	r3, r2
 800ad8a:	d036      	beq.n	800adfa <HAL_DMA_Abort_IT+0x24e>
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	4a23      	ldr	r2, [pc, #140]	; (800ae20 <HAL_DMA_Abort_IT+0x274>)
 800ad92:	4293      	cmp	r3, r2
 800ad94:	d031      	beq.n	800adfa <HAL_DMA_Abort_IT+0x24e>
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	4a22      	ldr	r2, [pc, #136]	; (800ae24 <HAL_DMA_Abort_IT+0x278>)
 800ad9c:	4293      	cmp	r3, r2
 800ad9e:	d02c      	beq.n	800adfa <HAL_DMA_Abort_IT+0x24e>
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	4a20      	ldr	r2, [pc, #128]	; (800ae28 <HAL_DMA_Abort_IT+0x27c>)
 800ada6:	4293      	cmp	r3, r2
 800ada8:	d027      	beq.n	800adfa <HAL_DMA_Abort_IT+0x24e>
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	4a1f      	ldr	r2, [pc, #124]	; (800ae2c <HAL_DMA_Abort_IT+0x280>)
 800adb0:	4293      	cmp	r3, r2
 800adb2:	d022      	beq.n	800adfa <HAL_DMA_Abort_IT+0x24e>
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	4a1d      	ldr	r2, [pc, #116]	; (800ae30 <HAL_DMA_Abort_IT+0x284>)
 800adba:	4293      	cmp	r3, r2
 800adbc:	d01d      	beq.n	800adfa <HAL_DMA_Abort_IT+0x24e>
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	4a1c      	ldr	r2, [pc, #112]	; (800ae34 <HAL_DMA_Abort_IT+0x288>)
 800adc4:	4293      	cmp	r3, r2
 800adc6:	d018      	beq.n	800adfa <HAL_DMA_Abort_IT+0x24e>
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	4a1a      	ldr	r2, [pc, #104]	; (800ae38 <HAL_DMA_Abort_IT+0x28c>)
 800adce:	4293      	cmp	r3, r2
 800add0:	d013      	beq.n	800adfa <HAL_DMA_Abort_IT+0x24e>
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	4a19      	ldr	r2, [pc, #100]	; (800ae3c <HAL_DMA_Abort_IT+0x290>)
 800add8:	4293      	cmp	r3, r2
 800adda:	d00e      	beq.n	800adfa <HAL_DMA_Abort_IT+0x24e>
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	4a17      	ldr	r2, [pc, #92]	; (800ae40 <HAL_DMA_Abort_IT+0x294>)
 800ade2:	4293      	cmp	r3, r2
 800ade4:	d009      	beq.n	800adfa <HAL_DMA_Abort_IT+0x24e>
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	4a16      	ldr	r2, [pc, #88]	; (800ae44 <HAL_DMA_Abort_IT+0x298>)
 800adec:	4293      	cmp	r3, r2
 800adee:	d004      	beq.n	800adfa <HAL_DMA_Abort_IT+0x24e>
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	4a14      	ldr	r2, [pc, #80]	; (800ae48 <HAL_DMA_Abort_IT+0x29c>)
 800adf6:	4293      	cmp	r3, r2
 800adf8:	d128      	bne.n	800ae4c <HAL_DMA_Abort_IT+0x2a0>
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	681a      	ldr	r2, [r3, #0]
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	f022 0201 	bic.w	r2, r2, #1
 800ae08:	601a      	str	r2, [r3, #0]
 800ae0a:	e027      	b.n	800ae5c <HAL_DMA_Abort_IT+0x2b0>
 800ae0c:	40020010 	.word	0x40020010
 800ae10:	40020028 	.word	0x40020028
 800ae14:	40020040 	.word	0x40020040
 800ae18:	40020058 	.word	0x40020058
 800ae1c:	40020070 	.word	0x40020070
 800ae20:	40020088 	.word	0x40020088
 800ae24:	400200a0 	.word	0x400200a0
 800ae28:	400200b8 	.word	0x400200b8
 800ae2c:	40020410 	.word	0x40020410
 800ae30:	40020428 	.word	0x40020428
 800ae34:	40020440 	.word	0x40020440
 800ae38:	40020458 	.word	0x40020458
 800ae3c:	40020470 	.word	0x40020470
 800ae40:	40020488 	.word	0x40020488
 800ae44:	400204a0 	.word	0x400204a0
 800ae48:	400204b8 	.word	0x400204b8
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	681a      	ldr	r2, [r3, #0]
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f022 0201 	bic.w	r2, r2, #1
 800ae5a:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	4a5c      	ldr	r2, [pc, #368]	; (800afd4 <HAL_DMA_Abort_IT+0x428>)
 800ae62:	4293      	cmp	r3, r2
 800ae64:	d072      	beq.n	800af4c <HAL_DMA_Abort_IT+0x3a0>
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	4a5b      	ldr	r2, [pc, #364]	; (800afd8 <HAL_DMA_Abort_IT+0x42c>)
 800ae6c:	4293      	cmp	r3, r2
 800ae6e:	d06d      	beq.n	800af4c <HAL_DMA_Abort_IT+0x3a0>
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	4a59      	ldr	r2, [pc, #356]	; (800afdc <HAL_DMA_Abort_IT+0x430>)
 800ae76:	4293      	cmp	r3, r2
 800ae78:	d068      	beq.n	800af4c <HAL_DMA_Abort_IT+0x3a0>
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	4a58      	ldr	r2, [pc, #352]	; (800afe0 <HAL_DMA_Abort_IT+0x434>)
 800ae80:	4293      	cmp	r3, r2
 800ae82:	d063      	beq.n	800af4c <HAL_DMA_Abort_IT+0x3a0>
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	4a56      	ldr	r2, [pc, #344]	; (800afe4 <HAL_DMA_Abort_IT+0x438>)
 800ae8a:	4293      	cmp	r3, r2
 800ae8c:	d05e      	beq.n	800af4c <HAL_DMA_Abort_IT+0x3a0>
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	4a55      	ldr	r2, [pc, #340]	; (800afe8 <HAL_DMA_Abort_IT+0x43c>)
 800ae94:	4293      	cmp	r3, r2
 800ae96:	d059      	beq.n	800af4c <HAL_DMA_Abort_IT+0x3a0>
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	4a53      	ldr	r2, [pc, #332]	; (800afec <HAL_DMA_Abort_IT+0x440>)
 800ae9e:	4293      	cmp	r3, r2
 800aea0:	d054      	beq.n	800af4c <HAL_DMA_Abort_IT+0x3a0>
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	4a52      	ldr	r2, [pc, #328]	; (800aff0 <HAL_DMA_Abort_IT+0x444>)
 800aea8:	4293      	cmp	r3, r2
 800aeaa:	d04f      	beq.n	800af4c <HAL_DMA_Abort_IT+0x3a0>
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	4a50      	ldr	r2, [pc, #320]	; (800aff4 <HAL_DMA_Abort_IT+0x448>)
 800aeb2:	4293      	cmp	r3, r2
 800aeb4:	d04a      	beq.n	800af4c <HAL_DMA_Abort_IT+0x3a0>
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	4a4f      	ldr	r2, [pc, #316]	; (800aff8 <HAL_DMA_Abort_IT+0x44c>)
 800aebc:	4293      	cmp	r3, r2
 800aebe:	d045      	beq.n	800af4c <HAL_DMA_Abort_IT+0x3a0>
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	4a4d      	ldr	r2, [pc, #308]	; (800affc <HAL_DMA_Abort_IT+0x450>)
 800aec6:	4293      	cmp	r3, r2
 800aec8:	d040      	beq.n	800af4c <HAL_DMA_Abort_IT+0x3a0>
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	4a4c      	ldr	r2, [pc, #304]	; (800b000 <HAL_DMA_Abort_IT+0x454>)
 800aed0:	4293      	cmp	r3, r2
 800aed2:	d03b      	beq.n	800af4c <HAL_DMA_Abort_IT+0x3a0>
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	4a4a      	ldr	r2, [pc, #296]	; (800b004 <HAL_DMA_Abort_IT+0x458>)
 800aeda:	4293      	cmp	r3, r2
 800aedc:	d036      	beq.n	800af4c <HAL_DMA_Abort_IT+0x3a0>
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	4a49      	ldr	r2, [pc, #292]	; (800b008 <HAL_DMA_Abort_IT+0x45c>)
 800aee4:	4293      	cmp	r3, r2
 800aee6:	d031      	beq.n	800af4c <HAL_DMA_Abort_IT+0x3a0>
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	4a47      	ldr	r2, [pc, #284]	; (800b00c <HAL_DMA_Abort_IT+0x460>)
 800aeee:	4293      	cmp	r3, r2
 800aef0:	d02c      	beq.n	800af4c <HAL_DMA_Abort_IT+0x3a0>
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	4a46      	ldr	r2, [pc, #280]	; (800b010 <HAL_DMA_Abort_IT+0x464>)
 800aef8:	4293      	cmp	r3, r2
 800aefa:	d027      	beq.n	800af4c <HAL_DMA_Abort_IT+0x3a0>
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	4a44      	ldr	r2, [pc, #272]	; (800b014 <HAL_DMA_Abort_IT+0x468>)
 800af02:	4293      	cmp	r3, r2
 800af04:	d022      	beq.n	800af4c <HAL_DMA_Abort_IT+0x3a0>
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	4a43      	ldr	r2, [pc, #268]	; (800b018 <HAL_DMA_Abort_IT+0x46c>)
 800af0c:	4293      	cmp	r3, r2
 800af0e:	d01d      	beq.n	800af4c <HAL_DMA_Abort_IT+0x3a0>
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	4a41      	ldr	r2, [pc, #260]	; (800b01c <HAL_DMA_Abort_IT+0x470>)
 800af16:	4293      	cmp	r3, r2
 800af18:	d018      	beq.n	800af4c <HAL_DMA_Abort_IT+0x3a0>
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	4a40      	ldr	r2, [pc, #256]	; (800b020 <HAL_DMA_Abort_IT+0x474>)
 800af20:	4293      	cmp	r3, r2
 800af22:	d013      	beq.n	800af4c <HAL_DMA_Abort_IT+0x3a0>
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	4a3e      	ldr	r2, [pc, #248]	; (800b024 <HAL_DMA_Abort_IT+0x478>)
 800af2a:	4293      	cmp	r3, r2
 800af2c:	d00e      	beq.n	800af4c <HAL_DMA_Abort_IT+0x3a0>
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	4a3d      	ldr	r2, [pc, #244]	; (800b028 <HAL_DMA_Abort_IT+0x47c>)
 800af34:	4293      	cmp	r3, r2
 800af36:	d009      	beq.n	800af4c <HAL_DMA_Abort_IT+0x3a0>
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	4a3b      	ldr	r2, [pc, #236]	; (800b02c <HAL_DMA_Abort_IT+0x480>)
 800af3e:	4293      	cmp	r3, r2
 800af40:	d004      	beq.n	800af4c <HAL_DMA_Abort_IT+0x3a0>
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	4a3a      	ldr	r2, [pc, #232]	; (800b030 <HAL_DMA_Abort_IT+0x484>)
 800af48:	4293      	cmp	r3, r2
 800af4a:	d101      	bne.n	800af50 <HAL_DMA_Abort_IT+0x3a4>
 800af4c:	2301      	movs	r3, #1
 800af4e:	e000      	b.n	800af52 <HAL_DMA_Abort_IT+0x3a6>
 800af50:	2300      	movs	r3, #0
 800af52:	2b00      	cmp	r3, #0
 800af54:	d028      	beq.n	800afa8 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af5a:	681a      	ldr	r2, [r3, #0]
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800af64:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af6a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af70:	f003 031f 	and.w	r3, r3, #31
 800af74:	2201      	movs	r2, #1
 800af76:	409a      	lsls	r2, r3
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af80:	687a      	ldr	r2, [r7, #4]
 800af82:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800af84:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d00c      	beq.n	800afa8 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af92:	681a      	ldr	r2, [r3, #0]
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800af9c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afa2:	687a      	ldr	r2, [r7, #4]
 800afa4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800afa6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2200      	movs	r2, #0
 800afac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2201      	movs	r2, #1
 800afb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d003      	beq.n	800afc8 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800afc4:	6878      	ldr	r0, [r7, #4]
 800afc6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800afc8:	2300      	movs	r3, #0
}
 800afca:	4618      	mov	r0, r3
 800afcc:	3710      	adds	r7, #16
 800afce:	46bd      	mov	sp, r7
 800afd0:	bd80      	pop	{r7, pc}
 800afd2:	bf00      	nop
 800afd4:	40020010 	.word	0x40020010
 800afd8:	40020028 	.word	0x40020028
 800afdc:	40020040 	.word	0x40020040
 800afe0:	40020058 	.word	0x40020058
 800afe4:	40020070 	.word	0x40020070
 800afe8:	40020088 	.word	0x40020088
 800afec:	400200a0 	.word	0x400200a0
 800aff0:	400200b8 	.word	0x400200b8
 800aff4:	40020410 	.word	0x40020410
 800aff8:	40020428 	.word	0x40020428
 800affc:	40020440 	.word	0x40020440
 800b000:	40020458 	.word	0x40020458
 800b004:	40020470 	.word	0x40020470
 800b008:	40020488 	.word	0x40020488
 800b00c:	400204a0 	.word	0x400204a0
 800b010:	400204b8 	.word	0x400204b8
 800b014:	58025408 	.word	0x58025408
 800b018:	5802541c 	.word	0x5802541c
 800b01c:	58025430 	.word	0x58025430
 800b020:	58025444 	.word	0x58025444
 800b024:	58025458 	.word	0x58025458
 800b028:	5802546c 	.word	0x5802546c
 800b02c:	58025480 	.word	0x58025480
 800b030:	58025494 	.word	0x58025494

0800b034 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b08a      	sub	sp, #40	; 0x28
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800b03c:	2300      	movs	r3, #0
 800b03e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800b040:	4b67      	ldr	r3, [pc, #412]	; (800b1e0 <HAL_DMA_IRQHandler+0x1ac>)
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	4a67      	ldr	r2, [pc, #412]	; (800b1e4 <HAL_DMA_IRQHandler+0x1b0>)
 800b046:	fba2 2303 	umull	r2, r3, r2, r3
 800b04a:	0a9b      	lsrs	r3, r3, #10
 800b04c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b052:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b058:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800b05a:	6a3b      	ldr	r3, [r7, #32]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800b060:	69fb      	ldr	r3, [r7, #28]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	4a5f      	ldr	r2, [pc, #380]	; (800b1e8 <HAL_DMA_IRQHandler+0x1b4>)
 800b06c:	4293      	cmp	r3, r2
 800b06e:	d04a      	beq.n	800b106 <HAL_DMA_IRQHandler+0xd2>
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	4a5d      	ldr	r2, [pc, #372]	; (800b1ec <HAL_DMA_IRQHandler+0x1b8>)
 800b076:	4293      	cmp	r3, r2
 800b078:	d045      	beq.n	800b106 <HAL_DMA_IRQHandler+0xd2>
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	4a5c      	ldr	r2, [pc, #368]	; (800b1f0 <HAL_DMA_IRQHandler+0x1bc>)
 800b080:	4293      	cmp	r3, r2
 800b082:	d040      	beq.n	800b106 <HAL_DMA_IRQHandler+0xd2>
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	4a5a      	ldr	r2, [pc, #360]	; (800b1f4 <HAL_DMA_IRQHandler+0x1c0>)
 800b08a:	4293      	cmp	r3, r2
 800b08c:	d03b      	beq.n	800b106 <HAL_DMA_IRQHandler+0xd2>
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	4a59      	ldr	r2, [pc, #356]	; (800b1f8 <HAL_DMA_IRQHandler+0x1c4>)
 800b094:	4293      	cmp	r3, r2
 800b096:	d036      	beq.n	800b106 <HAL_DMA_IRQHandler+0xd2>
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	4a57      	ldr	r2, [pc, #348]	; (800b1fc <HAL_DMA_IRQHandler+0x1c8>)
 800b09e:	4293      	cmp	r3, r2
 800b0a0:	d031      	beq.n	800b106 <HAL_DMA_IRQHandler+0xd2>
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	4a56      	ldr	r2, [pc, #344]	; (800b200 <HAL_DMA_IRQHandler+0x1cc>)
 800b0a8:	4293      	cmp	r3, r2
 800b0aa:	d02c      	beq.n	800b106 <HAL_DMA_IRQHandler+0xd2>
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	4a54      	ldr	r2, [pc, #336]	; (800b204 <HAL_DMA_IRQHandler+0x1d0>)
 800b0b2:	4293      	cmp	r3, r2
 800b0b4:	d027      	beq.n	800b106 <HAL_DMA_IRQHandler+0xd2>
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	4a53      	ldr	r2, [pc, #332]	; (800b208 <HAL_DMA_IRQHandler+0x1d4>)
 800b0bc:	4293      	cmp	r3, r2
 800b0be:	d022      	beq.n	800b106 <HAL_DMA_IRQHandler+0xd2>
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	4a51      	ldr	r2, [pc, #324]	; (800b20c <HAL_DMA_IRQHandler+0x1d8>)
 800b0c6:	4293      	cmp	r3, r2
 800b0c8:	d01d      	beq.n	800b106 <HAL_DMA_IRQHandler+0xd2>
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	4a50      	ldr	r2, [pc, #320]	; (800b210 <HAL_DMA_IRQHandler+0x1dc>)
 800b0d0:	4293      	cmp	r3, r2
 800b0d2:	d018      	beq.n	800b106 <HAL_DMA_IRQHandler+0xd2>
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	4a4e      	ldr	r2, [pc, #312]	; (800b214 <HAL_DMA_IRQHandler+0x1e0>)
 800b0da:	4293      	cmp	r3, r2
 800b0dc:	d013      	beq.n	800b106 <HAL_DMA_IRQHandler+0xd2>
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	4a4d      	ldr	r2, [pc, #308]	; (800b218 <HAL_DMA_IRQHandler+0x1e4>)
 800b0e4:	4293      	cmp	r3, r2
 800b0e6:	d00e      	beq.n	800b106 <HAL_DMA_IRQHandler+0xd2>
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	4a4b      	ldr	r2, [pc, #300]	; (800b21c <HAL_DMA_IRQHandler+0x1e8>)
 800b0ee:	4293      	cmp	r3, r2
 800b0f0:	d009      	beq.n	800b106 <HAL_DMA_IRQHandler+0xd2>
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	4a4a      	ldr	r2, [pc, #296]	; (800b220 <HAL_DMA_IRQHandler+0x1ec>)
 800b0f8:	4293      	cmp	r3, r2
 800b0fa:	d004      	beq.n	800b106 <HAL_DMA_IRQHandler+0xd2>
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	4a48      	ldr	r2, [pc, #288]	; (800b224 <HAL_DMA_IRQHandler+0x1f0>)
 800b102:	4293      	cmp	r3, r2
 800b104:	d101      	bne.n	800b10a <HAL_DMA_IRQHandler+0xd6>
 800b106:	2301      	movs	r3, #1
 800b108:	e000      	b.n	800b10c <HAL_DMA_IRQHandler+0xd8>
 800b10a:	2300      	movs	r3, #0
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	f000 842b 	beq.w	800b968 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b116:	f003 031f 	and.w	r3, r3, #31
 800b11a:	2208      	movs	r2, #8
 800b11c:	409a      	lsls	r2, r3
 800b11e:	69bb      	ldr	r3, [r7, #24]
 800b120:	4013      	ands	r3, r2
 800b122:	2b00      	cmp	r3, #0
 800b124:	f000 80a2 	beq.w	800b26c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	4a2e      	ldr	r2, [pc, #184]	; (800b1e8 <HAL_DMA_IRQHandler+0x1b4>)
 800b12e:	4293      	cmp	r3, r2
 800b130:	d04a      	beq.n	800b1c8 <HAL_DMA_IRQHandler+0x194>
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	4a2d      	ldr	r2, [pc, #180]	; (800b1ec <HAL_DMA_IRQHandler+0x1b8>)
 800b138:	4293      	cmp	r3, r2
 800b13a:	d045      	beq.n	800b1c8 <HAL_DMA_IRQHandler+0x194>
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	4a2b      	ldr	r2, [pc, #172]	; (800b1f0 <HAL_DMA_IRQHandler+0x1bc>)
 800b142:	4293      	cmp	r3, r2
 800b144:	d040      	beq.n	800b1c8 <HAL_DMA_IRQHandler+0x194>
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	4a2a      	ldr	r2, [pc, #168]	; (800b1f4 <HAL_DMA_IRQHandler+0x1c0>)
 800b14c:	4293      	cmp	r3, r2
 800b14e:	d03b      	beq.n	800b1c8 <HAL_DMA_IRQHandler+0x194>
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	4a28      	ldr	r2, [pc, #160]	; (800b1f8 <HAL_DMA_IRQHandler+0x1c4>)
 800b156:	4293      	cmp	r3, r2
 800b158:	d036      	beq.n	800b1c8 <HAL_DMA_IRQHandler+0x194>
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	4a27      	ldr	r2, [pc, #156]	; (800b1fc <HAL_DMA_IRQHandler+0x1c8>)
 800b160:	4293      	cmp	r3, r2
 800b162:	d031      	beq.n	800b1c8 <HAL_DMA_IRQHandler+0x194>
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	4a25      	ldr	r2, [pc, #148]	; (800b200 <HAL_DMA_IRQHandler+0x1cc>)
 800b16a:	4293      	cmp	r3, r2
 800b16c:	d02c      	beq.n	800b1c8 <HAL_DMA_IRQHandler+0x194>
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	4a24      	ldr	r2, [pc, #144]	; (800b204 <HAL_DMA_IRQHandler+0x1d0>)
 800b174:	4293      	cmp	r3, r2
 800b176:	d027      	beq.n	800b1c8 <HAL_DMA_IRQHandler+0x194>
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	4a22      	ldr	r2, [pc, #136]	; (800b208 <HAL_DMA_IRQHandler+0x1d4>)
 800b17e:	4293      	cmp	r3, r2
 800b180:	d022      	beq.n	800b1c8 <HAL_DMA_IRQHandler+0x194>
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	4a21      	ldr	r2, [pc, #132]	; (800b20c <HAL_DMA_IRQHandler+0x1d8>)
 800b188:	4293      	cmp	r3, r2
 800b18a:	d01d      	beq.n	800b1c8 <HAL_DMA_IRQHandler+0x194>
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	4a1f      	ldr	r2, [pc, #124]	; (800b210 <HAL_DMA_IRQHandler+0x1dc>)
 800b192:	4293      	cmp	r3, r2
 800b194:	d018      	beq.n	800b1c8 <HAL_DMA_IRQHandler+0x194>
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	4a1e      	ldr	r2, [pc, #120]	; (800b214 <HAL_DMA_IRQHandler+0x1e0>)
 800b19c:	4293      	cmp	r3, r2
 800b19e:	d013      	beq.n	800b1c8 <HAL_DMA_IRQHandler+0x194>
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	4a1c      	ldr	r2, [pc, #112]	; (800b218 <HAL_DMA_IRQHandler+0x1e4>)
 800b1a6:	4293      	cmp	r3, r2
 800b1a8:	d00e      	beq.n	800b1c8 <HAL_DMA_IRQHandler+0x194>
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	4a1b      	ldr	r2, [pc, #108]	; (800b21c <HAL_DMA_IRQHandler+0x1e8>)
 800b1b0:	4293      	cmp	r3, r2
 800b1b2:	d009      	beq.n	800b1c8 <HAL_DMA_IRQHandler+0x194>
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	4a19      	ldr	r2, [pc, #100]	; (800b220 <HAL_DMA_IRQHandler+0x1ec>)
 800b1ba:	4293      	cmp	r3, r2
 800b1bc:	d004      	beq.n	800b1c8 <HAL_DMA_IRQHandler+0x194>
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	4a18      	ldr	r2, [pc, #96]	; (800b224 <HAL_DMA_IRQHandler+0x1f0>)
 800b1c4:	4293      	cmp	r3, r2
 800b1c6:	d12f      	bne.n	800b228 <HAL_DMA_IRQHandler+0x1f4>
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	f003 0304 	and.w	r3, r3, #4
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	bf14      	ite	ne
 800b1d6:	2301      	movne	r3, #1
 800b1d8:	2300      	moveq	r3, #0
 800b1da:	b2db      	uxtb	r3, r3
 800b1dc:	e02e      	b.n	800b23c <HAL_DMA_IRQHandler+0x208>
 800b1de:	bf00      	nop
 800b1e0:	240000f4 	.word	0x240000f4
 800b1e4:	1b4e81b5 	.word	0x1b4e81b5
 800b1e8:	40020010 	.word	0x40020010
 800b1ec:	40020028 	.word	0x40020028
 800b1f0:	40020040 	.word	0x40020040
 800b1f4:	40020058 	.word	0x40020058
 800b1f8:	40020070 	.word	0x40020070
 800b1fc:	40020088 	.word	0x40020088
 800b200:	400200a0 	.word	0x400200a0
 800b204:	400200b8 	.word	0x400200b8
 800b208:	40020410 	.word	0x40020410
 800b20c:	40020428 	.word	0x40020428
 800b210:	40020440 	.word	0x40020440
 800b214:	40020458 	.word	0x40020458
 800b218:	40020470 	.word	0x40020470
 800b21c:	40020488 	.word	0x40020488
 800b220:	400204a0 	.word	0x400204a0
 800b224:	400204b8 	.word	0x400204b8
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	f003 0308 	and.w	r3, r3, #8
 800b232:	2b00      	cmp	r3, #0
 800b234:	bf14      	ite	ne
 800b236:	2301      	movne	r3, #1
 800b238:	2300      	moveq	r3, #0
 800b23a:	b2db      	uxtb	r3, r3
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d015      	beq.n	800b26c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	681a      	ldr	r2, [r3, #0]
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	f022 0204 	bic.w	r2, r2, #4
 800b24e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b254:	f003 031f 	and.w	r3, r3, #31
 800b258:	2208      	movs	r2, #8
 800b25a:	409a      	lsls	r2, r3
 800b25c:	6a3b      	ldr	r3, [r7, #32]
 800b25e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b264:	f043 0201 	orr.w	r2, r3, #1
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b270:	f003 031f 	and.w	r3, r3, #31
 800b274:	69ba      	ldr	r2, [r7, #24]
 800b276:	fa22 f303 	lsr.w	r3, r2, r3
 800b27a:	f003 0301 	and.w	r3, r3, #1
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d06e      	beq.n	800b360 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	4a69      	ldr	r2, [pc, #420]	; (800b42c <HAL_DMA_IRQHandler+0x3f8>)
 800b288:	4293      	cmp	r3, r2
 800b28a:	d04a      	beq.n	800b322 <HAL_DMA_IRQHandler+0x2ee>
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	4a67      	ldr	r2, [pc, #412]	; (800b430 <HAL_DMA_IRQHandler+0x3fc>)
 800b292:	4293      	cmp	r3, r2
 800b294:	d045      	beq.n	800b322 <HAL_DMA_IRQHandler+0x2ee>
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	4a66      	ldr	r2, [pc, #408]	; (800b434 <HAL_DMA_IRQHandler+0x400>)
 800b29c:	4293      	cmp	r3, r2
 800b29e:	d040      	beq.n	800b322 <HAL_DMA_IRQHandler+0x2ee>
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	4a64      	ldr	r2, [pc, #400]	; (800b438 <HAL_DMA_IRQHandler+0x404>)
 800b2a6:	4293      	cmp	r3, r2
 800b2a8:	d03b      	beq.n	800b322 <HAL_DMA_IRQHandler+0x2ee>
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	4a63      	ldr	r2, [pc, #396]	; (800b43c <HAL_DMA_IRQHandler+0x408>)
 800b2b0:	4293      	cmp	r3, r2
 800b2b2:	d036      	beq.n	800b322 <HAL_DMA_IRQHandler+0x2ee>
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	4a61      	ldr	r2, [pc, #388]	; (800b440 <HAL_DMA_IRQHandler+0x40c>)
 800b2ba:	4293      	cmp	r3, r2
 800b2bc:	d031      	beq.n	800b322 <HAL_DMA_IRQHandler+0x2ee>
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	4a60      	ldr	r2, [pc, #384]	; (800b444 <HAL_DMA_IRQHandler+0x410>)
 800b2c4:	4293      	cmp	r3, r2
 800b2c6:	d02c      	beq.n	800b322 <HAL_DMA_IRQHandler+0x2ee>
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	4a5e      	ldr	r2, [pc, #376]	; (800b448 <HAL_DMA_IRQHandler+0x414>)
 800b2ce:	4293      	cmp	r3, r2
 800b2d0:	d027      	beq.n	800b322 <HAL_DMA_IRQHandler+0x2ee>
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	4a5d      	ldr	r2, [pc, #372]	; (800b44c <HAL_DMA_IRQHandler+0x418>)
 800b2d8:	4293      	cmp	r3, r2
 800b2da:	d022      	beq.n	800b322 <HAL_DMA_IRQHandler+0x2ee>
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	4a5b      	ldr	r2, [pc, #364]	; (800b450 <HAL_DMA_IRQHandler+0x41c>)
 800b2e2:	4293      	cmp	r3, r2
 800b2e4:	d01d      	beq.n	800b322 <HAL_DMA_IRQHandler+0x2ee>
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	4a5a      	ldr	r2, [pc, #360]	; (800b454 <HAL_DMA_IRQHandler+0x420>)
 800b2ec:	4293      	cmp	r3, r2
 800b2ee:	d018      	beq.n	800b322 <HAL_DMA_IRQHandler+0x2ee>
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	4a58      	ldr	r2, [pc, #352]	; (800b458 <HAL_DMA_IRQHandler+0x424>)
 800b2f6:	4293      	cmp	r3, r2
 800b2f8:	d013      	beq.n	800b322 <HAL_DMA_IRQHandler+0x2ee>
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	4a57      	ldr	r2, [pc, #348]	; (800b45c <HAL_DMA_IRQHandler+0x428>)
 800b300:	4293      	cmp	r3, r2
 800b302:	d00e      	beq.n	800b322 <HAL_DMA_IRQHandler+0x2ee>
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	4a55      	ldr	r2, [pc, #340]	; (800b460 <HAL_DMA_IRQHandler+0x42c>)
 800b30a:	4293      	cmp	r3, r2
 800b30c:	d009      	beq.n	800b322 <HAL_DMA_IRQHandler+0x2ee>
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	4a54      	ldr	r2, [pc, #336]	; (800b464 <HAL_DMA_IRQHandler+0x430>)
 800b314:	4293      	cmp	r3, r2
 800b316:	d004      	beq.n	800b322 <HAL_DMA_IRQHandler+0x2ee>
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	4a52      	ldr	r2, [pc, #328]	; (800b468 <HAL_DMA_IRQHandler+0x434>)
 800b31e:	4293      	cmp	r3, r2
 800b320:	d10a      	bne.n	800b338 <HAL_DMA_IRQHandler+0x304>
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	695b      	ldr	r3, [r3, #20]
 800b328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	bf14      	ite	ne
 800b330:	2301      	movne	r3, #1
 800b332:	2300      	moveq	r3, #0
 800b334:	b2db      	uxtb	r3, r3
 800b336:	e003      	b.n	800b340 <HAL_DMA_IRQHandler+0x30c>
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	2300      	movs	r3, #0
 800b340:	2b00      	cmp	r3, #0
 800b342:	d00d      	beq.n	800b360 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b348:	f003 031f 	and.w	r3, r3, #31
 800b34c:	2201      	movs	r2, #1
 800b34e:	409a      	lsls	r2, r3
 800b350:	6a3b      	ldr	r3, [r7, #32]
 800b352:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b358:	f043 0202 	orr.w	r2, r3, #2
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b364:	f003 031f 	and.w	r3, r3, #31
 800b368:	2204      	movs	r2, #4
 800b36a:	409a      	lsls	r2, r3
 800b36c:	69bb      	ldr	r3, [r7, #24]
 800b36e:	4013      	ands	r3, r2
 800b370:	2b00      	cmp	r3, #0
 800b372:	f000 808f 	beq.w	800b494 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	4a2c      	ldr	r2, [pc, #176]	; (800b42c <HAL_DMA_IRQHandler+0x3f8>)
 800b37c:	4293      	cmp	r3, r2
 800b37e:	d04a      	beq.n	800b416 <HAL_DMA_IRQHandler+0x3e2>
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	4a2a      	ldr	r2, [pc, #168]	; (800b430 <HAL_DMA_IRQHandler+0x3fc>)
 800b386:	4293      	cmp	r3, r2
 800b388:	d045      	beq.n	800b416 <HAL_DMA_IRQHandler+0x3e2>
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	4a29      	ldr	r2, [pc, #164]	; (800b434 <HAL_DMA_IRQHandler+0x400>)
 800b390:	4293      	cmp	r3, r2
 800b392:	d040      	beq.n	800b416 <HAL_DMA_IRQHandler+0x3e2>
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	4a27      	ldr	r2, [pc, #156]	; (800b438 <HAL_DMA_IRQHandler+0x404>)
 800b39a:	4293      	cmp	r3, r2
 800b39c:	d03b      	beq.n	800b416 <HAL_DMA_IRQHandler+0x3e2>
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	4a26      	ldr	r2, [pc, #152]	; (800b43c <HAL_DMA_IRQHandler+0x408>)
 800b3a4:	4293      	cmp	r3, r2
 800b3a6:	d036      	beq.n	800b416 <HAL_DMA_IRQHandler+0x3e2>
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	4a24      	ldr	r2, [pc, #144]	; (800b440 <HAL_DMA_IRQHandler+0x40c>)
 800b3ae:	4293      	cmp	r3, r2
 800b3b0:	d031      	beq.n	800b416 <HAL_DMA_IRQHandler+0x3e2>
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	4a23      	ldr	r2, [pc, #140]	; (800b444 <HAL_DMA_IRQHandler+0x410>)
 800b3b8:	4293      	cmp	r3, r2
 800b3ba:	d02c      	beq.n	800b416 <HAL_DMA_IRQHandler+0x3e2>
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	4a21      	ldr	r2, [pc, #132]	; (800b448 <HAL_DMA_IRQHandler+0x414>)
 800b3c2:	4293      	cmp	r3, r2
 800b3c4:	d027      	beq.n	800b416 <HAL_DMA_IRQHandler+0x3e2>
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	4a20      	ldr	r2, [pc, #128]	; (800b44c <HAL_DMA_IRQHandler+0x418>)
 800b3cc:	4293      	cmp	r3, r2
 800b3ce:	d022      	beq.n	800b416 <HAL_DMA_IRQHandler+0x3e2>
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	4a1e      	ldr	r2, [pc, #120]	; (800b450 <HAL_DMA_IRQHandler+0x41c>)
 800b3d6:	4293      	cmp	r3, r2
 800b3d8:	d01d      	beq.n	800b416 <HAL_DMA_IRQHandler+0x3e2>
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	4a1d      	ldr	r2, [pc, #116]	; (800b454 <HAL_DMA_IRQHandler+0x420>)
 800b3e0:	4293      	cmp	r3, r2
 800b3e2:	d018      	beq.n	800b416 <HAL_DMA_IRQHandler+0x3e2>
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	4a1b      	ldr	r2, [pc, #108]	; (800b458 <HAL_DMA_IRQHandler+0x424>)
 800b3ea:	4293      	cmp	r3, r2
 800b3ec:	d013      	beq.n	800b416 <HAL_DMA_IRQHandler+0x3e2>
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	4a1a      	ldr	r2, [pc, #104]	; (800b45c <HAL_DMA_IRQHandler+0x428>)
 800b3f4:	4293      	cmp	r3, r2
 800b3f6:	d00e      	beq.n	800b416 <HAL_DMA_IRQHandler+0x3e2>
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	4a18      	ldr	r2, [pc, #96]	; (800b460 <HAL_DMA_IRQHandler+0x42c>)
 800b3fe:	4293      	cmp	r3, r2
 800b400:	d009      	beq.n	800b416 <HAL_DMA_IRQHandler+0x3e2>
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	4a17      	ldr	r2, [pc, #92]	; (800b464 <HAL_DMA_IRQHandler+0x430>)
 800b408:	4293      	cmp	r3, r2
 800b40a:	d004      	beq.n	800b416 <HAL_DMA_IRQHandler+0x3e2>
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	4a15      	ldr	r2, [pc, #84]	; (800b468 <HAL_DMA_IRQHandler+0x434>)
 800b412:	4293      	cmp	r3, r2
 800b414:	d12a      	bne.n	800b46c <HAL_DMA_IRQHandler+0x438>
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	f003 0302 	and.w	r3, r3, #2
 800b420:	2b00      	cmp	r3, #0
 800b422:	bf14      	ite	ne
 800b424:	2301      	movne	r3, #1
 800b426:	2300      	moveq	r3, #0
 800b428:	b2db      	uxtb	r3, r3
 800b42a:	e023      	b.n	800b474 <HAL_DMA_IRQHandler+0x440>
 800b42c:	40020010 	.word	0x40020010
 800b430:	40020028 	.word	0x40020028
 800b434:	40020040 	.word	0x40020040
 800b438:	40020058 	.word	0x40020058
 800b43c:	40020070 	.word	0x40020070
 800b440:	40020088 	.word	0x40020088
 800b444:	400200a0 	.word	0x400200a0
 800b448:	400200b8 	.word	0x400200b8
 800b44c:	40020410 	.word	0x40020410
 800b450:	40020428 	.word	0x40020428
 800b454:	40020440 	.word	0x40020440
 800b458:	40020458 	.word	0x40020458
 800b45c:	40020470 	.word	0x40020470
 800b460:	40020488 	.word	0x40020488
 800b464:	400204a0 	.word	0x400204a0
 800b468:	400204b8 	.word	0x400204b8
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	2300      	movs	r3, #0
 800b474:	2b00      	cmp	r3, #0
 800b476:	d00d      	beq.n	800b494 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b47c:	f003 031f 	and.w	r3, r3, #31
 800b480:	2204      	movs	r2, #4
 800b482:	409a      	lsls	r2, r3
 800b484:	6a3b      	ldr	r3, [r7, #32]
 800b486:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b48c:	f043 0204 	orr.w	r2, r3, #4
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b498:	f003 031f 	and.w	r3, r3, #31
 800b49c:	2210      	movs	r2, #16
 800b49e:	409a      	lsls	r2, r3
 800b4a0:	69bb      	ldr	r3, [r7, #24]
 800b4a2:	4013      	ands	r3, r2
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	f000 80a6 	beq.w	800b5f6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	4a85      	ldr	r2, [pc, #532]	; (800b6c4 <HAL_DMA_IRQHandler+0x690>)
 800b4b0:	4293      	cmp	r3, r2
 800b4b2:	d04a      	beq.n	800b54a <HAL_DMA_IRQHandler+0x516>
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	4a83      	ldr	r2, [pc, #524]	; (800b6c8 <HAL_DMA_IRQHandler+0x694>)
 800b4ba:	4293      	cmp	r3, r2
 800b4bc:	d045      	beq.n	800b54a <HAL_DMA_IRQHandler+0x516>
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	4a82      	ldr	r2, [pc, #520]	; (800b6cc <HAL_DMA_IRQHandler+0x698>)
 800b4c4:	4293      	cmp	r3, r2
 800b4c6:	d040      	beq.n	800b54a <HAL_DMA_IRQHandler+0x516>
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	4a80      	ldr	r2, [pc, #512]	; (800b6d0 <HAL_DMA_IRQHandler+0x69c>)
 800b4ce:	4293      	cmp	r3, r2
 800b4d0:	d03b      	beq.n	800b54a <HAL_DMA_IRQHandler+0x516>
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	4a7f      	ldr	r2, [pc, #508]	; (800b6d4 <HAL_DMA_IRQHandler+0x6a0>)
 800b4d8:	4293      	cmp	r3, r2
 800b4da:	d036      	beq.n	800b54a <HAL_DMA_IRQHandler+0x516>
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	4a7d      	ldr	r2, [pc, #500]	; (800b6d8 <HAL_DMA_IRQHandler+0x6a4>)
 800b4e2:	4293      	cmp	r3, r2
 800b4e4:	d031      	beq.n	800b54a <HAL_DMA_IRQHandler+0x516>
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	4a7c      	ldr	r2, [pc, #496]	; (800b6dc <HAL_DMA_IRQHandler+0x6a8>)
 800b4ec:	4293      	cmp	r3, r2
 800b4ee:	d02c      	beq.n	800b54a <HAL_DMA_IRQHandler+0x516>
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	4a7a      	ldr	r2, [pc, #488]	; (800b6e0 <HAL_DMA_IRQHandler+0x6ac>)
 800b4f6:	4293      	cmp	r3, r2
 800b4f8:	d027      	beq.n	800b54a <HAL_DMA_IRQHandler+0x516>
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	4a79      	ldr	r2, [pc, #484]	; (800b6e4 <HAL_DMA_IRQHandler+0x6b0>)
 800b500:	4293      	cmp	r3, r2
 800b502:	d022      	beq.n	800b54a <HAL_DMA_IRQHandler+0x516>
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	4a77      	ldr	r2, [pc, #476]	; (800b6e8 <HAL_DMA_IRQHandler+0x6b4>)
 800b50a:	4293      	cmp	r3, r2
 800b50c:	d01d      	beq.n	800b54a <HAL_DMA_IRQHandler+0x516>
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	4a76      	ldr	r2, [pc, #472]	; (800b6ec <HAL_DMA_IRQHandler+0x6b8>)
 800b514:	4293      	cmp	r3, r2
 800b516:	d018      	beq.n	800b54a <HAL_DMA_IRQHandler+0x516>
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	4a74      	ldr	r2, [pc, #464]	; (800b6f0 <HAL_DMA_IRQHandler+0x6bc>)
 800b51e:	4293      	cmp	r3, r2
 800b520:	d013      	beq.n	800b54a <HAL_DMA_IRQHandler+0x516>
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	4a73      	ldr	r2, [pc, #460]	; (800b6f4 <HAL_DMA_IRQHandler+0x6c0>)
 800b528:	4293      	cmp	r3, r2
 800b52a:	d00e      	beq.n	800b54a <HAL_DMA_IRQHandler+0x516>
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	4a71      	ldr	r2, [pc, #452]	; (800b6f8 <HAL_DMA_IRQHandler+0x6c4>)
 800b532:	4293      	cmp	r3, r2
 800b534:	d009      	beq.n	800b54a <HAL_DMA_IRQHandler+0x516>
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	4a70      	ldr	r2, [pc, #448]	; (800b6fc <HAL_DMA_IRQHandler+0x6c8>)
 800b53c:	4293      	cmp	r3, r2
 800b53e:	d004      	beq.n	800b54a <HAL_DMA_IRQHandler+0x516>
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	4a6e      	ldr	r2, [pc, #440]	; (800b700 <HAL_DMA_IRQHandler+0x6cc>)
 800b546:	4293      	cmp	r3, r2
 800b548:	d10a      	bne.n	800b560 <HAL_DMA_IRQHandler+0x52c>
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	f003 0308 	and.w	r3, r3, #8
 800b554:	2b00      	cmp	r3, #0
 800b556:	bf14      	ite	ne
 800b558:	2301      	movne	r3, #1
 800b55a:	2300      	moveq	r3, #0
 800b55c:	b2db      	uxtb	r3, r3
 800b55e:	e009      	b.n	800b574 <HAL_DMA_IRQHandler+0x540>
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	f003 0304 	and.w	r3, r3, #4
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	bf14      	ite	ne
 800b56e:	2301      	movne	r3, #1
 800b570:	2300      	moveq	r3, #0
 800b572:	b2db      	uxtb	r3, r3
 800b574:	2b00      	cmp	r3, #0
 800b576:	d03e      	beq.n	800b5f6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b57c:	f003 031f 	and.w	r3, r3, #31
 800b580:	2210      	movs	r2, #16
 800b582:	409a      	lsls	r2, r3
 800b584:	6a3b      	ldr	r3, [r7, #32]
 800b586:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b592:	2b00      	cmp	r3, #0
 800b594:	d018      	beq.n	800b5c8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d108      	bne.n	800b5b6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d024      	beq.n	800b5f6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5b0:	6878      	ldr	r0, [r7, #4]
 800b5b2:	4798      	blx	r3
 800b5b4:	e01f      	b.n	800b5f6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d01b      	beq.n	800b5f6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	4798      	blx	r3
 800b5c6:	e016      	b.n	800b5f6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d107      	bne.n	800b5e6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	681a      	ldr	r2, [r3, #0]
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	f022 0208 	bic.w	r2, r2, #8
 800b5e4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d003      	beq.n	800b5f6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b5fa:	f003 031f 	and.w	r3, r3, #31
 800b5fe:	2220      	movs	r2, #32
 800b600:	409a      	lsls	r2, r3
 800b602:	69bb      	ldr	r3, [r7, #24]
 800b604:	4013      	ands	r3, r2
 800b606:	2b00      	cmp	r3, #0
 800b608:	f000 8110 	beq.w	800b82c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	4a2c      	ldr	r2, [pc, #176]	; (800b6c4 <HAL_DMA_IRQHandler+0x690>)
 800b612:	4293      	cmp	r3, r2
 800b614:	d04a      	beq.n	800b6ac <HAL_DMA_IRQHandler+0x678>
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	4a2b      	ldr	r2, [pc, #172]	; (800b6c8 <HAL_DMA_IRQHandler+0x694>)
 800b61c:	4293      	cmp	r3, r2
 800b61e:	d045      	beq.n	800b6ac <HAL_DMA_IRQHandler+0x678>
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	4a29      	ldr	r2, [pc, #164]	; (800b6cc <HAL_DMA_IRQHandler+0x698>)
 800b626:	4293      	cmp	r3, r2
 800b628:	d040      	beq.n	800b6ac <HAL_DMA_IRQHandler+0x678>
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	4a28      	ldr	r2, [pc, #160]	; (800b6d0 <HAL_DMA_IRQHandler+0x69c>)
 800b630:	4293      	cmp	r3, r2
 800b632:	d03b      	beq.n	800b6ac <HAL_DMA_IRQHandler+0x678>
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	4a26      	ldr	r2, [pc, #152]	; (800b6d4 <HAL_DMA_IRQHandler+0x6a0>)
 800b63a:	4293      	cmp	r3, r2
 800b63c:	d036      	beq.n	800b6ac <HAL_DMA_IRQHandler+0x678>
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	4a25      	ldr	r2, [pc, #148]	; (800b6d8 <HAL_DMA_IRQHandler+0x6a4>)
 800b644:	4293      	cmp	r3, r2
 800b646:	d031      	beq.n	800b6ac <HAL_DMA_IRQHandler+0x678>
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	4a23      	ldr	r2, [pc, #140]	; (800b6dc <HAL_DMA_IRQHandler+0x6a8>)
 800b64e:	4293      	cmp	r3, r2
 800b650:	d02c      	beq.n	800b6ac <HAL_DMA_IRQHandler+0x678>
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	4a22      	ldr	r2, [pc, #136]	; (800b6e0 <HAL_DMA_IRQHandler+0x6ac>)
 800b658:	4293      	cmp	r3, r2
 800b65a:	d027      	beq.n	800b6ac <HAL_DMA_IRQHandler+0x678>
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	4a20      	ldr	r2, [pc, #128]	; (800b6e4 <HAL_DMA_IRQHandler+0x6b0>)
 800b662:	4293      	cmp	r3, r2
 800b664:	d022      	beq.n	800b6ac <HAL_DMA_IRQHandler+0x678>
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	4a1f      	ldr	r2, [pc, #124]	; (800b6e8 <HAL_DMA_IRQHandler+0x6b4>)
 800b66c:	4293      	cmp	r3, r2
 800b66e:	d01d      	beq.n	800b6ac <HAL_DMA_IRQHandler+0x678>
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	4a1d      	ldr	r2, [pc, #116]	; (800b6ec <HAL_DMA_IRQHandler+0x6b8>)
 800b676:	4293      	cmp	r3, r2
 800b678:	d018      	beq.n	800b6ac <HAL_DMA_IRQHandler+0x678>
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	4a1c      	ldr	r2, [pc, #112]	; (800b6f0 <HAL_DMA_IRQHandler+0x6bc>)
 800b680:	4293      	cmp	r3, r2
 800b682:	d013      	beq.n	800b6ac <HAL_DMA_IRQHandler+0x678>
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	4a1a      	ldr	r2, [pc, #104]	; (800b6f4 <HAL_DMA_IRQHandler+0x6c0>)
 800b68a:	4293      	cmp	r3, r2
 800b68c:	d00e      	beq.n	800b6ac <HAL_DMA_IRQHandler+0x678>
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	4a19      	ldr	r2, [pc, #100]	; (800b6f8 <HAL_DMA_IRQHandler+0x6c4>)
 800b694:	4293      	cmp	r3, r2
 800b696:	d009      	beq.n	800b6ac <HAL_DMA_IRQHandler+0x678>
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	4a17      	ldr	r2, [pc, #92]	; (800b6fc <HAL_DMA_IRQHandler+0x6c8>)
 800b69e:	4293      	cmp	r3, r2
 800b6a0:	d004      	beq.n	800b6ac <HAL_DMA_IRQHandler+0x678>
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	4a16      	ldr	r2, [pc, #88]	; (800b700 <HAL_DMA_IRQHandler+0x6cc>)
 800b6a8:	4293      	cmp	r3, r2
 800b6aa:	d12b      	bne.n	800b704 <HAL_DMA_IRQHandler+0x6d0>
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	f003 0310 	and.w	r3, r3, #16
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	bf14      	ite	ne
 800b6ba:	2301      	movne	r3, #1
 800b6bc:	2300      	moveq	r3, #0
 800b6be:	b2db      	uxtb	r3, r3
 800b6c0:	e02a      	b.n	800b718 <HAL_DMA_IRQHandler+0x6e4>
 800b6c2:	bf00      	nop
 800b6c4:	40020010 	.word	0x40020010
 800b6c8:	40020028 	.word	0x40020028
 800b6cc:	40020040 	.word	0x40020040
 800b6d0:	40020058 	.word	0x40020058
 800b6d4:	40020070 	.word	0x40020070
 800b6d8:	40020088 	.word	0x40020088
 800b6dc:	400200a0 	.word	0x400200a0
 800b6e0:	400200b8 	.word	0x400200b8
 800b6e4:	40020410 	.word	0x40020410
 800b6e8:	40020428 	.word	0x40020428
 800b6ec:	40020440 	.word	0x40020440
 800b6f0:	40020458 	.word	0x40020458
 800b6f4:	40020470 	.word	0x40020470
 800b6f8:	40020488 	.word	0x40020488
 800b6fc:	400204a0 	.word	0x400204a0
 800b700:	400204b8 	.word	0x400204b8
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	f003 0302 	and.w	r3, r3, #2
 800b70e:	2b00      	cmp	r3, #0
 800b710:	bf14      	ite	ne
 800b712:	2301      	movne	r3, #1
 800b714:	2300      	moveq	r3, #0
 800b716:	b2db      	uxtb	r3, r3
 800b718:	2b00      	cmp	r3, #0
 800b71a:	f000 8087 	beq.w	800b82c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b722:	f003 031f 	and.w	r3, r3, #31
 800b726:	2220      	movs	r2, #32
 800b728:	409a      	lsls	r2, r3
 800b72a:	6a3b      	ldr	r3, [r7, #32]
 800b72c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b734:	b2db      	uxtb	r3, r3
 800b736:	2b04      	cmp	r3, #4
 800b738:	d139      	bne.n	800b7ae <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	681a      	ldr	r2, [r3, #0]
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	f022 0216 	bic.w	r2, r2, #22
 800b748:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	695a      	ldr	r2, [r3, #20]
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b758:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d103      	bne.n	800b76a <HAL_DMA_IRQHandler+0x736>
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b766:	2b00      	cmp	r3, #0
 800b768:	d007      	beq.n	800b77a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	681a      	ldr	r2, [r3, #0]
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	f022 0208 	bic.w	r2, r2, #8
 800b778:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b77e:	f003 031f 	and.w	r3, r3, #31
 800b782:	223f      	movs	r2, #63	; 0x3f
 800b784:	409a      	lsls	r2, r3
 800b786:	6a3b      	ldr	r3, [r7, #32]
 800b788:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	2200      	movs	r2, #0
 800b78e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	2201      	movs	r2, #1
 800b796:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	f000 834a 	beq.w	800be38 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7a8:	6878      	ldr	r0, [r7, #4]
 800b7aa:	4798      	blx	r3
          }
          return;
 800b7ac:	e344      	b.n	800be38 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d018      	beq.n	800b7ee <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d108      	bne.n	800b7dc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d02c      	beq.n	800b82c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7d6:	6878      	ldr	r0, [r7, #4]
 800b7d8:	4798      	blx	r3
 800b7da:	e027      	b.n	800b82c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d023      	beq.n	800b82c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7e8:	6878      	ldr	r0, [r7, #4]
 800b7ea:	4798      	blx	r3
 800b7ec:	e01e      	b.n	800b82c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d10f      	bne.n	800b81c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	681a      	ldr	r2, [r3, #0]
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	f022 0210 	bic.w	r2, r2, #16
 800b80a:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2200      	movs	r2, #0
 800b810:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2201      	movs	r2, #1
 800b818:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b820:	2b00      	cmp	r3, #0
 800b822:	d003      	beq.n	800b82c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b828:	6878      	ldr	r0, [r7, #4]
 800b82a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b830:	2b00      	cmp	r3, #0
 800b832:	f000 8306 	beq.w	800be42 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b83a:	f003 0301 	and.w	r3, r3, #1
 800b83e:	2b00      	cmp	r3, #0
 800b840:	f000 8088 	beq.w	800b954 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2204      	movs	r2, #4
 800b848:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	4a7a      	ldr	r2, [pc, #488]	; (800ba3c <HAL_DMA_IRQHandler+0xa08>)
 800b852:	4293      	cmp	r3, r2
 800b854:	d04a      	beq.n	800b8ec <HAL_DMA_IRQHandler+0x8b8>
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	4a79      	ldr	r2, [pc, #484]	; (800ba40 <HAL_DMA_IRQHandler+0xa0c>)
 800b85c:	4293      	cmp	r3, r2
 800b85e:	d045      	beq.n	800b8ec <HAL_DMA_IRQHandler+0x8b8>
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	4a77      	ldr	r2, [pc, #476]	; (800ba44 <HAL_DMA_IRQHandler+0xa10>)
 800b866:	4293      	cmp	r3, r2
 800b868:	d040      	beq.n	800b8ec <HAL_DMA_IRQHandler+0x8b8>
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	4a76      	ldr	r2, [pc, #472]	; (800ba48 <HAL_DMA_IRQHandler+0xa14>)
 800b870:	4293      	cmp	r3, r2
 800b872:	d03b      	beq.n	800b8ec <HAL_DMA_IRQHandler+0x8b8>
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	4a74      	ldr	r2, [pc, #464]	; (800ba4c <HAL_DMA_IRQHandler+0xa18>)
 800b87a:	4293      	cmp	r3, r2
 800b87c:	d036      	beq.n	800b8ec <HAL_DMA_IRQHandler+0x8b8>
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	4a73      	ldr	r2, [pc, #460]	; (800ba50 <HAL_DMA_IRQHandler+0xa1c>)
 800b884:	4293      	cmp	r3, r2
 800b886:	d031      	beq.n	800b8ec <HAL_DMA_IRQHandler+0x8b8>
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	4a71      	ldr	r2, [pc, #452]	; (800ba54 <HAL_DMA_IRQHandler+0xa20>)
 800b88e:	4293      	cmp	r3, r2
 800b890:	d02c      	beq.n	800b8ec <HAL_DMA_IRQHandler+0x8b8>
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	4a70      	ldr	r2, [pc, #448]	; (800ba58 <HAL_DMA_IRQHandler+0xa24>)
 800b898:	4293      	cmp	r3, r2
 800b89a:	d027      	beq.n	800b8ec <HAL_DMA_IRQHandler+0x8b8>
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	4a6e      	ldr	r2, [pc, #440]	; (800ba5c <HAL_DMA_IRQHandler+0xa28>)
 800b8a2:	4293      	cmp	r3, r2
 800b8a4:	d022      	beq.n	800b8ec <HAL_DMA_IRQHandler+0x8b8>
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	4a6d      	ldr	r2, [pc, #436]	; (800ba60 <HAL_DMA_IRQHandler+0xa2c>)
 800b8ac:	4293      	cmp	r3, r2
 800b8ae:	d01d      	beq.n	800b8ec <HAL_DMA_IRQHandler+0x8b8>
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	4a6b      	ldr	r2, [pc, #428]	; (800ba64 <HAL_DMA_IRQHandler+0xa30>)
 800b8b6:	4293      	cmp	r3, r2
 800b8b8:	d018      	beq.n	800b8ec <HAL_DMA_IRQHandler+0x8b8>
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	4a6a      	ldr	r2, [pc, #424]	; (800ba68 <HAL_DMA_IRQHandler+0xa34>)
 800b8c0:	4293      	cmp	r3, r2
 800b8c2:	d013      	beq.n	800b8ec <HAL_DMA_IRQHandler+0x8b8>
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	4a68      	ldr	r2, [pc, #416]	; (800ba6c <HAL_DMA_IRQHandler+0xa38>)
 800b8ca:	4293      	cmp	r3, r2
 800b8cc:	d00e      	beq.n	800b8ec <HAL_DMA_IRQHandler+0x8b8>
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	4a67      	ldr	r2, [pc, #412]	; (800ba70 <HAL_DMA_IRQHandler+0xa3c>)
 800b8d4:	4293      	cmp	r3, r2
 800b8d6:	d009      	beq.n	800b8ec <HAL_DMA_IRQHandler+0x8b8>
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	4a65      	ldr	r2, [pc, #404]	; (800ba74 <HAL_DMA_IRQHandler+0xa40>)
 800b8de:	4293      	cmp	r3, r2
 800b8e0:	d004      	beq.n	800b8ec <HAL_DMA_IRQHandler+0x8b8>
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	4a64      	ldr	r2, [pc, #400]	; (800ba78 <HAL_DMA_IRQHandler+0xa44>)
 800b8e8:	4293      	cmp	r3, r2
 800b8ea:	d108      	bne.n	800b8fe <HAL_DMA_IRQHandler+0x8ca>
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	681a      	ldr	r2, [r3, #0]
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	f022 0201 	bic.w	r2, r2, #1
 800b8fa:	601a      	str	r2, [r3, #0]
 800b8fc:	e007      	b.n	800b90e <HAL_DMA_IRQHandler+0x8da>
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	681a      	ldr	r2, [r3, #0]
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	f022 0201 	bic.w	r2, r2, #1
 800b90c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	3301      	adds	r3, #1
 800b912:	60fb      	str	r3, [r7, #12]
 800b914:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b916:	429a      	cmp	r2, r3
 800b918:	d307      	bcc.n	800b92a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	f003 0301 	and.w	r3, r3, #1
 800b924:	2b00      	cmp	r3, #0
 800b926:	d1f2      	bne.n	800b90e <HAL_DMA_IRQHandler+0x8da>
 800b928:	e000      	b.n	800b92c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800b92a:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2200      	movs	r2, #0
 800b930:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	f003 0301 	and.w	r3, r3, #1
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d004      	beq.n	800b94c <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	2203      	movs	r2, #3
 800b946:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800b94a:	e003      	b.n	800b954 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2201      	movs	r2, #1
 800b950:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b958:	2b00      	cmp	r3, #0
 800b95a:	f000 8272 	beq.w	800be42 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b962:	6878      	ldr	r0, [r7, #4]
 800b964:	4798      	blx	r3
 800b966:	e26c      	b.n	800be42 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	4a43      	ldr	r2, [pc, #268]	; (800ba7c <HAL_DMA_IRQHandler+0xa48>)
 800b96e:	4293      	cmp	r3, r2
 800b970:	d022      	beq.n	800b9b8 <HAL_DMA_IRQHandler+0x984>
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	4a42      	ldr	r2, [pc, #264]	; (800ba80 <HAL_DMA_IRQHandler+0xa4c>)
 800b978:	4293      	cmp	r3, r2
 800b97a:	d01d      	beq.n	800b9b8 <HAL_DMA_IRQHandler+0x984>
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	4a40      	ldr	r2, [pc, #256]	; (800ba84 <HAL_DMA_IRQHandler+0xa50>)
 800b982:	4293      	cmp	r3, r2
 800b984:	d018      	beq.n	800b9b8 <HAL_DMA_IRQHandler+0x984>
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	4a3f      	ldr	r2, [pc, #252]	; (800ba88 <HAL_DMA_IRQHandler+0xa54>)
 800b98c:	4293      	cmp	r3, r2
 800b98e:	d013      	beq.n	800b9b8 <HAL_DMA_IRQHandler+0x984>
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	4a3d      	ldr	r2, [pc, #244]	; (800ba8c <HAL_DMA_IRQHandler+0xa58>)
 800b996:	4293      	cmp	r3, r2
 800b998:	d00e      	beq.n	800b9b8 <HAL_DMA_IRQHandler+0x984>
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	4a3c      	ldr	r2, [pc, #240]	; (800ba90 <HAL_DMA_IRQHandler+0xa5c>)
 800b9a0:	4293      	cmp	r3, r2
 800b9a2:	d009      	beq.n	800b9b8 <HAL_DMA_IRQHandler+0x984>
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	4a3a      	ldr	r2, [pc, #232]	; (800ba94 <HAL_DMA_IRQHandler+0xa60>)
 800b9aa:	4293      	cmp	r3, r2
 800b9ac:	d004      	beq.n	800b9b8 <HAL_DMA_IRQHandler+0x984>
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	4a39      	ldr	r2, [pc, #228]	; (800ba98 <HAL_DMA_IRQHandler+0xa64>)
 800b9b4:	4293      	cmp	r3, r2
 800b9b6:	d101      	bne.n	800b9bc <HAL_DMA_IRQHandler+0x988>
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	e000      	b.n	800b9be <HAL_DMA_IRQHandler+0x98a>
 800b9bc:	2300      	movs	r3, #0
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	f000 823f 	beq.w	800be42 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b9d0:	f003 031f 	and.w	r3, r3, #31
 800b9d4:	2204      	movs	r2, #4
 800b9d6:	409a      	lsls	r2, r3
 800b9d8:	697b      	ldr	r3, [r7, #20]
 800b9da:	4013      	ands	r3, r2
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	f000 80cd 	beq.w	800bb7c <HAL_DMA_IRQHandler+0xb48>
 800b9e2:	693b      	ldr	r3, [r7, #16]
 800b9e4:	f003 0304 	and.w	r3, r3, #4
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	f000 80c7 	beq.w	800bb7c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b9f2:	f003 031f 	and.w	r3, r3, #31
 800b9f6:	2204      	movs	r2, #4
 800b9f8:	409a      	lsls	r2, r3
 800b9fa:	69fb      	ldr	r3, [r7, #28]
 800b9fc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b9fe:	693b      	ldr	r3, [r7, #16]
 800ba00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d049      	beq.n	800ba9c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800ba08:	693b      	ldr	r3, [r7, #16]
 800ba0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d109      	bne.n	800ba26 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	f000 8210 	beq.w	800be3c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba20:	6878      	ldr	r0, [r7, #4]
 800ba22:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ba24:	e20a      	b.n	800be3c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	f000 8206 	beq.w	800be3c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba34:	6878      	ldr	r0, [r7, #4]
 800ba36:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ba38:	e200      	b.n	800be3c <HAL_DMA_IRQHandler+0xe08>
 800ba3a:	bf00      	nop
 800ba3c:	40020010 	.word	0x40020010
 800ba40:	40020028 	.word	0x40020028
 800ba44:	40020040 	.word	0x40020040
 800ba48:	40020058 	.word	0x40020058
 800ba4c:	40020070 	.word	0x40020070
 800ba50:	40020088 	.word	0x40020088
 800ba54:	400200a0 	.word	0x400200a0
 800ba58:	400200b8 	.word	0x400200b8
 800ba5c:	40020410 	.word	0x40020410
 800ba60:	40020428 	.word	0x40020428
 800ba64:	40020440 	.word	0x40020440
 800ba68:	40020458 	.word	0x40020458
 800ba6c:	40020470 	.word	0x40020470
 800ba70:	40020488 	.word	0x40020488
 800ba74:	400204a0 	.word	0x400204a0
 800ba78:	400204b8 	.word	0x400204b8
 800ba7c:	58025408 	.word	0x58025408
 800ba80:	5802541c 	.word	0x5802541c
 800ba84:	58025430 	.word	0x58025430
 800ba88:	58025444 	.word	0x58025444
 800ba8c:	58025458 	.word	0x58025458
 800ba90:	5802546c 	.word	0x5802546c
 800ba94:	58025480 	.word	0x58025480
 800ba98:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800ba9c:	693b      	ldr	r3, [r7, #16]
 800ba9e:	f003 0320 	and.w	r3, r3, #32
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d160      	bne.n	800bb68 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	4a8c      	ldr	r2, [pc, #560]	; (800bcdc <HAL_DMA_IRQHandler+0xca8>)
 800baac:	4293      	cmp	r3, r2
 800baae:	d04a      	beq.n	800bb46 <HAL_DMA_IRQHandler+0xb12>
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	4a8a      	ldr	r2, [pc, #552]	; (800bce0 <HAL_DMA_IRQHandler+0xcac>)
 800bab6:	4293      	cmp	r3, r2
 800bab8:	d045      	beq.n	800bb46 <HAL_DMA_IRQHandler+0xb12>
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	4a89      	ldr	r2, [pc, #548]	; (800bce4 <HAL_DMA_IRQHandler+0xcb0>)
 800bac0:	4293      	cmp	r3, r2
 800bac2:	d040      	beq.n	800bb46 <HAL_DMA_IRQHandler+0xb12>
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	4a87      	ldr	r2, [pc, #540]	; (800bce8 <HAL_DMA_IRQHandler+0xcb4>)
 800baca:	4293      	cmp	r3, r2
 800bacc:	d03b      	beq.n	800bb46 <HAL_DMA_IRQHandler+0xb12>
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	4a86      	ldr	r2, [pc, #536]	; (800bcec <HAL_DMA_IRQHandler+0xcb8>)
 800bad4:	4293      	cmp	r3, r2
 800bad6:	d036      	beq.n	800bb46 <HAL_DMA_IRQHandler+0xb12>
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	4a84      	ldr	r2, [pc, #528]	; (800bcf0 <HAL_DMA_IRQHandler+0xcbc>)
 800bade:	4293      	cmp	r3, r2
 800bae0:	d031      	beq.n	800bb46 <HAL_DMA_IRQHandler+0xb12>
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	4a83      	ldr	r2, [pc, #524]	; (800bcf4 <HAL_DMA_IRQHandler+0xcc0>)
 800bae8:	4293      	cmp	r3, r2
 800baea:	d02c      	beq.n	800bb46 <HAL_DMA_IRQHandler+0xb12>
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	4a81      	ldr	r2, [pc, #516]	; (800bcf8 <HAL_DMA_IRQHandler+0xcc4>)
 800baf2:	4293      	cmp	r3, r2
 800baf4:	d027      	beq.n	800bb46 <HAL_DMA_IRQHandler+0xb12>
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	4a80      	ldr	r2, [pc, #512]	; (800bcfc <HAL_DMA_IRQHandler+0xcc8>)
 800bafc:	4293      	cmp	r3, r2
 800bafe:	d022      	beq.n	800bb46 <HAL_DMA_IRQHandler+0xb12>
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	4a7e      	ldr	r2, [pc, #504]	; (800bd00 <HAL_DMA_IRQHandler+0xccc>)
 800bb06:	4293      	cmp	r3, r2
 800bb08:	d01d      	beq.n	800bb46 <HAL_DMA_IRQHandler+0xb12>
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	4a7d      	ldr	r2, [pc, #500]	; (800bd04 <HAL_DMA_IRQHandler+0xcd0>)
 800bb10:	4293      	cmp	r3, r2
 800bb12:	d018      	beq.n	800bb46 <HAL_DMA_IRQHandler+0xb12>
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	4a7b      	ldr	r2, [pc, #492]	; (800bd08 <HAL_DMA_IRQHandler+0xcd4>)
 800bb1a:	4293      	cmp	r3, r2
 800bb1c:	d013      	beq.n	800bb46 <HAL_DMA_IRQHandler+0xb12>
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	4a7a      	ldr	r2, [pc, #488]	; (800bd0c <HAL_DMA_IRQHandler+0xcd8>)
 800bb24:	4293      	cmp	r3, r2
 800bb26:	d00e      	beq.n	800bb46 <HAL_DMA_IRQHandler+0xb12>
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	4a78      	ldr	r2, [pc, #480]	; (800bd10 <HAL_DMA_IRQHandler+0xcdc>)
 800bb2e:	4293      	cmp	r3, r2
 800bb30:	d009      	beq.n	800bb46 <HAL_DMA_IRQHandler+0xb12>
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	4a77      	ldr	r2, [pc, #476]	; (800bd14 <HAL_DMA_IRQHandler+0xce0>)
 800bb38:	4293      	cmp	r3, r2
 800bb3a:	d004      	beq.n	800bb46 <HAL_DMA_IRQHandler+0xb12>
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	4a75      	ldr	r2, [pc, #468]	; (800bd18 <HAL_DMA_IRQHandler+0xce4>)
 800bb42:	4293      	cmp	r3, r2
 800bb44:	d108      	bne.n	800bb58 <HAL_DMA_IRQHandler+0xb24>
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	681a      	ldr	r2, [r3, #0]
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	f022 0208 	bic.w	r2, r2, #8
 800bb54:	601a      	str	r2, [r3, #0]
 800bb56:	e007      	b.n	800bb68 <HAL_DMA_IRQHandler+0xb34>
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	681a      	ldr	r2, [r3, #0]
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	f022 0204 	bic.w	r2, r2, #4
 800bb66:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	f000 8165 	beq.w	800be3c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb76:	6878      	ldr	r0, [r7, #4]
 800bb78:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800bb7a:	e15f      	b.n	800be3c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb80:	f003 031f 	and.w	r3, r3, #31
 800bb84:	2202      	movs	r2, #2
 800bb86:	409a      	lsls	r2, r3
 800bb88:	697b      	ldr	r3, [r7, #20]
 800bb8a:	4013      	ands	r3, r2
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	f000 80c5 	beq.w	800bd1c <HAL_DMA_IRQHandler+0xce8>
 800bb92:	693b      	ldr	r3, [r7, #16]
 800bb94:	f003 0302 	and.w	r3, r3, #2
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	f000 80bf 	beq.w	800bd1c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bba2:	f003 031f 	and.w	r3, r3, #31
 800bba6:	2202      	movs	r2, #2
 800bba8:	409a      	lsls	r2, r3
 800bbaa:	69fb      	ldr	r3, [r7, #28]
 800bbac:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800bbae:	693b      	ldr	r3, [r7, #16]
 800bbb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d018      	beq.n	800bbea <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800bbb8:	693b      	ldr	r3, [r7, #16]
 800bbba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d109      	bne.n	800bbd6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	f000 813a 	beq.w	800be40 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbd0:	6878      	ldr	r0, [r7, #4]
 800bbd2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800bbd4:	e134      	b.n	800be40 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	f000 8130 	beq.w	800be40 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbe4:	6878      	ldr	r0, [r7, #4]
 800bbe6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800bbe8:	e12a      	b.n	800be40 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800bbea:	693b      	ldr	r3, [r7, #16]
 800bbec:	f003 0320 	and.w	r3, r3, #32
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d168      	bne.n	800bcc6 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	4a38      	ldr	r2, [pc, #224]	; (800bcdc <HAL_DMA_IRQHandler+0xca8>)
 800bbfa:	4293      	cmp	r3, r2
 800bbfc:	d04a      	beq.n	800bc94 <HAL_DMA_IRQHandler+0xc60>
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	4a37      	ldr	r2, [pc, #220]	; (800bce0 <HAL_DMA_IRQHandler+0xcac>)
 800bc04:	4293      	cmp	r3, r2
 800bc06:	d045      	beq.n	800bc94 <HAL_DMA_IRQHandler+0xc60>
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	4a35      	ldr	r2, [pc, #212]	; (800bce4 <HAL_DMA_IRQHandler+0xcb0>)
 800bc0e:	4293      	cmp	r3, r2
 800bc10:	d040      	beq.n	800bc94 <HAL_DMA_IRQHandler+0xc60>
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	4a34      	ldr	r2, [pc, #208]	; (800bce8 <HAL_DMA_IRQHandler+0xcb4>)
 800bc18:	4293      	cmp	r3, r2
 800bc1a:	d03b      	beq.n	800bc94 <HAL_DMA_IRQHandler+0xc60>
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	4a32      	ldr	r2, [pc, #200]	; (800bcec <HAL_DMA_IRQHandler+0xcb8>)
 800bc22:	4293      	cmp	r3, r2
 800bc24:	d036      	beq.n	800bc94 <HAL_DMA_IRQHandler+0xc60>
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	4a31      	ldr	r2, [pc, #196]	; (800bcf0 <HAL_DMA_IRQHandler+0xcbc>)
 800bc2c:	4293      	cmp	r3, r2
 800bc2e:	d031      	beq.n	800bc94 <HAL_DMA_IRQHandler+0xc60>
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	4a2f      	ldr	r2, [pc, #188]	; (800bcf4 <HAL_DMA_IRQHandler+0xcc0>)
 800bc36:	4293      	cmp	r3, r2
 800bc38:	d02c      	beq.n	800bc94 <HAL_DMA_IRQHandler+0xc60>
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	4a2e      	ldr	r2, [pc, #184]	; (800bcf8 <HAL_DMA_IRQHandler+0xcc4>)
 800bc40:	4293      	cmp	r3, r2
 800bc42:	d027      	beq.n	800bc94 <HAL_DMA_IRQHandler+0xc60>
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	4a2c      	ldr	r2, [pc, #176]	; (800bcfc <HAL_DMA_IRQHandler+0xcc8>)
 800bc4a:	4293      	cmp	r3, r2
 800bc4c:	d022      	beq.n	800bc94 <HAL_DMA_IRQHandler+0xc60>
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	4a2b      	ldr	r2, [pc, #172]	; (800bd00 <HAL_DMA_IRQHandler+0xccc>)
 800bc54:	4293      	cmp	r3, r2
 800bc56:	d01d      	beq.n	800bc94 <HAL_DMA_IRQHandler+0xc60>
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	4a29      	ldr	r2, [pc, #164]	; (800bd04 <HAL_DMA_IRQHandler+0xcd0>)
 800bc5e:	4293      	cmp	r3, r2
 800bc60:	d018      	beq.n	800bc94 <HAL_DMA_IRQHandler+0xc60>
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	4a28      	ldr	r2, [pc, #160]	; (800bd08 <HAL_DMA_IRQHandler+0xcd4>)
 800bc68:	4293      	cmp	r3, r2
 800bc6a:	d013      	beq.n	800bc94 <HAL_DMA_IRQHandler+0xc60>
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	4a26      	ldr	r2, [pc, #152]	; (800bd0c <HAL_DMA_IRQHandler+0xcd8>)
 800bc72:	4293      	cmp	r3, r2
 800bc74:	d00e      	beq.n	800bc94 <HAL_DMA_IRQHandler+0xc60>
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	4a25      	ldr	r2, [pc, #148]	; (800bd10 <HAL_DMA_IRQHandler+0xcdc>)
 800bc7c:	4293      	cmp	r3, r2
 800bc7e:	d009      	beq.n	800bc94 <HAL_DMA_IRQHandler+0xc60>
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	4a23      	ldr	r2, [pc, #140]	; (800bd14 <HAL_DMA_IRQHandler+0xce0>)
 800bc86:	4293      	cmp	r3, r2
 800bc88:	d004      	beq.n	800bc94 <HAL_DMA_IRQHandler+0xc60>
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	4a22      	ldr	r2, [pc, #136]	; (800bd18 <HAL_DMA_IRQHandler+0xce4>)
 800bc90:	4293      	cmp	r3, r2
 800bc92:	d108      	bne.n	800bca6 <HAL_DMA_IRQHandler+0xc72>
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	681a      	ldr	r2, [r3, #0]
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	f022 0214 	bic.w	r2, r2, #20
 800bca2:	601a      	str	r2, [r3, #0]
 800bca4:	e007      	b.n	800bcb6 <HAL_DMA_IRQHandler+0xc82>
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	681a      	ldr	r2, [r3, #0]
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	f022 020a 	bic.w	r2, r2, #10
 800bcb4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	2200      	movs	r2, #0
 800bcba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	2201      	movs	r2, #1
 800bcc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	f000 80b8 	beq.w	800be40 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcd4:	6878      	ldr	r0, [r7, #4]
 800bcd6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800bcd8:	e0b2      	b.n	800be40 <HAL_DMA_IRQHandler+0xe0c>
 800bcda:	bf00      	nop
 800bcdc:	40020010 	.word	0x40020010
 800bce0:	40020028 	.word	0x40020028
 800bce4:	40020040 	.word	0x40020040
 800bce8:	40020058 	.word	0x40020058
 800bcec:	40020070 	.word	0x40020070
 800bcf0:	40020088 	.word	0x40020088
 800bcf4:	400200a0 	.word	0x400200a0
 800bcf8:	400200b8 	.word	0x400200b8
 800bcfc:	40020410 	.word	0x40020410
 800bd00:	40020428 	.word	0x40020428
 800bd04:	40020440 	.word	0x40020440
 800bd08:	40020458 	.word	0x40020458
 800bd0c:	40020470 	.word	0x40020470
 800bd10:	40020488 	.word	0x40020488
 800bd14:	400204a0 	.word	0x400204a0
 800bd18:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd20:	f003 031f 	and.w	r3, r3, #31
 800bd24:	2208      	movs	r2, #8
 800bd26:	409a      	lsls	r2, r3
 800bd28:	697b      	ldr	r3, [r7, #20]
 800bd2a:	4013      	ands	r3, r2
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	f000 8088 	beq.w	800be42 <HAL_DMA_IRQHandler+0xe0e>
 800bd32:	693b      	ldr	r3, [r7, #16]
 800bd34:	f003 0308 	and.w	r3, r3, #8
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	f000 8082 	beq.w	800be42 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	4a41      	ldr	r2, [pc, #260]	; (800be48 <HAL_DMA_IRQHandler+0xe14>)
 800bd44:	4293      	cmp	r3, r2
 800bd46:	d04a      	beq.n	800bdde <HAL_DMA_IRQHandler+0xdaa>
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	4a3f      	ldr	r2, [pc, #252]	; (800be4c <HAL_DMA_IRQHandler+0xe18>)
 800bd4e:	4293      	cmp	r3, r2
 800bd50:	d045      	beq.n	800bdde <HAL_DMA_IRQHandler+0xdaa>
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	4a3e      	ldr	r2, [pc, #248]	; (800be50 <HAL_DMA_IRQHandler+0xe1c>)
 800bd58:	4293      	cmp	r3, r2
 800bd5a:	d040      	beq.n	800bdde <HAL_DMA_IRQHandler+0xdaa>
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	4a3c      	ldr	r2, [pc, #240]	; (800be54 <HAL_DMA_IRQHandler+0xe20>)
 800bd62:	4293      	cmp	r3, r2
 800bd64:	d03b      	beq.n	800bdde <HAL_DMA_IRQHandler+0xdaa>
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	4a3b      	ldr	r2, [pc, #236]	; (800be58 <HAL_DMA_IRQHandler+0xe24>)
 800bd6c:	4293      	cmp	r3, r2
 800bd6e:	d036      	beq.n	800bdde <HAL_DMA_IRQHandler+0xdaa>
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	4a39      	ldr	r2, [pc, #228]	; (800be5c <HAL_DMA_IRQHandler+0xe28>)
 800bd76:	4293      	cmp	r3, r2
 800bd78:	d031      	beq.n	800bdde <HAL_DMA_IRQHandler+0xdaa>
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	4a38      	ldr	r2, [pc, #224]	; (800be60 <HAL_DMA_IRQHandler+0xe2c>)
 800bd80:	4293      	cmp	r3, r2
 800bd82:	d02c      	beq.n	800bdde <HAL_DMA_IRQHandler+0xdaa>
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	4a36      	ldr	r2, [pc, #216]	; (800be64 <HAL_DMA_IRQHandler+0xe30>)
 800bd8a:	4293      	cmp	r3, r2
 800bd8c:	d027      	beq.n	800bdde <HAL_DMA_IRQHandler+0xdaa>
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	4a35      	ldr	r2, [pc, #212]	; (800be68 <HAL_DMA_IRQHandler+0xe34>)
 800bd94:	4293      	cmp	r3, r2
 800bd96:	d022      	beq.n	800bdde <HAL_DMA_IRQHandler+0xdaa>
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	4a33      	ldr	r2, [pc, #204]	; (800be6c <HAL_DMA_IRQHandler+0xe38>)
 800bd9e:	4293      	cmp	r3, r2
 800bda0:	d01d      	beq.n	800bdde <HAL_DMA_IRQHandler+0xdaa>
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	4a32      	ldr	r2, [pc, #200]	; (800be70 <HAL_DMA_IRQHandler+0xe3c>)
 800bda8:	4293      	cmp	r3, r2
 800bdaa:	d018      	beq.n	800bdde <HAL_DMA_IRQHandler+0xdaa>
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	4a30      	ldr	r2, [pc, #192]	; (800be74 <HAL_DMA_IRQHandler+0xe40>)
 800bdb2:	4293      	cmp	r3, r2
 800bdb4:	d013      	beq.n	800bdde <HAL_DMA_IRQHandler+0xdaa>
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	4a2f      	ldr	r2, [pc, #188]	; (800be78 <HAL_DMA_IRQHandler+0xe44>)
 800bdbc:	4293      	cmp	r3, r2
 800bdbe:	d00e      	beq.n	800bdde <HAL_DMA_IRQHandler+0xdaa>
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	4a2d      	ldr	r2, [pc, #180]	; (800be7c <HAL_DMA_IRQHandler+0xe48>)
 800bdc6:	4293      	cmp	r3, r2
 800bdc8:	d009      	beq.n	800bdde <HAL_DMA_IRQHandler+0xdaa>
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	4a2c      	ldr	r2, [pc, #176]	; (800be80 <HAL_DMA_IRQHandler+0xe4c>)
 800bdd0:	4293      	cmp	r3, r2
 800bdd2:	d004      	beq.n	800bdde <HAL_DMA_IRQHandler+0xdaa>
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	4a2a      	ldr	r2, [pc, #168]	; (800be84 <HAL_DMA_IRQHandler+0xe50>)
 800bdda:	4293      	cmp	r3, r2
 800bddc:	d108      	bne.n	800bdf0 <HAL_DMA_IRQHandler+0xdbc>
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	681a      	ldr	r2, [r3, #0]
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	f022 021c 	bic.w	r2, r2, #28
 800bdec:	601a      	str	r2, [r3, #0]
 800bdee:	e007      	b.n	800be00 <HAL_DMA_IRQHandler+0xdcc>
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	681a      	ldr	r2, [r3, #0]
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	f022 020e 	bic.w	r2, r2, #14
 800bdfe:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be04:	f003 031f 	and.w	r3, r3, #31
 800be08:	2201      	movs	r2, #1
 800be0a:	409a      	lsls	r2, r3
 800be0c:	69fb      	ldr	r3, [r7, #28]
 800be0e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	2201      	movs	r2, #1
 800be14:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	2200      	movs	r2, #0
 800be1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	2201      	movs	r2, #1
 800be22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d009      	beq.n	800be42 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	4798      	blx	r3
 800be36:	e004      	b.n	800be42 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800be38:	bf00      	nop
 800be3a:	e002      	b.n	800be42 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800be3c:	bf00      	nop
 800be3e:	e000      	b.n	800be42 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800be40:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800be42:	3728      	adds	r7, #40	; 0x28
 800be44:	46bd      	mov	sp, r7
 800be46:	bd80      	pop	{r7, pc}
 800be48:	40020010 	.word	0x40020010
 800be4c:	40020028 	.word	0x40020028
 800be50:	40020040 	.word	0x40020040
 800be54:	40020058 	.word	0x40020058
 800be58:	40020070 	.word	0x40020070
 800be5c:	40020088 	.word	0x40020088
 800be60:	400200a0 	.word	0x400200a0
 800be64:	400200b8 	.word	0x400200b8
 800be68:	40020410 	.word	0x40020410
 800be6c:	40020428 	.word	0x40020428
 800be70:	40020440 	.word	0x40020440
 800be74:	40020458 	.word	0x40020458
 800be78:	40020470 	.word	0x40020470
 800be7c:	40020488 	.word	0x40020488
 800be80:	400204a0 	.word	0x400204a0
 800be84:	400204b8 	.word	0x400204b8

0800be88 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800be88:	b480      	push	{r7}
 800be8a:	b083      	sub	sp, #12
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800be94:	4618      	mov	r0, r3
 800be96:	370c      	adds	r7, #12
 800be98:	46bd      	mov	sp, r7
 800be9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9e:	4770      	bx	lr

0800bea0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800bea0:	b480      	push	{r7}
 800bea2:	b087      	sub	sp, #28
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	60f8      	str	r0, [r7, #12]
 800bea8:	60b9      	str	r1, [r7, #8]
 800beaa:	607a      	str	r2, [r7, #4]
 800beac:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800beb2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800beb8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	4a84      	ldr	r2, [pc, #528]	; (800c0d0 <DMA_SetConfig+0x230>)
 800bec0:	4293      	cmp	r3, r2
 800bec2:	d072      	beq.n	800bfaa <DMA_SetConfig+0x10a>
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	4a82      	ldr	r2, [pc, #520]	; (800c0d4 <DMA_SetConfig+0x234>)
 800beca:	4293      	cmp	r3, r2
 800becc:	d06d      	beq.n	800bfaa <DMA_SetConfig+0x10a>
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	4a81      	ldr	r2, [pc, #516]	; (800c0d8 <DMA_SetConfig+0x238>)
 800bed4:	4293      	cmp	r3, r2
 800bed6:	d068      	beq.n	800bfaa <DMA_SetConfig+0x10a>
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	4a7f      	ldr	r2, [pc, #508]	; (800c0dc <DMA_SetConfig+0x23c>)
 800bede:	4293      	cmp	r3, r2
 800bee0:	d063      	beq.n	800bfaa <DMA_SetConfig+0x10a>
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	4a7e      	ldr	r2, [pc, #504]	; (800c0e0 <DMA_SetConfig+0x240>)
 800bee8:	4293      	cmp	r3, r2
 800beea:	d05e      	beq.n	800bfaa <DMA_SetConfig+0x10a>
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	4a7c      	ldr	r2, [pc, #496]	; (800c0e4 <DMA_SetConfig+0x244>)
 800bef2:	4293      	cmp	r3, r2
 800bef4:	d059      	beq.n	800bfaa <DMA_SetConfig+0x10a>
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	4a7b      	ldr	r2, [pc, #492]	; (800c0e8 <DMA_SetConfig+0x248>)
 800befc:	4293      	cmp	r3, r2
 800befe:	d054      	beq.n	800bfaa <DMA_SetConfig+0x10a>
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	4a79      	ldr	r2, [pc, #484]	; (800c0ec <DMA_SetConfig+0x24c>)
 800bf06:	4293      	cmp	r3, r2
 800bf08:	d04f      	beq.n	800bfaa <DMA_SetConfig+0x10a>
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	4a78      	ldr	r2, [pc, #480]	; (800c0f0 <DMA_SetConfig+0x250>)
 800bf10:	4293      	cmp	r3, r2
 800bf12:	d04a      	beq.n	800bfaa <DMA_SetConfig+0x10a>
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	4a76      	ldr	r2, [pc, #472]	; (800c0f4 <DMA_SetConfig+0x254>)
 800bf1a:	4293      	cmp	r3, r2
 800bf1c:	d045      	beq.n	800bfaa <DMA_SetConfig+0x10a>
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	4a75      	ldr	r2, [pc, #468]	; (800c0f8 <DMA_SetConfig+0x258>)
 800bf24:	4293      	cmp	r3, r2
 800bf26:	d040      	beq.n	800bfaa <DMA_SetConfig+0x10a>
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	4a73      	ldr	r2, [pc, #460]	; (800c0fc <DMA_SetConfig+0x25c>)
 800bf2e:	4293      	cmp	r3, r2
 800bf30:	d03b      	beq.n	800bfaa <DMA_SetConfig+0x10a>
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	4a72      	ldr	r2, [pc, #456]	; (800c100 <DMA_SetConfig+0x260>)
 800bf38:	4293      	cmp	r3, r2
 800bf3a:	d036      	beq.n	800bfaa <DMA_SetConfig+0x10a>
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	4a70      	ldr	r2, [pc, #448]	; (800c104 <DMA_SetConfig+0x264>)
 800bf42:	4293      	cmp	r3, r2
 800bf44:	d031      	beq.n	800bfaa <DMA_SetConfig+0x10a>
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	4a6f      	ldr	r2, [pc, #444]	; (800c108 <DMA_SetConfig+0x268>)
 800bf4c:	4293      	cmp	r3, r2
 800bf4e:	d02c      	beq.n	800bfaa <DMA_SetConfig+0x10a>
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	4a6d      	ldr	r2, [pc, #436]	; (800c10c <DMA_SetConfig+0x26c>)
 800bf56:	4293      	cmp	r3, r2
 800bf58:	d027      	beq.n	800bfaa <DMA_SetConfig+0x10a>
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	4a6c      	ldr	r2, [pc, #432]	; (800c110 <DMA_SetConfig+0x270>)
 800bf60:	4293      	cmp	r3, r2
 800bf62:	d022      	beq.n	800bfaa <DMA_SetConfig+0x10a>
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	4a6a      	ldr	r2, [pc, #424]	; (800c114 <DMA_SetConfig+0x274>)
 800bf6a:	4293      	cmp	r3, r2
 800bf6c:	d01d      	beq.n	800bfaa <DMA_SetConfig+0x10a>
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	4a69      	ldr	r2, [pc, #420]	; (800c118 <DMA_SetConfig+0x278>)
 800bf74:	4293      	cmp	r3, r2
 800bf76:	d018      	beq.n	800bfaa <DMA_SetConfig+0x10a>
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	4a67      	ldr	r2, [pc, #412]	; (800c11c <DMA_SetConfig+0x27c>)
 800bf7e:	4293      	cmp	r3, r2
 800bf80:	d013      	beq.n	800bfaa <DMA_SetConfig+0x10a>
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	4a66      	ldr	r2, [pc, #408]	; (800c120 <DMA_SetConfig+0x280>)
 800bf88:	4293      	cmp	r3, r2
 800bf8a:	d00e      	beq.n	800bfaa <DMA_SetConfig+0x10a>
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	4a64      	ldr	r2, [pc, #400]	; (800c124 <DMA_SetConfig+0x284>)
 800bf92:	4293      	cmp	r3, r2
 800bf94:	d009      	beq.n	800bfaa <DMA_SetConfig+0x10a>
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	4a63      	ldr	r2, [pc, #396]	; (800c128 <DMA_SetConfig+0x288>)
 800bf9c:	4293      	cmp	r3, r2
 800bf9e:	d004      	beq.n	800bfaa <DMA_SetConfig+0x10a>
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	4a61      	ldr	r2, [pc, #388]	; (800c12c <DMA_SetConfig+0x28c>)
 800bfa6:	4293      	cmp	r3, r2
 800bfa8:	d101      	bne.n	800bfae <DMA_SetConfig+0x10e>
 800bfaa:	2301      	movs	r3, #1
 800bfac:	e000      	b.n	800bfb0 <DMA_SetConfig+0x110>
 800bfae:	2300      	movs	r3, #0
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d00d      	beq.n	800bfd0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bfb8:	68fa      	ldr	r2, [r7, #12]
 800bfba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800bfbc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d004      	beq.n	800bfd0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfca:	68fa      	ldr	r2, [r7, #12]
 800bfcc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800bfce:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	4a3e      	ldr	r2, [pc, #248]	; (800c0d0 <DMA_SetConfig+0x230>)
 800bfd6:	4293      	cmp	r3, r2
 800bfd8:	d04a      	beq.n	800c070 <DMA_SetConfig+0x1d0>
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	4a3d      	ldr	r2, [pc, #244]	; (800c0d4 <DMA_SetConfig+0x234>)
 800bfe0:	4293      	cmp	r3, r2
 800bfe2:	d045      	beq.n	800c070 <DMA_SetConfig+0x1d0>
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	4a3b      	ldr	r2, [pc, #236]	; (800c0d8 <DMA_SetConfig+0x238>)
 800bfea:	4293      	cmp	r3, r2
 800bfec:	d040      	beq.n	800c070 <DMA_SetConfig+0x1d0>
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	4a3a      	ldr	r2, [pc, #232]	; (800c0dc <DMA_SetConfig+0x23c>)
 800bff4:	4293      	cmp	r3, r2
 800bff6:	d03b      	beq.n	800c070 <DMA_SetConfig+0x1d0>
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	4a38      	ldr	r2, [pc, #224]	; (800c0e0 <DMA_SetConfig+0x240>)
 800bffe:	4293      	cmp	r3, r2
 800c000:	d036      	beq.n	800c070 <DMA_SetConfig+0x1d0>
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	4a37      	ldr	r2, [pc, #220]	; (800c0e4 <DMA_SetConfig+0x244>)
 800c008:	4293      	cmp	r3, r2
 800c00a:	d031      	beq.n	800c070 <DMA_SetConfig+0x1d0>
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	4a35      	ldr	r2, [pc, #212]	; (800c0e8 <DMA_SetConfig+0x248>)
 800c012:	4293      	cmp	r3, r2
 800c014:	d02c      	beq.n	800c070 <DMA_SetConfig+0x1d0>
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	4a34      	ldr	r2, [pc, #208]	; (800c0ec <DMA_SetConfig+0x24c>)
 800c01c:	4293      	cmp	r3, r2
 800c01e:	d027      	beq.n	800c070 <DMA_SetConfig+0x1d0>
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	4a32      	ldr	r2, [pc, #200]	; (800c0f0 <DMA_SetConfig+0x250>)
 800c026:	4293      	cmp	r3, r2
 800c028:	d022      	beq.n	800c070 <DMA_SetConfig+0x1d0>
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	4a31      	ldr	r2, [pc, #196]	; (800c0f4 <DMA_SetConfig+0x254>)
 800c030:	4293      	cmp	r3, r2
 800c032:	d01d      	beq.n	800c070 <DMA_SetConfig+0x1d0>
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	4a2f      	ldr	r2, [pc, #188]	; (800c0f8 <DMA_SetConfig+0x258>)
 800c03a:	4293      	cmp	r3, r2
 800c03c:	d018      	beq.n	800c070 <DMA_SetConfig+0x1d0>
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	4a2e      	ldr	r2, [pc, #184]	; (800c0fc <DMA_SetConfig+0x25c>)
 800c044:	4293      	cmp	r3, r2
 800c046:	d013      	beq.n	800c070 <DMA_SetConfig+0x1d0>
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	4a2c      	ldr	r2, [pc, #176]	; (800c100 <DMA_SetConfig+0x260>)
 800c04e:	4293      	cmp	r3, r2
 800c050:	d00e      	beq.n	800c070 <DMA_SetConfig+0x1d0>
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	4a2b      	ldr	r2, [pc, #172]	; (800c104 <DMA_SetConfig+0x264>)
 800c058:	4293      	cmp	r3, r2
 800c05a:	d009      	beq.n	800c070 <DMA_SetConfig+0x1d0>
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	4a29      	ldr	r2, [pc, #164]	; (800c108 <DMA_SetConfig+0x268>)
 800c062:	4293      	cmp	r3, r2
 800c064:	d004      	beq.n	800c070 <DMA_SetConfig+0x1d0>
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	4a28      	ldr	r2, [pc, #160]	; (800c10c <DMA_SetConfig+0x26c>)
 800c06c:	4293      	cmp	r3, r2
 800c06e:	d101      	bne.n	800c074 <DMA_SetConfig+0x1d4>
 800c070:	2301      	movs	r3, #1
 800c072:	e000      	b.n	800c076 <DMA_SetConfig+0x1d6>
 800c074:	2300      	movs	r3, #0
 800c076:	2b00      	cmp	r3, #0
 800c078:	d05a      	beq.n	800c130 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c07e:	f003 031f 	and.w	r3, r3, #31
 800c082:	223f      	movs	r2, #63	; 0x3f
 800c084:	409a      	lsls	r2, r3
 800c086:	697b      	ldr	r3, [r7, #20]
 800c088:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	681a      	ldr	r2, [r3, #0]
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c098:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	683a      	ldr	r2, [r7, #0]
 800c0a0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	689b      	ldr	r3, [r3, #8]
 800c0a6:	2b40      	cmp	r3, #64	; 0x40
 800c0a8:	d108      	bne.n	800c0bc <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	687a      	ldr	r2, [r7, #4]
 800c0b0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	68ba      	ldr	r2, [r7, #8]
 800c0b8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800c0ba:	e087      	b.n	800c1cc <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	68ba      	ldr	r2, [r7, #8]
 800c0c2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	687a      	ldr	r2, [r7, #4]
 800c0ca:	60da      	str	r2, [r3, #12]
}
 800c0cc:	e07e      	b.n	800c1cc <DMA_SetConfig+0x32c>
 800c0ce:	bf00      	nop
 800c0d0:	40020010 	.word	0x40020010
 800c0d4:	40020028 	.word	0x40020028
 800c0d8:	40020040 	.word	0x40020040
 800c0dc:	40020058 	.word	0x40020058
 800c0e0:	40020070 	.word	0x40020070
 800c0e4:	40020088 	.word	0x40020088
 800c0e8:	400200a0 	.word	0x400200a0
 800c0ec:	400200b8 	.word	0x400200b8
 800c0f0:	40020410 	.word	0x40020410
 800c0f4:	40020428 	.word	0x40020428
 800c0f8:	40020440 	.word	0x40020440
 800c0fc:	40020458 	.word	0x40020458
 800c100:	40020470 	.word	0x40020470
 800c104:	40020488 	.word	0x40020488
 800c108:	400204a0 	.word	0x400204a0
 800c10c:	400204b8 	.word	0x400204b8
 800c110:	58025408 	.word	0x58025408
 800c114:	5802541c 	.word	0x5802541c
 800c118:	58025430 	.word	0x58025430
 800c11c:	58025444 	.word	0x58025444
 800c120:	58025458 	.word	0x58025458
 800c124:	5802546c 	.word	0x5802546c
 800c128:	58025480 	.word	0x58025480
 800c12c:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	4a28      	ldr	r2, [pc, #160]	; (800c1d8 <DMA_SetConfig+0x338>)
 800c136:	4293      	cmp	r3, r2
 800c138:	d022      	beq.n	800c180 <DMA_SetConfig+0x2e0>
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	4a27      	ldr	r2, [pc, #156]	; (800c1dc <DMA_SetConfig+0x33c>)
 800c140:	4293      	cmp	r3, r2
 800c142:	d01d      	beq.n	800c180 <DMA_SetConfig+0x2e0>
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	4a25      	ldr	r2, [pc, #148]	; (800c1e0 <DMA_SetConfig+0x340>)
 800c14a:	4293      	cmp	r3, r2
 800c14c:	d018      	beq.n	800c180 <DMA_SetConfig+0x2e0>
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	4a24      	ldr	r2, [pc, #144]	; (800c1e4 <DMA_SetConfig+0x344>)
 800c154:	4293      	cmp	r3, r2
 800c156:	d013      	beq.n	800c180 <DMA_SetConfig+0x2e0>
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	4a22      	ldr	r2, [pc, #136]	; (800c1e8 <DMA_SetConfig+0x348>)
 800c15e:	4293      	cmp	r3, r2
 800c160:	d00e      	beq.n	800c180 <DMA_SetConfig+0x2e0>
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	4a21      	ldr	r2, [pc, #132]	; (800c1ec <DMA_SetConfig+0x34c>)
 800c168:	4293      	cmp	r3, r2
 800c16a:	d009      	beq.n	800c180 <DMA_SetConfig+0x2e0>
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	4a1f      	ldr	r2, [pc, #124]	; (800c1f0 <DMA_SetConfig+0x350>)
 800c172:	4293      	cmp	r3, r2
 800c174:	d004      	beq.n	800c180 <DMA_SetConfig+0x2e0>
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	4a1e      	ldr	r2, [pc, #120]	; (800c1f4 <DMA_SetConfig+0x354>)
 800c17c:	4293      	cmp	r3, r2
 800c17e:	d101      	bne.n	800c184 <DMA_SetConfig+0x2e4>
 800c180:	2301      	movs	r3, #1
 800c182:	e000      	b.n	800c186 <DMA_SetConfig+0x2e6>
 800c184:	2300      	movs	r3, #0
 800c186:	2b00      	cmp	r3, #0
 800c188:	d020      	beq.n	800c1cc <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c18e:	f003 031f 	and.w	r3, r3, #31
 800c192:	2201      	movs	r2, #1
 800c194:	409a      	lsls	r2, r3
 800c196:	693b      	ldr	r3, [r7, #16]
 800c198:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	683a      	ldr	r2, [r7, #0]
 800c1a0:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	689b      	ldr	r3, [r3, #8]
 800c1a6:	2b40      	cmp	r3, #64	; 0x40
 800c1a8:	d108      	bne.n	800c1bc <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	687a      	ldr	r2, [r7, #4]
 800c1b0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	68ba      	ldr	r2, [r7, #8]
 800c1b8:	60da      	str	r2, [r3, #12]
}
 800c1ba:	e007      	b.n	800c1cc <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	68ba      	ldr	r2, [r7, #8]
 800c1c2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	687a      	ldr	r2, [r7, #4]
 800c1ca:	60da      	str	r2, [r3, #12]
}
 800c1cc:	bf00      	nop
 800c1ce:	371c      	adds	r7, #28
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d6:	4770      	bx	lr
 800c1d8:	58025408 	.word	0x58025408
 800c1dc:	5802541c 	.word	0x5802541c
 800c1e0:	58025430 	.word	0x58025430
 800c1e4:	58025444 	.word	0x58025444
 800c1e8:	58025458 	.word	0x58025458
 800c1ec:	5802546c 	.word	0x5802546c
 800c1f0:	58025480 	.word	0x58025480
 800c1f4:	58025494 	.word	0x58025494

0800c1f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800c1f8:	b480      	push	{r7}
 800c1fa:	b085      	sub	sp, #20
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	4a42      	ldr	r2, [pc, #264]	; (800c310 <DMA_CalcBaseAndBitshift+0x118>)
 800c206:	4293      	cmp	r3, r2
 800c208:	d04a      	beq.n	800c2a0 <DMA_CalcBaseAndBitshift+0xa8>
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	4a41      	ldr	r2, [pc, #260]	; (800c314 <DMA_CalcBaseAndBitshift+0x11c>)
 800c210:	4293      	cmp	r3, r2
 800c212:	d045      	beq.n	800c2a0 <DMA_CalcBaseAndBitshift+0xa8>
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	4a3f      	ldr	r2, [pc, #252]	; (800c318 <DMA_CalcBaseAndBitshift+0x120>)
 800c21a:	4293      	cmp	r3, r2
 800c21c:	d040      	beq.n	800c2a0 <DMA_CalcBaseAndBitshift+0xa8>
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	4a3e      	ldr	r2, [pc, #248]	; (800c31c <DMA_CalcBaseAndBitshift+0x124>)
 800c224:	4293      	cmp	r3, r2
 800c226:	d03b      	beq.n	800c2a0 <DMA_CalcBaseAndBitshift+0xa8>
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	4a3c      	ldr	r2, [pc, #240]	; (800c320 <DMA_CalcBaseAndBitshift+0x128>)
 800c22e:	4293      	cmp	r3, r2
 800c230:	d036      	beq.n	800c2a0 <DMA_CalcBaseAndBitshift+0xa8>
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	4a3b      	ldr	r2, [pc, #236]	; (800c324 <DMA_CalcBaseAndBitshift+0x12c>)
 800c238:	4293      	cmp	r3, r2
 800c23a:	d031      	beq.n	800c2a0 <DMA_CalcBaseAndBitshift+0xa8>
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	4a39      	ldr	r2, [pc, #228]	; (800c328 <DMA_CalcBaseAndBitshift+0x130>)
 800c242:	4293      	cmp	r3, r2
 800c244:	d02c      	beq.n	800c2a0 <DMA_CalcBaseAndBitshift+0xa8>
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	4a38      	ldr	r2, [pc, #224]	; (800c32c <DMA_CalcBaseAndBitshift+0x134>)
 800c24c:	4293      	cmp	r3, r2
 800c24e:	d027      	beq.n	800c2a0 <DMA_CalcBaseAndBitshift+0xa8>
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	4a36      	ldr	r2, [pc, #216]	; (800c330 <DMA_CalcBaseAndBitshift+0x138>)
 800c256:	4293      	cmp	r3, r2
 800c258:	d022      	beq.n	800c2a0 <DMA_CalcBaseAndBitshift+0xa8>
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	4a35      	ldr	r2, [pc, #212]	; (800c334 <DMA_CalcBaseAndBitshift+0x13c>)
 800c260:	4293      	cmp	r3, r2
 800c262:	d01d      	beq.n	800c2a0 <DMA_CalcBaseAndBitshift+0xa8>
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	4a33      	ldr	r2, [pc, #204]	; (800c338 <DMA_CalcBaseAndBitshift+0x140>)
 800c26a:	4293      	cmp	r3, r2
 800c26c:	d018      	beq.n	800c2a0 <DMA_CalcBaseAndBitshift+0xa8>
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	4a32      	ldr	r2, [pc, #200]	; (800c33c <DMA_CalcBaseAndBitshift+0x144>)
 800c274:	4293      	cmp	r3, r2
 800c276:	d013      	beq.n	800c2a0 <DMA_CalcBaseAndBitshift+0xa8>
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	4a30      	ldr	r2, [pc, #192]	; (800c340 <DMA_CalcBaseAndBitshift+0x148>)
 800c27e:	4293      	cmp	r3, r2
 800c280:	d00e      	beq.n	800c2a0 <DMA_CalcBaseAndBitshift+0xa8>
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	4a2f      	ldr	r2, [pc, #188]	; (800c344 <DMA_CalcBaseAndBitshift+0x14c>)
 800c288:	4293      	cmp	r3, r2
 800c28a:	d009      	beq.n	800c2a0 <DMA_CalcBaseAndBitshift+0xa8>
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	4a2d      	ldr	r2, [pc, #180]	; (800c348 <DMA_CalcBaseAndBitshift+0x150>)
 800c292:	4293      	cmp	r3, r2
 800c294:	d004      	beq.n	800c2a0 <DMA_CalcBaseAndBitshift+0xa8>
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	4a2c      	ldr	r2, [pc, #176]	; (800c34c <DMA_CalcBaseAndBitshift+0x154>)
 800c29c:	4293      	cmp	r3, r2
 800c29e:	d101      	bne.n	800c2a4 <DMA_CalcBaseAndBitshift+0xac>
 800c2a0:	2301      	movs	r3, #1
 800c2a2:	e000      	b.n	800c2a6 <DMA_CalcBaseAndBitshift+0xae>
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d024      	beq.n	800c2f4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	b2db      	uxtb	r3, r3
 800c2b0:	3b10      	subs	r3, #16
 800c2b2:	4a27      	ldr	r2, [pc, #156]	; (800c350 <DMA_CalcBaseAndBitshift+0x158>)
 800c2b4:	fba2 2303 	umull	r2, r3, r2, r3
 800c2b8:	091b      	lsrs	r3, r3, #4
 800c2ba:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	f003 0307 	and.w	r3, r3, #7
 800c2c2:	4a24      	ldr	r2, [pc, #144]	; (800c354 <DMA_CalcBaseAndBitshift+0x15c>)
 800c2c4:	5cd3      	ldrb	r3, [r2, r3]
 800c2c6:	461a      	mov	r2, r3
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	2b03      	cmp	r3, #3
 800c2d0:	d908      	bls.n	800c2e4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	461a      	mov	r2, r3
 800c2d8:	4b1f      	ldr	r3, [pc, #124]	; (800c358 <DMA_CalcBaseAndBitshift+0x160>)
 800c2da:	4013      	ands	r3, r2
 800c2dc:	1d1a      	adds	r2, r3, #4
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	659a      	str	r2, [r3, #88]	; 0x58
 800c2e2:	e00d      	b.n	800c300 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	461a      	mov	r2, r3
 800c2ea:	4b1b      	ldr	r3, [pc, #108]	; (800c358 <DMA_CalcBaseAndBitshift+0x160>)
 800c2ec:	4013      	ands	r3, r2
 800c2ee:	687a      	ldr	r2, [r7, #4]
 800c2f0:	6593      	str	r3, [r2, #88]	; 0x58
 800c2f2:	e005      	b.n	800c300 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800c304:	4618      	mov	r0, r3
 800c306:	3714      	adds	r7, #20
 800c308:	46bd      	mov	sp, r7
 800c30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30e:	4770      	bx	lr
 800c310:	40020010 	.word	0x40020010
 800c314:	40020028 	.word	0x40020028
 800c318:	40020040 	.word	0x40020040
 800c31c:	40020058 	.word	0x40020058
 800c320:	40020070 	.word	0x40020070
 800c324:	40020088 	.word	0x40020088
 800c328:	400200a0 	.word	0x400200a0
 800c32c:	400200b8 	.word	0x400200b8
 800c330:	40020410 	.word	0x40020410
 800c334:	40020428 	.word	0x40020428
 800c338:	40020440 	.word	0x40020440
 800c33c:	40020458 	.word	0x40020458
 800c340:	40020470 	.word	0x40020470
 800c344:	40020488 	.word	0x40020488
 800c348:	400204a0 	.word	0x400204a0
 800c34c:	400204b8 	.word	0x400204b8
 800c350:	aaaaaaab 	.word	0xaaaaaaab
 800c354:	08015b7c 	.word	0x08015b7c
 800c358:	fffffc00 	.word	0xfffffc00

0800c35c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800c35c:	b480      	push	{r7}
 800c35e:	b085      	sub	sp, #20
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c364:	2300      	movs	r3, #0
 800c366:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	699b      	ldr	r3, [r3, #24]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d120      	bne.n	800c3b2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c374:	2b03      	cmp	r3, #3
 800c376:	d858      	bhi.n	800c42a <DMA_CheckFifoParam+0xce>
 800c378:	a201      	add	r2, pc, #4	; (adr r2, 800c380 <DMA_CheckFifoParam+0x24>)
 800c37a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c37e:	bf00      	nop
 800c380:	0800c391 	.word	0x0800c391
 800c384:	0800c3a3 	.word	0x0800c3a3
 800c388:	0800c391 	.word	0x0800c391
 800c38c:	0800c42b 	.word	0x0800c42b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c394:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d048      	beq.n	800c42e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800c39c:	2301      	movs	r3, #1
 800c39e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800c3a0:	e045      	b.n	800c42e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800c3aa:	d142      	bne.n	800c432 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800c3ac:	2301      	movs	r3, #1
 800c3ae:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800c3b0:	e03f      	b.n	800c432 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	699b      	ldr	r3, [r3, #24]
 800c3b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c3ba:	d123      	bne.n	800c404 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3c0:	2b03      	cmp	r3, #3
 800c3c2:	d838      	bhi.n	800c436 <DMA_CheckFifoParam+0xda>
 800c3c4:	a201      	add	r2, pc, #4	; (adr r2, 800c3cc <DMA_CheckFifoParam+0x70>)
 800c3c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3ca:	bf00      	nop
 800c3cc:	0800c3dd 	.word	0x0800c3dd
 800c3d0:	0800c3e3 	.word	0x0800c3e3
 800c3d4:	0800c3dd 	.word	0x0800c3dd
 800c3d8:	0800c3f5 	.word	0x0800c3f5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800c3dc:	2301      	movs	r3, #1
 800c3de:	73fb      	strb	r3, [r7, #15]
        break;
 800c3e0:	e030      	b.n	800c444 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d025      	beq.n	800c43a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800c3ee:	2301      	movs	r3, #1
 800c3f0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800c3f2:	e022      	b.n	800c43a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3f8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800c3fc:	d11f      	bne.n	800c43e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800c3fe:	2301      	movs	r3, #1
 800c400:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800c402:	e01c      	b.n	800c43e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c408:	2b02      	cmp	r3, #2
 800c40a:	d902      	bls.n	800c412 <DMA_CheckFifoParam+0xb6>
 800c40c:	2b03      	cmp	r3, #3
 800c40e:	d003      	beq.n	800c418 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800c410:	e018      	b.n	800c444 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800c412:	2301      	movs	r3, #1
 800c414:	73fb      	strb	r3, [r7, #15]
        break;
 800c416:	e015      	b.n	800c444 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c41c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c420:	2b00      	cmp	r3, #0
 800c422:	d00e      	beq.n	800c442 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800c424:	2301      	movs	r3, #1
 800c426:	73fb      	strb	r3, [r7, #15]
    break;
 800c428:	e00b      	b.n	800c442 <DMA_CheckFifoParam+0xe6>
        break;
 800c42a:	bf00      	nop
 800c42c:	e00a      	b.n	800c444 <DMA_CheckFifoParam+0xe8>
        break;
 800c42e:	bf00      	nop
 800c430:	e008      	b.n	800c444 <DMA_CheckFifoParam+0xe8>
        break;
 800c432:	bf00      	nop
 800c434:	e006      	b.n	800c444 <DMA_CheckFifoParam+0xe8>
        break;
 800c436:	bf00      	nop
 800c438:	e004      	b.n	800c444 <DMA_CheckFifoParam+0xe8>
        break;
 800c43a:	bf00      	nop
 800c43c:	e002      	b.n	800c444 <DMA_CheckFifoParam+0xe8>
        break;
 800c43e:	bf00      	nop
 800c440:	e000      	b.n	800c444 <DMA_CheckFifoParam+0xe8>
    break;
 800c442:	bf00      	nop
    }
  }

  return status;
 800c444:	7bfb      	ldrb	r3, [r7, #15]
}
 800c446:	4618      	mov	r0, r3
 800c448:	3714      	adds	r7, #20
 800c44a:	46bd      	mov	sp, r7
 800c44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c450:	4770      	bx	lr
 800c452:	bf00      	nop

0800c454 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800c454:	b480      	push	{r7}
 800c456:	b085      	sub	sp, #20
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	4a38      	ldr	r2, [pc, #224]	; (800c548 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800c468:	4293      	cmp	r3, r2
 800c46a:	d022      	beq.n	800c4b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	4a36      	ldr	r2, [pc, #216]	; (800c54c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800c472:	4293      	cmp	r3, r2
 800c474:	d01d      	beq.n	800c4b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	4a35      	ldr	r2, [pc, #212]	; (800c550 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800c47c:	4293      	cmp	r3, r2
 800c47e:	d018      	beq.n	800c4b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	4a33      	ldr	r2, [pc, #204]	; (800c554 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800c486:	4293      	cmp	r3, r2
 800c488:	d013      	beq.n	800c4b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	4a32      	ldr	r2, [pc, #200]	; (800c558 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800c490:	4293      	cmp	r3, r2
 800c492:	d00e      	beq.n	800c4b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	4a30      	ldr	r2, [pc, #192]	; (800c55c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800c49a:	4293      	cmp	r3, r2
 800c49c:	d009      	beq.n	800c4b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	4a2f      	ldr	r2, [pc, #188]	; (800c560 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800c4a4:	4293      	cmp	r3, r2
 800c4a6:	d004      	beq.n	800c4b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	4a2d      	ldr	r2, [pc, #180]	; (800c564 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800c4ae:	4293      	cmp	r3, r2
 800c4b0:	d101      	bne.n	800c4b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800c4b2:	2301      	movs	r3, #1
 800c4b4:	e000      	b.n	800c4b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d01a      	beq.n	800c4f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	b2db      	uxtb	r3, r3
 800c4c2:	3b08      	subs	r3, #8
 800c4c4:	4a28      	ldr	r2, [pc, #160]	; (800c568 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800c4c6:	fba2 2303 	umull	r2, r3, r2, r3
 800c4ca:	091b      	lsrs	r3, r3, #4
 800c4cc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800c4ce:	68fa      	ldr	r2, [r7, #12]
 800c4d0:	4b26      	ldr	r3, [pc, #152]	; (800c56c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800c4d2:	4413      	add	r3, r2
 800c4d4:	009b      	lsls	r3, r3, #2
 800c4d6:	461a      	mov	r2, r3
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	4a24      	ldr	r2, [pc, #144]	; (800c570 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800c4e0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	f003 031f 	and.w	r3, r3, #31
 800c4e8:	2201      	movs	r2, #1
 800c4ea:	409a      	lsls	r2, r3
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800c4f0:	e024      	b.n	800c53c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	b2db      	uxtb	r3, r3
 800c4f8:	3b10      	subs	r3, #16
 800c4fa:	4a1e      	ldr	r2, [pc, #120]	; (800c574 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800c4fc:	fba2 2303 	umull	r2, r3, r2, r3
 800c500:	091b      	lsrs	r3, r3, #4
 800c502:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800c504:	68bb      	ldr	r3, [r7, #8]
 800c506:	4a1c      	ldr	r2, [pc, #112]	; (800c578 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800c508:	4293      	cmp	r3, r2
 800c50a:	d806      	bhi.n	800c51a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800c50c:	68bb      	ldr	r3, [r7, #8]
 800c50e:	4a1b      	ldr	r2, [pc, #108]	; (800c57c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800c510:	4293      	cmp	r3, r2
 800c512:	d902      	bls.n	800c51a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	3308      	adds	r3, #8
 800c518:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800c51a:	68fa      	ldr	r2, [r7, #12]
 800c51c:	4b18      	ldr	r3, [pc, #96]	; (800c580 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800c51e:	4413      	add	r3, r2
 800c520:	009b      	lsls	r3, r3, #2
 800c522:	461a      	mov	r2, r3
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	4a16      	ldr	r2, [pc, #88]	; (800c584 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800c52c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	f003 031f 	and.w	r3, r3, #31
 800c534:	2201      	movs	r2, #1
 800c536:	409a      	lsls	r2, r3
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800c53c:	bf00      	nop
 800c53e:	3714      	adds	r7, #20
 800c540:	46bd      	mov	sp, r7
 800c542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c546:	4770      	bx	lr
 800c548:	58025408 	.word	0x58025408
 800c54c:	5802541c 	.word	0x5802541c
 800c550:	58025430 	.word	0x58025430
 800c554:	58025444 	.word	0x58025444
 800c558:	58025458 	.word	0x58025458
 800c55c:	5802546c 	.word	0x5802546c
 800c560:	58025480 	.word	0x58025480
 800c564:	58025494 	.word	0x58025494
 800c568:	cccccccd 	.word	0xcccccccd
 800c56c:	16009600 	.word	0x16009600
 800c570:	58025880 	.word	0x58025880
 800c574:	aaaaaaab 	.word	0xaaaaaaab
 800c578:	400204b8 	.word	0x400204b8
 800c57c:	4002040f 	.word	0x4002040f
 800c580:	10008200 	.word	0x10008200
 800c584:	40020880 	.word	0x40020880

0800c588 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800c588:	b480      	push	{r7}
 800c58a:	b085      	sub	sp, #20
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	685b      	ldr	r3, [r3, #4]
 800c594:	b2db      	uxtb	r3, r3
 800c596:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d04a      	beq.n	800c634 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	2b08      	cmp	r3, #8
 800c5a2:	d847      	bhi.n	800c634 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	4a25      	ldr	r2, [pc, #148]	; (800c640 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800c5aa:	4293      	cmp	r3, r2
 800c5ac:	d022      	beq.n	800c5f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	4a24      	ldr	r2, [pc, #144]	; (800c644 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800c5b4:	4293      	cmp	r3, r2
 800c5b6:	d01d      	beq.n	800c5f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	4a22      	ldr	r2, [pc, #136]	; (800c648 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800c5be:	4293      	cmp	r3, r2
 800c5c0:	d018      	beq.n	800c5f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	4a21      	ldr	r2, [pc, #132]	; (800c64c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800c5c8:	4293      	cmp	r3, r2
 800c5ca:	d013      	beq.n	800c5f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	4a1f      	ldr	r2, [pc, #124]	; (800c650 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800c5d2:	4293      	cmp	r3, r2
 800c5d4:	d00e      	beq.n	800c5f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	4a1e      	ldr	r2, [pc, #120]	; (800c654 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800c5dc:	4293      	cmp	r3, r2
 800c5de:	d009      	beq.n	800c5f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	4a1c      	ldr	r2, [pc, #112]	; (800c658 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800c5e6:	4293      	cmp	r3, r2
 800c5e8:	d004      	beq.n	800c5f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	4a1b      	ldr	r2, [pc, #108]	; (800c65c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800c5f0:	4293      	cmp	r3, r2
 800c5f2:	d101      	bne.n	800c5f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800c5f4:	2301      	movs	r3, #1
 800c5f6:	e000      	b.n	800c5fa <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d00a      	beq.n	800c614 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800c5fe:	68fa      	ldr	r2, [r7, #12]
 800c600:	4b17      	ldr	r3, [pc, #92]	; (800c660 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800c602:	4413      	add	r3, r2
 800c604:	009b      	lsls	r3, r3, #2
 800c606:	461a      	mov	r2, r3
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	4a15      	ldr	r2, [pc, #84]	; (800c664 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800c610:	671a      	str	r2, [r3, #112]	; 0x70
 800c612:	e009      	b.n	800c628 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800c614:	68fa      	ldr	r2, [r7, #12]
 800c616:	4b14      	ldr	r3, [pc, #80]	; (800c668 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800c618:	4413      	add	r3, r2
 800c61a:	009b      	lsls	r3, r3, #2
 800c61c:	461a      	mov	r2, r3
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	4a11      	ldr	r2, [pc, #68]	; (800c66c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800c626:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	3b01      	subs	r3, #1
 800c62c:	2201      	movs	r2, #1
 800c62e:	409a      	lsls	r2, r3
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800c634:	bf00      	nop
 800c636:	3714      	adds	r7, #20
 800c638:	46bd      	mov	sp, r7
 800c63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63e:	4770      	bx	lr
 800c640:	58025408 	.word	0x58025408
 800c644:	5802541c 	.word	0x5802541c
 800c648:	58025430 	.word	0x58025430
 800c64c:	58025444 	.word	0x58025444
 800c650:	58025458 	.word	0x58025458
 800c654:	5802546c 	.word	0x5802546c
 800c658:	58025480 	.word	0x58025480
 800c65c:	58025494 	.word	0x58025494
 800c660:	1600963f 	.word	0x1600963f
 800c664:	58025940 	.word	0x58025940
 800c668:	1000823f 	.word	0x1000823f
 800c66c:	40020940 	.word	0x40020940

0800c670 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b082      	sub	sp, #8
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d101      	bne.n	800c682 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800c67e:	2301      	movs	r3, #1
 800c680:	e04f      	b.n	800c722 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800c688:	b2db      	uxtb	r3, r3
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d106      	bne.n	800c69c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	2200      	movs	r2, #0
 800c692:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800c696:	6878      	ldr	r0, [r7, #4]
 800c698:	f000 f84e 	bl	800c738 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	2202      	movs	r2, #2
 800c6a0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	681a      	ldr	r2, [r3, #0]
 800c6aa:	4b20      	ldr	r3, [pc, #128]	; (800c72c <HAL_DMA2D_Init+0xbc>)
 800c6ac:	4013      	ands	r3, r2
 800c6ae:	687a      	ldr	r2, [r7, #4]
 800c6b0:	6851      	ldr	r1, [r2, #4]
 800c6b2:	687a      	ldr	r2, [r7, #4]
 800c6b4:	69d2      	ldr	r2, [r2, #28]
 800c6b6:	4311      	orrs	r1, r2
 800c6b8:	687a      	ldr	r2, [r7, #4]
 800c6ba:	6812      	ldr	r2, [r2, #0]
 800c6bc:	430b      	orrs	r3, r1
 800c6be:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c6c6:	4b1a      	ldr	r3, [pc, #104]	; (800c730 <HAL_DMA2D_Init+0xc0>)
 800c6c8:	4013      	ands	r3, r2
 800c6ca:	687a      	ldr	r2, [r7, #4]
 800c6cc:	6891      	ldr	r1, [r2, #8]
 800c6ce:	687a      	ldr	r2, [r7, #4]
 800c6d0:	6992      	ldr	r2, [r2, #24]
 800c6d2:	4311      	orrs	r1, r2
 800c6d4:	687a      	ldr	r2, [r7, #4]
 800c6d6:	6812      	ldr	r2, [r2, #0]
 800c6d8:	430b      	orrs	r3, r1
 800c6da:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c6e2:	4b14      	ldr	r3, [pc, #80]	; (800c734 <HAL_DMA2D_Init+0xc4>)
 800c6e4:	4013      	ands	r3, r2
 800c6e6:	687a      	ldr	r2, [r7, #4]
 800c6e8:	68d1      	ldr	r1, [r2, #12]
 800c6ea:	687a      	ldr	r2, [r7, #4]
 800c6ec:	6812      	ldr	r2, [r2, #0]
 800c6ee:	430b      	orrs	r3, r1
 800c6f0:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6f8:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	691b      	ldr	r3, [r3, #16]
 800c700:	051a      	lsls	r2, r3, #20
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	695b      	ldr	r3, [r3, #20]
 800c706:	055b      	lsls	r3, r3, #21
 800c708:	431a      	orrs	r2, r3
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	430a      	orrs	r2, r1
 800c710:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	2200      	movs	r2, #0
 800c716:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	2201      	movs	r2, #1
 800c71c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 800c720:	2300      	movs	r3, #0
}
 800c722:	4618      	mov	r0, r3
 800c724:	3708      	adds	r7, #8
 800c726:	46bd      	mov	sp, r7
 800c728:	bd80      	pop	{r7, pc}
 800c72a:	bf00      	nop
 800c72c:	fff8ffbf 	.word	0xfff8ffbf
 800c730:	fffffef8 	.word	0xfffffef8
 800c734:	ffff0000 	.word	0xffff0000

0800c738 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 800c738:	b480      	push	{r7}
 800c73a:	b083      	sub	sp, #12
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 800c740:	bf00      	nop
 800c742:	370c      	adds	r7, #12
 800c744:	46bd      	mov	sp, r7
 800c746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74a:	4770      	bx	lr

0800c74c <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b086      	sub	sp, #24
 800c750:	af02      	add	r7, sp, #8
 800c752:	60f8      	str	r0, [r7, #12]
 800c754:	60b9      	str	r1, [r7, #8]
 800c756:	607a      	str	r2, [r7, #4]
 800c758:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800c760:	2b01      	cmp	r3, #1
 800c762:	d101      	bne.n	800c768 <HAL_DMA2D_Start+0x1c>
 800c764:	2302      	movs	r3, #2
 800c766:	e018      	b.n	800c79a <HAL_DMA2D_Start+0x4e>
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	2201      	movs	r2, #1
 800c76c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	2202      	movs	r2, #2
 800c774:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800c778:	69bb      	ldr	r3, [r7, #24]
 800c77a:	9300      	str	r3, [sp, #0]
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	687a      	ldr	r2, [r7, #4]
 800c780:	68b9      	ldr	r1, [r7, #8]
 800c782:	68f8      	ldr	r0, [r7, #12]
 800c784:	f000 f9aa 	bl	800cadc <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	681a      	ldr	r2, [r3, #0]
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	f042 0201 	orr.w	r2, r2, #1
 800c796:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800c798:	2300      	movs	r3, #0
}
 800c79a:	4618      	mov	r0, r3
 800c79c:	3710      	adds	r7, #16
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	bd80      	pop	{r7, pc}

0800c7a2 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800c7a2:	b580      	push	{r7, lr}
 800c7a4:	b086      	sub	sp, #24
 800c7a6:	af00      	add	r7, sp, #0
 800c7a8:	6078      	str	r0, [r7, #4]
 800c7aa:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	f003 0301 	and.w	r3, r3, #1
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d056      	beq.n	800c86c <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800c7be:	f7fc fc19 	bl	8008ff4 <HAL_GetTick>
 800c7c2:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800c7c4:	e04b      	b.n	800c85e <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	685b      	ldr	r3, [r3, #4]
 800c7cc:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d023      	beq.n	800c820 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	f003 0320 	and.w	r3, r3, #32
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d005      	beq.n	800c7ee <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c7e6:	f043 0202 	orr.w	r2, r3, #2
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	f003 0301 	and.w	r3, r3, #1
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d005      	beq.n	800c804 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c7fc:	f043 0201 	orr.w	r2, r3, #1
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	2221      	movs	r2, #33	; 0x21
 800c80a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	2204      	movs	r2, #4
 800c810:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	2200      	movs	r2, #0
 800c818:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800c81c:	2301      	movs	r3, #1
 800c81e:	e0a5      	b.n	800c96c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800c820:	683b      	ldr	r3, [r7, #0]
 800c822:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c826:	d01a      	beq.n	800c85e <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800c828:	f7fc fbe4 	bl	8008ff4 <HAL_GetTick>
 800c82c:	4602      	mov	r2, r0
 800c82e:	697b      	ldr	r3, [r7, #20]
 800c830:	1ad3      	subs	r3, r2, r3
 800c832:	683a      	ldr	r2, [r7, #0]
 800c834:	429a      	cmp	r2, r3
 800c836:	d302      	bcc.n	800c83e <HAL_DMA2D_PollForTransfer+0x9c>
 800c838:	683b      	ldr	r3, [r7, #0]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d10f      	bne.n	800c85e <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c842:	f043 0220 	orr.w	r2, r3, #32
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	2203      	movs	r2, #3
 800c84e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	2200      	movs	r2, #0
 800c856:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
 800c85a:	2303      	movs	r3, #3
 800c85c:	e086      	b.n	800c96c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	685b      	ldr	r3, [r3, #4]
 800c864:	f003 0302 	and.w	r3, r3, #2
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d0ac      	beq.n	800c7c6 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	69db      	ldr	r3, [r3, #28]
 800c872:	f003 0320 	and.w	r3, r3, #32
 800c876:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c87e:	f003 0320 	and.w	r3, r3, #32
 800c882:	693a      	ldr	r2, [r7, #16]
 800c884:	4313      	orrs	r3, r2
 800c886:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800c888:	693b      	ldr	r3, [r7, #16]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d061      	beq.n	800c952 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800c88e:	f7fc fbb1 	bl	8008ff4 <HAL_GetTick>
 800c892:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800c894:	e056      	b.n	800c944 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	685b      	ldr	r3, [r3, #4]
 800c89c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	f003 0329 	and.w	r3, r3, #41	; 0x29
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d02e      	beq.n	800c906 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	f003 0308 	and.w	r3, r3, #8
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d005      	beq.n	800c8be <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c8b6:	f043 0204 	orr.w	r2, r3, #4
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	f003 0320 	and.w	r3, r3, #32
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d005      	beq.n	800c8d4 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c8cc:	f043 0202 	orr.w	r2, r3, #2
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	f003 0301 	and.w	r3, r3, #1
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d005      	beq.n	800c8ea <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c8e2:	f043 0201 	orr.w	r2, r3, #1
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	2229      	movs	r2, #41	; 0x29
 800c8f0:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	2204      	movs	r2, #4
 800c8f6:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800c902:	2301      	movs	r3, #1
 800c904:	e032      	b.n	800c96c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800c906:	683b      	ldr	r3, [r7, #0]
 800c908:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c90c:	d01a      	beq.n	800c944 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800c90e:	f7fc fb71 	bl	8008ff4 <HAL_GetTick>
 800c912:	4602      	mov	r2, r0
 800c914:	697b      	ldr	r3, [r7, #20]
 800c916:	1ad3      	subs	r3, r2, r3
 800c918:	683a      	ldr	r2, [r7, #0]
 800c91a:	429a      	cmp	r2, r3
 800c91c:	d302      	bcc.n	800c924 <HAL_DMA2D_PollForTransfer+0x182>
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d10f      	bne.n	800c944 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c928:	f043 0220 	orr.w	r2, r3, #32
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	2203      	movs	r2, #3
 800c934:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	2200      	movs	r2, #0
 800c93c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
 800c940:	2303      	movs	r3, #3
 800c942:	e013      	b.n	800c96c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	685b      	ldr	r3, [r3, #4]
 800c94a:	f003 0310 	and.w	r3, r3, #16
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d0a1      	beq.n	800c896 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	2212      	movs	r2, #18
 800c958:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	2201      	movs	r2, #1
 800c95e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	2200      	movs	r2, #0
 800c966:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 800c96a:	2300      	movs	r3, #0
}
 800c96c:	4618      	mov	r0, r3
 800c96e:	3718      	adds	r7, #24
 800c970:	46bd      	mov	sp, r7
 800c972:	bd80      	pop	{r7, pc}

0800c974 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800c974:	b480      	push	{r7}
 800c976:	b087      	sub	sp, #28
 800c978:	af00      	add	r7, sp, #0
 800c97a:	6078      	str	r0, [r7, #4]
 800c97c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	685b      	ldr	r3, [r3, #4]
 800c982:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 800c986:	683b      	ldr	r3, [r7, #0]
 800c988:	2b01      	cmp	r3, #1
 800c98a:	d104      	bne.n	800c996 <HAL_DMA2D_ConfigLayer+0x22>
 800c98c:	683a      	ldr	r2, [r7, #0]
 800c98e:	4613      	mov	r3, r2
 800c990:	00db      	lsls	r3, r3, #3
 800c992:	1a9b      	subs	r3, r3, r2
 800c994:	009b      	lsls	r3, r3, #2
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800c99c:	2b01      	cmp	r3, #1
 800c99e:	d101      	bne.n	800c9a4 <HAL_DMA2D_ConfigLayer+0x30>
 800c9a0:	2302      	movs	r3, #2
 800c9a2:	e092      	b.n	800caca <HAL_DMA2D_ConfigLayer+0x156>
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2201      	movs	r2, #1
 800c9a8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	2202      	movs	r2, #2
 800c9b0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800c9b4:	683a      	ldr	r2, [r7, #0]
 800c9b6:	4613      	mov	r3, r2
 800c9b8:	00db      	lsls	r3, r3, #3
 800c9ba:	1a9b      	subs	r3, r3, r2
 800c9bc:	009b      	lsls	r3, r3, #2
 800c9be:	3328      	adds	r3, #40	; 0x28
 800c9c0:	687a      	ldr	r2, [r7, #4]
 800c9c2:	4413      	add	r3, r2
 800c9c4:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	685a      	ldr	r2, [r3, #4]
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	689b      	ldr	r3, [r3, #8]
 800c9ce:	041b      	lsls	r3, r3, #16
 800c9d0:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	691b      	ldr	r3, [r3, #16]
 800c9d6:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800c9d8:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	695b      	ldr	r3, [r3, #20]
 800c9de:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800c9e0:	4313      	orrs	r3, r2
 800c9e2:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 800c9e4:	4b3c      	ldr	r3, [pc, #240]	; (800cad8 <HAL_DMA2D_ConfigLayer+0x164>)
 800c9e6:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	685b      	ldr	r3, [r3, #4]
 800c9ec:	2b0a      	cmp	r3, #10
 800c9ee:	d003      	beq.n	800c9f8 <HAL_DMA2D_ConfigLayer+0x84>
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	685b      	ldr	r3, [r3, #4]
 800c9f4:	2b09      	cmp	r3, #9
 800c9f6:	d107      	bne.n	800ca08 <HAL_DMA2D_ConfigLayer+0x94>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	68db      	ldr	r3, [r3, #12]
 800c9fc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800ca00:	693a      	ldr	r2, [r7, #16]
 800ca02:	4313      	orrs	r3, r2
 800ca04:	613b      	str	r3, [r7, #16]
 800ca06:	e005      	b.n	800ca14 <HAL_DMA2D_ConfigLayer+0xa0>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	68db      	ldr	r3, [r3, #12]
 800ca0c:	061b      	lsls	r3, r3, #24
 800ca0e:	693a      	ldr	r2, [r7, #16]
 800ca10:	4313      	orrs	r3, r2
 800ca12:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d120      	bne.n	800ca5c <HAL_DMA2D_ConfigLayer+0xe8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ca20:	697b      	ldr	r3, [r7, #20]
 800ca22:	43db      	mvns	r3, r3
 800ca24:	ea02 0103 	and.w	r1, r2, r3
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	693a      	ldr	r2, [r7, #16]
 800ca2e:	430a      	orrs	r2, r1
 800ca30:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	68fa      	ldr	r2, [r7, #12]
 800ca38:	6812      	ldr	r2, [r2, #0]
 800ca3a:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	685b      	ldr	r3, [r3, #4]
 800ca40:	2b0a      	cmp	r3, #10
 800ca42:	d003      	beq.n	800ca4c <HAL_DMA2D_ConfigLayer+0xd8>
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	685b      	ldr	r3, [r3, #4]
 800ca48:	2b09      	cmp	r3, #9
 800ca4a:	d135      	bne.n	800cab8 <HAL_DMA2D_ConfigLayer+0x144>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	68da      	ldr	r2, [r3, #12]
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800ca58:	629a      	str	r2, [r3, #40]	; 0x28
 800ca5a:	e02d      	b.n	800cab8 <HAL_DMA2D_ConfigLayer+0x144>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	685b      	ldr	r3, [r3, #4]
 800ca60:	2b0b      	cmp	r3, #11
 800ca62:	d109      	bne.n	800ca78 <HAL_DMA2D_ConfigLayer+0x104>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	699b      	ldr	r3, [r3, #24]
 800ca68:	049b      	lsls	r3, r3, #18
 800ca6a:	693a      	ldr	r2, [r7, #16]
 800ca6c:	4313      	orrs	r3, r2
 800ca6e:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 800ca70:	697b      	ldr	r3, [r7, #20]
 800ca72:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 800ca76:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	69da      	ldr	r2, [r3, #28]
 800ca7e:	697b      	ldr	r3, [r7, #20]
 800ca80:	43db      	mvns	r3, r3
 800ca82:	ea02 0103 	and.w	r1, r2, r3
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	693a      	ldr	r2, [r7, #16]
 800ca8c:	430a      	orrs	r2, r1
 800ca8e:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	68fa      	ldr	r2, [r7, #12]
 800ca96:	6812      	ldr	r2, [r2, #0]
 800ca98:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	685b      	ldr	r3, [r3, #4]
 800ca9e:	2b0a      	cmp	r3, #10
 800caa0:	d003      	beq.n	800caaa <HAL_DMA2D_ConfigLayer+0x136>
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	685b      	ldr	r3, [r3, #4]
 800caa6:	2b09      	cmp	r3, #9
 800caa8:	d106      	bne.n	800cab8 <HAL_DMA2D_ConfigLayer+0x144>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	68da      	ldr	r2, [r3, #12]
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800cab6:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	2201      	movs	r2, #1
 800cabc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	2200      	movs	r2, #0
 800cac4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 800cac8:	2300      	movs	r3, #0
}
 800caca:	4618      	mov	r0, r3
 800cacc:	371c      	adds	r7, #28
 800cace:	46bd      	mov	sp, r7
 800cad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad4:	4770      	bx	lr
 800cad6:	bf00      	nop
 800cad8:	ff33000f 	.word	0xff33000f

0800cadc <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 800cadc:	b480      	push	{r7}
 800cade:	b08b      	sub	sp, #44	; 0x2c
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	60f8      	str	r0, [r7, #12]
 800cae4:	60b9      	str	r1, [r7, #8]
 800cae6:	607a      	str	r2, [r7, #4]
 800cae8:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800caf0:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800caf4:	683b      	ldr	r3, [r7, #0]
 800caf6:	041a      	lsls	r2, r3, #16
 800caf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cafa:	431a      	orrs	r2, r3
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	430a      	orrs	r2, r1
 800cb02:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	687a      	ldr	r2, [r7, #4]
 800cb0a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	685b      	ldr	r3, [r3, #4]
 800cb10:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cb14:	d174      	bne.n	800cc00 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800cb16:	68bb      	ldr	r3, [r7, #8]
 800cb18:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800cb1c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800cb1e:	68bb      	ldr	r3, [r7, #8]
 800cb20:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cb24:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800cb26:	68bb      	ldr	r3, [r7, #8]
 800cb28:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800cb2c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800cb2e:	68bb      	ldr	r3, [r7, #8]
 800cb30:	b2db      	uxtb	r3, r3
 800cb32:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	689b      	ldr	r3, [r3, #8]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d108      	bne.n	800cb4e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 800cb3c:	69ba      	ldr	r2, [r7, #24]
 800cb3e:	69fb      	ldr	r3, [r7, #28]
 800cb40:	431a      	orrs	r2, r3
 800cb42:	6a3b      	ldr	r3, [r7, #32]
 800cb44:	4313      	orrs	r3, r2
 800cb46:	697a      	ldr	r2, [r7, #20]
 800cb48:	4313      	orrs	r3, r2
 800cb4a:	627b      	str	r3, [r7, #36]	; 0x24
 800cb4c:	e053      	b.n	800cbf6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	689b      	ldr	r3, [r3, #8]
 800cb52:	2b01      	cmp	r3, #1
 800cb54:	d106      	bne.n	800cb64 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800cb56:	69ba      	ldr	r2, [r7, #24]
 800cb58:	69fb      	ldr	r3, [r7, #28]
 800cb5a:	4313      	orrs	r3, r2
 800cb5c:	697a      	ldr	r2, [r7, #20]
 800cb5e:	4313      	orrs	r3, r2
 800cb60:	627b      	str	r3, [r7, #36]	; 0x24
 800cb62:	e048      	b.n	800cbf6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	689b      	ldr	r3, [r3, #8]
 800cb68:	2b02      	cmp	r3, #2
 800cb6a:	d111      	bne.n	800cb90 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 800cb6c:	69fb      	ldr	r3, [r7, #28]
 800cb6e:	0cdb      	lsrs	r3, r3, #19
 800cb70:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800cb72:	69bb      	ldr	r3, [r7, #24]
 800cb74:	0a9b      	lsrs	r3, r3, #10
 800cb76:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800cb78:	697b      	ldr	r3, [r7, #20]
 800cb7a:	08db      	lsrs	r3, r3, #3
 800cb7c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800cb7e:	69bb      	ldr	r3, [r7, #24]
 800cb80:	015a      	lsls	r2, r3, #5
 800cb82:	69fb      	ldr	r3, [r7, #28]
 800cb84:	02db      	lsls	r3, r3, #11
 800cb86:	4313      	orrs	r3, r2
 800cb88:	697a      	ldr	r2, [r7, #20]
 800cb8a:	4313      	orrs	r3, r2
 800cb8c:	627b      	str	r3, [r7, #36]	; 0x24
 800cb8e:	e032      	b.n	800cbf6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	689b      	ldr	r3, [r3, #8]
 800cb94:	2b03      	cmp	r3, #3
 800cb96:	d117      	bne.n	800cbc8 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 800cb98:	6a3b      	ldr	r3, [r7, #32]
 800cb9a:	0fdb      	lsrs	r3, r3, #31
 800cb9c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800cb9e:	69fb      	ldr	r3, [r7, #28]
 800cba0:	0cdb      	lsrs	r3, r3, #19
 800cba2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 800cba4:	69bb      	ldr	r3, [r7, #24]
 800cba6:	0adb      	lsrs	r3, r3, #11
 800cba8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800cbaa:	697b      	ldr	r3, [r7, #20]
 800cbac:	08db      	lsrs	r3, r3, #3
 800cbae:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800cbb0:	69bb      	ldr	r3, [r7, #24]
 800cbb2:	015a      	lsls	r2, r3, #5
 800cbb4:	69fb      	ldr	r3, [r7, #28]
 800cbb6:	029b      	lsls	r3, r3, #10
 800cbb8:	431a      	orrs	r2, r3
 800cbba:	6a3b      	ldr	r3, [r7, #32]
 800cbbc:	03db      	lsls	r3, r3, #15
 800cbbe:	4313      	orrs	r3, r2
 800cbc0:	697a      	ldr	r2, [r7, #20]
 800cbc2:	4313      	orrs	r3, r2
 800cbc4:	627b      	str	r3, [r7, #36]	; 0x24
 800cbc6:	e016      	b.n	800cbf6 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800cbc8:	6a3b      	ldr	r3, [r7, #32]
 800cbca:	0f1b      	lsrs	r3, r3, #28
 800cbcc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800cbce:	69fb      	ldr	r3, [r7, #28]
 800cbd0:	0d1b      	lsrs	r3, r3, #20
 800cbd2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 800cbd4:	69bb      	ldr	r3, [r7, #24]
 800cbd6:	0b1b      	lsrs	r3, r3, #12
 800cbd8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800cbda:	697b      	ldr	r3, [r7, #20]
 800cbdc:	091b      	lsrs	r3, r3, #4
 800cbde:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800cbe0:	69bb      	ldr	r3, [r7, #24]
 800cbe2:	011a      	lsls	r2, r3, #4
 800cbe4:	69fb      	ldr	r3, [r7, #28]
 800cbe6:	021b      	lsls	r3, r3, #8
 800cbe8:	431a      	orrs	r2, r3
 800cbea:	6a3b      	ldr	r3, [r7, #32]
 800cbec:	031b      	lsls	r3, r3, #12
 800cbee:	4313      	orrs	r3, r2
 800cbf0:	697a      	ldr	r2, [r7, #20]
 800cbf2:	4313      	orrs	r3, r2
 800cbf4:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cbfc:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800cbfe:	e00d      	b.n	800cc1c <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	685b      	ldr	r3, [r3, #4]
 800cc04:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cc08:	d104      	bne.n	800cc14 <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	68ba      	ldr	r2, [r7, #8]
 800cc10:	615a      	str	r2, [r3, #20]
}
 800cc12:	e003      	b.n	800cc1c <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	68ba      	ldr	r2, [r7, #8]
 800cc1a:	60da      	str	r2, [r3, #12]
}
 800cc1c:	bf00      	nop
 800cc1e:	372c      	adds	r7, #44	; 0x2c
 800cc20:	46bd      	mov	sp, r7
 800cc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc26:	4770      	bx	lr

0800cc28 <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 800cc28:	b480      	push	{r7}
 800cc2a:	b085      	sub	sp, #20
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	60f8      	str	r0, [r7, #12]
 800cc30:	60b9      	str	r1, [r7, #8]
 800cc32:	607a      	str	r2, [r7, #4]
 800cc34:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800cc36:	68bb      	ldr	r3, [r7, #8]
 800cc38:	019a      	lsls	r2, r3, #6
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	431a      	orrs	r2, r3
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	021b      	lsls	r3, r3, #8
 800cc42:	431a      	orrs	r2, r3
 800cc44:	69bb      	ldr	r3, [r7, #24]
 800cc46:	041b      	lsls	r3, r3, #16
 800cc48:	431a      	orrs	r2, r3
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800cc4e:	bf00      	nop
 800cc50:	3714      	adds	r7, #20
 800cc52:	46bd      	mov	sp, r7
 800cc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc58:	4770      	bx	lr

0800cc5a <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 800cc5a:	b580      	push	{r7, lr}
 800cc5c:	b086      	sub	sp, #24
 800cc5e:	af00      	add	r7, sp, #0
 800cc60:	60f8      	str	r0, [r7, #12]
 800cc62:	60b9      	str	r1, [r7, #8]
 800cc64:	607a      	str	r2, [r7, #4]
 800cc66:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800cc68:	f7fc f9c4 	bl	8008ff4 <HAL_GetTick>
 800cc6c:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800cc6e:	e009      	b.n	800cc84 <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 800cc70:	f7fc f9c0 	bl	8008ff4 <HAL_GetTick>
 800cc74:	4602      	mov	r2, r0
 800cc76:	697b      	ldr	r3, [r7, #20]
 800cc78:	1ad3      	subs	r3, r2, r3
 800cc7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cc7e:	d901      	bls.n	800cc84 <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 800cc80:	2303      	movs	r3, #3
 800cc82:	e015      	b.n	800ccb0 <DSI_ShortWrite+0x56>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc8a:	f003 0301 	and.w	r3, r3, #1
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d0ee      	beq.n	800cc70 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800cc92:	68bb      	ldr	r3, [r7, #8]
 800cc94:	019a      	lsls	r2, r3, #6
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	431a      	orrs	r2, r3
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	021b      	lsls	r3, r3, #8
 800cc9e:	ea42 0103 	orr.w	r1, r2, r3
 800cca2:	6a3b      	ldr	r3, [r7, #32]
 800cca4:	041a      	lsls	r2, r3, #16
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	430a      	orrs	r2, r1
 800ccac:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 800ccae:	2300      	movs	r3, #0
}
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	3718      	adds	r7, #24
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	bd80      	pop	{r7, pc}

0800ccb8 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b088      	sub	sp, #32
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
 800ccc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d101      	bne.n	800cccc <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 800ccc8:	2301      	movs	r3, #1
 800ccca:	e106      	b.n	800ceda <HAL_DSI_Init+0x222>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	7c5b      	ldrb	r3, [r3, #17]
 800ccd0:	b2db      	uxtb	r3, r3
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d102      	bne.n	800ccdc <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 800ccd6:	6878      	ldr	r0, [r7, #4]
 800ccd8:	f000 f908 	bl	800ceec <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	2203      	movs	r2, #3
 800cce0:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 800cce2:	2300      	movs	r3, #0
 800cce4:	613b      	str	r3, [r7, #16]
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800ccf6:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800cd02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cd06:	613b      	str	r3, [r7, #16]
 800cd08:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800cd0a:	f7fc f973 	bl	8008ff4 <HAL_GetTick>
 800cd0e:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800cd10:	e009      	b.n	800cd26 <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800cd12:	f7fc f96f 	bl	8008ff4 <HAL_GetTick>
 800cd16:	4602      	mov	r2, r0
 800cd18:	69fb      	ldr	r3, [r7, #28]
 800cd1a:	1ad3      	subs	r3, r2, r3
 800cd1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cd20:	d901      	bls.n	800cd26 <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 800cd22:	2303      	movs	r3, #3
 800cd24:	e0d9      	b.n	800ceda <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800cd2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d0ed      	beq.n	800cd12 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	681a      	ldr	r2, [r3, #0]
 800cd42:	4b68      	ldr	r3, [pc, #416]	; (800cee4 <HAL_DSI_Init+0x22c>)
 800cd44:	400b      	ands	r3, r1
 800cd46:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 800cd52:	683b      	ldr	r3, [r7, #0]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	009a      	lsls	r2, r3, #2
 800cd58:	683b      	ldr	r3, [r7, #0]
 800cd5a:	685b      	ldr	r3, [r3, #4]
 800cd5c:	02db      	lsls	r3, r3, #11
 800cd5e:	431a      	orrs	r2, r3
 800cd60:	683b      	ldr	r3, [r7, #0]
 800cd62:	689b      	ldr	r3, [r3, #8]
 800cd64:	041b      	lsls	r3, r3, #16
 800cd66:	431a      	orrs	r2, r3
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	430a      	orrs	r2, r1
 800cd6e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 800cd72:	2300      	movs	r3, #0
 800cd74:	60fb      	str	r3, [r7, #12]
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	f042 0201 	orr.w	r2, r2, #1
 800cd86:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800cd92:	f003 0301 	and.w	r3, r3, #1
 800cd96:	60fb      	str	r3, [r7, #12]
 800cd98:	68fb      	ldr	r3, [r7, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800cd9a:	f7fc f92b 	bl	8008ff4 <HAL_GetTick>
 800cd9e:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800cda0:	e009      	b.n	800cdb6 <HAL_DSI_Init+0xfe>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800cda2:	f7fc f927 	bl	8008ff4 <HAL_GetTick>
 800cda6:	4602      	mov	r2, r0
 800cda8:	69fb      	ldr	r3, [r7, #28]
 800cdaa:	1ad3      	subs	r3, r2, r3
 800cdac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cdb0:	d901      	bls.n	800cdb6 <HAL_DSI_Init+0xfe>
    {
      return HAL_TIMEOUT;
 800cdb2:	2303      	movs	r3, #3
 800cdb4:	e091      	b.n	800ceda <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800cdbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d0ed      	beq.n	800cda2 <HAL_DSI_Init+0xea>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	f042 0206 	orr.w	r2, r2, #6
 800cdd6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	f022 0203 	bic.w	r2, r2, #3
 800cdea:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	685b      	ldr	r3, [r3, #4]
 800cdfa:	431a      	orrs	r2, r3
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	f042 0201 	orr.w	r2, r2, #1
 800ce04:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	f022 0203 	bic.w	r2, r2, #3
 800ce18:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	68da      	ldr	r2, [r3, #12]
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	430a      	orrs	r2, r1
 800ce2e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	689a      	ldr	r2, [r3, #8]
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800ce40:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	6899      	ldr	r1, [r3, #8]
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	689a      	ldr	r2, [r3, #8]
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	430a      	orrs	r2, r1
 800ce52:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 800ce54:	683b      	ldr	r3, [r7, #0]
 800ce56:	685b      	ldr	r3, [r3, #4]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d002      	beq.n	800ce62 <HAL_DSI_Init+0x1aa>
 800ce5c:	683b      	ldr	r3, [r7, #0]
 800ce5e:	685b      	ldr	r3, [r3, #4]
 800ce60:	e000      	b.n	800ce64 <HAL_DSI_Init+0x1ac>
 800ce62:	2301      	movs	r3, #1
 800ce64:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800ce66:	69bb      	ldr	r3, [r7, #24]
 800ce68:	4a1f      	ldr	r2, [pc, #124]	; (800cee8 <HAL_DSI_Init+0x230>)
 800ce6a:	fb02 f203 	mul.w	r2, r2, r3
 800ce6e:	683b      	ldr	r3, [r7, #0]
 800ce70:	689b      	ldr	r3, [r3, #8]
 800ce72:	f003 0303 	and.w	r3, r3, #3
 800ce76:	409a      	lsls	r2, r3
 800ce78:	683b      	ldr	r3, [r7, #0]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	f246 11a8 	movw	r1, #25000	; 0x61a8
 800ce80:	fb01 f303 	mul.w	r3, r1, r3
 800ce84:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce88:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800ce9a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	697a      	ldr	r2, [r7, #20]
 800ceac:	430a      	orrs	r2, r1
 800ceae:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	2200      	movs	r2, #0
 800ceb8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	2200      	movs	r2, #0
 800cec2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	2200      	movs	r2, #0
 800ceca:	619a      	str	r2, [r3, #24]

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	2200      	movs	r2, #0
 800ced0:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	2201      	movs	r2, #1
 800ced6:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 800ced8:	2300      	movs	r3, #0
}
 800ceda:	4618      	mov	r0, r3
 800cedc:	3720      	adds	r7, #32
 800cede:	46bd      	mov	sp, r7
 800cee0:	bd80      	pop	{r7, pc}
 800cee2:	bf00      	nop
 800cee4:	fffc8603 	.word	0xfffc8603
 800cee8:	003d0900 	.word	0x003d0900

0800ceec <HAL_DSI_MspInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_MspInit(DSI_HandleTypeDef *hdsi)
{
 800ceec:	b480      	push	{r7}
 800ceee:	b083      	sub	sp, #12
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspInit could be implemented in the user file
   */
}
 800cef4:	bf00      	nop
 800cef6:	370c      	adds	r7, #12
 800cef8:	46bd      	mov	sp, r7
 800cefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefe:	4770      	bx	lr

0800cf00 <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 800cf00:	b480      	push	{r7}
 800cf02:	b083      	sub	sp, #12
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]
 800cf08:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	7c1b      	ldrb	r3, [r3, #16]
 800cf0e:	2b01      	cmp	r3, #1
 800cf10:	d101      	bne.n	800cf16 <HAL_DSI_ConfigVideoMode+0x16>
 800cf12:	2302      	movs	r3, #2
 800cf14:	e1ee      	b.n	800d2f4 <HAL_DSI_ConfigVideoMode+0x3f4>
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	2201      	movs	r2, #1
 800cf1a:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	f022 0201 	bic.w	r2, r2, #1
 800cf2a:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	f022 0201 	bic.w	r2, r2, #1
 800cf3c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	f022 0203 	bic.w	r2, r2, #3
 800cf4e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	68da      	ldr	r2, [r3, #12]
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	430a      	orrs	r2, r1
 800cf60:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	681a      	ldr	r2, [r3, #0]
 800cf6c:	4b8b      	ldr	r3, [pc, #556]	; (800d19c <HAL_DSI_ConfigVideoMode+0x29c>)
 800cf6e:	400b      	ands	r3, r1
 800cf70:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800cf78:	683b      	ldr	r3, [r7, #0]
 800cf7a:	691a      	ldr	r2, [r3, #16]
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	430a      	orrs	r2, r1
 800cf82:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	681a      	ldr	r2, [r3, #0]
 800cf8e:	4b84      	ldr	r3, [pc, #528]	; (800d1a0 <HAL_DSI_ConfigVideoMode+0x2a0>)
 800cf90:	400b      	ands	r3, r1
 800cf92:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800cf9a:	683b      	ldr	r3, [r7, #0]
 800cf9c:	695a      	ldr	r2, [r3, #20]
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	430a      	orrs	r2, r1
 800cfa4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681a      	ldr	r2, [r3, #0]
 800cfb0:	4b7b      	ldr	r3, [pc, #492]	; (800d1a0 <HAL_DSI_ConfigVideoMode+0x2a0>)
 800cfb2:	400b      	ands	r3, r1
 800cfb4:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800cfbc:	683b      	ldr	r3, [r7, #0]
 800cfbe:	699a      	ldr	r2, [r3, #24]
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	430a      	orrs	r2, r1
 800cfc6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	68da      	ldr	r2, [r3, #12]
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	f022 0203 	bic.w	r2, r2, #3
 800cfd6:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	68d9      	ldr	r1, [r3, #12]
 800cfde:	683b      	ldr	r3, [r7, #0]
 800cfe0:	681a      	ldr	r2, [r3, #0]
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	430a      	orrs	r2, r1
 800cfe8:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	695a      	ldr	r2, [r3, #20]
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	f022 0207 	bic.w	r2, r2, #7
 800cff8:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	6959      	ldr	r1, [r3, #20]
 800d000:	683b      	ldr	r3, [r7, #0]
 800d002:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d004:	683b      	ldr	r3, [r7, #0]
 800d006:	6a1b      	ldr	r3, [r3, #32]
 800d008:	431a      	orrs	r2, r3
 800d00a:	683b      	ldr	r3, [r7, #0]
 800d00c:	69db      	ldr	r3, [r3, #28]
 800d00e:	431a      	orrs	r2, r3
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	430a      	orrs	r2, r1
 800d016:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	691a      	ldr	r2, [r3, #16]
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	f022 020f 	bic.w	r2, r2, #15
 800d026:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	6919      	ldr	r1, [r3, #16]
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	685a      	ldr	r2, [r3, #4]
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	430a      	orrs	r2, r1
 800d038:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	f022 020e 	bic.w	r2, r2, #14
 800d04a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 800d056:	683b      	ldr	r3, [r7, #0]
 800d058:	685b      	ldr	r3, [r3, #4]
 800d05a:	005a      	lsls	r2, r3, #1
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	430a      	orrs	r2, r1
 800d062:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 800d066:	683b      	ldr	r3, [r7, #0]
 800d068:	685b      	ldr	r3, [r3, #4]
 800d06a:	2b03      	cmp	r3, #3
 800d06c:	d110      	bne.n	800d090 <HAL_DSI_ConfigVideoMode+0x190>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	691a      	ldr	r2, [r3, #16]
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d07c:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	6919      	ldr	r1, [r3, #16]
 800d084:	683b      	ldr	r3, [r7, #0]
 800d086:	689a      	ldr	r2, [r3, #8]
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	430a      	orrs	r2, r1
 800d08e:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681a      	ldr	r2, [r3, #0]
 800d09a:	4b42      	ldr	r3, [pc, #264]	; (800d1a4 <HAL_DSI_ConfigVideoMode+0x2a4>)
 800d09c:	400b      	ands	r3, r1
 800d09e:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	430a      	orrs	r2, r1
 800d0b0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	681a      	ldr	r2, [r3, #0]
 800d0bc:	4b39      	ldr	r3, [pc, #228]	; (800d1a4 <HAL_DSI_ConfigVideoMode+0x2a4>)
 800d0be:	400b      	ands	r3, r1
 800d0c0:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d0c8:	683b      	ldr	r3, [r7, #0]
 800d0ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	430a      	orrs	r2, r1
 800d0d2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	681a      	ldr	r2, [r3, #0]
 800d0de:	4b32      	ldr	r3, [pc, #200]	; (800d1a8 <HAL_DSI_ConfigVideoMode+0x2a8>)
 800d0e0:	400b      	ands	r3, r1
 800d0e2:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800d0ea:	683b      	ldr	r3, [r7, #0]
 800d0ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	430a      	orrs	r2, r1
 800d0f4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681a      	ldr	r2, [r3, #0]
 800d100:	4b2a      	ldr	r3, [pc, #168]	; (800d1ac <HAL_DSI_ConfigVideoMode+0x2ac>)
 800d102:	400b      	ands	r3, r1
 800d104:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d10c:	683b      	ldr	r3, [r7, #0]
 800d10e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	430a      	orrs	r2, r1
 800d116:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	681a      	ldr	r2, [r3, #0]
 800d122:	4b22      	ldr	r3, [pc, #136]	; (800d1ac <HAL_DSI_ConfigVideoMode+0x2ac>)
 800d124:	400b      	ands	r3, r1
 800d126:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800d12e:	683b      	ldr	r3, [r7, #0]
 800d130:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	430a      	orrs	r2, r1
 800d138:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	681a      	ldr	r2, [r3, #0]
 800d144:	4b19      	ldr	r3, [pc, #100]	; (800d1ac <HAL_DSI_ConfigVideoMode+0x2ac>)
 800d146:	400b      	ands	r3, r1
 800d148:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800d150:	683b      	ldr	r3, [r7, #0]
 800d152:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	430a      	orrs	r2, r1
 800d15a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	681a      	ldr	r2, [r3, #0]
 800d166:	4b0d      	ldr	r3, [pc, #52]	; (800d19c <HAL_DSI_ConfigVideoMode+0x29c>)
 800d168:	400b      	ands	r3, r1
 800d16a:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800d172:	683b      	ldr	r3, [r7, #0]
 800d174:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	430a      	orrs	r2, r1
 800d17c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d18c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800d194:	683b      	ldr	r3, [r7, #0]
 800d196:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d198:	e00a      	b.n	800d1b0 <HAL_DSI_ConfigVideoMode+0x2b0>
 800d19a:	bf00      	nop
 800d19c:	ffffc000 	.word	0xffffc000
 800d1a0:	ffffe000 	.word	0xffffe000
 800d1a4:	fffff000 	.word	0xfffff000
 800d1a8:	ffff8000 	.word	0xffff8000
 800d1ac:	fffffc00 	.word	0xfffffc00
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	430a      	orrs	r2, r1
 800d1b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	699a      	ldr	r2, [r3, #24]
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 800d1c6:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	6999      	ldr	r1, [r3, #24]
 800d1ce:	683b      	ldr	r3, [r7, #0]
 800d1d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d1d2:	041a      	lsls	r2, r3, #16
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	430a      	orrs	r2, r1
 800d1da:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	699a      	ldr	r2, [r3, #24]
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800d1ea:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	6999      	ldr	r1, [r3, #24]
 800d1f2:	683b      	ldr	r3, [r7, #0]
 800d1f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	430a      	orrs	r2, r1
 800d1fc:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d20c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800d214:	683b      	ldr	r3, [r7, #0]
 800d216:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	430a      	orrs	r2, r1
 800d21e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d22e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800d236:	683b      	ldr	r3, [r7, #0]
 800d238:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	430a      	orrs	r2, r1
 800d240:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d250:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800d258:	683b      	ldr	r3, [r7, #0]
 800d25a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	430a      	orrs	r2, r1
 800d262:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d272:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800d27a:	683b      	ldr	r3, [r7, #0]
 800d27c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	430a      	orrs	r2, r1
 800d284:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800d294:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800d29c:	683b      	ldr	r3, [r7, #0]
 800d29e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	430a      	orrs	r2, r1
 800d2a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d2b6:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800d2be:	683b      	ldr	r3, [r7, #0]
 800d2c0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	430a      	orrs	r2, r1
 800d2c8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d2d8:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800d2e0:	683b      	ldr	r3, [r7, #0]
 800d2e2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	430a      	orrs	r2, r1
 800d2ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	2200      	movs	r2, #0
 800d2f0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800d2f2:	2300      	movs	r3, #0
}
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	370c      	adds	r7, #12
 800d2f8:	46bd      	mov	sp, r7
 800d2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2fe:	4770      	bx	lr

0800d300 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 800d300:	b480      	push	{r7}
 800d302:	b083      	sub	sp, #12
 800d304:	af00      	add	r7, sp, #0
 800d306:	6078      	str	r0, [r7, #4]
 800d308:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	7c1b      	ldrb	r3, [r3, #16]
 800d30e:	2b01      	cmp	r3, #1
 800d310:	d101      	bne.n	800d316 <HAL_DSI_ConfigFlowControl+0x16>
 800d312:	2302      	movs	r3, #2
 800d314:	e016      	b.n	800d344 <HAL_DSI_ConfigFlowControl+0x44>
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	2201      	movs	r2, #1
 800d31a:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	f022 021f 	bic.w	r2, r2, #31
 800d32a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	683a      	ldr	r2, [r7, #0]
 800d338:	430a      	orrs	r2, r1
 800d33a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	2200      	movs	r2, #0
 800d340:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800d342:	2300      	movs	r3, #0
}
 800d344:	4618      	mov	r0, r3
 800d346:	370c      	adds	r7, #12
 800d348:	46bd      	mov	sp, r7
 800d34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34e:	4770      	bx	lr

0800d350 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 800d350:	b480      	push	{r7}
 800d352:	b085      	sub	sp, #20
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	7c1b      	ldrb	r3, [r3, #16]
 800d35c:	2b01      	cmp	r3, #1
 800d35e:	d101      	bne.n	800d364 <HAL_DSI_Start+0x14>
 800d360:	2302      	movs	r3, #2
 800d362:	e02b      	b.n	800d3bc <HAL_DSI_Start+0x6c>
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	2201      	movs	r2, #1
 800d368:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 800d36a:	2300      	movs	r3, #0
 800d36c:	60fb      	str	r3, [r7, #12]
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	685a      	ldr	r2, [r3, #4]
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	f042 0201 	orr.w	r2, r2, #1
 800d37c:	605a      	str	r2, [r3, #4]
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	685b      	ldr	r3, [r3, #4]
 800d384:	f003 0301 	and.w	r3, r3, #1
 800d388:	60fb      	str	r3, [r7, #12]
 800d38a:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800d38c:	2300      	movs	r3, #0
 800d38e:	60bb      	str	r3, [r7, #8]
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	f042 0208 	orr.w	r2, r2, #8
 800d3a0:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d3ac:	f003 0308 	and.w	r3, r3, #8
 800d3b0:	60bb      	str	r3, [r7, #8]
 800d3b2:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800d3ba:	2300      	movs	r3, #0
}
 800d3bc:	4618      	mov	r0, r3
 800d3be:	3714      	adds	r7, #20
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c6:	4770      	bx	lr

0800d3c8 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b088      	sub	sp, #32
 800d3cc:	af02      	add	r7, sp, #8
 800d3ce:	60f8      	str	r0, [r7, #12]
 800d3d0:	60b9      	str	r1, [r7, #8]
 800d3d2:	607a      	str	r2, [r7, #4]
 800d3d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	7c1b      	ldrb	r3, [r3, #16]
 800d3da:	2b01      	cmp	r3, #1
 800d3dc:	d101      	bne.n	800d3e2 <HAL_DSI_ShortWrite+0x1a>
 800d3de:	2302      	movs	r3, #2
 800d3e0:	e010      	b.n	800d404 <HAL_DSI_ShortWrite+0x3c>
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	2201      	movs	r2, #1
 800d3e6:	741a      	strb	r2, [r3, #16]

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 800d3e8:	6a3b      	ldr	r3, [r7, #32]
 800d3ea:	9300      	str	r3, [sp, #0]
 800d3ec:	683b      	ldr	r3, [r7, #0]
 800d3ee:	687a      	ldr	r2, [r7, #4]
 800d3f0:	68b9      	ldr	r1, [r7, #8]
 800d3f2:	68f8      	ldr	r0, [r7, #12]
 800d3f4:	f7ff fc31 	bl	800cc5a <DSI_ShortWrite>
 800d3f8:	4603      	mov	r3, r0
 800d3fa:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	2200      	movs	r2, #0
 800d400:	741a      	strb	r2, [r3, #16]

  return status;
 800d402:	7dfb      	ldrb	r3, [r7, #23]
}
 800d404:	4618      	mov	r0, r3
 800d406:	3718      	adds	r7, #24
 800d408:	46bd      	mov	sp, r7
 800d40a:	bd80      	pop	{r7, pc}

0800d40c <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b08c      	sub	sp, #48	; 0x30
 800d410:	af02      	add	r7, sp, #8
 800d412:	60f8      	str	r0, [r7, #12]
 800d414:	60b9      	str	r1, [r7, #8]
 800d416:	607a      	str	r2, [r7, #4]
 800d418:	603b      	str	r3, [r7, #0]
  uint32_t uicounter, nbBytes, count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 800d41a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d41c:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	7c1b      	ldrb	r3, [r3, #16]
 800d422:	2b01      	cmp	r3, #1
 800d424:	d101      	bne.n	800d42a <HAL_DSI_LongWrite+0x1e>
 800d426:	2302      	movs	r3, #2
 800d428:	e084      	b.n	800d534 <HAL_DSI_LongWrite+0x128>
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	2201      	movs	r2, #1
 800d42e:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 800d430:	f7fb fde0 	bl	8008ff4 <HAL_GetTick>
 800d434:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800d436:	e00c      	b.n	800d452 <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800d438:	f7fb fddc 	bl	8008ff4 <HAL_GetTick>
 800d43c:	4602      	mov	r2, r0
 800d43e:	697b      	ldr	r3, [r7, #20]
 800d440:	1ad3      	subs	r3, r2, r3
 800d442:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d446:	d904      	bls.n	800d452 <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	2200      	movs	r2, #0
 800d44c:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 800d44e:	2303      	movs	r3, #3
 800d450:	e070      	b.n	800d534 <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d458:	f003 0301 	and.w	r3, r3, #1
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d0eb      	beq.n	800d438 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 800d460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d462:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 800d464:	683b      	ldr	r3, [r7, #0]
 800d466:	2b03      	cmp	r3, #3
 800d468:	bf28      	it	cs
 800d46a:	2303      	movcs	r3, #3
 800d46c:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 800d46e:	2300      	movs	r3, #0
 800d470:	623b      	str	r3, [r7, #32]
 800d472:	e00f      	b.n	800d494 <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 800d474:	69ba      	ldr	r2, [r7, #24]
 800d476:	6a3b      	ldr	r3, [r7, #32]
 800d478:	4413      	add	r3, r2
 800d47a:	781b      	ldrb	r3, [r3, #0]
 800d47c:	461a      	mov	r2, r3
 800d47e:	6a3b      	ldr	r3, [r7, #32]
 800d480:	3301      	adds	r3, #1
 800d482:	00db      	lsls	r3, r3, #3
 800d484:	fa02 f303 	lsl.w	r3, r2, r3
 800d488:	69fa      	ldr	r2, [r7, #28]
 800d48a:	4313      	orrs	r3, r2
 800d48c:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 800d48e:	6a3b      	ldr	r3, [r7, #32]
 800d490:	3301      	adds	r3, #1
 800d492:	623b      	str	r3, [r7, #32]
 800d494:	6a3a      	ldr	r2, [r7, #32]
 800d496:	693b      	ldr	r3, [r7, #16]
 800d498:	429a      	cmp	r2, r3
 800d49a:	d3eb      	bcc.n	800d474 <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	69fa      	ldr	r2, [r7, #28]
 800d4a2:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 800d4a4:	683a      	ldr	r2, [r7, #0]
 800d4a6:	693b      	ldr	r3, [r7, #16]
 800d4a8:	1ad3      	subs	r3, r2, r3
 800d4aa:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 800d4ac:	69ba      	ldr	r2, [r7, #24]
 800d4ae:	693b      	ldr	r3, [r7, #16]
 800d4b0:	4413      	add	r3, r2
 800d4b2:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 800d4b4:	e028      	b.n	800d508 <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800d4b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4b8:	2b04      	cmp	r3, #4
 800d4ba:	bf28      	it	cs
 800d4bc:	2304      	movcs	r3, #4
 800d4be:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	623b      	str	r3, [r7, #32]
 800d4c8:	e00e      	b.n	800d4e8 <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800d4ca:	69ba      	ldr	r2, [r7, #24]
 800d4cc:	6a3b      	ldr	r3, [r7, #32]
 800d4ce:	4413      	add	r3, r2
 800d4d0:	781b      	ldrb	r3, [r3, #0]
 800d4d2:	461a      	mov	r2, r3
 800d4d4:	6a3b      	ldr	r3, [r7, #32]
 800d4d6:	00db      	lsls	r3, r3, #3
 800d4d8:	fa02 f303 	lsl.w	r3, r2, r3
 800d4dc:	69fa      	ldr	r2, [r7, #28]
 800d4de:	4313      	orrs	r3, r2
 800d4e0:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 800d4e2:	6a3b      	ldr	r3, [r7, #32]
 800d4e4:	3301      	adds	r3, #1
 800d4e6:	623b      	str	r3, [r7, #32]
 800d4e8:	6a3a      	ldr	r2, [r7, #32]
 800d4ea:	693b      	ldr	r3, [r7, #16]
 800d4ec:	429a      	cmp	r2, r3
 800d4ee:	d3ec      	bcc.n	800d4ca <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	69fa      	ldr	r2, [r7, #28]
 800d4f6:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 800d4f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4fa:	693b      	ldr	r3, [r7, #16]
 800d4fc:	1ad3      	subs	r3, r2, r3
 800d4fe:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 800d500:	69ba      	ldr	r2, [r7, #24]
 800d502:	693b      	ldr	r3, [r7, #16]
 800d504:	4413      	add	r3, r2
 800d506:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 800d508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d1d3      	bne.n	800d4b6 <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 800d512:	683b      	ldr	r3, [r7, #0]
 800d514:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 800d516:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 800d518:	683b      	ldr	r3, [r7, #0]
 800d51a:	3301      	adds	r3, #1
 800d51c:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 800d51e:	b2db      	uxtb	r3, r3
 800d520:	9300      	str	r3, [sp, #0]
 800d522:	4613      	mov	r3, r2
 800d524:	687a      	ldr	r2, [r7, #4]
 800d526:	68b9      	ldr	r1, [r7, #8]
 800d528:	f7ff fb7e 	bl	800cc28 <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	2200      	movs	r2, #0
 800d530:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800d532:	2300      	movs	r3, #0
}
 800d534:	4618      	mov	r0, r3
 800d536:	3728      	adds	r7, #40	; 0x28
 800d538:	46bd      	mov	sp, r7
 800d53a:	bd80      	pop	{r7, pc}

0800d53c <HAL_DSI_Read>:
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable)
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	b08c      	sub	sp, #48	; 0x30
 800d540:	af02      	add	r7, sp, #8
 800d542:	60f8      	str	r0, [r7, #12]
 800d544:	60b9      	str	r1, [r7, #8]
 800d546:	607a      	str	r2, [r7, #4]
 800d548:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint8_t *pdata = Array;
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t datasize = Size;
 800d54e:	683b      	ldr	r3, [r7, #0]
 800d550:	623b      	str	r3, [r7, #32]
  uint32_t fifoword;
  uint32_t nbbytes;
  uint32_t count;

  /* Process locked */
  __HAL_LOCK(hdsi);
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	7c1b      	ldrb	r3, [r3, #16]
 800d556:	2b01      	cmp	r3, #1
 800d558:	d101      	bne.n	800d55e <HAL_DSI_Read+0x22>
 800d55a:	2302      	movs	r3, #2
 800d55c:	e09a      	b.n	800d694 <HAL_DSI_Read+0x158>
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	2201      	movs	r2, #1
 800d562:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_READ_PACKET_TYPE(Mode));

  if (datasize > 2U)
 800d564:	6a3b      	ldr	r3, [r7, #32]
 800d566:	2b02      	cmp	r3, #2
 800d568:	d913      	bls.n	800d592 <HAL_DSI_Read+0x56>
  {
    /* set max return packet size */
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 800d56a:	6a3b      	ldr	r3, [r7, #32]
 800d56c:	b2da      	uxtb	r2, r3
                           (((datasize) >> 8U) & 0xFFU)) != HAL_OK)
 800d56e:	6a3b      	ldr	r3, [r7, #32]
 800d570:	0a1b      	lsrs	r3, r3, #8
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 800d572:	b2db      	uxtb	r3, r3
 800d574:	9300      	str	r3, [sp, #0]
 800d576:	4613      	mov	r3, r2
 800d578:	2237      	movs	r2, #55	; 0x37
 800d57a:	68b9      	ldr	r1, [r7, #8]
 800d57c:	68f8      	ldr	r0, [r7, #12]
 800d57e:	f7ff fb6c 	bl	800cc5a <DSI_ShortWrite>
 800d582:	4603      	mov	r3, r0
 800d584:	2b00      	cmp	r3, #0
 800d586:	d004      	beq.n	800d592 <HAL_DSI_Read+0x56>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	2200      	movs	r2, #0
 800d58c:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 800d58e:	2301      	movs	r3, #1
 800d590:	e080      	b.n	800d694 <HAL_DSI_Read+0x158>
    }
  }

  /* Configure the packet to read command */
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 800d592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d594:	2b06      	cmp	r3, #6
 800d596:	d109      	bne.n	800d5ac <HAL_DSI_Read+0x70>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	6818      	ldr	r0, [r3, #0]
 800d59c:	2300      	movs	r3, #0
 800d59e:	9300      	str	r3, [sp, #0]
 800d5a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d5a4:	68b9      	ldr	r1, [r7, #8]
 800d5a6:	f7ff fb3f 	bl	800cc28 <DSI_ConfigPacketHeader>
 800d5aa:	e033      	b.n	800d614 <HAL_DSI_Read+0xd8>
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P0)
 800d5ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5ae:	2b04      	cmp	r3, #4
 800d5b0:	d109      	bne.n	800d5c6 <HAL_DSI_Read+0x8a>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	6818      	ldr	r0, [r3, #0]
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	9300      	str	r3, [sp, #0]
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d5be:	68b9      	ldr	r1, [r7, #8]
 800d5c0:	f7ff fb32 	bl	800cc28 <DSI_ConfigPacketHeader>
 800d5c4:	e026      	b.n	800d614 <HAL_DSI_Read+0xd8>
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P1)
 800d5c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5c8:	2b14      	cmp	r3, #20
 800d5ca:	d10c      	bne.n	800d5e6 <HAL_DSI_Read+0xaa>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	6818      	ldr	r0, [r3, #0]
 800d5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5d2:	781b      	ldrb	r3, [r3, #0]
 800d5d4:	461a      	mov	r2, r3
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	9300      	str	r3, [sp, #0]
 800d5da:	4613      	mov	r3, r2
 800d5dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d5de:	68b9      	ldr	r1, [r7, #8]
 800d5e0:	f7ff fb22 	bl	800cc28 <DSI_ConfigPacketHeader>
 800d5e4:	e016      	b.n	800d614 <HAL_DSI_Read+0xd8>
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P2)
 800d5e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5e8:	2b24      	cmp	r3, #36	; 0x24
 800d5ea:	d10e      	bne.n	800d60a <HAL_DSI_Read+0xce>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	6818      	ldr	r0, [r3, #0]
 800d5f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5f2:	781b      	ldrb	r3, [r3, #0]
 800d5f4:	461a      	mov	r2, r3
 800d5f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5f8:	3301      	adds	r3, #1
 800d5fa:	781b      	ldrb	r3, [r3, #0]
 800d5fc:	9300      	str	r3, [sp, #0]
 800d5fe:	4613      	mov	r3, r2
 800d600:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d602:	68b9      	ldr	r1, [r7, #8]
 800d604:	f7ff fb10 	bl	800cc28 <DSI_ConfigPacketHeader>
 800d608:	e004      	b.n	800d614 <HAL_DSI_Read+0xd8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdsi);
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	2200      	movs	r2, #0
 800d60e:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800d610:	2301      	movs	r3, #1
 800d612:	e03f      	b.n	800d694 <HAL_DSI_Read+0x158>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800d614:	f7fb fcee 	bl	8008ff4 <HAL_GetTick>
 800d618:	61b8      	str	r0, [r7, #24]

  /* If DSI fifo is not empty, read requested bytes */
  while (((int32_t)(datasize)) > 0)
 800d61a:	e034      	b.n	800d686 <HAL_DSI_Read+0x14a>
  {
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d622:	f003 0310 	and.w	r3, r3, #16
 800d626:	2b00      	cmp	r3, #0
 800d628:	d120      	bne.n	800d66c <HAL_DSI_Read+0x130>
    {
      fifoword = hdsi->Instance->GPDR;
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d630:	617b      	str	r3, [r7, #20]
      nbbytes = (datasize < 4U) ? datasize : 4U;
 800d632:	6a3b      	ldr	r3, [r7, #32]
 800d634:	2b04      	cmp	r3, #4
 800d636:	bf28      	it	cs
 800d638:	2304      	movcs	r3, #4
 800d63a:	613b      	str	r3, [r7, #16]

      for (count = 0U; count < nbbytes; count++)
 800d63c:	2300      	movs	r3, #0
 800d63e:	61fb      	str	r3, [r7, #28]
 800d640:	e010      	b.n	800d664 <HAL_DSI_Read+0x128>
      {
        *pdata = (uint8_t)(fifoword >> (8U * count));
 800d642:	69fb      	ldr	r3, [r7, #28]
 800d644:	00db      	lsls	r3, r3, #3
 800d646:	697a      	ldr	r2, [r7, #20]
 800d648:	fa22 f303 	lsr.w	r3, r2, r3
 800d64c:	b2da      	uxtb	r2, r3
 800d64e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d650:	701a      	strb	r2, [r3, #0]
        pdata++;
 800d652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d654:	3301      	adds	r3, #1
 800d656:	627b      	str	r3, [r7, #36]	; 0x24
        datasize--;
 800d658:	6a3b      	ldr	r3, [r7, #32]
 800d65a:	3b01      	subs	r3, #1
 800d65c:	623b      	str	r3, [r7, #32]
      for (count = 0U; count < nbbytes; count++)
 800d65e:	69fb      	ldr	r3, [r7, #28]
 800d660:	3301      	adds	r3, #1
 800d662:	61fb      	str	r3, [r7, #28]
 800d664:	69fa      	ldr	r2, [r7, #28]
 800d666:	693b      	ldr	r3, [r7, #16]
 800d668:	429a      	cmp	r2, r3
 800d66a:	d3ea      	bcc.n	800d642 <HAL_DSI_Read+0x106>
      }
    }

    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800d66c:	f7fb fcc2 	bl	8008ff4 <HAL_GetTick>
 800d670:	4602      	mov	r2, r0
 800d672:	69bb      	ldr	r3, [r7, #24]
 800d674:	1ad3      	subs	r3, r2, r3
 800d676:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d67a:	d904      	bls.n	800d686 <HAL_DSI_Read+0x14a>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	2200      	movs	r2, #0
 800d680:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 800d682:	2303      	movs	r3, #3
 800d684:	e006      	b.n	800d694 <HAL_DSI_Read+0x158>
  while (((int32_t)(datasize)) > 0)
 800d686:	6a3b      	ldr	r3, [r7, #32]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	dcc7      	bgt.n	800d61c <HAL_DSI_Read+0xe0>
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	2200      	movs	r2, #0
 800d690:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800d692:	2300      	movs	r3, #0
}
 800d694:	4618      	mov	r0, r3
 800d696:	3728      	adds	r7, #40	; 0x28
 800d698:	46bd      	mov	sp, r7
 800d69a:	bd80      	pop	{r7, pc}

0800d69c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800d69c:	b480      	push	{r7}
 800d69e:	b087      	sub	sp, #28
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	60f8      	str	r0, [r7, #12]
 800d6a4:	460b      	mov	r3, r1
 800d6a6:	607a      	str	r2, [r7, #4]
 800d6a8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d101      	bne.n	800d6b8 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800d6b4:	2301      	movs	r3, #1
 800d6b6:	e00a      	b.n	800d6ce <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 800d6b8:	7afb      	ldrb	r3, [r7, #11]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d103      	bne.n	800d6c6 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	687a      	ldr	r2, [r7, #4]
 800d6c2:	605a      	str	r2, [r3, #4]
      break;
 800d6c4:	e002      	b.n	800d6cc <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 800d6c6:	2301      	movs	r3, #1
 800d6c8:	75fb      	strb	r3, [r7, #23]
      break;
 800d6ca:	bf00      	nop
  }

  return status;
 800d6cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	371c      	adds	r7, #28
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d8:	4770      	bx	lr

0800d6da <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800d6da:	b480      	push	{r7}
 800d6dc:	b083      	sub	sp, #12
 800d6de:	af00      	add	r7, sp, #0
 800d6e0:	6078      	str	r0, [r7, #4]
 800d6e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d101      	bne.n	800d6ee <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800d6ea:	2301      	movs	r3, #1
 800d6ec:	e003      	b.n	800d6f6 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	683a      	ldr	r2, [r7, #0]
 800d6f2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800d6f4:	2300      	movs	r3, #0
  }
}
 800d6f6:	4618      	mov	r0, r3
 800d6f8:	370c      	adds	r7, #12
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d700:	4770      	bx	lr
	...

0800d704 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 800d704:	b580      	push	{r7, lr}
 800d706:	b086      	sub	sp, #24
 800d708:	af00      	add	r7, sp, #0
 800d70a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	0c1b      	lsrs	r3, r3, #16
 800d712:	f003 0303 	and.w	r3, r3, #3
 800d716:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	f003 031f 	and.w	r3, r3, #31
 800d720:	2201      	movs	r2, #1
 800d722:	fa02 f303 	lsl.w	r3, r2, r3
 800d726:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 800d728:	f7fb fe6e 	bl	8009408 <HAL_GetCurrentCPUID>
 800d72c:	4603      	mov	r3, r0
 800d72e:	2b03      	cmp	r3, #3
 800d730:	d105      	bne.n	800d73e <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 800d732:	693b      	ldr	r3, [r7, #16]
 800d734:	011a      	lsls	r2, r3, #4
 800d736:	4b0f      	ldr	r3, [pc, #60]	; (800d774 <HAL_EXTI_IRQHandler+0x70>)
 800d738:	4413      	add	r3, r2
 800d73a:	617b      	str	r3, [r7, #20]
 800d73c:	e004      	b.n	800d748 <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 800d73e:	693b      	ldr	r3, [r7, #16]
 800d740:	011a      	lsls	r2, r3, #4
 800d742:	4b0d      	ldr	r3, [pc, #52]	; (800d778 <HAL_EXTI_IRQHandler+0x74>)
 800d744:	4413      	add	r3, r2
 800d746:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 800d748:	697b      	ldr	r3, [r7, #20]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	68fa      	ldr	r2, [r7, #12]
 800d74e:	4013      	ands	r3, r2
 800d750:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 800d752:	68bb      	ldr	r3, [r7, #8]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d009      	beq.n	800d76c <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800d758:	697b      	ldr	r3, [r7, #20]
 800d75a:	68fa      	ldr	r2, [r7, #12]
 800d75c:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	685b      	ldr	r3, [r3, #4]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d002      	beq.n	800d76c <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	685b      	ldr	r3, [r3, #4]
 800d76a:	4798      	blx	r3
    }
  }
}
 800d76c:	bf00      	nop
 800d76e:	3718      	adds	r7, #24
 800d770:	46bd      	mov	sp, r7
 800d772:	bd80      	pop	{r7, pc}
 800d774:	58000088 	.word	0x58000088
 800d778:	580000c8 	.word	0x580000c8

0800d77c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800d77c:	b480      	push	{r7}
 800d77e:	b089      	sub	sp, #36	; 0x24
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
 800d784:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800d786:	2300      	movs	r3, #0
 800d788:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800d78a:	4b89      	ldr	r3, [pc, #548]	; (800d9b0 <HAL_GPIO_Init+0x234>)
 800d78c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800d78e:	e194      	b.n	800daba <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800d790:	683b      	ldr	r3, [r7, #0]
 800d792:	681a      	ldr	r2, [r3, #0]
 800d794:	2101      	movs	r1, #1
 800d796:	69fb      	ldr	r3, [r7, #28]
 800d798:	fa01 f303 	lsl.w	r3, r1, r3
 800d79c:	4013      	ands	r3, r2
 800d79e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800d7a0:	693b      	ldr	r3, [r7, #16]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	f000 8186 	beq.w	800dab4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800d7a8:	683b      	ldr	r3, [r7, #0]
 800d7aa:	685b      	ldr	r3, [r3, #4]
 800d7ac:	2b01      	cmp	r3, #1
 800d7ae:	d00b      	beq.n	800d7c8 <HAL_GPIO_Init+0x4c>
 800d7b0:	683b      	ldr	r3, [r7, #0]
 800d7b2:	685b      	ldr	r3, [r3, #4]
 800d7b4:	2b02      	cmp	r3, #2
 800d7b6:	d007      	beq.n	800d7c8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800d7b8:	683b      	ldr	r3, [r7, #0]
 800d7ba:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800d7bc:	2b11      	cmp	r3, #17
 800d7be:	d003      	beq.n	800d7c8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800d7c0:	683b      	ldr	r3, [r7, #0]
 800d7c2:	685b      	ldr	r3, [r3, #4]
 800d7c4:	2b12      	cmp	r3, #18
 800d7c6:	d130      	bne.n	800d82a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	689b      	ldr	r3, [r3, #8]
 800d7cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800d7ce:	69fb      	ldr	r3, [r7, #28]
 800d7d0:	005b      	lsls	r3, r3, #1
 800d7d2:	2203      	movs	r2, #3
 800d7d4:	fa02 f303 	lsl.w	r3, r2, r3
 800d7d8:	43db      	mvns	r3, r3
 800d7da:	69ba      	ldr	r2, [r7, #24]
 800d7dc:	4013      	ands	r3, r2
 800d7de:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800d7e0:	683b      	ldr	r3, [r7, #0]
 800d7e2:	68da      	ldr	r2, [r3, #12]
 800d7e4:	69fb      	ldr	r3, [r7, #28]
 800d7e6:	005b      	lsls	r3, r3, #1
 800d7e8:	fa02 f303 	lsl.w	r3, r2, r3
 800d7ec:	69ba      	ldr	r2, [r7, #24]
 800d7ee:	4313      	orrs	r3, r2
 800d7f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	69ba      	ldr	r2, [r7, #24]
 800d7f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	685b      	ldr	r3, [r3, #4]
 800d7fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800d7fe:	2201      	movs	r2, #1
 800d800:	69fb      	ldr	r3, [r7, #28]
 800d802:	fa02 f303 	lsl.w	r3, r2, r3
 800d806:	43db      	mvns	r3, r3
 800d808:	69ba      	ldr	r2, [r7, #24]
 800d80a:	4013      	ands	r3, r2
 800d80c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800d80e:	683b      	ldr	r3, [r7, #0]
 800d810:	685b      	ldr	r3, [r3, #4]
 800d812:	091b      	lsrs	r3, r3, #4
 800d814:	f003 0201 	and.w	r2, r3, #1
 800d818:	69fb      	ldr	r3, [r7, #28]
 800d81a:	fa02 f303 	lsl.w	r3, r2, r3
 800d81e:	69ba      	ldr	r2, [r7, #24]
 800d820:	4313      	orrs	r3, r2
 800d822:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	69ba      	ldr	r2, [r7, #24]
 800d828:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	68db      	ldr	r3, [r3, #12]
 800d82e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800d830:	69fb      	ldr	r3, [r7, #28]
 800d832:	005b      	lsls	r3, r3, #1
 800d834:	2203      	movs	r2, #3
 800d836:	fa02 f303 	lsl.w	r3, r2, r3
 800d83a:	43db      	mvns	r3, r3
 800d83c:	69ba      	ldr	r2, [r7, #24]
 800d83e:	4013      	ands	r3, r2
 800d840:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800d842:	683b      	ldr	r3, [r7, #0]
 800d844:	689a      	ldr	r2, [r3, #8]
 800d846:	69fb      	ldr	r3, [r7, #28]
 800d848:	005b      	lsls	r3, r3, #1
 800d84a:	fa02 f303 	lsl.w	r3, r2, r3
 800d84e:	69ba      	ldr	r2, [r7, #24]
 800d850:	4313      	orrs	r3, r2
 800d852:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	69ba      	ldr	r2, [r7, #24]
 800d858:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800d85a:	683b      	ldr	r3, [r7, #0]
 800d85c:	685b      	ldr	r3, [r3, #4]
 800d85e:	2b02      	cmp	r3, #2
 800d860:	d003      	beq.n	800d86a <HAL_GPIO_Init+0xee>
 800d862:	683b      	ldr	r3, [r7, #0]
 800d864:	685b      	ldr	r3, [r3, #4]
 800d866:	2b12      	cmp	r3, #18
 800d868:	d123      	bne.n	800d8b2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800d86a:	69fb      	ldr	r3, [r7, #28]
 800d86c:	08da      	lsrs	r2, r3, #3
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	3208      	adds	r2, #8
 800d872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d876:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800d878:	69fb      	ldr	r3, [r7, #28]
 800d87a:	f003 0307 	and.w	r3, r3, #7
 800d87e:	009b      	lsls	r3, r3, #2
 800d880:	220f      	movs	r2, #15
 800d882:	fa02 f303 	lsl.w	r3, r2, r3
 800d886:	43db      	mvns	r3, r3
 800d888:	69ba      	ldr	r2, [r7, #24]
 800d88a:	4013      	ands	r3, r2
 800d88c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800d88e:	683b      	ldr	r3, [r7, #0]
 800d890:	691a      	ldr	r2, [r3, #16]
 800d892:	69fb      	ldr	r3, [r7, #28]
 800d894:	f003 0307 	and.w	r3, r3, #7
 800d898:	009b      	lsls	r3, r3, #2
 800d89a:	fa02 f303 	lsl.w	r3, r2, r3
 800d89e:	69ba      	ldr	r2, [r7, #24]
 800d8a0:	4313      	orrs	r3, r2
 800d8a2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800d8a4:	69fb      	ldr	r3, [r7, #28]
 800d8a6:	08da      	lsrs	r2, r3, #3
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	3208      	adds	r2, #8
 800d8ac:	69b9      	ldr	r1, [r7, #24]
 800d8ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800d8b8:	69fb      	ldr	r3, [r7, #28]
 800d8ba:	005b      	lsls	r3, r3, #1
 800d8bc:	2203      	movs	r2, #3
 800d8be:	fa02 f303 	lsl.w	r3, r2, r3
 800d8c2:	43db      	mvns	r3, r3
 800d8c4:	69ba      	ldr	r2, [r7, #24]
 800d8c6:	4013      	ands	r3, r2
 800d8c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800d8ca:	683b      	ldr	r3, [r7, #0]
 800d8cc:	685b      	ldr	r3, [r3, #4]
 800d8ce:	f003 0203 	and.w	r2, r3, #3
 800d8d2:	69fb      	ldr	r3, [r7, #28]
 800d8d4:	005b      	lsls	r3, r3, #1
 800d8d6:	fa02 f303 	lsl.w	r3, r2, r3
 800d8da:	69ba      	ldr	r2, [r7, #24]
 800d8dc:	4313      	orrs	r3, r2
 800d8de:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	69ba      	ldr	r2, [r7, #24]
 800d8e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800d8e6:	683b      	ldr	r3, [r7, #0]
 800d8e8:	685b      	ldr	r3, [r3, #4]
 800d8ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	f000 80e0 	beq.w	800dab4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d8f4:	4b2f      	ldr	r3, [pc, #188]	; (800d9b4 <HAL_GPIO_Init+0x238>)
 800d8f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d8fa:	4a2e      	ldr	r2, [pc, #184]	; (800d9b4 <HAL_GPIO_Init+0x238>)
 800d8fc:	f043 0302 	orr.w	r3, r3, #2
 800d900:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800d904:	4b2b      	ldr	r3, [pc, #172]	; (800d9b4 <HAL_GPIO_Init+0x238>)
 800d906:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d90a:	f003 0302 	and.w	r3, r3, #2
 800d90e:	60fb      	str	r3, [r7, #12]
 800d910:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800d912:	4a29      	ldr	r2, [pc, #164]	; (800d9b8 <HAL_GPIO_Init+0x23c>)
 800d914:	69fb      	ldr	r3, [r7, #28]
 800d916:	089b      	lsrs	r3, r3, #2
 800d918:	3302      	adds	r3, #2
 800d91a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d91e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800d920:	69fb      	ldr	r3, [r7, #28]
 800d922:	f003 0303 	and.w	r3, r3, #3
 800d926:	009b      	lsls	r3, r3, #2
 800d928:	220f      	movs	r2, #15
 800d92a:	fa02 f303 	lsl.w	r3, r2, r3
 800d92e:	43db      	mvns	r3, r3
 800d930:	69ba      	ldr	r2, [r7, #24]
 800d932:	4013      	ands	r3, r2
 800d934:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	4a20      	ldr	r2, [pc, #128]	; (800d9bc <HAL_GPIO_Init+0x240>)
 800d93a:	4293      	cmp	r3, r2
 800d93c:	d052      	beq.n	800d9e4 <HAL_GPIO_Init+0x268>
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	4a1f      	ldr	r2, [pc, #124]	; (800d9c0 <HAL_GPIO_Init+0x244>)
 800d942:	4293      	cmp	r3, r2
 800d944:	d031      	beq.n	800d9aa <HAL_GPIO_Init+0x22e>
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	4a1e      	ldr	r2, [pc, #120]	; (800d9c4 <HAL_GPIO_Init+0x248>)
 800d94a:	4293      	cmp	r3, r2
 800d94c:	d02b      	beq.n	800d9a6 <HAL_GPIO_Init+0x22a>
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	4a1d      	ldr	r2, [pc, #116]	; (800d9c8 <HAL_GPIO_Init+0x24c>)
 800d952:	4293      	cmp	r3, r2
 800d954:	d025      	beq.n	800d9a2 <HAL_GPIO_Init+0x226>
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	4a1c      	ldr	r2, [pc, #112]	; (800d9cc <HAL_GPIO_Init+0x250>)
 800d95a:	4293      	cmp	r3, r2
 800d95c:	d01f      	beq.n	800d99e <HAL_GPIO_Init+0x222>
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	4a1b      	ldr	r2, [pc, #108]	; (800d9d0 <HAL_GPIO_Init+0x254>)
 800d962:	4293      	cmp	r3, r2
 800d964:	d019      	beq.n	800d99a <HAL_GPIO_Init+0x21e>
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	4a1a      	ldr	r2, [pc, #104]	; (800d9d4 <HAL_GPIO_Init+0x258>)
 800d96a:	4293      	cmp	r3, r2
 800d96c:	d013      	beq.n	800d996 <HAL_GPIO_Init+0x21a>
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	4a19      	ldr	r2, [pc, #100]	; (800d9d8 <HAL_GPIO_Init+0x25c>)
 800d972:	4293      	cmp	r3, r2
 800d974:	d00d      	beq.n	800d992 <HAL_GPIO_Init+0x216>
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	4a18      	ldr	r2, [pc, #96]	; (800d9dc <HAL_GPIO_Init+0x260>)
 800d97a:	4293      	cmp	r3, r2
 800d97c:	d007      	beq.n	800d98e <HAL_GPIO_Init+0x212>
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	4a17      	ldr	r2, [pc, #92]	; (800d9e0 <HAL_GPIO_Init+0x264>)
 800d982:	4293      	cmp	r3, r2
 800d984:	d101      	bne.n	800d98a <HAL_GPIO_Init+0x20e>
 800d986:	2309      	movs	r3, #9
 800d988:	e02d      	b.n	800d9e6 <HAL_GPIO_Init+0x26a>
 800d98a:	230a      	movs	r3, #10
 800d98c:	e02b      	b.n	800d9e6 <HAL_GPIO_Init+0x26a>
 800d98e:	2308      	movs	r3, #8
 800d990:	e029      	b.n	800d9e6 <HAL_GPIO_Init+0x26a>
 800d992:	2307      	movs	r3, #7
 800d994:	e027      	b.n	800d9e6 <HAL_GPIO_Init+0x26a>
 800d996:	2306      	movs	r3, #6
 800d998:	e025      	b.n	800d9e6 <HAL_GPIO_Init+0x26a>
 800d99a:	2305      	movs	r3, #5
 800d99c:	e023      	b.n	800d9e6 <HAL_GPIO_Init+0x26a>
 800d99e:	2304      	movs	r3, #4
 800d9a0:	e021      	b.n	800d9e6 <HAL_GPIO_Init+0x26a>
 800d9a2:	2303      	movs	r3, #3
 800d9a4:	e01f      	b.n	800d9e6 <HAL_GPIO_Init+0x26a>
 800d9a6:	2302      	movs	r3, #2
 800d9a8:	e01d      	b.n	800d9e6 <HAL_GPIO_Init+0x26a>
 800d9aa:	2301      	movs	r3, #1
 800d9ac:	e01b      	b.n	800d9e6 <HAL_GPIO_Init+0x26a>
 800d9ae:	bf00      	nop
 800d9b0:	58000080 	.word	0x58000080
 800d9b4:	58024400 	.word	0x58024400
 800d9b8:	58000400 	.word	0x58000400
 800d9bc:	58020000 	.word	0x58020000
 800d9c0:	58020400 	.word	0x58020400
 800d9c4:	58020800 	.word	0x58020800
 800d9c8:	58020c00 	.word	0x58020c00
 800d9cc:	58021000 	.word	0x58021000
 800d9d0:	58021400 	.word	0x58021400
 800d9d4:	58021800 	.word	0x58021800
 800d9d8:	58021c00 	.word	0x58021c00
 800d9dc:	58022000 	.word	0x58022000
 800d9e0:	58022400 	.word	0x58022400
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	69fa      	ldr	r2, [r7, #28]
 800d9e8:	f002 0203 	and.w	r2, r2, #3
 800d9ec:	0092      	lsls	r2, r2, #2
 800d9ee:	4093      	lsls	r3, r2
 800d9f0:	69ba      	ldr	r2, [r7, #24]
 800d9f2:	4313      	orrs	r3, r2
 800d9f4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800d9f6:	4938      	ldr	r1, [pc, #224]	; (800dad8 <HAL_GPIO_Init+0x35c>)
 800d9f8:	69fb      	ldr	r3, [r7, #28]
 800d9fa:	089b      	lsrs	r3, r3, #2
 800d9fc:	3302      	adds	r3, #2
 800d9fe:	69ba      	ldr	r2, [r7, #24]
 800da00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800da04:	697b      	ldr	r3, [r7, #20]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800da0a:	693b      	ldr	r3, [r7, #16]
 800da0c:	43db      	mvns	r3, r3
 800da0e:	69ba      	ldr	r2, [r7, #24]
 800da10:	4013      	ands	r3, r2
 800da12:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800da14:	683b      	ldr	r3, [r7, #0]
 800da16:	685b      	ldr	r3, [r3, #4]
 800da18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d003      	beq.n	800da28 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800da20:	69ba      	ldr	r2, [r7, #24]
 800da22:	693b      	ldr	r3, [r7, #16]
 800da24:	4313      	orrs	r3, r2
 800da26:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800da28:	697b      	ldr	r3, [r7, #20]
 800da2a:	69ba      	ldr	r2, [r7, #24]
 800da2c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800da2e:	697b      	ldr	r3, [r7, #20]
 800da30:	685b      	ldr	r3, [r3, #4]
 800da32:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800da34:	693b      	ldr	r3, [r7, #16]
 800da36:	43db      	mvns	r3, r3
 800da38:	69ba      	ldr	r2, [r7, #24]
 800da3a:	4013      	ands	r3, r2
 800da3c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800da3e:	683b      	ldr	r3, [r7, #0]
 800da40:	685b      	ldr	r3, [r3, #4]
 800da42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800da46:	2b00      	cmp	r3, #0
 800da48:	d003      	beq.n	800da52 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800da4a:	69ba      	ldr	r2, [r7, #24]
 800da4c:	693b      	ldr	r3, [r7, #16]
 800da4e:	4313      	orrs	r3, r2
 800da50:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800da52:	697b      	ldr	r3, [r7, #20]
 800da54:	69ba      	ldr	r2, [r7, #24]
 800da56:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800da58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800da60:	693b      	ldr	r3, [r7, #16]
 800da62:	43db      	mvns	r3, r3
 800da64:	69ba      	ldr	r2, [r7, #24]
 800da66:	4013      	ands	r3, r2
 800da68:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800da6a:	683b      	ldr	r3, [r7, #0]
 800da6c:	685b      	ldr	r3, [r3, #4]
 800da6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800da72:	2b00      	cmp	r3, #0
 800da74:	d003      	beq.n	800da7e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800da76:	69ba      	ldr	r2, [r7, #24]
 800da78:	693b      	ldr	r3, [r7, #16]
 800da7a:	4313      	orrs	r3, r2
 800da7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800da7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800da82:	69bb      	ldr	r3, [r7, #24]
 800da84:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800da86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800da8a:	685b      	ldr	r3, [r3, #4]
 800da8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800da8e:	693b      	ldr	r3, [r7, #16]
 800da90:	43db      	mvns	r3, r3
 800da92:	69ba      	ldr	r2, [r7, #24]
 800da94:	4013      	ands	r3, r2
 800da96:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800da98:	683b      	ldr	r3, [r7, #0]
 800da9a:	685b      	ldr	r3, [r3, #4]
 800da9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d003      	beq.n	800daac <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 800daa4:	69ba      	ldr	r2, [r7, #24]
 800daa6:	693b      	ldr	r3, [r7, #16]
 800daa8:	4313      	orrs	r3, r2
 800daaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800daac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800dab0:	69bb      	ldr	r3, [r7, #24]
 800dab2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800dab4:	69fb      	ldr	r3, [r7, #28]
 800dab6:	3301      	adds	r3, #1
 800dab8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800daba:	683b      	ldr	r3, [r7, #0]
 800dabc:	681a      	ldr	r2, [r3, #0]
 800dabe:	69fb      	ldr	r3, [r7, #28]
 800dac0:	fa22 f303 	lsr.w	r3, r2, r3
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	f47f ae63 	bne.w	800d790 <HAL_GPIO_Init+0x14>
  }
}
 800daca:	bf00      	nop
 800dacc:	bf00      	nop
 800dace:	3724      	adds	r7, #36	; 0x24
 800dad0:	46bd      	mov	sp, r7
 800dad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad6:	4770      	bx	lr
 800dad8:	58000400 	.word	0x58000400

0800dadc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800dadc:	b480      	push	{r7}
 800dade:	b087      	sub	sp, #28
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]
 800dae4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800dae6:	2300      	movs	r3, #0
 800dae8:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800daea:	4b75      	ldr	r3, [pc, #468]	; (800dcc0 <HAL_GPIO_DeInit+0x1e4>)
 800daec:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800daee:	e0d9      	b.n	800dca4 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 800daf0:	2201      	movs	r2, #1
 800daf2:	697b      	ldr	r3, [r7, #20]
 800daf4:	fa02 f303 	lsl.w	r3, r2, r3
 800daf8:	683a      	ldr	r2, [r7, #0]
 800dafa:	4013      	ands	r3, r2
 800dafc:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	2b00      	cmp	r3, #0
 800db02:	f000 80cc 	beq.w	800dc9e <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800db06:	4a6f      	ldr	r2, [pc, #444]	; (800dcc4 <HAL_GPIO_DeInit+0x1e8>)
 800db08:	697b      	ldr	r3, [r7, #20]
 800db0a:	089b      	lsrs	r3, r3, #2
 800db0c:	3302      	adds	r3, #2
 800db0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db12:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800db14:	697b      	ldr	r3, [r7, #20]
 800db16:	f003 0303 	and.w	r3, r3, #3
 800db1a:	009b      	lsls	r3, r3, #2
 800db1c:	220f      	movs	r2, #15
 800db1e:	fa02 f303 	lsl.w	r3, r2, r3
 800db22:	68ba      	ldr	r2, [r7, #8]
 800db24:	4013      	ands	r3, r2
 800db26:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	4a67      	ldr	r2, [pc, #412]	; (800dcc8 <HAL_GPIO_DeInit+0x1ec>)
 800db2c:	4293      	cmp	r3, r2
 800db2e:	d037      	beq.n	800dba0 <HAL_GPIO_DeInit+0xc4>
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	4a66      	ldr	r2, [pc, #408]	; (800dccc <HAL_GPIO_DeInit+0x1f0>)
 800db34:	4293      	cmp	r3, r2
 800db36:	d031      	beq.n	800db9c <HAL_GPIO_DeInit+0xc0>
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	4a65      	ldr	r2, [pc, #404]	; (800dcd0 <HAL_GPIO_DeInit+0x1f4>)
 800db3c:	4293      	cmp	r3, r2
 800db3e:	d02b      	beq.n	800db98 <HAL_GPIO_DeInit+0xbc>
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	4a64      	ldr	r2, [pc, #400]	; (800dcd4 <HAL_GPIO_DeInit+0x1f8>)
 800db44:	4293      	cmp	r3, r2
 800db46:	d025      	beq.n	800db94 <HAL_GPIO_DeInit+0xb8>
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	4a63      	ldr	r2, [pc, #396]	; (800dcd8 <HAL_GPIO_DeInit+0x1fc>)
 800db4c:	4293      	cmp	r3, r2
 800db4e:	d01f      	beq.n	800db90 <HAL_GPIO_DeInit+0xb4>
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	4a62      	ldr	r2, [pc, #392]	; (800dcdc <HAL_GPIO_DeInit+0x200>)
 800db54:	4293      	cmp	r3, r2
 800db56:	d019      	beq.n	800db8c <HAL_GPIO_DeInit+0xb0>
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	4a61      	ldr	r2, [pc, #388]	; (800dce0 <HAL_GPIO_DeInit+0x204>)
 800db5c:	4293      	cmp	r3, r2
 800db5e:	d013      	beq.n	800db88 <HAL_GPIO_DeInit+0xac>
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	4a60      	ldr	r2, [pc, #384]	; (800dce4 <HAL_GPIO_DeInit+0x208>)
 800db64:	4293      	cmp	r3, r2
 800db66:	d00d      	beq.n	800db84 <HAL_GPIO_DeInit+0xa8>
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	4a5f      	ldr	r2, [pc, #380]	; (800dce8 <HAL_GPIO_DeInit+0x20c>)
 800db6c:	4293      	cmp	r3, r2
 800db6e:	d007      	beq.n	800db80 <HAL_GPIO_DeInit+0xa4>
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	4a5e      	ldr	r2, [pc, #376]	; (800dcec <HAL_GPIO_DeInit+0x210>)
 800db74:	4293      	cmp	r3, r2
 800db76:	d101      	bne.n	800db7c <HAL_GPIO_DeInit+0xa0>
 800db78:	2309      	movs	r3, #9
 800db7a:	e012      	b.n	800dba2 <HAL_GPIO_DeInit+0xc6>
 800db7c:	230a      	movs	r3, #10
 800db7e:	e010      	b.n	800dba2 <HAL_GPIO_DeInit+0xc6>
 800db80:	2308      	movs	r3, #8
 800db82:	e00e      	b.n	800dba2 <HAL_GPIO_DeInit+0xc6>
 800db84:	2307      	movs	r3, #7
 800db86:	e00c      	b.n	800dba2 <HAL_GPIO_DeInit+0xc6>
 800db88:	2306      	movs	r3, #6
 800db8a:	e00a      	b.n	800dba2 <HAL_GPIO_DeInit+0xc6>
 800db8c:	2305      	movs	r3, #5
 800db8e:	e008      	b.n	800dba2 <HAL_GPIO_DeInit+0xc6>
 800db90:	2304      	movs	r3, #4
 800db92:	e006      	b.n	800dba2 <HAL_GPIO_DeInit+0xc6>
 800db94:	2303      	movs	r3, #3
 800db96:	e004      	b.n	800dba2 <HAL_GPIO_DeInit+0xc6>
 800db98:	2302      	movs	r3, #2
 800db9a:	e002      	b.n	800dba2 <HAL_GPIO_DeInit+0xc6>
 800db9c:	2301      	movs	r3, #1
 800db9e:	e000      	b.n	800dba2 <HAL_GPIO_DeInit+0xc6>
 800dba0:	2300      	movs	r3, #0
 800dba2:	697a      	ldr	r2, [r7, #20]
 800dba4:	f002 0203 	and.w	r2, r2, #3
 800dba8:	0092      	lsls	r2, r2, #2
 800dbaa:	4093      	lsls	r3, r2
 800dbac:	68ba      	ldr	r2, [r7, #8]
 800dbae:	429a      	cmp	r2, r3
 800dbb0:	d136      	bne.n	800dc20 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800dbb2:	693b      	ldr	r3, [r7, #16]
 800dbb4:	681a      	ldr	r2, [r3, #0]
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	43db      	mvns	r3, r3
 800dbba:	401a      	ands	r2, r3
 800dbbc:	693b      	ldr	r3, [r7, #16]
 800dbbe:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800dbc0:	693b      	ldr	r3, [r7, #16]
 800dbc2:	685a      	ldr	r2, [r3, #4]
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	43db      	mvns	r3, r3
 800dbc8:	401a      	ands	r2, r3
 800dbca:	693b      	ldr	r3, [r7, #16]
 800dbcc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800dbce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dbd2:	681a      	ldr	r2, [r3, #0]
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	43db      	mvns	r3, r3
 800dbd8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800dbdc:	4013      	ands	r3, r2
 800dbde:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800dbe0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dbe4:	685a      	ldr	r2, [r3, #4]
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	43db      	mvns	r3, r3
 800dbea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800dbee:	4013      	ands	r3, r2
 800dbf0:	604b      	str	r3, [r1, #4]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800dbf2:	697b      	ldr	r3, [r7, #20]
 800dbf4:	f003 0303 	and.w	r3, r3, #3
 800dbf8:	009b      	lsls	r3, r3, #2
 800dbfa:	220f      	movs	r2, #15
 800dbfc:	fa02 f303 	lsl.w	r3, r2, r3
 800dc00:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800dc02:	4a30      	ldr	r2, [pc, #192]	; (800dcc4 <HAL_GPIO_DeInit+0x1e8>)
 800dc04:	697b      	ldr	r3, [r7, #20]
 800dc06:	089b      	lsrs	r3, r3, #2
 800dc08:	3302      	adds	r3, #2
 800dc0a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800dc0e:	68bb      	ldr	r3, [r7, #8]
 800dc10:	43da      	mvns	r2, r3
 800dc12:	482c      	ldr	r0, [pc, #176]	; (800dcc4 <HAL_GPIO_DeInit+0x1e8>)
 800dc14:	697b      	ldr	r3, [r7, #20]
 800dc16:	089b      	lsrs	r3, r3, #2
 800dc18:	400a      	ands	r2, r1
 800dc1a:	3302      	adds	r3, #2
 800dc1c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	681a      	ldr	r2, [r3, #0]
 800dc24:	697b      	ldr	r3, [r7, #20]
 800dc26:	005b      	lsls	r3, r3, #1
 800dc28:	2103      	movs	r1, #3
 800dc2a:	fa01 f303 	lsl.w	r3, r1, r3
 800dc2e:	431a      	orrs	r2, r3
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800dc34:	697b      	ldr	r3, [r7, #20]
 800dc36:	08da      	lsrs	r2, r3, #3
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	3208      	adds	r2, #8
 800dc3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dc40:	697b      	ldr	r3, [r7, #20]
 800dc42:	f003 0307 	and.w	r3, r3, #7
 800dc46:	009b      	lsls	r3, r3, #2
 800dc48:	220f      	movs	r2, #15
 800dc4a:	fa02 f303 	lsl.w	r3, r2, r3
 800dc4e:	43db      	mvns	r3, r3
 800dc50:	697a      	ldr	r2, [r7, #20]
 800dc52:	08d2      	lsrs	r2, r2, #3
 800dc54:	4019      	ands	r1, r3
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	3208      	adds	r2, #8
 800dc5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	68da      	ldr	r2, [r3, #12]
 800dc62:	697b      	ldr	r3, [r7, #20]
 800dc64:	005b      	lsls	r3, r3, #1
 800dc66:	2103      	movs	r1, #3
 800dc68:	fa01 f303 	lsl.w	r3, r1, r3
 800dc6c:	43db      	mvns	r3, r3
 800dc6e:	401a      	ands	r2, r3
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	685a      	ldr	r2, [r3, #4]
 800dc78:	2101      	movs	r1, #1
 800dc7a:	697b      	ldr	r3, [r7, #20]
 800dc7c:	fa01 f303 	lsl.w	r3, r1, r3
 800dc80:	43db      	mvns	r3, r3
 800dc82:	401a      	ands	r2, r3
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	689a      	ldr	r2, [r3, #8]
 800dc8c:	697b      	ldr	r3, [r7, #20]
 800dc8e:	005b      	lsls	r3, r3, #1
 800dc90:	2103      	movs	r1, #3
 800dc92:	fa01 f303 	lsl.w	r3, r1, r3
 800dc96:	43db      	mvns	r3, r3
 800dc98:	401a      	ands	r2, r3
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	609a      	str	r2, [r3, #8]
    }

    position++;
 800dc9e:	697b      	ldr	r3, [r7, #20]
 800dca0:	3301      	adds	r3, #1
 800dca2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 800dca4:	683a      	ldr	r2, [r7, #0]
 800dca6:	697b      	ldr	r3, [r7, #20]
 800dca8:	fa22 f303 	lsr.w	r3, r2, r3
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	f47f af1f 	bne.w	800daf0 <HAL_GPIO_DeInit+0x14>
  }
}
 800dcb2:	bf00      	nop
 800dcb4:	bf00      	nop
 800dcb6:	371c      	adds	r7, #28
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcbe:	4770      	bx	lr
 800dcc0:	58000080 	.word	0x58000080
 800dcc4:	58000400 	.word	0x58000400
 800dcc8:	58020000 	.word	0x58020000
 800dccc:	58020400 	.word	0x58020400
 800dcd0:	58020800 	.word	0x58020800
 800dcd4:	58020c00 	.word	0x58020c00
 800dcd8:	58021000 	.word	0x58021000
 800dcdc:	58021400 	.word	0x58021400
 800dce0:	58021800 	.word	0x58021800
 800dce4:	58021c00 	.word	0x58021c00
 800dce8:	58022000 	.word	0x58022000
 800dcec:	58022400 	.word	0x58022400

0800dcf0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800dcf0:	b480      	push	{r7}
 800dcf2:	b085      	sub	sp, #20
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	6078      	str	r0, [r7, #4]
 800dcf8:	460b      	mov	r3, r1
 800dcfa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	691a      	ldr	r2, [r3, #16]
 800dd00:	887b      	ldrh	r3, [r7, #2]
 800dd02:	4013      	ands	r3, r2
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d002      	beq.n	800dd0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800dd08:	2301      	movs	r3, #1
 800dd0a:	73fb      	strb	r3, [r7, #15]
 800dd0c:	e001      	b.n	800dd12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800dd0e:	2300      	movs	r3, #0
 800dd10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800dd12:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd14:	4618      	mov	r0, r3
 800dd16:	3714      	adds	r7, #20
 800dd18:	46bd      	mov	sp, r7
 800dd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd1e:	4770      	bx	lr

0800dd20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800dd20:	b480      	push	{r7}
 800dd22:	b083      	sub	sp, #12
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	6078      	str	r0, [r7, #4]
 800dd28:	460b      	mov	r3, r1
 800dd2a:	807b      	strh	r3, [r7, #2]
 800dd2c:	4613      	mov	r3, r2
 800dd2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800dd30:	787b      	ldrb	r3, [r7, #1]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d003      	beq.n	800dd3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800dd36:	887a      	ldrh	r2, [r7, #2]
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800dd3c:	e003      	b.n	800dd46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800dd3e:	887b      	ldrh	r3, [r7, #2]
 800dd40:	041a      	lsls	r2, r3, #16
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	619a      	str	r2, [r3, #24]
}
 800dd46:	bf00      	nop
 800dd48:	370c      	adds	r7, #12
 800dd4a:	46bd      	mov	sp, r7
 800dd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd50:	4770      	bx	lr
	...

0800dd54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800dd54:	b580      	push	{r7, lr}
 800dd56:	b082      	sub	sp, #8
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d101      	bne.n	800dd66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800dd62:	2301      	movs	r3, #1
 800dd64:	e07f      	b.n	800de66 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dd6c:	b2db      	uxtb	r3, r3
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d106      	bne.n	800dd80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	2200      	movs	r2, #0
 800dd76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800dd7a:	6878      	ldr	r0, [r7, #4]
 800dd7c:	f000 f8a9 	bl	800ded2 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	2224      	movs	r2, #36	; 0x24
 800dd84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	681a      	ldr	r2, [r3, #0]
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	f022 0201 	bic.w	r2, r2, #1
 800dd96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	685a      	ldr	r2, [r3, #4]
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800dda4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	689a      	ldr	r2, [r3, #8]
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ddb4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	68db      	ldr	r3, [r3, #12]
 800ddba:	2b01      	cmp	r3, #1
 800ddbc:	d107      	bne.n	800ddce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	689a      	ldr	r2, [r3, #8]
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ddca:	609a      	str	r2, [r3, #8]
 800ddcc:	e006      	b.n	800dddc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	689a      	ldr	r2, [r3, #8]
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800ddda:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	68db      	ldr	r3, [r3, #12]
 800dde0:	2b02      	cmp	r3, #2
 800dde2:	d104      	bne.n	800ddee <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ddec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	6859      	ldr	r1, [r3, #4]
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	681a      	ldr	r2, [r3, #0]
 800ddf8:	4b1d      	ldr	r3, [pc, #116]	; (800de70 <HAL_I2C_Init+0x11c>)
 800ddfa:	430b      	orrs	r3, r1
 800ddfc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	68da      	ldr	r2, [r3, #12]
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800de0c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	691a      	ldr	r2, [r3, #16]
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	695b      	ldr	r3, [r3, #20]
 800de16:	ea42 0103 	orr.w	r1, r2, r3
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	699b      	ldr	r3, [r3, #24]
 800de1e:	021a      	lsls	r2, r3, #8
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	430a      	orrs	r2, r1
 800de26:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	69d9      	ldr	r1, [r3, #28]
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	6a1a      	ldr	r2, [r3, #32]
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	430a      	orrs	r2, r1
 800de36:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	681a      	ldr	r2, [r3, #0]
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	f042 0201 	orr.w	r2, r2, #1
 800de46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	2200      	movs	r2, #0
 800de4c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	2220      	movs	r2, #32
 800de52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	2200      	movs	r2, #0
 800de5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	2200      	movs	r2, #0
 800de60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800de64:	2300      	movs	r3, #0
}
 800de66:	4618      	mov	r0, r3
 800de68:	3708      	adds	r7, #8
 800de6a:	46bd      	mov	sp, r7
 800de6c:	bd80      	pop	{r7, pc}
 800de6e:	bf00      	nop
 800de70:	02008000 	.word	0x02008000

0800de74 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800de74:	b580      	push	{r7, lr}
 800de76:	b082      	sub	sp, #8
 800de78:	af00      	add	r7, sp, #0
 800de7a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d101      	bne.n	800de86 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800de82:	2301      	movs	r3, #1
 800de84:	e021      	b.n	800deca <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	2224      	movs	r2, #36	; 0x24
 800de8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	681a      	ldr	r2, [r3, #0]
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	f022 0201 	bic.w	r2, r2, #1
 800de9c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800de9e:	6878      	ldr	r0, [r7, #4]
 800dea0:	f000 f821 	bl	800dee6 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	2200      	movs	r2, #0
 800dea8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	2200      	movs	r2, #0
 800deae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	2200      	movs	r2, #0
 800deb6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	2200      	movs	r2, #0
 800debc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	2200      	movs	r2, #0
 800dec4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800dec8:	2300      	movs	r3, #0
}
 800deca:	4618      	mov	r0, r3
 800decc:	3708      	adds	r7, #8
 800dece:	46bd      	mov	sp, r7
 800ded0:	bd80      	pop	{r7, pc}

0800ded2 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800ded2:	b480      	push	{r7}
 800ded4:	b083      	sub	sp, #12
 800ded6:	af00      	add	r7, sp, #0
 800ded8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800deda:	bf00      	nop
 800dedc:	370c      	adds	r7, #12
 800dede:	46bd      	mov	sp, r7
 800dee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee4:	4770      	bx	lr

0800dee6 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800dee6:	b480      	push	{r7}
 800dee8:	b083      	sub	sp, #12
 800deea:	af00      	add	r7, sp, #0
 800deec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800deee:	bf00      	nop
 800def0:	370c      	adds	r7, #12
 800def2:	46bd      	mov	sp, r7
 800def4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def8:	4770      	bx	lr
	...

0800defc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800defc:	b580      	push	{r7, lr}
 800defe:	b088      	sub	sp, #32
 800df00:	af02      	add	r7, sp, #8
 800df02:	60f8      	str	r0, [r7, #12]
 800df04:	4608      	mov	r0, r1
 800df06:	4611      	mov	r1, r2
 800df08:	461a      	mov	r2, r3
 800df0a:	4603      	mov	r3, r0
 800df0c:	817b      	strh	r3, [r7, #10]
 800df0e:	460b      	mov	r3, r1
 800df10:	813b      	strh	r3, [r7, #8]
 800df12:	4613      	mov	r3, r2
 800df14:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800df1c:	b2db      	uxtb	r3, r3
 800df1e:	2b20      	cmp	r3, #32
 800df20:	f040 80f9 	bne.w	800e116 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800df24:	6a3b      	ldr	r3, [r7, #32]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d002      	beq.n	800df30 <HAL_I2C_Mem_Write+0x34>
 800df2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d105      	bne.n	800df3c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	f44f 7200 	mov.w	r2, #512	; 0x200
 800df36:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800df38:	2301      	movs	r3, #1
 800df3a:	e0ed      	b.n	800e118 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800df42:	2b01      	cmp	r3, #1
 800df44:	d101      	bne.n	800df4a <HAL_I2C_Mem_Write+0x4e>
 800df46:	2302      	movs	r3, #2
 800df48:	e0e6      	b.n	800e118 <HAL_I2C_Mem_Write+0x21c>
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	2201      	movs	r2, #1
 800df4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800df52:	f7fb f84f 	bl	8008ff4 <HAL_GetTick>
 800df56:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800df58:	697b      	ldr	r3, [r7, #20]
 800df5a:	9300      	str	r3, [sp, #0]
 800df5c:	2319      	movs	r3, #25
 800df5e:	2201      	movs	r2, #1
 800df60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800df64:	68f8      	ldr	r0, [r7, #12]
 800df66:	f000 fadd 	bl	800e524 <I2C_WaitOnFlagUntilTimeout>
 800df6a:	4603      	mov	r3, r0
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d001      	beq.n	800df74 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800df70:	2301      	movs	r3, #1
 800df72:	e0d1      	b.n	800e118 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	2221      	movs	r2, #33	; 0x21
 800df78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	2240      	movs	r2, #64	; 0x40
 800df80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	2200      	movs	r2, #0
 800df88:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	6a3a      	ldr	r2, [r7, #32]
 800df8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800df94:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	2200      	movs	r2, #0
 800df9a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800df9c:	88f8      	ldrh	r0, [r7, #6]
 800df9e:	893a      	ldrh	r2, [r7, #8]
 800dfa0:	8979      	ldrh	r1, [r7, #10]
 800dfa2:	697b      	ldr	r3, [r7, #20]
 800dfa4:	9301      	str	r3, [sp, #4]
 800dfa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfa8:	9300      	str	r3, [sp, #0]
 800dfaa:	4603      	mov	r3, r0
 800dfac:	68f8      	ldr	r0, [r7, #12]
 800dfae:	f000 f9ed 	bl	800e38c <I2C_RequestMemoryWrite>
 800dfb2:	4603      	mov	r3, r0
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d005      	beq.n	800dfc4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	2200      	movs	r2, #0
 800dfbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800dfc0:	2301      	movs	r3, #1
 800dfc2:	e0a9      	b.n	800e118 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dfc8:	b29b      	uxth	r3, r3
 800dfca:	2bff      	cmp	r3, #255	; 0xff
 800dfcc:	d90e      	bls.n	800dfec <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	22ff      	movs	r2, #255	; 0xff
 800dfd2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dfd8:	b2da      	uxtb	r2, r3
 800dfda:	8979      	ldrh	r1, [r7, #10]
 800dfdc:	2300      	movs	r3, #0
 800dfde:	9300      	str	r3, [sp, #0]
 800dfe0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800dfe4:	68f8      	ldr	r0, [r7, #12]
 800dfe6:	f000 fbbf 	bl	800e768 <I2C_TransferConfig>
 800dfea:	e00f      	b.n	800e00c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dff0:	b29a      	uxth	r2, r3
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dffa:	b2da      	uxtb	r2, r3
 800dffc:	8979      	ldrh	r1, [r7, #10]
 800dffe:	2300      	movs	r3, #0
 800e000:	9300      	str	r3, [sp, #0]
 800e002:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e006:	68f8      	ldr	r0, [r7, #12]
 800e008:	f000 fbae 	bl	800e768 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e00c:	697a      	ldr	r2, [r7, #20]
 800e00e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e010:	68f8      	ldr	r0, [r7, #12]
 800e012:	f000 fac7 	bl	800e5a4 <I2C_WaitOnTXISFlagUntilTimeout>
 800e016:	4603      	mov	r3, r0
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d001      	beq.n	800e020 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800e01c:	2301      	movs	r3, #1
 800e01e:	e07b      	b.n	800e118 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e024:	781a      	ldrb	r2, [r3, #0]
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e030:	1c5a      	adds	r2, r3, #1
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e03a:	b29b      	uxth	r3, r3
 800e03c:	3b01      	subs	r3, #1
 800e03e:	b29a      	uxth	r2, r3
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e048:	3b01      	subs	r3, #1
 800e04a:	b29a      	uxth	r2, r3
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e054:	b29b      	uxth	r3, r3
 800e056:	2b00      	cmp	r3, #0
 800e058:	d034      	beq.n	800e0c4 <HAL_I2C_Mem_Write+0x1c8>
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d130      	bne.n	800e0c4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800e062:	697b      	ldr	r3, [r7, #20]
 800e064:	9300      	str	r3, [sp, #0]
 800e066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e068:	2200      	movs	r2, #0
 800e06a:	2180      	movs	r1, #128	; 0x80
 800e06c:	68f8      	ldr	r0, [r7, #12]
 800e06e:	f000 fa59 	bl	800e524 <I2C_WaitOnFlagUntilTimeout>
 800e072:	4603      	mov	r3, r0
 800e074:	2b00      	cmp	r3, #0
 800e076:	d001      	beq.n	800e07c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800e078:	2301      	movs	r3, #1
 800e07a:	e04d      	b.n	800e118 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e080:	b29b      	uxth	r3, r3
 800e082:	2bff      	cmp	r3, #255	; 0xff
 800e084:	d90e      	bls.n	800e0a4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	22ff      	movs	r2, #255	; 0xff
 800e08a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e090:	b2da      	uxtb	r2, r3
 800e092:	8979      	ldrh	r1, [r7, #10]
 800e094:	2300      	movs	r3, #0
 800e096:	9300      	str	r3, [sp, #0]
 800e098:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e09c:	68f8      	ldr	r0, [r7, #12]
 800e09e:	f000 fb63 	bl	800e768 <I2C_TransferConfig>
 800e0a2:	e00f      	b.n	800e0c4 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e0a8:	b29a      	uxth	r2, r3
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e0b2:	b2da      	uxtb	r2, r3
 800e0b4:	8979      	ldrh	r1, [r7, #10]
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	9300      	str	r3, [sp, #0]
 800e0ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e0be:	68f8      	ldr	r0, [r7, #12]
 800e0c0:	f000 fb52 	bl	800e768 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e0c8:	b29b      	uxth	r3, r3
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d19e      	bne.n	800e00c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e0ce:	697a      	ldr	r2, [r7, #20]
 800e0d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e0d2:	68f8      	ldr	r0, [r7, #12]
 800e0d4:	f000 faa6 	bl	800e624 <I2C_WaitOnSTOPFlagUntilTimeout>
 800e0d8:	4603      	mov	r3, r0
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d001      	beq.n	800e0e2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800e0de:	2301      	movs	r3, #1
 800e0e0:	e01a      	b.n	800e118 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	2220      	movs	r2, #32
 800e0e8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	6859      	ldr	r1, [r3, #4]
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	681a      	ldr	r2, [r3, #0]
 800e0f4:	4b0a      	ldr	r3, [pc, #40]	; (800e120 <HAL_I2C_Mem_Write+0x224>)
 800e0f6:	400b      	ands	r3, r1
 800e0f8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	2220      	movs	r2, #32
 800e0fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	2200      	movs	r2, #0
 800e106:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	2200      	movs	r2, #0
 800e10e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800e112:	2300      	movs	r3, #0
 800e114:	e000      	b.n	800e118 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800e116:	2302      	movs	r3, #2
  }
}
 800e118:	4618      	mov	r0, r3
 800e11a:	3718      	adds	r7, #24
 800e11c:	46bd      	mov	sp, r7
 800e11e:	bd80      	pop	{r7, pc}
 800e120:	fe00e800 	.word	0xfe00e800

0800e124 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b088      	sub	sp, #32
 800e128:	af02      	add	r7, sp, #8
 800e12a:	60f8      	str	r0, [r7, #12]
 800e12c:	4608      	mov	r0, r1
 800e12e:	4611      	mov	r1, r2
 800e130:	461a      	mov	r2, r3
 800e132:	4603      	mov	r3, r0
 800e134:	817b      	strh	r3, [r7, #10]
 800e136:	460b      	mov	r3, r1
 800e138:	813b      	strh	r3, [r7, #8]
 800e13a:	4613      	mov	r3, r2
 800e13c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e144:	b2db      	uxtb	r3, r3
 800e146:	2b20      	cmp	r3, #32
 800e148:	f040 80fd 	bne.w	800e346 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800e14c:	6a3b      	ldr	r3, [r7, #32]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d002      	beq.n	800e158 <HAL_I2C_Mem_Read+0x34>
 800e152:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e154:	2b00      	cmp	r3, #0
 800e156:	d105      	bne.n	800e164 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e15e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800e160:	2301      	movs	r3, #1
 800e162:	e0f1      	b.n	800e348 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e16a:	2b01      	cmp	r3, #1
 800e16c:	d101      	bne.n	800e172 <HAL_I2C_Mem_Read+0x4e>
 800e16e:	2302      	movs	r3, #2
 800e170:	e0ea      	b.n	800e348 <HAL_I2C_Mem_Read+0x224>
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	2201      	movs	r2, #1
 800e176:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800e17a:	f7fa ff3b 	bl	8008ff4 <HAL_GetTick>
 800e17e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800e180:	697b      	ldr	r3, [r7, #20]
 800e182:	9300      	str	r3, [sp, #0]
 800e184:	2319      	movs	r3, #25
 800e186:	2201      	movs	r2, #1
 800e188:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800e18c:	68f8      	ldr	r0, [r7, #12]
 800e18e:	f000 f9c9 	bl	800e524 <I2C_WaitOnFlagUntilTimeout>
 800e192:	4603      	mov	r3, r0
 800e194:	2b00      	cmp	r3, #0
 800e196:	d001      	beq.n	800e19c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800e198:	2301      	movs	r3, #1
 800e19a:	e0d5      	b.n	800e348 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	2222      	movs	r2, #34	; 0x22
 800e1a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	2240      	movs	r2, #64	; 0x40
 800e1a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	2200      	movs	r2, #0
 800e1b0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	6a3a      	ldr	r2, [r7, #32]
 800e1b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e1bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800e1c4:	88f8      	ldrh	r0, [r7, #6]
 800e1c6:	893a      	ldrh	r2, [r7, #8]
 800e1c8:	8979      	ldrh	r1, [r7, #10]
 800e1ca:	697b      	ldr	r3, [r7, #20]
 800e1cc:	9301      	str	r3, [sp, #4]
 800e1ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1d0:	9300      	str	r3, [sp, #0]
 800e1d2:	4603      	mov	r3, r0
 800e1d4:	68f8      	ldr	r0, [r7, #12]
 800e1d6:	f000 f92d 	bl	800e434 <I2C_RequestMemoryRead>
 800e1da:	4603      	mov	r3, r0
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d005      	beq.n	800e1ec <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800e1e8:	2301      	movs	r3, #1
 800e1ea:	e0ad      	b.n	800e348 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e1f0:	b29b      	uxth	r3, r3
 800e1f2:	2bff      	cmp	r3, #255	; 0xff
 800e1f4:	d90e      	bls.n	800e214 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	22ff      	movs	r2, #255	; 0xff
 800e1fa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e200:	b2da      	uxtb	r2, r3
 800e202:	8979      	ldrh	r1, [r7, #10]
 800e204:	4b52      	ldr	r3, [pc, #328]	; (800e350 <HAL_I2C_Mem_Read+0x22c>)
 800e206:	9300      	str	r3, [sp, #0]
 800e208:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e20c:	68f8      	ldr	r0, [r7, #12]
 800e20e:	f000 faab 	bl	800e768 <I2C_TransferConfig>
 800e212:	e00f      	b.n	800e234 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e218:	b29a      	uxth	r2, r3
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e222:	b2da      	uxtb	r2, r3
 800e224:	8979      	ldrh	r1, [r7, #10]
 800e226:	4b4a      	ldr	r3, [pc, #296]	; (800e350 <HAL_I2C_Mem_Read+0x22c>)
 800e228:	9300      	str	r3, [sp, #0]
 800e22a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e22e:	68f8      	ldr	r0, [r7, #12]
 800e230:	f000 fa9a 	bl	800e768 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800e234:	697b      	ldr	r3, [r7, #20]
 800e236:	9300      	str	r3, [sp, #0]
 800e238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e23a:	2200      	movs	r2, #0
 800e23c:	2104      	movs	r1, #4
 800e23e:	68f8      	ldr	r0, [r7, #12]
 800e240:	f000 f970 	bl	800e524 <I2C_WaitOnFlagUntilTimeout>
 800e244:	4603      	mov	r3, r0
 800e246:	2b00      	cmp	r3, #0
 800e248:	d001      	beq.n	800e24e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800e24a:	2301      	movs	r3, #1
 800e24c:	e07c      	b.n	800e348 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e258:	b2d2      	uxtb	r2, r2
 800e25a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e260:	1c5a      	adds	r2, r3, #1
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e26a:	3b01      	subs	r3, #1
 800e26c:	b29a      	uxth	r2, r3
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e276:	b29b      	uxth	r3, r3
 800e278:	3b01      	subs	r3, #1
 800e27a:	b29a      	uxth	r2, r3
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e284:	b29b      	uxth	r3, r3
 800e286:	2b00      	cmp	r3, #0
 800e288:	d034      	beq.n	800e2f4 <HAL_I2C_Mem_Read+0x1d0>
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d130      	bne.n	800e2f4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800e292:	697b      	ldr	r3, [r7, #20]
 800e294:	9300      	str	r3, [sp, #0]
 800e296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e298:	2200      	movs	r2, #0
 800e29a:	2180      	movs	r1, #128	; 0x80
 800e29c:	68f8      	ldr	r0, [r7, #12]
 800e29e:	f000 f941 	bl	800e524 <I2C_WaitOnFlagUntilTimeout>
 800e2a2:	4603      	mov	r3, r0
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d001      	beq.n	800e2ac <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800e2a8:	2301      	movs	r3, #1
 800e2aa:	e04d      	b.n	800e348 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e2b0:	b29b      	uxth	r3, r3
 800e2b2:	2bff      	cmp	r3, #255	; 0xff
 800e2b4:	d90e      	bls.n	800e2d4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	22ff      	movs	r2, #255	; 0xff
 800e2ba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e2c0:	b2da      	uxtb	r2, r3
 800e2c2:	8979      	ldrh	r1, [r7, #10]
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	9300      	str	r3, [sp, #0]
 800e2c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e2cc:	68f8      	ldr	r0, [r7, #12]
 800e2ce:	f000 fa4b 	bl	800e768 <I2C_TransferConfig>
 800e2d2:	e00f      	b.n	800e2f4 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e2d8:	b29a      	uxth	r2, r3
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e2e2:	b2da      	uxtb	r2, r3
 800e2e4:	8979      	ldrh	r1, [r7, #10]
 800e2e6:	2300      	movs	r3, #0
 800e2e8:	9300      	str	r3, [sp, #0]
 800e2ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e2ee:	68f8      	ldr	r0, [r7, #12]
 800e2f0:	f000 fa3a 	bl	800e768 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e2f8:	b29b      	uxth	r3, r3
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d19a      	bne.n	800e234 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e2fe:	697a      	ldr	r2, [r7, #20]
 800e300:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e302:	68f8      	ldr	r0, [r7, #12]
 800e304:	f000 f98e 	bl	800e624 <I2C_WaitOnSTOPFlagUntilTimeout>
 800e308:	4603      	mov	r3, r0
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d001      	beq.n	800e312 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800e30e:	2301      	movs	r3, #1
 800e310:	e01a      	b.n	800e348 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	2220      	movs	r2, #32
 800e318:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	6859      	ldr	r1, [r3, #4]
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	681a      	ldr	r2, [r3, #0]
 800e324:	4b0b      	ldr	r3, [pc, #44]	; (800e354 <HAL_I2C_Mem_Read+0x230>)
 800e326:	400b      	ands	r3, r1
 800e328:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	2220      	movs	r2, #32
 800e32e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	2200      	movs	r2, #0
 800e336:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	2200      	movs	r2, #0
 800e33e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800e342:	2300      	movs	r3, #0
 800e344:	e000      	b.n	800e348 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800e346:	2302      	movs	r3, #2
  }
}
 800e348:	4618      	mov	r0, r3
 800e34a:	3718      	adds	r7, #24
 800e34c:	46bd      	mov	sp, r7
 800e34e:	bd80      	pop	{r7, pc}
 800e350:	80002400 	.word	0x80002400
 800e354:	fe00e800 	.word	0xfe00e800

0800e358 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800e358:	b480      	push	{r7}
 800e35a:	b083      	sub	sp, #12
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e366:	b2db      	uxtb	r3, r3
}
 800e368:	4618      	mov	r0, r3
 800e36a:	370c      	adds	r7, #12
 800e36c:	46bd      	mov	sp, r7
 800e36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e372:	4770      	bx	lr

0800e374 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800e374:	b480      	push	{r7}
 800e376:	b083      	sub	sp, #12
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800e380:	4618      	mov	r0, r3
 800e382:	370c      	adds	r7, #12
 800e384:	46bd      	mov	sp, r7
 800e386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e38a:	4770      	bx	lr

0800e38c <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b086      	sub	sp, #24
 800e390:	af02      	add	r7, sp, #8
 800e392:	60f8      	str	r0, [r7, #12]
 800e394:	4608      	mov	r0, r1
 800e396:	4611      	mov	r1, r2
 800e398:	461a      	mov	r2, r3
 800e39a:	4603      	mov	r3, r0
 800e39c:	817b      	strh	r3, [r7, #10]
 800e39e:	460b      	mov	r3, r1
 800e3a0:	813b      	strh	r3, [r7, #8]
 800e3a2:	4613      	mov	r3, r2
 800e3a4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800e3a6:	88fb      	ldrh	r3, [r7, #6]
 800e3a8:	b2da      	uxtb	r2, r3
 800e3aa:	8979      	ldrh	r1, [r7, #10]
 800e3ac:	4b20      	ldr	r3, [pc, #128]	; (800e430 <I2C_RequestMemoryWrite+0xa4>)
 800e3ae:	9300      	str	r3, [sp, #0]
 800e3b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e3b4:	68f8      	ldr	r0, [r7, #12]
 800e3b6:	f000 f9d7 	bl	800e768 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e3ba:	69fa      	ldr	r2, [r7, #28]
 800e3bc:	69b9      	ldr	r1, [r7, #24]
 800e3be:	68f8      	ldr	r0, [r7, #12]
 800e3c0:	f000 f8f0 	bl	800e5a4 <I2C_WaitOnTXISFlagUntilTimeout>
 800e3c4:	4603      	mov	r3, r0
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d001      	beq.n	800e3ce <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800e3ca:	2301      	movs	r3, #1
 800e3cc:	e02c      	b.n	800e428 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e3ce:	88fb      	ldrh	r3, [r7, #6]
 800e3d0:	2b01      	cmp	r3, #1
 800e3d2:	d105      	bne.n	800e3e0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e3d4:	893b      	ldrh	r3, [r7, #8]
 800e3d6:	b2da      	uxtb	r2, r3
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	629a      	str	r2, [r3, #40]	; 0x28
 800e3de:	e015      	b.n	800e40c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800e3e0:	893b      	ldrh	r3, [r7, #8]
 800e3e2:	0a1b      	lsrs	r3, r3, #8
 800e3e4:	b29b      	uxth	r3, r3
 800e3e6:	b2da      	uxtb	r2, r3
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e3ee:	69fa      	ldr	r2, [r7, #28]
 800e3f0:	69b9      	ldr	r1, [r7, #24]
 800e3f2:	68f8      	ldr	r0, [r7, #12]
 800e3f4:	f000 f8d6 	bl	800e5a4 <I2C_WaitOnTXISFlagUntilTimeout>
 800e3f8:	4603      	mov	r3, r0
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d001      	beq.n	800e402 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800e3fe:	2301      	movs	r3, #1
 800e400:	e012      	b.n	800e428 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e402:	893b      	ldrh	r3, [r7, #8]
 800e404:	b2da      	uxtb	r2, r3
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800e40c:	69fb      	ldr	r3, [r7, #28]
 800e40e:	9300      	str	r3, [sp, #0]
 800e410:	69bb      	ldr	r3, [r7, #24]
 800e412:	2200      	movs	r2, #0
 800e414:	2180      	movs	r1, #128	; 0x80
 800e416:	68f8      	ldr	r0, [r7, #12]
 800e418:	f000 f884 	bl	800e524 <I2C_WaitOnFlagUntilTimeout>
 800e41c:	4603      	mov	r3, r0
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d001      	beq.n	800e426 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800e422:	2301      	movs	r3, #1
 800e424:	e000      	b.n	800e428 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800e426:	2300      	movs	r3, #0
}
 800e428:	4618      	mov	r0, r3
 800e42a:	3710      	adds	r7, #16
 800e42c:	46bd      	mov	sp, r7
 800e42e:	bd80      	pop	{r7, pc}
 800e430:	80002000 	.word	0x80002000

0800e434 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800e434:	b580      	push	{r7, lr}
 800e436:	b086      	sub	sp, #24
 800e438:	af02      	add	r7, sp, #8
 800e43a:	60f8      	str	r0, [r7, #12]
 800e43c:	4608      	mov	r0, r1
 800e43e:	4611      	mov	r1, r2
 800e440:	461a      	mov	r2, r3
 800e442:	4603      	mov	r3, r0
 800e444:	817b      	strh	r3, [r7, #10]
 800e446:	460b      	mov	r3, r1
 800e448:	813b      	strh	r3, [r7, #8]
 800e44a:	4613      	mov	r3, r2
 800e44c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800e44e:	88fb      	ldrh	r3, [r7, #6]
 800e450:	b2da      	uxtb	r2, r3
 800e452:	8979      	ldrh	r1, [r7, #10]
 800e454:	4b20      	ldr	r3, [pc, #128]	; (800e4d8 <I2C_RequestMemoryRead+0xa4>)
 800e456:	9300      	str	r3, [sp, #0]
 800e458:	2300      	movs	r3, #0
 800e45a:	68f8      	ldr	r0, [r7, #12]
 800e45c:	f000 f984 	bl	800e768 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e460:	69fa      	ldr	r2, [r7, #28]
 800e462:	69b9      	ldr	r1, [r7, #24]
 800e464:	68f8      	ldr	r0, [r7, #12]
 800e466:	f000 f89d 	bl	800e5a4 <I2C_WaitOnTXISFlagUntilTimeout>
 800e46a:	4603      	mov	r3, r0
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d001      	beq.n	800e474 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800e470:	2301      	movs	r3, #1
 800e472:	e02c      	b.n	800e4ce <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e474:	88fb      	ldrh	r3, [r7, #6]
 800e476:	2b01      	cmp	r3, #1
 800e478:	d105      	bne.n	800e486 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e47a:	893b      	ldrh	r3, [r7, #8]
 800e47c:	b2da      	uxtb	r2, r3
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	629a      	str	r2, [r3, #40]	; 0x28
 800e484:	e015      	b.n	800e4b2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800e486:	893b      	ldrh	r3, [r7, #8]
 800e488:	0a1b      	lsrs	r3, r3, #8
 800e48a:	b29b      	uxth	r3, r3
 800e48c:	b2da      	uxtb	r2, r3
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e494:	69fa      	ldr	r2, [r7, #28]
 800e496:	69b9      	ldr	r1, [r7, #24]
 800e498:	68f8      	ldr	r0, [r7, #12]
 800e49a:	f000 f883 	bl	800e5a4 <I2C_WaitOnTXISFlagUntilTimeout>
 800e49e:	4603      	mov	r3, r0
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d001      	beq.n	800e4a8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800e4a4:	2301      	movs	r3, #1
 800e4a6:	e012      	b.n	800e4ce <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e4a8:	893b      	ldrh	r3, [r7, #8]
 800e4aa:	b2da      	uxtb	r2, r3
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800e4b2:	69fb      	ldr	r3, [r7, #28]
 800e4b4:	9300      	str	r3, [sp, #0]
 800e4b6:	69bb      	ldr	r3, [r7, #24]
 800e4b8:	2200      	movs	r2, #0
 800e4ba:	2140      	movs	r1, #64	; 0x40
 800e4bc:	68f8      	ldr	r0, [r7, #12]
 800e4be:	f000 f831 	bl	800e524 <I2C_WaitOnFlagUntilTimeout>
 800e4c2:	4603      	mov	r3, r0
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d001      	beq.n	800e4cc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800e4c8:	2301      	movs	r3, #1
 800e4ca:	e000      	b.n	800e4ce <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800e4cc:	2300      	movs	r3, #0
}
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	3710      	adds	r7, #16
 800e4d2:	46bd      	mov	sp, r7
 800e4d4:	bd80      	pop	{r7, pc}
 800e4d6:	bf00      	nop
 800e4d8:	80002000 	.word	0x80002000

0800e4dc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800e4dc:	b480      	push	{r7}
 800e4de:	b083      	sub	sp, #12
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	699b      	ldr	r3, [r3, #24]
 800e4ea:	f003 0302 	and.w	r3, r3, #2
 800e4ee:	2b02      	cmp	r3, #2
 800e4f0:	d103      	bne.n	800e4fa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	2200      	movs	r2, #0
 800e4f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	699b      	ldr	r3, [r3, #24]
 800e500:	f003 0301 	and.w	r3, r3, #1
 800e504:	2b01      	cmp	r3, #1
 800e506:	d007      	beq.n	800e518 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	699a      	ldr	r2, [r3, #24]
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	f042 0201 	orr.w	r2, r2, #1
 800e516:	619a      	str	r2, [r3, #24]
  }
}
 800e518:	bf00      	nop
 800e51a:	370c      	adds	r7, #12
 800e51c:	46bd      	mov	sp, r7
 800e51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e522:	4770      	bx	lr

0800e524 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800e524:	b580      	push	{r7, lr}
 800e526:	b084      	sub	sp, #16
 800e528:	af00      	add	r7, sp, #0
 800e52a:	60f8      	str	r0, [r7, #12]
 800e52c:	60b9      	str	r1, [r7, #8]
 800e52e:	603b      	str	r3, [r7, #0]
 800e530:	4613      	mov	r3, r2
 800e532:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e534:	e022      	b.n	800e57c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e536:	683b      	ldr	r3, [r7, #0]
 800e538:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e53c:	d01e      	beq.n	800e57c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e53e:	f7fa fd59 	bl	8008ff4 <HAL_GetTick>
 800e542:	4602      	mov	r2, r0
 800e544:	69bb      	ldr	r3, [r7, #24]
 800e546:	1ad3      	subs	r3, r2, r3
 800e548:	683a      	ldr	r2, [r7, #0]
 800e54a:	429a      	cmp	r2, r3
 800e54c:	d302      	bcc.n	800e554 <I2C_WaitOnFlagUntilTimeout+0x30>
 800e54e:	683b      	ldr	r3, [r7, #0]
 800e550:	2b00      	cmp	r3, #0
 800e552:	d113      	bne.n	800e57c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e558:	f043 0220 	orr.w	r2, r3, #32
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	2220      	movs	r2, #32
 800e564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	2200      	movs	r2, #0
 800e56c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	2200      	movs	r2, #0
 800e574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800e578:	2301      	movs	r3, #1
 800e57a:	e00f      	b.n	800e59c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	699a      	ldr	r2, [r3, #24]
 800e582:	68bb      	ldr	r3, [r7, #8]
 800e584:	4013      	ands	r3, r2
 800e586:	68ba      	ldr	r2, [r7, #8]
 800e588:	429a      	cmp	r2, r3
 800e58a:	bf0c      	ite	eq
 800e58c:	2301      	moveq	r3, #1
 800e58e:	2300      	movne	r3, #0
 800e590:	b2db      	uxtb	r3, r3
 800e592:	461a      	mov	r2, r3
 800e594:	79fb      	ldrb	r3, [r7, #7]
 800e596:	429a      	cmp	r2, r3
 800e598:	d0cd      	beq.n	800e536 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800e59a:	2300      	movs	r3, #0
}
 800e59c:	4618      	mov	r0, r3
 800e59e:	3710      	adds	r7, #16
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	bd80      	pop	{r7, pc}

0800e5a4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	b084      	sub	sp, #16
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	60f8      	str	r0, [r7, #12]
 800e5ac:	60b9      	str	r1, [r7, #8]
 800e5ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800e5b0:	e02c      	b.n	800e60c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800e5b2:	687a      	ldr	r2, [r7, #4]
 800e5b4:	68b9      	ldr	r1, [r7, #8]
 800e5b6:	68f8      	ldr	r0, [r7, #12]
 800e5b8:	f000 f870 	bl	800e69c <I2C_IsAcknowledgeFailed>
 800e5bc:	4603      	mov	r3, r0
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d001      	beq.n	800e5c6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800e5c2:	2301      	movs	r3, #1
 800e5c4:	e02a      	b.n	800e61c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e5c6:	68bb      	ldr	r3, [r7, #8]
 800e5c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e5cc:	d01e      	beq.n	800e60c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e5ce:	f7fa fd11 	bl	8008ff4 <HAL_GetTick>
 800e5d2:	4602      	mov	r2, r0
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	1ad3      	subs	r3, r2, r3
 800e5d8:	68ba      	ldr	r2, [r7, #8]
 800e5da:	429a      	cmp	r2, r3
 800e5dc:	d302      	bcc.n	800e5e4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800e5de:	68bb      	ldr	r3, [r7, #8]
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d113      	bne.n	800e60c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e5e8:	f043 0220 	orr.w	r2, r3, #32
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	2220      	movs	r2, #32
 800e5f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	2200      	movs	r2, #0
 800e5fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	2200      	movs	r2, #0
 800e604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800e608:	2301      	movs	r3, #1
 800e60a:	e007      	b.n	800e61c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	699b      	ldr	r3, [r3, #24]
 800e612:	f003 0302 	and.w	r3, r3, #2
 800e616:	2b02      	cmp	r3, #2
 800e618:	d1cb      	bne.n	800e5b2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800e61a:	2300      	movs	r3, #0
}
 800e61c:	4618      	mov	r0, r3
 800e61e:	3710      	adds	r7, #16
 800e620:	46bd      	mov	sp, r7
 800e622:	bd80      	pop	{r7, pc}

0800e624 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e624:	b580      	push	{r7, lr}
 800e626:	b084      	sub	sp, #16
 800e628:	af00      	add	r7, sp, #0
 800e62a:	60f8      	str	r0, [r7, #12]
 800e62c:	60b9      	str	r1, [r7, #8]
 800e62e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e630:	e028      	b.n	800e684 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800e632:	687a      	ldr	r2, [r7, #4]
 800e634:	68b9      	ldr	r1, [r7, #8]
 800e636:	68f8      	ldr	r0, [r7, #12]
 800e638:	f000 f830 	bl	800e69c <I2C_IsAcknowledgeFailed>
 800e63c:	4603      	mov	r3, r0
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d001      	beq.n	800e646 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800e642:	2301      	movs	r3, #1
 800e644:	e026      	b.n	800e694 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e646:	f7fa fcd5 	bl	8008ff4 <HAL_GetTick>
 800e64a:	4602      	mov	r2, r0
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	1ad3      	subs	r3, r2, r3
 800e650:	68ba      	ldr	r2, [r7, #8]
 800e652:	429a      	cmp	r2, r3
 800e654:	d302      	bcc.n	800e65c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800e656:	68bb      	ldr	r3, [r7, #8]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d113      	bne.n	800e684 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e660:	f043 0220 	orr.w	r2, r3, #32
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	2220      	movs	r2, #32
 800e66c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	2200      	movs	r2, #0
 800e674:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	2200      	movs	r2, #0
 800e67c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800e680:	2301      	movs	r3, #1
 800e682:	e007      	b.n	800e694 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	699b      	ldr	r3, [r3, #24]
 800e68a:	f003 0320 	and.w	r3, r3, #32
 800e68e:	2b20      	cmp	r3, #32
 800e690:	d1cf      	bne.n	800e632 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800e692:	2300      	movs	r3, #0
}
 800e694:	4618      	mov	r0, r3
 800e696:	3710      	adds	r7, #16
 800e698:	46bd      	mov	sp, r7
 800e69a:	bd80      	pop	{r7, pc}

0800e69c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e69c:	b580      	push	{r7, lr}
 800e69e:	b084      	sub	sp, #16
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	60f8      	str	r0, [r7, #12]
 800e6a4:	60b9      	str	r1, [r7, #8]
 800e6a6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	699b      	ldr	r3, [r3, #24]
 800e6ae:	f003 0310 	and.w	r3, r3, #16
 800e6b2:	2b10      	cmp	r3, #16
 800e6b4:	d151      	bne.n	800e75a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e6b6:	e022      	b.n	800e6fe <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800e6b8:	68bb      	ldr	r3, [r7, #8]
 800e6ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e6be:	d01e      	beq.n	800e6fe <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e6c0:	f7fa fc98 	bl	8008ff4 <HAL_GetTick>
 800e6c4:	4602      	mov	r2, r0
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	1ad3      	subs	r3, r2, r3
 800e6ca:	68ba      	ldr	r2, [r7, #8]
 800e6cc:	429a      	cmp	r2, r3
 800e6ce:	d302      	bcc.n	800e6d6 <I2C_IsAcknowledgeFailed+0x3a>
 800e6d0:	68bb      	ldr	r3, [r7, #8]
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d113      	bne.n	800e6fe <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e6da:	f043 0220 	orr.w	r2, r3, #32
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	2220      	movs	r2, #32
 800e6e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	2200      	movs	r2, #0
 800e6ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	2200      	movs	r2, #0
 800e6f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800e6fa:	2301      	movs	r3, #1
 800e6fc:	e02e      	b.n	800e75c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	699b      	ldr	r3, [r3, #24]
 800e704:	f003 0320 	and.w	r3, r3, #32
 800e708:	2b20      	cmp	r3, #32
 800e70a:	d1d5      	bne.n	800e6b8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	2210      	movs	r2, #16
 800e712:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	2220      	movs	r2, #32
 800e71a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800e71c:	68f8      	ldr	r0, [r7, #12]
 800e71e:	f7ff fedd 	bl	800e4dc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	6859      	ldr	r1, [r3, #4]
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	681a      	ldr	r2, [r3, #0]
 800e72c:	4b0d      	ldr	r3, [pc, #52]	; (800e764 <I2C_IsAcknowledgeFailed+0xc8>)
 800e72e:	400b      	ands	r3, r1
 800e730:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e736:	f043 0204 	orr.w	r2, r3, #4
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	2220      	movs	r2, #32
 800e742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	2200      	movs	r2, #0
 800e74a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	2200      	movs	r2, #0
 800e752:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800e756:	2301      	movs	r3, #1
 800e758:	e000      	b.n	800e75c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800e75a:	2300      	movs	r3, #0
}
 800e75c:	4618      	mov	r0, r3
 800e75e:	3710      	adds	r7, #16
 800e760:	46bd      	mov	sp, r7
 800e762:	bd80      	pop	{r7, pc}
 800e764:	fe00e800 	.word	0xfe00e800

0800e768 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800e768:	b480      	push	{r7}
 800e76a:	b085      	sub	sp, #20
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	60f8      	str	r0, [r7, #12]
 800e770:	607b      	str	r3, [r7, #4]
 800e772:	460b      	mov	r3, r1
 800e774:	817b      	strh	r3, [r7, #10]
 800e776:	4613      	mov	r3, r2
 800e778:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	685a      	ldr	r2, [r3, #4]
 800e780:	69bb      	ldr	r3, [r7, #24]
 800e782:	0d5b      	lsrs	r3, r3, #21
 800e784:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800e788:	4b0d      	ldr	r3, [pc, #52]	; (800e7c0 <I2C_TransferConfig+0x58>)
 800e78a:	430b      	orrs	r3, r1
 800e78c:	43db      	mvns	r3, r3
 800e78e:	ea02 0103 	and.w	r1, r2, r3
 800e792:	897b      	ldrh	r3, [r7, #10]
 800e794:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800e798:	7a7b      	ldrb	r3, [r7, #9]
 800e79a:	041b      	lsls	r3, r3, #16
 800e79c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e7a0:	431a      	orrs	r2, r3
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	431a      	orrs	r2, r3
 800e7a6:	69bb      	ldr	r3, [r7, #24]
 800e7a8:	431a      	orrs	r2, r3
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	430a      	orrs	r2, r1
 800e7b0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800e7b2:	bf00      	nop
 800e7b4:	3714      	adds	r7, #20
 800e7b6:	46bd      	mov	sp, r7
 800e7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7bc:	4770      	bx	lr
 800e7be:	bf00      	nop
 800e7c0:	03ff63ff 	.word	0x03ff63ff

0800e7c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800e7c4:	b480      	push	{r7}
 800e7c6:	b083      	sub	sp, #12
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	6078      	str	r0, [r7, #4]
 800e7cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e7d4:	b2db      	uxtb	r3, r3
 800e7d6:	2b20      	cmp	r3, #32
 800e7d8:	d138      	bne.n	800e84c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e7e0:	2b01      	cmp	r3, #1
 800e7e2:	d101      	bne.n	800e7e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800e7e4:	2302      	movs	r3, #2
 800e7e6:	e032      	b.n	800e84e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	2201      	movs	r2, #1
 800e7ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	2224      	movs	r2, #36	; 0x24
 800e7f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	681a      	ldr	r2, [r3, #0]
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	f022 0201 	bic.w	r2, r2, #1
 800e806:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	681a      	ldr	r2, [r3, #0]
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e816:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	6819      	ldr	r1, [r3, #0]
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	683a      	ldr	r2, [r7, #0]
 800e824:	430a      	orrs	r2, r1
 800e826:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	681a      	ldr	r2, [r3, #0]
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	f042 0201 	orr.w	r2, r2, #1
 800e836:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	2220      	movs	r2, #32
 800e83c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	2200      	movs	r2, #0
 800e844:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800e848:	2300      	movs	r3, #0
 800e84a:	e000      	b.n	800e84e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800e84c:	2302      	movs	r3, #2
  }
}
 800e84e:	4618      	mov	r0, r3
 800e850:	370c      	adds	r7, #12
 800e852:	46bd      	mov	sp, r7
 800e854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e858:	4770      	bx	lr

0800e85a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800e85a:	b480      	push	{r7}
 800e85c:	b085      	sub	sp, #20
 800e85e:	af00      	add	r7, sp, #0
 800e860:	6078      	str	r0, [r7, #4]
 800e862:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e86a:	b2db      	uxtb	r3, r3
 800e86c:	2b20      	cmp	r3, #32
 800e86e:	d139      	bne.n	800e8e4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e876:	2b01      	cmp	r3, #1
 800e878:	d101      	bne.n	800e87e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800e87a:	2302      	movs	r3, #2
 800e87c:	e033      	b.n	800e8e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	2201      	movs	r2, #1
 800e882:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	2224      	movs	r2, #36	; 0x24
 800e88a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	681a      	ldr	r2, [r3, #0]
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	f022 0201 	bic.w	r2, r2, #1
 800e89c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800e8ac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800e8ae:	683b      	ldr	r3, [r7, #0]
 800e8b0:	021b      	lsls	r3, r3, #8
 800e8b2:	68fa      	ldr	r2, [r7, #12]
 800e8b4:	4313      	orrs	r3, r2
 800e8b6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	68fa      	ldr	r2, [r7, #12]
 800e8be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	681a      	ldr	r2, [r3, #0]
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	f042 0201 	orr.w	r2, r2, #1
 800e8ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	2220      	movs	r2, #32
 800e8d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	2200      	movs	r2, #0
 800e8dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800e8e0:	2300      	movs	r3, #0
 800e8e2:	e000      	b.n	800e8e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800e8e4:	2302      	movs	r3, #2
  }
}
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	3714      	adds	r7, #20
 800e8ea:	46bd      	mov	sp, r7
 800e8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f0:	4770      	bx	lr
	...

0800e8f4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800e8f4:	b580      	push	{r7, lr}
 800e8f6:	b084      	sub	sp, #16
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d101      	bne.n	800e906 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800e902:	2301      	movs	r3, #1
 800e904:	e0bf      	b.n	800ea86 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800e90c:	b2db      	uxtb	r3, r3
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d106      	bne.n	800e920 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	2200      	movs	r2, #0
 800e916:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800e91a:	6878      	ldr	r0, [r7, #4]
 800e91c:	f000 f8ba 	bl	800ea94 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	2202      	movs	r2, #2
 800e924:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	699a      	ldr	r2, [r3, #24]
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800e936:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	6999      	ldr	r1, [r3, #24]
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	685a      	ldr	r2, [r3, #4]
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	689b      	ldr	r3, [r3, #8]
 800e946:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800e94c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	691b      	ldr	r3, [r3, #16]
 800e952:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	430a      	orrs	r2, r1
 800e95a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	6899      	ldr	r1, [r3, #8]
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	681a      	ldr	r2, [r3, #0]
 800e966:	4b4a      	ldr	r3, [pc, #296]	; (800ea90 <HAL_LTDC_Init+0x19c>)
 800e968:	400b      	ands	r3, r1
 800e96a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	695b      	ldr	r3, [r3, #20]
 800e970:	041b      	lsls	r3, r3, #16
 800e972:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	6899      	ldr	r1, [r3, #8]
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	699a      	ldr	r2, [r3, #24]
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	431a      	orrs	r2, r3
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	430a      	orrs	r2, r1
 800e988:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	68d9      	ldr	r1, [r3, #12]
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	681a      	ldr	r2, [r3, #0]
 800e994:	4b3e      	ldr	r3, [pc, #248]	; (800ea90 <HAL_LTDC_Init+0x19c>)
 800e996:	400b      	ands	r3, r1
 800e998:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	69db      	ldr	r3, [r3, #28]
 800e99e:	041b      	lsls	r3, r3, #16
 800e9a0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	68d9      	ldr	r1, [r3, #12]
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	6a1a      	ldr	r2, [r3, #32]
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	431a      	orrs	r2, r3
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	430a      	orrs	r2, r1
 800e9b6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	6919      	ldr	r1, [r3, #16]
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	681a      	ldr	r2, [r3, #0]
 800e9c2:	4b33      	ldr	r3, [pc, #204]	; (800ea90 <HAL_LTDC_Init+0x19c>)
 800e9c4:	400b      	ands	r3, r1
 800e9c6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9cc:	041b      	lsls	r3, r3, #16
 800e9ce:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	6919      	ldr	r1, [r3, #16]
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	431a      	orrs	r2, r3
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	430a      	orrs	r2, r1
 800e9e4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	6959      	ldr	r1, [r3, #20]
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	681a      	ldr	r2, [r3, #0]
 800e9f0:	4b27      	ldr	r3, [pc, #156]	; (800ea90 <HAL_LTDC_Init+0x19c>)
 800e9f2:	400b      	ands	r3, r1
 800e9f4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9fa:	041b      	lsls	r3, r3, #16
 800e9fc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	6959      	ldr	r1, [r3, #20]
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	431a      	orrs	r2, r3
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	430a      	orrs	r2, r1
 800ea12:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ea1a:	021b      	lsls	r3, r3, #8
 800ea1c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800ea24:	041b      	lsls	r3, r3, #16
 800ea26:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800ea36:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800ea3e:	68ba      	ldr	r2, [r7, #8]
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	4313      	orrs	r3, r2
 800ea44:	687a      	ldr	r2, [r7, #4]
 800ea46:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800ea4a:	431a      	orrs	r2, r3
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	430a      	orrs	r2, r1
 800ea52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	f042 0206 	orr.w	r2, r2, #6
 800ea62:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	699a      	ldr	r2, [r3, #24]
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	f042 0201 	orr.w	r2, r2, #1
 800ea72:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	2200      	movs	r2, #0
 800ea78:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	2201      	movs	r2, #1
 800ea80:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800ea84:	2300      	movs	r3, #0
}
 800ea86:	4618      	mov	r0, r3
 800ea88:	3710      	adds	r7, #16
 800ea8a:	46bd      	mov	sp, r7
 800ea8c:	bd80      	pop	{r7, pc}
 800ea8e:	bf00      	nop
 800ea90:	f000f800 	.word	0xf000f800

0800ea94 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 800ea94:	b480      	push	{r7}
 800ea96:	b083      	sub	sp, #12
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 800ea9c:	bf00      	nop
 800ea9e:	370c      	adds	r7, #12
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa6:	4770      	bx	lr

0800eaa8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800eaa8:	b5b0      	push	{r4, r5, r7, lr}
 800eaaa:	b084      	sub	sp, #16
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	60f8      	str	r0, [r7, #12]
 800eab0:	60b9      	str	r1, [r7, #8]
 800eab2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800eaba:	2b01      	cmp	r3, #1
 800eabc:	d101      	bne.n	800eac2 <HAL_LTDC_ConfigLayer+0x1a>
 800eabe:	2302      	movs	r3, #2
 800eac0:	e02c      	b.n	800eb1c <HAL_LTDC_ConfigLayer+0x74>
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	2201      	movs	r2, #1
 800eac6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	2202      	movs	r2, #2
 800eace:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800ead2:	68fa      	ldr	r2, [r7, #12]
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	2134      	movs	r1, #52	; 0x34
 800ead8:	fb01 f303 	mul.w	r3, r1, r3
 800eadc:	4413      	add	r3, r2
 800eade:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800eae2:	68bb      	ldr	r3, [r7, #8]
 800eae4:	4614      	mov	r4, r2
 800eae6:	461d      	mov	r5, r3
 800eae8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eaea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eaec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eaee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eaf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eaf2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eaf4:	682b      	ldr	r3, [r5, #0]
 800eaf6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800eaf8:	687a      	ldr	r2, [r7, #4]
 800eafa:	68b9      	ldr	r1, [r7, #8]
 800eafc:	68f8      	ldr	r0, [r7, #12]
 800eafe:	f000 f811 	bl	800eb24 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	2201      	movs	r2, #1
 800eb08:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	2201      	movs	r2, #1
 800eb0e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	2200      	movs	r2, #0
 800eb16:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800eb1a:	2300      	movs	r3, #0
}
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	3710      	adds	r7, #16
 800eb20:	46bd      	mov	sp, r7
 800eb22:	bdb0      	pop	{r4, r5, r7, pc}

0800eb24 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800eb24:	b480      	push	{r7}
 800eb26:	b089      	sub	sp, #36	; 0x24
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	60f8      	str	r0, [r7, #12]
 800eb2c:	60b9      	str	r1, [r7, #8]
 800eb2e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800eb30:	68bb      	ldr	r3, [r7, #8]
 800eb32:	685a      	ldr	r2, [r3, #4]
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	68db      	ldr	r3, [r3, #12]
 800eb3a:	0c1b      	lsrs	r3, r3, #16
 800eb3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800eb40:	4413      	add	r3, r2
 800eb42:	041b      	lsls	r3, r3, #16
 800eb44:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	461a      	mov	r2, r3
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	01db      	lsls	r3, r3, #7
 800eb50:	4413      	add	r3, r2
 800eb52:	3384      	adds	r3, #132	; 0x84
 800eb54:	685b      	ldr	r3, [r3, #4]
 800eb56:	68fa      	ldr	r2, [r7, #12]
 800eb58:	6812      	ldr	r2, [r2, #0]
 800eb5a:	4611      	mov	r1, r2
 800eb5c:	687a      	ldr	r2, [r7, #4]
 800eb5e:	01d2      	lsls	r2, r2, #7
 800eb60:	440a      	add	r2, r1
 800eb62:	3284      	adds	r2, #132	; 0x84
 800eb64:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800eb68:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800eb6a:	68bb      	ldr	r3, [r7, #8]
 800eb6c:	681a      	ldr	r2, [r3, #0]
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	68db      	ldr	r3, [r3, #12]
 800eb74:	0c1b      	lsrs	r3, r3, #16
 800eb76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800eb7a:	4413      	add	r3, r2
 800eb7c:	1c5a      	adds	r2, r3, #1
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	4619      	mov	r1, r3
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	01db      	lsls	r3, r3, #7
 800eb88:	440b      	add	r3, r1
 800eb8a:	3384      	adds	r3, #132	; 0x84
 800eb8c:	4619      	mov	r1, r3
 800eb8e:	69fb      	ldr	r3, [r7, #28]
 800eb90:	4313      	orrs	r3, r2
 800eb92:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800eb94:	68bb      	ldr	r3, [r7, #8]
 800eb96:	68da      	ldr	r2, [r3, #12]
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	68db      	ldr	r3, [r3, #12]
 800eb9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800eba2:	4413      	add	r3, r2
 800eba4:	041b      	lsls	r3, r3, #16
 800eba6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	461a      	mov	r2, r3
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	01db      	lsls	r3, r3, #7
 800ebb2:	4413      	add	r3, r2
 800ebb4:	3384      	adds	r3, #132	; 0x84
 800ebb6:	689b      	ldr	r3, [r3, #8]
 800ebb8:	68fa      	ldr	r2, [r7, #12]
 800ebba:	6812      	ldr	r2, [r2, #0]
 800ebbc:	4611      	mov	r1, r2
 800ebbe:	687a      	ldr	r2, [r7, #4]
 800ebc0:	01d2      	lsls	r2, r2, #7
 800ebc2:	440a      	add	r2, r1
 800ebc4:	3284      	adds	r2, #132	; 0x84
 800ebc6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800ebca:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800ebcc:	68bb      	ldr	r3, [r7, #8]
 800ebce:	689a      	ldr	r2, [r3, #8]
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	68db      	ldr	r3, [r3, #12]
 800ebd6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ebda:	4413      	add	r3, r2
 800ebdc:	1c5a      	adds	r2, r3, #1
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	4619      	mov	r1, r3
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	01db      	lsls	r3, r3, #7
 800ebe8:	440b      	add	r3, r1
 800ebea:	3384      	adds	r3, #132	; 0x84
 800ebec:	4619      	mov	r1, r3
 800ebee:	69fb      	ldr	r3, [r7, #28]
 800ebf0:	4313      	orrs	r3, r2
 800ebf2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	461a      	mov	r2, r3
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	01db      	lsls	r3, r3, #7
 800ebfe:	4413      	add	r3, r2
 800ec00:	3384      	adds	r3, #132	; 0x84
 800ec02:	691b      	ldr	r3, [r3, #16]
 800ec04:	68fa      	ldr	r2, [r7, #12]
 800ec06:	6812      	ldr	r2, [r2, #0]
 800ec08:	4611      	mov	r1, r2
 800ec0a:	687a      	ldr	r2, [r7, #4]
 800ec0c:	01d2      	lsls	r2, r2, #7
 800ec0e:	440a      	add	r2, r1
 800ec10:	3284      	adds	r2, #132	; 0x84
 800ec12:	f023 0307 	bic.w	r3, r3, #7
 800ec16:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	461a      	mov	r2, r3
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	01db      	lsls	r3, r3, #7
 800ec22:	4413      	add	r3, r2
 800ec24:	3384      	adds	r3, #132	; 0x84
 800ec26:	461a      	mov	r2, r3
 800ec28:	68bb      	ldr	r3, [r7, #8]
 800ec2a:	691b      	ldr	r3, [r3, #16]
 800ec2c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800ec2e:	68bb      	ldr	r3, [r7, #8]
 800ec30:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ec34:	021b      	lsls	r3, r3, #8
 800ec36:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800ec38:	68bb      	ldr	r3, [r7, #8]
 800ec3a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800ec3e:	041b      	lsls	r3, r3, #16
 800ec40:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800ec42:	68bb      	ldr	r3, [r7, #8]
 800ec44:	699b      	ldr	r3, [r3, #24]
 800ec46:	061b      	lsls	r3, r3, #24
 800ec48:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	461a      	mov	r2, r3
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	01db      	lsls	r3, r3, #7
 800ec54:	4413      	add	r3, r2
 800ec56:	3384      	adds	r3, #132	; 0x84
 800ec58:	699b      	ldr	r3, [r3, #24]
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	461a      	mov	r2, r3
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	01db      	lsls	r3, r3, #7
 800ec64:	4413      	add	r3, r2
 800ec66:	3384      	adds	r3, #132	; 0x84
 800ec68:	461a      	mov	r2, r3
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800ec6e:	68bb      	ldr	r3, [r7, #8]
 800ec70:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ec74:	461a      	mov	r2, r3
 800ec76:	69fb      	ldr	r3, [r7, #28]
 800ec78:	431a      	orrs	r2, r3
 800ec7a:	69bb      	ldr	r3, [r7, #24]
 800ec7c:	431a      	orrs	r2, r3
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	4619      	mov	r1, r3
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	01db      	lsls	r3, r3, #7
 800ec88:	440b      	add	r3, r1
 800ec8a:	3384      	adds	r3, #132	; 0x84
 800ec8c:	4619      	mov	r1, r3
 800ec8e:	697b      	ldr	r3, [r7, #20]
 800ec90:	4313      	orrs	r3, r2
 800ec92:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	461a      	mov	r2, r3
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	01db      	lsls	r3, r3, #7
 800ec9e:	4413      	add	r3, r2
 800eca0:	3384      	adds	r3, #132	; 0x84
 800eca2:	695b      	ldr	r3, [r3, #20]
 800eca4:	68fa      	ldr	r2, [r7, #12]
 800eca6:	6812      	ldr	r2, [r2, #0]
 800eca8:	4611      	mov	r1, r2
 800ecaa:	687a      	ldr	r2, [r7, #4]
 800ecac:	01d2      	lsls	r2, r2, #7
 800ecae:	440a      	add	r2, r1
 800ecb0:	3284      	adds	r2, #132	; 0x84
 800ecb2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ecb6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	461a      	mov	r2, r3
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	01db      	lsls	r3, r3, #7
 800ecc2:	4413      	add	r3, r2
 800ecc4:	3384      	adds	r3, #132	; 0x84
 800ecc6:	461a      	mov	r2, r3
 800ecc8:	68bb      	ldr	r3, [r7, #8]
 800ecca:	695b      	ldr	r3, [r3, #20]
 800eccc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	461a      	mov	r2, r3
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	01db      	lsls	r3, r3, #7
 800ecd8:	4413      	add	r3, r2
 800ecda:	3384      	adds	r3, #132	; 0x84
 800ecdc:	69da      	ldr	r2, [r3, #28]
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	4619      	mov	r1, r3
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	01db      	lsls	r3, r3, #7
 800ece8:	440b      	add	r3, r1
 800ecea:	3384      	adds	r3, #132	; 0x84
 800ecec:	4619      	mov	r1, r3
 800ecee:	4b58      	ldr	r3, [pc, #352]	; (800ee50 <LTDC_SetConfig+0x32c>)
 800ecf0:	4013      	ands	r3, r2
 800ecf2:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800ecf4:	68bb      	ldr	r3, [r7, #8]
 800ecf6:	69da      	ldr	r2, [r3, #28]
 800ecf8:	68bb      	ldr	r3, [r7, #8]
 800ecfa:	6a1b      	ldr	r3, [r3, #32]
 800ecfc:	68f9      	ldr	r1, [r7, #12]
 800ecfe:	6809      	ldr	r1, [r1, #0]
 800ed00:	4608      	mov	r0, r1
 800ed02:	6879      	ldr	r1, [r7, #4]
 800ed04:	01c9      	lsls	r1, r1, #7
 800ed06:	4401      	add	r1, r0
 800ed08:	3184      	adds	r1, #132	; 0x84
 800ed0a:	4313      	orrs	r3, r2
 800ed0c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	461a      	mov	r2, r3
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	01db      	lsls	r3, r3, #7
 800ed18:	4413      	add	r3, r2
 800ed1a:	3384      	adds	r3, #132	; 0x84
 800ed1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	461a      	mov	r2, r3
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	01db      	lsls	r3, r3, #7
 800ed28:	4413      	add	r3, r2
 800ed2a:	3384      	adds	r3, #132	; 0x84
 800ed2c:	461a      	mov	r2, r3
 800ed2e:	2300      	movs	r3, #0
 800ed30:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	461a      	mov	r2, r3
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	01db      	lsls	r3, r3, #7
 800ed3c:	4413      	add	r3, r2
 800ed3e:	3384      	adds	r3, #132	; 0x84
 800ed40:	461a      	mov	r2, r3
 800ed42:	68bb      	ldr	r3, [r7, #8]
 800ed44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed46:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800ed48:	68bb      	ldr	r3, [r7, #8]
 800ed4a:	691b      	ldr	r3, [r3, #16]
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d102      	bne.n	800ed56 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800ed50:	2304      	movs	r3, #4
 800ed52:	61fb      	str	r3, [r7, #28]
 800ed54:	e01b      	b.n	800ed8e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800ed56:	68bb      	ldr	r3, [r7, #8]
 800ed58:	691b      	ldr	r3, [r3, #16]
 800ed5a:	2b01      	cmp	r3, #1
 800ed5c:	d102      	bne.n	800ed64 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800ed5e:	2303      	movs	r3, #3
 800ed60:	61fb      	str	r3, [r7, #28]
 800ed62:	e014      	b.n	800ed8e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800ed64:	68bb      	ldr	r3, [r7, #8]
 800ed66:	691b      	ldr	r3, [r3, #16]
 800ed68:	2b04      	cmp	r3, #4
 800ed6a:	d00b      	beq.n	800ed84 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800ed6c:	68bb      	ldr	r3, [r7, #8]
 800ed6e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800ed70:	2b02      	cmp	r3, #2
 800ed72:	d007      	beq.n	800ed84 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800ed74:	68bb      	ldr	r3, [r7, #8]
 800ed76:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800ed78:	2b03      	cmp	r3, #3
 800ed7a:	d003      	beq.n	800ed84 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800ed7c:	68bb      	ldr	r3, [r7, #8]
 800ed7e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800ed80:	2b07      	cmp	r3, #7
 800ed82:	d102      	bne.n	800ed8a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800ed84:	2302      	movs	r3, #2
 800ed86:	61fb      	str	r3, [r7, #28]
 800ed88:	e001      	b.n	800ed8e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800ed8a:	2301      	movs	r3, #1
 800ed8c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	461a      	mov	r2, r3
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	01db      	lsls	r3, r3, #7
 800ed98:	4413      	add	r3, r2
 800ed9a:	3384      	adds	r3, #132	; 0x84
 800ed9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed9e:	68fa      	ldr	r2, [r7, #12]
 800eda0:	6812      	ldr	r2, [r2, #0]
 800eda2:	4611      	mov	r1, r2
 800eda4:	687a      	ldr	r2, [r7, #4]
 800eda6:	01d2      	lsls	r2, r2, #7
 800eda8:	440a      	add	r2, r1
 800edaa:	3284      	adds	r2, #132	; 0x84
 800edac:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800edb0:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800edb2:	68bb      	ldr	r3, [r7, #8]
 800edb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edb6:	69fa      	ldr	r2, [r7, #28]
 800edb8:	fb02 f303 	mul.w	r3, r2, r3
 800edbc:	041a      	lsls	r2, r3, #16
 800edbe:	68bb      	ldr	r3, [r7, #8]
 800edc0:	6859      	ldr	r1, [r3, #4]
 800edc2:	68bb      	ldr	r3, [r7, #8]
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	1acb      	subs	r3, r1, r3
 800edc8:	69f9      	ldr	r1, [r7, #28]
 800edca:	fb01 f303 	mul.w	r3, r1, r3
 800edce:	3307      	adds	r3, #7
 800edd0:	68f9      	ldr	r1, [r7, #12]
 800edd2:	6809      	ldr	r1, [r1, #0]
 800edd4:	4608      	mov	r0, r1
 800edd6:	6879      	ldr	r1, [r7, #4]
 800edd8:	01c9      	lsls	r1, r1, #7
 800edda:	4401      	add	r1, r0
 800eddc:	3184      	adds	r1, #132	; 0x84
 800edde:	4313      	orrs	r3, r2
 800ede0:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	461a      	mov	r2, r3
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	01db      	lsls	r3, r3, #7
 800edec:	4413      	add	r3, r2
 800edee:	3384      	adds	r3, #132	; 0x84
 800edf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	4619      	mov	r1, r3
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	01db      	lsls	r3, r3, #7
 800edfc:	440b      	add	r3, r1
 800edfe:	3384      	adds	r3, #132	; 0x84
 800ee00:	4619      	mov	r1, r3
 800ee02:	4b14      	ldr	r3, [pc, #80]	; (800ee54 <LTDC_SetConfig+0x330>)
 800ee04:	4013      	ands	r3, r2
 800ee06:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	461a      	mov	r2, r3
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	01db      	lsls	r3, r3, #7
 800ee12:	4413      	add	r3, r2
 800ee14:	3384      	adds	r3, #132	; 0x84
 800ee16:	461a      	mov	r2, r3
 800ee18:	68bb      	ldr	r3, [r7, #8]
 800ee1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee1c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	461a      	mov	r2, r3
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	01db      	lsls	r3, r3, #7
 800ee28:	4413      	add	r3, r2
 800ee2a:	3384      	adds	r3, #132	; 0x84
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	68fa      	ldr	r2, [r7, #12]
 800ee30:	6812      	ldr	r2, [r2, #0]
 800ee32:	4611      	mov	r1, r2
 800ee34:	687a      	ldr	r2, [r7, #4]
 800ee36:	01d2      	lsls	r2, r2, #7
 800ee38:	440a      	add	r2, r1
 800ee3a:	3284      	adds	r2, #132	; 0x84
 800ee3c:	f043 0301 	orr.w	r3, r3, #1
 800ee40:	6013      	str	r3, [r2, #0]
}
 800ee42:	bf00      	nop
 800ee44:	3724      	adds	r7, #36	; 0x24
 800ee46:	46bd      	mov	sp, r7
 800ee48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee4c:	4770      	bx	lr
 800ee4e:	bf00      	nop
 800ee50:	fffff8f8 	.word	0xfffff8f8
 800ee54:	fffff800 	.word	0xfffff800

0800ee58 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800ee58:	b580      	push	{r7, lr}
 800ee5a:	b084      	sub	sp, #16
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800ee60:	f7fa f8c8 	bl	8008ff4 <HAL_GetTick>
 800ee64:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d101      	bne.n	800ee70 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 800ee6c:	2301      	movs	r3, #1
 800ee6e:	e03b      	b.n	800eee8 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	2200      	movs	r2, #0
 800ee74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	2202      	movs	r2, #2
 800ee7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	68da      	ldr	r2, [r3, #12]
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	f022 0201 	bic.w	r2, r2, #1
 800ee8e:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800ee90:	e00f      	b.n	800eeb2 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800ee92:	f7fa f8af 	bl	8008ff4 <HAL_GetTick>
 800ee96:	4602      	mov	r2, r0
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	1ad3      	subs	r3, r2, r3
 800ee9c:	2b05      	cmp	r3, #5
 800ee9e:	d908      	bls.n	800eeb2 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	2240      	movs	r2, #64	; 0x40
 800eea4:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	2203      	movs	r2, #3
 800eeaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
 800eeae:	2301      	movs	r3, #1
 800eeb0:	e01a      	b.n	800eee8 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	68db      	ldr	r3, [r3, #12]
 800eeb8:	f003 0301 	and.w	r3, r3, #1
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d1e8      	bne.n	800ee92 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 800eec0:	6878      	ldr	r0, [r7, #4]
 800eec2:	f000 f9c3 	bl	800f24c <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	2200      	movs	r2, #0
 800eeca:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	2200      	movs	r2, #0
 800eed0:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	2200      	movs	r2, #0
 800eed6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	2200      	movs	r2, #0
 800eedc:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	2201      	movs	r2, #1
 800eee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800eee6:	2300      	movs	r3, #0
}
 800eee8:	4618      	mov	r0, r3
 800eeea:	3710      	adds	r7, #16
 800eeec:	46bd      	mov	sp, r7
 800eeee:	bd80      	pop	{r7, pc}

0800eef0 <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
 800eef0:	b480      	push	{r7}
 800eef2:	b083      	sub	sp, #12
 800eef4:	af00      	add	r7, sp, #0
 800eef6:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d101      	bne.n	800ef02 <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800eefe:	2301      	movs	r3, #1
 800ef00:	e048      	b.n	800ef94 <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	68da      	ldr	r2, [r3, #12]
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	f022 0201 	bic.w	r2, r2, #1
 800ef10:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	2200      	movs	r2, #0
 800ef18:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	2200      	movs	r2, #0
 800ef20:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	2200      	movs	r2, #0
 800ef28:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	2200      	movs	r2, #0
 800ef30:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	2200      	movs	r2, #0
 800ef38:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	2200      	movs	r2, #0
 800ef40:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	2200      	movs	r2, #0
 800ef48:	625a      	str	r2, [r3, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	2200      	movs	r2, #0
 800ef50:	629a      	str	r2, [r3, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	2200      	movs	r2, #0
 800ef58:	631a      	str	r2, [r3, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	2200      	movs	r2, #0
 800ef60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	221f      	movs	r2, #31
 800ef68:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	2200      	movs	r2, #0
 800ef6e:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	2200      	movs	r2, #0
 800ef74:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	2200      	movs	r2, #0
 800ef7a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	2200      	movs	r2, #0
 800ef80:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	2200      	movs	r2, #0
 800ef86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	2200      	movs	r2, #0
 800ef8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ef92:	2300      	movs	r3, #0
}
 800ef94:	4618      	mov	r0, r3
 800ef96:	370c      	adds	r7, #12
 800ef98:	46bd      	mov	sp, r7
 800ef9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef9e:	4770      	bx	lr

0800efa0 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 800efa0:	b580      	push	{r7, lr}
 800efa2:	b086      	sub	sp, #24
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 800efa8:	2300      	movs	r3, #0
 800efaa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800efac:	4b9a      	ldr	r3, [pc, #616]	; (800f218 <HAL_MDMA_IRQHandler+0x278>)
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	4a9a      	ldr	r2, [pc, #616]	; (800f21c <HAL_MDMA_IRQHandler+0x27c>)
 800efb2:	fba2 2303 	umull	r2, r3, r2, r3
 800efb6:	0a9b      	lsrs	r3, r3, #10
 800efb8:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	461a      	mov	r2, r3
 800efc0:	4b97      	ldr	r3, [pc, #604]	; (800f220 <HAL_MDMA_IRQHandler+0x280>)
 800efc2:	4413      	add	r3, r2
 800efc4:	099b      	lsrs	r3, r3, #6
 800efc6:	f003 031f 	and.w	r3, r3, #31
 800efca:	2201      	movs	r2, #1
 800efcc:	fa02 f303 	lsl.w	r3, r2, r3
 800efd0:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800efd2:	f04f 43a4 	mov.w	r3, #1375731712	; 0x52000000
 800efd6:	681a      	ldr	r2, [r3, #0]
 800efd8:	693b      	ldr	r3, [r7, #16]
 800efda:	4013      	ands	r3, r2
 800efdc:	2b00      	cmp	r3, #0
 800efde:	f000 812e 	beq.w	800f23e <HAL_MDMA_IRQHandler+0x29e>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	f003 0301 	and.w	r3, r3, #1
 800efec:	2b00      	cmp	r3, #0
 800efee:	d054      	beq.n	800f09a <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	68db      	ldr	r3, [r3, #12]
 800eff6:	f003 0302 	and.w	r3, r3, #2
 800effa:	2b00      	cmp	r3, #0
 800effc:	d04d      	beq.n	800f09a <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	68da      	ldr	r2, [r3, #12]
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	f022 0202 	bic.w	r2, r2, #2
 800f00c:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	689b      	ldr	r3, [r3, #8]
 800f014:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d106      	bne.n	800f02e <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f024:	f043 0201 	orr.w	r2, r3, #1
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	669a      	str	r2, [r3, #104]	; 0x68
 800f02c:	e005      	b.n	800f03a <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f032:	f043 0202 	orr.w	r2, r3, #2
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f040:	2b00      	cmp	r3, #0
 800f042:	d005      	beq.n	800f050 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f048:	f043 0204 	orr.w	r2, r3, #4
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f056:	2b00      	cmp	r3, #0
 800f058:	d005      	beq.n	800f066 <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f05e:	f043 0208 	orr.w	r2, r3, #8
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d005      	beq.n	800f07c <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f074:	f043 0210 	orr.w	r2, r3, #16
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f082:	2b00      	cmp	r3, #0
 800f084:	d005      	beq.n	800f092 <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f08a:	f043 0220 	orr.w	r2, r3, #32
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	669a      	str	r2, [r3, #104]	; 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	2201      	movs	r2, #1
 800f098:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	f003 0310 	and.w	r3, r3, #16
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d012      	beq.n	800f0ce <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	68db      	ldr	r3, [r3, #12]
 800f0ae:	f003 0320 	and.w	r3, r3, #32
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d00b      	beq.n	800f0ce <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	2210      	movs	r2, #16
 800f0bc:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d003      	beq.n	800f0ce <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f0ca:	6878      	ldr	r0, [r7, #4]
 800f0cc:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	f003 0308 	and.w	r3, r3, #8
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d012      	beq.n	800f102 <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	68db      	ldr	r3, [r3, #12]
 800f0e2:	f003 0310 	and.w	r3, r3, #16
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d00b      	beq.n	800f102 <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	2208      	movs	r2, #8
 800f0f0:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d003      	beq.n	800f102 <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f0fe:	6878      	ldr	r0, [r7, #4]
 800f100:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	f003 0304 	and.w	r3, r3, #4
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d012      	beq.n	800f136 <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	68db      	ldr	r3, [r3, #12]
 800f116:	f003 0308 	and.w	r3, r3, #8
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d00b      	beq.n	800f136 <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	2204      	movs	r2, #4
 800f124:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d003      	beq.n	800f136 <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f132:	6878      	ldr	r0, [r7, #4]
 800f134:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	f003 0302 	and.w	r3, r3, #2
 800f140:	2b00      	cmp	r3, #0
 800f142:	d039      	beq.n	800f1b8 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	68db      	ldr	r3, [r3, #12]
 800f14a:	f003 0304 	and.w	r3, r3, #4
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d032      	beq.n	800f1b8 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	68da      	ldr	r2, [r3, #12]
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 800f160:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f168:	b2db      	uxtb	r3, r3
 800f16a:	2b04      	cmp	r3, #4
 800f16c:	d110      	bne.n	800f190 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	2200      	movs	r2, #0
 800f172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	2201      	movs	r2, #1
 800f17a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        if(hmdma->XferAbortCallback != NULL)
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f182:	2b00      	cmp	r3, #0
 800f184:	d05d      	beq.n	800f242 <HAL_MDMA_IRQHandler+0x2a2>
        {
          hmdma->XferAbortCallback(hmdma);
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f18a:	6878      	ldr	r0, [r7, #4]
 800f18c:	4798      	blx	r3
        }
        return;
 800f18e:	e058      	b.n	800f242 <HAL_MDMA_IRQHandler+0x2a2>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	2202      	movs	r2, #2
 800f196:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	2200      	movs	r2, #0
 800f19c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	2201      	movs	r2, #1
 800f1a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if(hmdma->XferCpltCallback != NULL)
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d003      	beq.n	800f1b8 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f1b4:	6878      	ldr	r0, [r7, #4]
 800f1b6:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d041      	beq.n	800f244 <HAL_MDMA_IRQHandler+0x2a4>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	2204      	movs	r2, #4
 800f1c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	68da      	ldr	r2, [r3, #12]
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	f022 0201 	bic.w	r2, r2, #1
 800f1d6:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 800f1d8:	68bb      	ldr	r3, [r7, #8]
 800f1da:	3301      	adds	r3, #1
 800f1dc:	60bb      	str	r3, [r7, #8]
 800f1de:	697a      	ldr	r2, [r7, #20]
 800f1e0:	429a      	cmp	r2, r3
 800f1e2:	d307      	bcc.n	800f1f4 <HAL_MDMA_IRQHandler+0x254>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	68db      	ldr	r3, [r3, #12]
 800f1ea:	f003 0301 	and.w	r3, r3, #1
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d1f2      	bne.n	800f1d8 <HAL_MDMA_IRQHandler+0x238>
 800f1f2:	e000      	b.n	800f1f6 <HAL_MDMA_IRQHandler+0x256>
        break;
 800f1f4:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	2200      	movs	r2, #0
 800f1fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	68db      	ldr	r3, [r3, #12]
 800f204:	f003 0301 	and.w	r3, r3, #1
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d00b      	beq.n	800f224 <HAL_MDMA_IRQHandler+0x284>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	2203      	movs	r2, #3
 800f210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800f214:	e00a      	b.n	800f22c <HAL_MDMA_IRQHandler+0x28c>
 800f216:	bf00      	nop
 800f218:	240000f4 	.word	0x240000f4
 800f21c:	1b4e81b5 	.word	0x1b4e81b5
 800f220:	adffffc0 	.word	0xadffffc0
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	2201      	movs	r2, #1
 800f228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f230:	2b00      	cmp	r3, #0
 800f232:	d007      	beq.n	800f244 <HAL_MDMA_IRQHandler+0x2a4>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f238:	6878      	ldr	r0, [r7, #4]
 800f23a:	4798      	blx	r3
 800f23c:	e002      	b.n	800f244 <HAL_MDMA_IRQHandler+0x2a4>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 800f23e:	bf00      	nop
 800f240:	e000      	b.n	800f244 <HAL_MDMA_IRQHandler+0x2a4>
        return;
 800f242:	bf00      	nop
    }
  }
}
 800f244:	3718      	adds	r7, #24
 800f246:	46bd      	mov	sp, r7
 800f248:	bd80      	pop	{r7, pc}
 800f24a:	bf00      	nop

0800f24c <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800f24c:	b480      	push	{r7}
 800f24e:	b085      	sub	sp, #20
 800f250:	af00      	add	r7, sp, #0
 800f252:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	68d9      	ldr	r1, [r3, #12]
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	691a      	ldr	r2, [r3, #16]
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	430a      	orrs	r2, r1
 800f262:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	695a      	ldr	r2, [r3, #20]
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	699b      	ldr	r3, [r3, #24]
 800f26c:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800f272:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	6a1b      	ldr	r3, [r3, #32]
 800f278:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800f27e:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f284:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800f28a:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f290:	3b01      	subs	r3, #1
 800f292:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 800f294:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800f2a0:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800f2a2:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	685b      	ldr	r3, [r3, #4]
 800f2a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f2ac:	d107      	bne.n	800f2be <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	691a      	ldr	r2, [r3, #16]
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 800f2bc:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	2200      	movs	r2, #0
 800f2c4:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	da11      	bge.n	800f2f2 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	695a      	ldr	r2, [r3, #20]
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800f2dc:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2e2:	425b      	negs	r3, r3
 800f2e4:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	68fa      	ldr	r2, [r7, #12]
 800f2ec:	b292      	uxth	r2, r2
 800f2ee:	621a      	str	r2, [r3, #32]
 800f2f0:	e006      	b.n	800f300 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2f6:	461a      	mov	r2, r3
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	b292      	uxth	r2, r2
 800f2fe:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f304:	2b00      	cmp	r3, #0
 800f306:	da15      	bge.n	800f334 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	695a      	ldr	r2, [r3, #20]
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800f316:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f31c:	425b      	negs	r3, r3
 800f31e:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	6a19      	ldr	r1, [r3, #32]
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	041a      	lsls	r2, r3, #16
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	430a      	orrs	r2, r1
 800f330:	621a      	str	r2, [r3, #32]
 800f332:	e009      	b.n	800f348 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	6a19      	ldr	r1, [r3, #32]
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f33e:	041a      	lsls	r2, r3, #16
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	430a      	orrs	r2, r1
 800f346:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	685b      	ldr	r3, [r3, #4]
 800f34c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f350:	d006      	beq.n	800f360 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	685a      	ldr	r2, [r3, #4]
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	b2d2      	uxtb	r2, r2
 800f35c:	629a      	str	r2, [r3, #40]	; 0x28
 800f35e:	e003      	b.n	800f368 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	2200      	movs	r2, #0
 800f366:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	2200      	movs	r2, #0
 800f36e:	625a      	str	r2, [r3, #36]	; 0x24
}
 800f370:	bf00      	nop
 800f372:	3714      	adds	r7, #20
 800f374:	46bd      	mov	sp, r7
 800f376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f37a:	4770      	bx	lr

0800f37c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800f37c:	b580      	push	{r7, lr}
 800f37e:	b084      	sub	sp, #16
 800f380:	af00      	add	r7, sp, #0
 800f382:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800f384:	4b29      	ldr	r3, [pc, #164]	; (800f42c <HAL_PWREx_ConfigSupply+0xb0>)
 800f386:	68db      	ldr	r3, [r3, #12]
 800f388:	f003 0307 	and.w	r3, r3, #7
 800f38c:	2b06      	cmp	r3, #6
 800f38e:	d00a      	beq.n	800f3a6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800f390:	4b26      	ldr	r3, [pc, #152]	; (800f42c <HAL_PWREx_ConfigSupply+0xb0>)
 800f392:	68db      	ldr	r3, [r3, #12]
 800f394:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f398:	687a      	ldr	r2, [r7, #4]
 800f39a:	429a      	cmp	r2, r3
 800f39c:	d001      	beq.n	800f3a2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800f39e:	2301      	movs	r3, #1
 800f3a0:	e040      	b.n	800f424 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800f3a2:	2300      	movs	r3, #0
 800f3a4:	e03e      	b.n	800f424 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800f3a6:	4b21      	ldr	r3, [pc, #132]	; (800f42c <HAL_PWREx_ConfigSupply+0xb0>)
 800f3a8:	68db      	ldr	r3, [r3, #12]
 800f3aa:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800f3ae:	491f      	ldr	r1, [pc, #124]	; (800f42c <HAL_PWREx_ConfigSupply+0xb0>)
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	4313      	orrs	r3, r2
 800f3b4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800f3b6:	f7f9 fe1d 	bl	8008ff4 <HAL_GetTick>
 800f3ba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800f3bc:	e009      	b.n	800f3d2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800f3be:	f7f9 fe19 	bl	8008ff4 <HAL_GetTick>
 800f3c2:	4602      	mov	r2, r0
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	1ad3      	subs	r3, r2, r3
 800f3c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f3cc:	d901      	bls.n	800f3d2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800f3ce:	2301      	movs	r3, #1
 800f3d0:	e028      	b.n	800f424 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800f3d2:	4b16      	ldr	r3, [pc, #88]	; (800f42c <HAL_PWREx_ConfigSupply+0xb0>)
 800f3d4:	685b      	ldr	r3, [r3, #4]
 800f3d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f3da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f3de:	d1ee      	bne.n	800f3be <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	2b1e      	cmp	r3, #30
 800f3e4:	d008      	beq.n	800f3f8 <HAL_PWREx_ConfigSupply+0x7c>
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	2b2e      	cmp	r3, #46	; 0x2e
 800f3ea:	d005      	beq.n	800f3f8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	2b1d      	cmp	r3, #29
 800f3f0:	d002      	beq.n	800f3f8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	2b2d      	cmp	r3, #45	; 0x2d
 800f3f6:	d114      	bne.n	800f422 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800f3f8:	f7f9 fdfc 	bl	8008ff4 <HAL_GetTick>
 800f3fc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800f3fe:	e009      	b.n	800f414 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800f400:	f7f9 fdf8 	bl	8008ff4 <HAL_GetTick>
 800f404:	4602      	mov	r2, r0
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	1ad3      	subs	r3, r2, r3
 800f40a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f40e:	d901      	bls.n	800f414 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800f410:	2301      	movs	r3, #1
 800f412:	e007      	b.n	800f424 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800f414:	4b05      	ldr	r3, [pc, #20]	; (800f42c <HAL_PWREx_ConfigSupply+0xb0>)
 800f416:	68db      	ldr	r3, [r3, #12]
 800f418:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f41c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f420:	d1ee      	bne.n	800f400 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800f422:	2300      	movs	r3, #0
}
 800f424:	4618      	mov	r0, r3
 800f426:	3710      	adds	r7, #16
 800f428:	46bd      	mov	sp, r7
 800f42a:	bd80      	pop	{r7, pc}
 800f42c:	58024800 	.word	0x58024800

0800f430 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800f430:	b580      	push	{r7, lr}
 800f432:	b08c      	sub	sp, #48	; 0x30
 800f434:	af00      	add	r7, sp, #0
 800f436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d101      	bne.n	800f442 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800f43e:	2301      	movs	r3, #1
 800f440:	e3ff      	b.n	800fc42 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	f003 0301 	and.w	r3, r3, #1
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	f000 8087 	beq.w	800f55e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f450:	4b99      	ldr	r3, [pc, #612]	; (800f6b8 <HAL_RCC_OscConfig+0x288>)
 800f452:	691b      	ldr	r3, [r3, #16]
 800f454:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f458:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800f45a:	4b97      	ldr	r3, [pc, #604]	; (800f6b8 <HAL_RCC_OscConfig+0x288>)
 800f45c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f45e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800f460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f462:	2b10      	cmp	r3, #16
 800f464:	d007      	beq.n	800f476 <HAL_RCC_OscConfig+0x46>
 800f466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f468:	2b18      	cmp	r3, #24
 800f46a:	d110      	bne.n	800f48e <HAL_RCC_OscConfig+0x5e>
 800f46c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f46e:	f003 0303 	and.w	r3, r3, #3
 800f472:	2b02      	cmp	r3, #2
 800f474:	d10b      	bne.n	800f48e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f476:	4b90      	ldr	r3, [pc, #576]	; (800f6b8 <HAL_RCC_OscConfig+0x288>)
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d06c      	beq.n	800f55c <HAL_RCC_OscConfig+0x12c>
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	685b      	ldr	r3, [r3, #4]
 800f486:	2b00      	cmp	r3, #0
 800f488:	d168      	bne.n	800f55c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800f48a:	2301      	movs	r3, #1
 800f48c:	e3d9      	b.n	800fc42 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	685b      	ldr	r3, [r3, #4]
 800f492:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f496:	d106      	bne.n	800f4a6 <HAL_RCC_OscConfig+0x76>
 800f498:	4b87      	ldr	r3, [pc, #540]	; (800f6b8 <HAL_RCC_OscConfig+0x288>)
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	4a86      	ldr	r2, [pc, #536]	; (800f6b8 <HAL_RCC_OscConfig+0x288>)
 800f49e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f4a2:	6013      	str	r3, [r2, #0]
 800f4a4:	e02e      	b.n	800f504 <HAL_RCC_OscConfig+0xd4>
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	685b      	ldr	r3, [r3, #4]
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d10c      	bne.n	800f4c8 <HAL_RCC_OscConfig+0x98>
 800f4ae:	4b82      	ldr	r3, [pc, #520]	; (800f6b8 <HAL_RCC_OscConfig+0x288>)
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	4a81      	ldr	r2, [pc, #516]	; (800f6b8 <HAL_RCC_OscConfig+0x288>)
 800f4b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f4b8:	6013      	str	r3, [r2, #0]
 800f4ba:	4b7f      	ldr	r3, [pc, #508]	; (800f6b8 <HAL_RCC_OscConfig+0x288>)
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	4a7e      	ldr	r2, [pc, #504]	; (800f6b8 <HAL_RCC_OscConfig+0x288>)
 800f4c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f4c4:	6013      	str	r3, [r2, #0]
 800f4c6:	e01d      	b.n	800f504 <HAL_RCC_OscConfig+0xd4>
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	685b      	ldr	r3, [r3, #4]
 800f4cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f4d0:	d10c      	bne.n	800f4ec <HAL_RCC_OscConfig+0xbc>
 800f4d2:	4b79      	ldr	r3, [pc, #484]	; (800f6b8 <HAL_RCC_OscConfig+0x288>)
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	4a78      	ldr	r2, [pc, #480]	; (800f6b8 <HAL_RCC_OscConfig+0x288>)
 800f4d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800f4dc:	6013      	str	r3, [r2, #0]
 800f4de:	4b76      	ldr	r3, [pc, #472]	; (800f6b8 <HAL_RCC_OscConfig+0x288>)
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	4a75      	ldr	r2, [pc, #468]	; (800f6b8 <HAL_RCC_OscConfig+0x288>)
 800f4e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f4e8:	6013      	str	r3, [r2, #0]
 800f4ea:	e00b      	b.n	800f504 <HAL_RCC_OscConfig+0xd4>
 800f4ec:	4b72      	ldr	r3, [pc, #456]	; (800f6b8 <HAL_RCC_OscConfig+0x288>)
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	4a71      	ldr	r2, [pc, #452]	; (800f6b8 <HAL_RCC_OscConfig+0x288>)
 800f4f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f4f6:	6013      	str	r3, [r2, #0]
 800f4f8:	4b6f      	ldr	r3, [pc, #444]	; (800f6b8 <HAL_RCC_OscConfig+0x288>)
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	4a6e      	ldr	r2, [pc, #440]	; (800f6b8 <HAL_RCC_OscConfig+0x288>)
 800f4fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f502:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	685b      	ldr	r3, [r3, #4]
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d013      	beq.n	800f534 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f50c:	f7f9 fd72 	bl	8008ff4 <HAL_GetTick>
 800f510:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800f512:	e008      	b.n	800f526 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800f514:	f7f9 fd6e 	bl	8008ff4 <HAL_GetTick>
 800f518:	4602      	mov	r2, r0
 800f51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f51c:	1ad3      	subs	r3, r2, r3
 800f51e:	2b64      	cmp	r3, #100	; 0x64
 800f520:	d901      	bls.n	800f526 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800f522:	2303      	movs	r3, #3
 800f524:	e38d      	b.n	800fc42 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800f526:	4b64      	ldr	r3, [pc, #400]	; (800f6b8 <HAL_RCC_OscConfig+0x288>)
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d0f0      	beq.n	800f514 <HAL_RCC_OscConfig+0xe4>
 800f532:	e014      	b.n	800f55e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f534:	f7f9 fd5e 	bl	8008ff4 <HAL_GetTick>
 800f538:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800f53a:	e008      	b.n	800f54e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800f53c:	f7f9 fd5a 	bl	8008ff4 <HAL_GetTick>
 800f540:	4602      	mov	r2, r0
 800f542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f544:	1ad3      	subs	r3, r2, r3
 800f546:	2b64      	cmp	r3, #100	; 0x64
 800f548:	d901      	bls.n	800f54e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800f54a:	2303      	movs	r3, #3
 800f54c:	e379      	b.n	800fc42 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800f54e:	4b5a      	ldr	r3, [pc, #360]	; (800f6b8 <HAL_RCC_OscConfig+0x288>)
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f556:	2b00      	cmp	r3, #0
 800f558:	d1f0      	bne.n	800f53c <HAL_RCC_OscConfig+0x10c>
 800f55a:	e000      	b.n	800f55e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f55c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	f003 0302 	and.w	r3, r3, #2
 800f566:	2b00      	cmp	r3, #0
 800f568:	f000 80ae 	beq.w	800f6c8 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f56c:	4b52      	ldr	r3, [pc, #328]	; (800f6b8 <HAL_RCC_OscConfig+0x288>)
 800f56e:	691b      	ldr	r3, [r3, #16]
 800f570:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f574:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800f576:	4b50      	ldr	r3, [pc, #320]	; (800f6b8 <HAL_RCC_OscConfig+0x288>)
 800f578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f57a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800f57c:	6a3b      	ldr	r3, [r7, #32]
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d007      	beq.n	800f592 <HAL_RCC_OscConfig+0x162>
 800f582:	6a3b      	ldr	r3, [r7, #32]
 800f584:	2b18      	cmp	r3, #24
 800f586:	d13a      	bne.n	800f5fe <HAL_RCC_OscConfig+0x1ce>
 800f588:	69fb      	ldr	r3, [r7, #28]
 800f58a:	f003 0303 	and.w	r3, r3, #3
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d135      	bne.n	800f5fe <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f592:	4b49      	ldr	r3, [pc, #292]	; (800f6b8 <HAL_RCC_OscConfig+0x288>)
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	f003 0304 	and.w	r3, r3, #4
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d005      	beq.n	800f5aa <HAL_RCC_OscConfig+0x17a>
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	68db      	ldr	r3, [r3, #12]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d101      	bne.n	800f5aa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800f5a6:	2301      	movs	r3, #1
 800f5a8:	e34b      	b.n	800fc42 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f5aa:	f7f9 fd53 	bl	8009054 <HAL_GetREVID>
 800f5ae:	4603      	mov	r3, r0
 800f5b0:	f241 0203 	movw	r2, #4099	; 0x1003
 800f5b4:	4293      	cmp	r3, r2
 800f5b6:	d817      	bhi.n	800f5e8 <HAL_RCC_OscConfig+0x1b8>
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	691b      	ldr	r3, [r3, #16]
 800f5bc:	2b40      	cmp	r3, #64	; 0x40
 800f5be:	d108      	bne.n	800f5d2 <HAL_RCC_OscConfig+0x1a2>
 800f5c0:	4b3d      	ldr	r3, [pc, #244]	; (800f6b8 <HAL_RCC_OscConfig+0x288>)
 800f5c2:	685b      	ldr	r3, [r3, #4]
 800f5c4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800f5c8:	4a3b      	ldr	r2, [pc, #236]	; (800f6b8 <HAL_RCC_OscConfig+0x288>)
 800f5ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f5ce:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f5d0:	e07a      	b.n	800f6c8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f5d2:	4b39      	ldr	r3, [pc, #228]	; (800f6b8 <HAL_RCC_OscConfig+0x288>)
 800f5d4:	685b      	ldr	r3, [r3, #4]
 800f5d6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	691b      	ldr	r3, [r3, #16]
 800f5de:	031b      	lsls	r3, r3, #12
 800f5e0:	4935      	ldr	r1, [pc, #212]	; (800f6b8 <HAL_RCC_OscConfig+0x288>)
 800f5e2:	4313      	orrs	r3, r2
 800f5e4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f5e6:	e06f      	b.n	800f6c8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f5e8:	4b33      	ldr	r3, [pc, #204]	; (800f6b8 <HAL_RCC_OscConfig+0x288>)
 800f5ea:	685b      	ldr	r3, [r3, #4]
 800f5ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	691b      	ldr	r3, [r3, #16]
 800f5f4:	061b      	lsls	r3, r3, #24
 800f5f6:	4930      	ldr	r1, [pc, #192]	; (800f6b8 <HAL_RCC_OscConfig+0x288>)
 800f5f8:	4313      	orrs	r3, r2
 800f5fa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f5fc:	e064      	b.n	800f6c8 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	68db      	ldr	r3, [r3, #12]
 800f602:	2b00      	cmp	r3, #0
 800f604:	d045      	beq.n	800f692 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800f606:	4b2c      	ldr	r3, [pc, #176]	; (800f6b8 <HAL_RCC_OscConfig+0x288>)
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	f023 0219 	bic.w	r2, r3, #25
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	68db      	ldr	r3, [r3, #12]
 800f612:	4929      	ldr	r1, [pc, #164]	; (800f6b8 <HAL_RCC_OscConfig+0x288>)
 800f614:	4313      	orrs	r3, r2
 800f616:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f618:	f7f9 fcec 	bl	8008ff4 <HAL_GetTick>
 800f61c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800f61e:	e008      	b.n	800f632 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800f620:	f7f9 fce8 	bl	8008ff4 <HAL_GetTick>
 800f624:	4602      	mov	r2, r0
 800f626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f628:	1ad3      	subs	r3, r2, r3
 800f62a:	2b02      	cmp	r3, #2
 800f62c:	d901      	bls.n	800f632 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800f62e:	2303      	movs	r3, #3
 800f630:	e307      	b.n	800fc42 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800f632:	4b21      	ldr	r3, [pc, #132]	; (800f6b8 <HAL_RCC_OscConfig+0x288>)
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	f003 0304 	and.w	r3, r3, #4
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d0f0      	beq.n	800f620 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f63e:	f7f9 fd09 	bl	8009054 <HAL_GetREVID>
 800f642:	4603      	mov	r3, r0
 800f644:	f241 0203 	movw	r2, #4099	; 0x1003
 800f648:	4293      	cmp	r3, r2
 800f64a:	d817      	bhi.n	800f67c <HAL_RCC_OscConfig+0x24c>
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	691b      	ldr	r3, [r3, #16]
 800f650:	2b40      	cmp	r3, #64	; 0x40
 800f652:	d108      	bne.n	800f666 <HAL_RCC_OscConfig+0x236>
 800f654:	4b18      	ldr	r3, [pc, #96]	; (800f6b8 <HAL_RCC_OscConfig+0x288>)
 800f656:	685b      	ldr	r3, [r3, #4]
 800f658:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800f65c:	4a16      	ldr	r2, [pc, #88]	; (800f6b8 <HAL_RCC_OscConfig+0x288>)
 800f65e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f662:	6053      	str	r3, [r2, #4]
 800f664:	e030      	b.n	800f6c8 <HAL_RCC_OscConfig+0x298>
 800f666:	4b14      	ldr	r3, [pc, #80]	; (800f6b8 <HAL_RCC_OscConfig+0x288>)
 800f668:	685b      	ldr	r3, [r3, #4]
 800f66a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	691b      	ldr	r3, [r3, #16]
 800f672:	031b      	lsls	r3, r3, #12
 800f674:	4910      	ldr	r1, [pc, #64]	; (800f6b8 <HAL_RCC_OscConfig+0x288>)
 800f676:	4313      	orrs	r3, r2
 800f678:	604b      	str	r3, [r1, #4]
 800f67a:	e025      	b.n	800f6c8 <HAL_RCC_OscConfig+0x298>
 800f67c:	4b0e      	ldr	r3, [pc, #56]	; (800f6b8 <HAL_RCC_OscConfig+0x288>)
 800f67e:	685b      	ldr	r3, [r3, #4]
 800f680:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	691b      	ldr	r3, [r3, #16]
 800f688:	061b      	lsls	r3, r3, #24
 800f68a:	490b      	ldr	r1, [pc, #44]	; (800f6b8 <HAL_RCC_OscConfig+0x288>)
 800f68c:	4313      	orrs	r3, r2
 800f68e:	604b      	str	r3, [r1, #4]
 800f690:	e01a      	b.n	800f6c8 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800f692:	4b09      	ldr	r3, [pc, #36]	; (800f6b8 <HAL_RCC_OscConfig+0x288>)
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	4a08      	ldr	r2, [pc, #32]	; (800f6b8 <HAL_RCC_OscConfig+0x288>)
 800f698:	f023 0301 	bic.w	r3, r3, #1
 800f69c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f69e:	f7f9 fca9 	bl	8008ff4 <HAL_GetTick>
 800f6a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800f6a4:	e00a      	b.n	800f6bc <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800f6a6:	f7f9 fca5 	bl	8008ff4 <HAL_GetTick>
 800f6aa:	4602      	mov	r2, r0
 800f6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6ae:	1ad3      	subs	r3, r2, r3
 800f6b0:	2b02      	cmp	r3, #2
 800f6b2:	d903      	bls.n	800f6bc <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 800f6b4:	2303      	movs	r3, #3
 800f6b6:	e2c4      	b.n	800fc42 <HAL_RCC_OscConfig+0x812>
 800f6b8:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800f6bc:	4ba4      	ldr	r3, [pc, #656]	; (800f950 <HAL_RCC_OscConfig+0x520>)
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	f003 0304 	and.w	r3, r3, #4
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d1ee      	bne.n	800f6a6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	f003 0310 	and.w	r3, r3, #16
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	f000 80a9 	beq.w	800f828 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f6d6:	4b9e      	ldr	r3, [pc, #632]	; (800f950 <HAL_RCC_OscConfig+0x520>)
 800f6d8:	691b      	ldr	r3, [r3, #16]
 800f6da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f6de:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800f6e0:	4b9b      	ldr	r3, [pc, #620]	; (800f950 <HAL_RCC_OscConfig+0x520>)
 800f6e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6e4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800f6e6:	69bb      	ldr	r3, [r7, #24]
 800f6e8:	2b08      	cmp	r3, #8
 800f6ea:	d007      	beq.n	800f6fc <HAL_RCC_OscConfig+0x2cc>
 800f6ec:	69bb      	ldr	r3, [r7, #24]
 800f6ee:	2b18      	cmp	r3, #24
 800f6f0:	d13a      	bne.n	800f768 <HAL_RCC_OscConfig+0x338>
 800f6f2:	697b      	ldr	r3, [r7, #20]
 800f6f4:	f003 0303 	and.w	r3, r3, #3
 800f6f8:	2b01      	cmp	r3, #1
 800f6fa:	d135      	bne.n	800f768 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800f6fc:	4b94      	ldr	r3, [pc, #592]	; (800f950 <HAL_RCC_OscConfig+0x520>)
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f704:	2b00      	cmp	r3, #0
 800f706:	d005      	beq.n	800f714 <HAL_RCC_OscConfig+0x2e4>
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	69db      	ldr	r3, [r3, #28]
 800f70c:	2b80      	cmp	r3, #128	; 0x80
 800f70e:	d001      	beq.n	800f714 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800f710:	2301      	movs	r3, #1
 800f712:	e296      	b.n	800fc42 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800f714:	f7f9 fc9e 	bl	8009054 <HAL_GetREVID>
 800f718:	4603      	mov	r3, r0
 800f71a:	f241 0203 	movw	r2, #4099	; 0x1003
 800f71e:	4293      	cmp	r3, r2
 800f720:	d817      	bhi.n	800f752 <HAL_RCC_OscConfig+0x322>
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	6a1b      	ldr	r3, [r3, #32]
 800f726:	2b20      	cmp	r3, #32
 800f728:	d108      	bne.n	800f73c <HAL_RCC_OscConfig+0x30c>
 800f72a:	4b89      	ldr	r3, [pc, #548]	; (800f950 <HAL_RCC_OscConfig+0x520>)
 800f72c:	685b      	ldr	r3, [r3, #4]
 800f72e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800f732:	4a87      	ldr	r2, [pc, #540]	; (800f950 <HAL_RCC_OscConfig+0x520>)
 800f734:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f738:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800f73a:	e075      	b.n	800f828 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800f73c:	4b84      	ldr	r3, [pc, #528]	; (800f950 <HAL_RCC_OscConfig+0x520>)
 800f73e:	685b      	ldr	r3, [r3, #4]
 800f740:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	6a1b      	ldr	r3, [r3, #32]
 800f748:	069b      	lsls	r3, r3, #26
 800f74a:	4981      	ldr	r1, [pc, #516]	; (800f950 <HAL_RCC_OscConfig+0x520>)
 800f74c:	4313      	orrs	r3, r2
 800f74e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800f750:	e06a      	b.n	800f828 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800f752:	4b7f      	ldr	r3, [pc, #508]	; (800f950 <HAL_RCC_OscConfig+0x520>)
 800f754:	68db      	ldr	r3, [r3, #12]
 800f756:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	6a1b      	ldr	r3, [r3, #32]
 800f75e:	061b      	lsls	r3, r3, #24
 800f760:	497b      	ldr	r1, [pc, #492]	; (800f950 <HAL_RCC_OscConfig+0x520>)
 800f762:	4313      	orrs	r3, r2
 800f764:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800f766:	e05f      	b.n	800f828 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	69db      	ldr	r3, [r3, #28]
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d042      	beq.n	800f7f6 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800f770:	4b77      	ldr	r3, [pc, #476]	; (800f950 <HAL_RCC_OscConfig+0x520>)
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	4a76      	ldr	r2, [pc, #472]	; (800f950 <HAL_RCC_OscConfig+0x520>)
 800f776:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f77a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f77c:	f7f9 fc3a 	bl	8008ff4 <HAL_GetTick>
 800f780:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800f782:	e008      	b.n	800f796 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800f784:	f7f9 fc36 	bl	8008ff4 <HAL_GetTick>
 800f788:	4602      	mov	r2, r0
 800f78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f78c:	1ad3      	subs	r3, r2, r3
 800f78e:	2b02      	cmp	r3, #2
 800f790:	d901      	bls.n	800f796 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800f792:	2303      	movs	r3, #3
 800f794:	e255      	b.n	800fc42 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800f796:	4b6e      	ldr	r3, [pc, #440]	; (800f950 <HAL_RCC_OscConfig+0x520>)
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d0f0      	beq.n	800f784 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800f7a2:	f7f9 fc57 	bl	8009054 <HAL_GetREVID>
 800f7a6:	4603      	mov	r3, r0
 800f7a8:	f241 0203 	movw	r2, #4099	; 0x1003
 800f7ac:	4293      	cmp	r3, r2
 800f7ae:	d817      	bhi.n	800f7e0 <HAL_RCC_OscConfig+0x3b0>
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	6a1b      	ldr	r3, [r3, #32]
 800f7b4:	2b20      	cmp	r3, #32
 800f7b6:	d108      	bne.n	800f7ca <HAL_RCC_OscConfig+0x39a>
 800f7b8:	4b65      	ldr	r3, [pc, #404]	; (800f950 <HAL_RCC_OscConfig+0x520>)
 800f7ba:	685b      	ldr	r3, [r3, #4]
 800f7bc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800f7c0:	4a63      	ldr	r2, [pc, #396]	; (800f950 <HAL_RCC_OscConfig+0x520>)
 800f7c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f7c6:	6053      	str	r3, [r2, #4]
 800f7c8:	e02e      	b.n	800f828 <HAL_RCC_OscConfig+0x3f8>
 800f7ca:	4b61      	ldr	r3, [pc, #388]	; (800f950 <HAL_RCC_OscConfig+0x520>)
 800f7cc:	685b      	ldr	r3, [r3, #4]
 800f7ce:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	6a1b      	ldr	r3, [r3, #32]
 800f7d6:	069b      	lsls	r3, r3, #26
 800f7d8:	495d      	ldr	r1, [pc, #372]	; (800f950 <HAL_RCC_OscConfig+0x520>)
 800f7da:	4313      	orrs	r3, r2
 800f7dc:	604b      	str	r3, [r1, #4]
 800f7de:	e023      	b.n	800f828 <HAL_RCC_OscConfig+0x3f8>
 800f7e0:	4b5b      	ldr	r3, [pc, #364]	; (800f950 <HAL_RCC_OscConfig+0x520>)
 800f7e2:	68db      	ldr	r3, [r3, #12]
 800f7e4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	6a1b      	ldr	r3, [r3, #32]
 800f7ec:	061b      	lsls	r3, r3, #24
 800f7ee:	4958      	ldr	r1, [pc, #352]	; (800f950 <HAL_RCC_OscConfig+0x520>)
 800f7f0:	4313      	orrs	r3, r2
 800f7f2:	60cb      	str	r3, [r1, #12]
 800f7f4:	e018      	b.n	800f828 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800f7f6:	4b56      	ldr	r3, [pc, #344]	; (800f950 <HAL_RCC_OscConfig+0x520>)
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	4a55      	ldr	r2, [pc, #340]	; (800f950 <HAL_RCC_OscConfig+0x520>)
 800f7fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f800:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f802:	f7f9 fbf7 	bl	8008ff4 <HAL_GetTick>
 800f806:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800f808:	e008      	b.n	800f81c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800f80a:	f7f9 fbf3 	bl	8008ff4 <HAL_GetTick>
 800f80e:	4602      	mov	r2, r0
 800f810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f812:	1ad3      	subs	r3, r2, r3
 800f814:	2b02      	cmp	r3, #2
 800f816:	d901      	bls.n	800f81c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 800f818:	2303      	movs	r3, #3
 800f81a:	e212      	b.n	800fc42 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800f81c:	4b4c      	ldr	r3, [pc, #304]	; (800f950 <HAL_RCC_OscConfig+0x520>)
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f824:	2b00      	cmp	r3, #0
 800f826:	d1f0      	bne.n	800f80a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	f003 0308 	and.w	r3, r3, #8
 800f830:	2b00      	cmp	r3, #0
 800f832:	d036      	beq.n	800f8a2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	695b      	ldr	r3, [r3, #20]
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d019      	beq.n	800f870 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800f83c:	4b44      	ldr	r3, [pc, #272]	; (800f950 <HAL_RCC_OscConfig+0x520>)
 800f83e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f840:	4a43      	ldr	r2, [pc, #268]	; (800f950 <HAL_RCC_OscConfig+0x520>)
 800f842:	f043 0301 	orr.w	r3, r3, #1
 800f846:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f848:	f7f9 fbd4 	bl	8008ff4 <HAL_GetTick>
 800f84c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800f84e:	e008      	b.n	800f862 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800f850:	f7f9 fbd0 	bl	8008ff4 <HAL_GetTick>
 800f854:	4602      	mov	r2, r0
 800f856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f858:	1ad3      	subs	r3, r2, r3
 800f85a:	2b02      	cmp	r3, #2
 800f85c:	d901      	bls.n	800f862 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800f85e:	2303      	movs	r3, #3
 800f860:	e1ef      	b.n	800fc42 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800f862:	4b3b      	ldr	r3, [pc, #236]	; (800f950 <HAL_RCC_OscConfig+0x520>)
 800f864:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f866:	f003 0302 	and.w	r3, r3, #2
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d0f0      	beq.n	800f850 <HAL_RCC_OscConfig+0x420>
 800f86e:	e018      	b.n	800f8a2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800f870:	4b37      	ldr	r3, [pc, #220]	; (800f950 <HAL_RCC_OscConfig+0x520>)
 800f872:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f874:	4a36      	ldr	r2, [pc, #216]	; (800f950 <HAL_RCC_OscConfig+0x520>)
 800f876:	f023 0301 	bic.w	r3, r3, #1
 800f87a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f87c:	f7f9 fbba 	bl	8008ff4 <HAL_GetTick>
 800f880:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800f882:	e008      	b.n	800f896 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800f884:	f7f9 fbb6 	bl	8008ff4 <HAL_GetTick>
 800f888:	4602      	mov	r2, r0
 800f88a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f88c:	1ad3      	subs	r3, r2, r3
 800f88e:	2b02      	cmp	r3, #2
 800f890:	d901      	bls.n	800f896 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800f892:	2303      	movs	r3, #3
 800f894:	e1d5      	b.n	800fc42 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800f896:	4b2e      	ldr	r3, [pc, #184]	; (800f950 <HAL_RCC_OscConfig+0x520>)
 800f898:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f89a:	f003 0302 	and.w	r3, r3, #2
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d1f0      	bne.n	800f884 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	f003 0320 	and.w	r3, r3, #32
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d036      	beq.n	800f91c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	699b      	ldr	r3, [r3, #24]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d019      	beq.n	800f8ea <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800f8b6:	4b26      	ldr	r3, [pc, #152]	; (800f950 <HAL_RCC_OscConfig+0x520>)
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	4a25      	ldr	r2, [pc, #148]	; (800f950 <HAL_RCC_OscConfig+0x520>)
 800f8bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f8c0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800f8c2:	f7f9 fb97 	bl	8008ff4 <HAL_GetTick>
 800f8c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800f8c8:	e008      	b.n	800f8dc <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800f8ca:	f7f9 fb93 	bl	8008ff4 <HAL_GetTick>
 800f8ce:	4602      	mov	r2, r0
 800f8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8d2:	1ad3      	subs	r3, r2, r3
 800f8d4:	2b02      	cmp	r3, #2
 800f8d6:	d901      	bls.n	800f8dc <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 800f8d8:	2303      	movs	r3, #3
 800f8da:	e1b2      	b.n	800fc42 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800f8dc:	4b1c      	ldr	r3, [pc, #112]	; (800f950 <HAL_RCC_OscConfig+0x520>)
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d0f0      	beq.n	800f8ca <HAL_RCC_OscConfig+0x49a>
 800f8e8:	e018      	b.n	800f91c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800f8ea:	4b19      	ldr	r3, [pc, #100]	; (800f950 <HAL_RCC_OscConfig+0x520>)
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	4a18      	ldr	r2, [pc, #96]	; (800f950 <HAL_RCC_OscConfig+0x520>)
 800f8f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f8f4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800f8f6:	f7f9 fb7d 	bl	8008ff4 <HAL_GetTick>
 800f8fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800f8fc:	e008      	b.n	800f910 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800f8fe:	f7f9 fb79 	bl	8008ff4 <HAL_GetTick>
 800f902:	4602      	mov	r2, r0
 800f904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f906:	1ad3      	subs	r3, r2, r3
 800f908:	2b02      	cmp	r3, #2
 800f90a:	d901      	bls.n	800f910 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 800f90c:	2303      	movs	r3, #3
 800f90e:	e198      	b.n	800fc42 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800f910:	4b0f      	ldr	r3, [pc, #60]	; (800f950 <HAL_RCC_OscConfig+0x520>)
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d1f0      	bne.n	800f8fe <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	f003 0304 	and.w	r3, r3, #4
 800f924:	2b00      	cmp	r3, #0
 800f926:	f000 8085 	beq.w	800fa34 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800f92a:	4b0a      	ldr	r3, [pc, #40]	; (800f954 <HAL_RCC_OscConfig+0x524>)
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	4a09      	ldr	r2, [pc, #36]	; (800f954 <HAL_RCC_OscConfig+0x524>)
 800f930:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f934:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800f936:	f7f9 fb5d 	bl	8008ff4 <HAL_GetTick>
 800f93a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f93c:	e00c      	b.n	800f958 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800f93e:	f7f9 fb59 	bl	8008ff4 <HAL_GetTick>
 800f942:	4602      	mov	r2, r0
 800f944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f946:	1ad3      	subs	r3, r2, r3
 800f948:	2b64      	cmp	r3, #100	; 0x64
 800f94a:	d905      	bls.n	800f958 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 800f94c:	2303      	movs	r3, #3
 800f94e:	e178      	b.n	800fc42 <HAL_RCC_OscConfig+0x812>
 800f950:	58024400 	.word	0x58024400
 800f954:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f958:	4b96      	ldr	r3, [pc, #600]	; (800fbb4 <HAL_RCC_OscConfig+0x784>)
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f960:	2b00      	cmp	r3, #0
 800f962:	d0ec      	beq.n	800f93e <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	689b      	ldr	r3, [r3, #8]
 800f968:	2b01      	cmp	r3, #1
 800f96a:	d106      	bne.n	800f97a <HAL_RCC_OscConfig+0x54a>
 800f96c:	4b92      	ldr	r3, [pc, #584]	; (800fbb8 <HAL_RCC_OscConfig+0x788>)
 800f96e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f970:	4a91      	ldr	r2, [pc, #580]	; (800fbb8 <HAL_RCC_OscConfig+0x788>)
 800f972:	f043 0301 	orr.w	r3, r3, #1
 800f976:	6713      	str	r3, [r2, #112]	; 0x70
 800f978:	e02d      	b.n	800f9d6 <HAL_RCC_OscConfig+0x5a6>
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	689b      	ldr	r3, [r3, #8]
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d10c      	bne.n	800f99c <HAL_RCC_OscConfig+0x56c>
 800f982:	4b8d      	ldr	r3, [pc, #564]	; (800fbb8 <HAL_RCC_OscConfig+0x788>)
 800f984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f986:	4a8c      	ldr	r2, [pc, #560]	; (800fbb8 <HAL_RCC_OscConfig+0x788>)
 800f988:	f023 0301 	bic.w	r3, r3, #1
 800f98c:	6713      	str	r3, [r2, #112]	; 0x70
 800f98e:	4b8a      	ldr	r3, [pc, #552]	; (800fbb8 <HAL_RCC_OscConfig+0x788>)
 800f990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f992:	4a89      	ldr	r2, [pc, #548]	; (800fbb8 <HAL_RCC_OscConfig+0x788>)
 800f994:	f023 0304 	bic.w	r3, r3, #4
 800f998:	6713      	str	r3, [r2, #112]	; 0x70
 800f99a:	e01c      	b.n	800f9d6 <HAL_RCC_OscConfig+0x5a6>
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	689b      	ldr	r3, [r3, #8]
 800f9a0:	2b05      	cmp	r3, #5
 800f9a2:	d10c      	bne.n	800f9be <HAL_RCC_OscConfig+0x58e>
 800f9a4:	4b84      	ldr	r3, [pc, #528]	; (800fbb8 <HAL_RCC_OscConfig+0x788>)
 800f9a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f9a8:	4a83      	ldr	r2, [pc, #524]	; (800fbb8 <HAL_RCC_OscConfig+0x788>)
 800f9aa:	f043 0304 	orr.w	r3, r3, #4
 800f9ae:	6713      	str	r3, [r2, #112]	; 0x70
 800f9b0:	4b81      	ldr	r3, [pc, #516]	; (800fbb8 <HAL_RCC_OscConfig+0x788>)
 800f9b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f9b4:	4a80      	ldr	r2, [pc, #512]	; (800fbb8 <HAL_RCC_OscConfig+0x788>)
 800f9b6:	f043 0301 	orr.w	r3, r3, #1
 800f9ba:	6713      	str	r3, [r2, #112]	; 0x70
 800f9bc:	e00b      	b.n	800f9d6 <HAL_RCC_OscConfig+0x5a6>
 800f9be:	4b7e      	ldr	r3, [pc, #504]	; (800fbb8 <HAL_RCC_OscConfig+0x788>)
 800f9c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f9c2:	4a7d      	ldr	r2, [pc, #500]	; (800fbb8 <HAL_RCC_OscConfig+0x788>)
 800f9c4:	f023 0301 	bic.w	r3, r3, #1
 800f9c8:	6713      	str	r3, [r2, #112]	; 0x70
 800f9ca:	4b7b      	ldr	r3, [pc, #492]	; (800fbb8 <HAL_RCC_OscConfig+0x788>)
 800f9cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f9ce:	4a7a      	ldr	r2, [pc, #488]	; (800fbb8 <HAL_RCC_OscConfig+0x788>)
 800f9d0:	f023 0304 	bic.w	r3, r3, #4
 800f9d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	689b      	ldr	r3, [r3, #8]
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d015      	beq.n	800fa0a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f9de:	f7f9 fb09 	bl	8008ff4 <HAL_GetTick>
 800f9e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f9e4:	e00a      	b.n	800f9fc <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f9e6:	f7f9 fb05 	bl	8008ff4 <HAL_GetTick>
 800f9ea:	4602      	mov	r2, r0
 800f9ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9ee:	1ad3      	subs	r3, r2, r3
 800f9f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800f9f4:	4293      	cmp	r3, r2
 800f9f6:	d901      	bls.n	800f9fc <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 800f9f8:	2303      	movs	r3, #3
 800f9fa:	e122      	b.n	800fc42 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f9fc:	4b6e      	ldr	r3, [pc, #440]	; (800fbb8 <HAL_RCC_OscConfig+0x788>)
 800f9fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa00:	f003 0302 	and.w	r3, r3, #2
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d0ee      	beq.n	800f9e6 <HAL_RCC_OscConfig+0x5b6>
 800fa08:	e014      	b.n	800fa34 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fa0a:	f7f9 faf3 	bl	8008ff4 <HAL_GetTick>
 800fa0e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800fa10:	e00a      	b.n	800fa28 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800fa12:	f7f9 faef 	bl	8008ff4 <HAL_GetTick>
 800fa16:	4602      	mov	r2, r0
 800fa18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa1a:	1ad3      	subs	r3, r2, r3
 800fa1c:	f241 3288 	movw	r2, #5000	; 0x1388
 800fa20:	4293      	cmp	r3, r2
 800fa22:	d901      	bls.n	800fa28 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800fa24:	2303      	movs	r3, #3
 800fa26:	e10c      	b.n	800fc42 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800fa28:	4b63      	ldr	r3, [pc, #396]	; (800fbb8 <HAL_RCC_OscConfig+0x788>)
 800fa2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa2c:	f003 0302 	and.w	r3, r3, #2
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d1ee      	bne.n	800fa12 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	f000 8101 	beq.w	800fc40 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800fa3e:	4b5e      	ldr	r3, [pc, #376]	; (800fbb8 <HAL_RCC_OscConfig+0x788>)
 800fa40:	691b      	ldr	r3, [r3, #16]
 800fa42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fa46:	2b18      	cmp	r3, #24
 800fa48:	f000 80bc 	beq.w	800fbc4 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa50:	2b02      	cmp	r3, #2
 800fa52:	f040 8095 	bne.w	800fb80 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800fa56:	4b58      	ldr	r3, [pc, #352]	; (800fbb8 <HAL_RCC_OscConfig+0x788>)
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	4a57      	ldr	r2, [pc, #348]	; (800fbb8 <HAL_RCC_OscConfig+0x788>)
 800fa5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800fa60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fa62:	f7f9 fac7 	bl	8008ff4 <HAL_GetTick>
 800fa66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800fa68:	e008      	b.n	800fa7c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800fa6a:	f7f9 fac3 	bl	8008ff4 <HAL_GetTick>
 800fa6e:	4602      	mov	r2, r0
 800fa70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa72:	1ad3      	subs	r3, r2, r3
 800fa74:	2b02      	cmp	r3, #2
 800fa76:	d901      	bls.n	800fa7c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 800fa78:	2303      	movs	r3, #3
 800fa7a:	e0e2      	b.n	800fc42 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800fa7c:	4b4e      	ldr	r3, [pc, #312]	; (800fbb8 <HAL_RCC_OscConfig+0x788>)
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d1f0      	bne.n	800fa6a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800fa88:	4b4b      	ldr	r3, [pc, #300]	; (800fbb8 <HAL_RCC_OscConfig+0x788>)
 800fa8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fa8c:	4b4b      	ldr	r3, [pc, #300]	; (800fbbc <HAL_RCC_OscConfig+0x78c>)
 800fa8e:	4013      	ands	r3, r2
 800fa90:	687a      	ldr	r2, [r7, #4]
 800fa92:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800fa94:	687a      	ldr	r2, [r7, #4]
 800fa96:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800fa98:	0112      	lsls	r2, r2, #4
 800fa9a:	430a      	orrs	r2, r1
 800fa9c:	4946      	ldr	r1, [pc, #280]	; (800fbb8 <HAL_RCC_OscConfig+0x788>)
 800fa9e:	4313      	orrs	r3, r2
 800faa0:	628b      	str	r3, [r1, #40]	; 0x28
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800faa6:	3b01      	subs	r3, #1
 800faa8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fab0:	3b01      	subs	r3, #1
 800fab2:	025b      	lsls	r3, r3, #9
 800fab4:	b29b      	uxth	r3, r3
 800fab6:	431a      	orrs	r2, r3
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fabc:	3b01      	subs	r3, #1
 800fabe:	041b      	lsls	r3, r3, #16
 800fac0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800fac4:	431a      	orrs	r2, r3
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800faca:	3b01      	subs	r3, #1
 800facc:	061b      	lsls	r3, r3, #24
 800face:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800fad2:	4939      	ldr	r1, [pc, #228]	; (800fbb8 <HAL_RCC_OscConfig+0x788>)
 800fad4:	4313      	orrs	r3, r2
 800fad6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800fad8:	4b37      	ldr	r3, [pc, #220]	; (800fbb8 <HAL_RCC_OscConfig+0x788>)
 800fada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fadc:	4a36      	ldr	r2, [pc, #216]	; (800fbb8 <HAL_RCC_OscConfig+0x788>)
 800fade:	f023 0301 	bic.w	r3, r3, #1
 800fae2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800fae4:	4b34      	ldr	r3, [pc, #208]	; (800fbb8 <HAL_RCC_OscConfig+0x788>)
 800fae6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fae8:	4b35      	ldr	r3, [pc, #212]	; (800fbc0 <HAL_RCC_OscConfig+0x790>)
 800faea:	4013      	ands	r3, r2
 800faec:	687a      	ldr	r2, [r7, #4]
 800faee:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800faf0:	00d2      	lsls	r2, r2, #3
 800faf2:	4931      	ldr	r1, [pc, #196]	; (800fbb8 <HAL_RCC_OscConfig+0x788>)
 800faf4:	4313      	orrs	r3, r2
 800faf6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800faf8:	4b2f      	ldr	r3, [pc, #188]	; (800fbb8 <HAL_RCC_OscConfig+0x788>)
 800fafa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fafc:	f023 020c 	bic.w	r2, r3, #12
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb04:	492c      	ldr	r1, [pc, #176]	; (800fbb8 <HAL_RCC_OscConfig+0x788>)
 800fb06:	4313      	orrs	r3, r2
 800fb08:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800fb0a:	4b2b      	ldr	r3, [pc, #172]	; (800fbb8 <HAL_RCC_OscConfig+0x788>)
 800fb0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb0e:	f023 0202 	bic.w	r2, r3, #2
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb16:	4928      	ldr	r1, [pc, #160]	; (800fbb8 <HAL_RCC_OscConfig+0x788>)
 800fb18:	4313      	orrs	r3, r2
 800fb1a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800fb1c:	4b26      	ldr	r3, [pc, #152]	; (800fbb8 <HAL_RCC_OscConfig+0x788>)
 800fb1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb20:	4a25      	ldr	r2, [pc, #148]	; (800fbb8 <HAL_RCC_OscConfig+0x788>)
 800fb22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800fb26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fb28:	4b23      	ldr	r3, [pc, #140]	; (800fbb8 <HAL_RCC_OscConfig+0x788>)
 800fb2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb2c:	4a22      	ldr	r2, [pc, #136]	; (800fbb8 <HAL_RCC_OscConfig+0x788>)
 800fb2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800fb32:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800fb34:	4b20      	ldr	r3, [pc, #128]	; (800fbb8 <HAL_RCC_OscConfig+0x788>)
 800fb36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb38:	4a1f      	ldr	r2, [pc, #124]	; (800fbb8 <HAL_RCC_OscConfig+0x788>)
 800fb3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800fb3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800fb40:	4b1d      	ldr	r3, [pc, #116]	; (800fbb8 <HAL_RCC_OscConfig+0x788>)
 800fb42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb44:	4a1c      	ldr	r2, [pc, #112]	; (800fbb8 <HAL_RCC_OscConfig+0x788>)
 800fb46:	f043 0301 	orr.w	r3, r3, #1
 800fb4a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800fb4c:	4b1a      	ldr	r3, [pc, #104]	; (800fbb8 <HAL_RCC_OscConfig+0x788>)
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	4a19      	ldr	r2, [pc, #100]	; (800fbb8 <HAL_RCC_OscConfig+0x788>)
 800fb52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800fb56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fb58:	f7f9 fa4c 	bl	8008ff4 <HAL_GetTick>
 800fb5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800fb5e:	e008      	b.n	800fb72 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800fb60:	f7f9 fa48 	bl	8008ff4 <HAL_GetTick>
 800fb64:	4602      	mov	r2, r0
 800fb66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb68:	1ad3      	subs	r3, r2, r3
 800fb6a:	2b02      	cmp	r3, #2
 800fb6c:	d901      	bls.n	800fb72 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800fb6e:	2303      	movs	r3, #3
 800fb70:	e067      	b.n	800fc42 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800fb72:	4b11      	ldr	r3, [pc, #68]	; (800fbb8 <HAL_RCC_OscConfig+0x788>)
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d0f0      	beq.n	800fb60 <HAL_RCC_OscConfig+0x730>
 800fb7e:	e05f      	b.n	800fc40 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800fb80:	4b0d      	ldr	r3, [pc, #52]	; (800fbb8 <HAL_RCC_OscConfig+0x788>)
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	4a0c      	ldr	r2, [pc, #48]	; (800fbb8 <HAL_RCC_OscConfig+0x788>)
 800fb86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800fb8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fb8c:	f7f9 fa32 	bl	8008ff4 <HAL_GetTick>
 800fb90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800fb92:	e008      	b.n	800fba6 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800fb94:	f7f9 fa2e 	bl	8008ff4 <HAL_GetTick>
 800fb98:	4602      	mov	r2, r0
 800fb9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb9c:	1ad3      	subs	r3, r2, r3
 800fb9e:	2b02      	cmp	r3, #2
 800fba0:	d901      	bls.n	800fba6 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800fba2:	2303      	movs	r3, #3
 800fba4:	e04d      	b.n	800fc42 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800fba6:	4b04      	ldr	r3, [pc, #16]	; (800fbb8 <HAL_RCC_OscConfig+0x788>)
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d1f0      	bne.n	800fb94 <HAL_RCC_OscConfig+0x764>
 800fbb2:	e045      	b.n	800fc40 <HAL_RCC_OscConfig+0x810>
 800fbb4:	58024800 	.word	0x58024800
 800fbb8:	58024400 	.word	0x58024400
 800fbbc:	fffffc0c 	.word	0xfffffc0c
 800fbc0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800fbc4:	4b21      	ldr	r3, [pc, #132]	; (800fc4c <HAL_RCC_OscConfig+0x81c>)
 800fbc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fbc8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800fbca:	4b20      	ldr	r3, [pc, #128]	; (800fc4c <HAL_RCC_OscConfig+0x81c>)
 800fbcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fbce:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbd4:	2b01      	cmp	r3, #1
 800fbd6:	d031      	beq.n	800fc3c <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800fbd8:	693b      	ldr	r3, [r7, #16]
 800fbda:	f003 0203 	and.w	r2, r3, #3
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800fbe2:	429a      	cmp	r2, r3
 800fbe4:	d12a      	bne.n	800fc3c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800fbe6:	693b      	ldr	r3, [r7, #16]
 800fbe8:	091b      	lsrs	r3, r3, #4
 800fbea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800fbf2:	429a      	cmp	r2, r3
 800fbf4:	d122      	bne.n	800fc3c <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc00:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800fc02:	429a      	cmp	r2, r3
 800fc04:	d11a      	bne.n	800fc3c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	0a5b      	lsrs	r3, r3, #9
 800fc0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc12:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800fc14:	429a      	cmp	r2, r3
 800fc16:	d111      	bne.n	800fc3c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	0c1b      	lsrs	r3, r3, #16
 800fc1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc24:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800fc26:	429a      	cmp	r2, r3
 800fc28:	d108      	bne.n	800fc3c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	0e1b      	lsrs	r3, r3, #24
 800fc2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fc36:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800fc38:	429a      	cmp	r2, r3
 800fc3a:	d001      	beq.n	800fc40 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 800fc3c:	2301      	movs	r3, #1
 800fc3e:	e000      	b.n	800fc42 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800fc40:	2300      	movs	r3, #0
}
 800fc42:	4618      	mov	r0, r3
 800fc44:	3730      	adds	r7, #48	; 0x30
 800fc46:	46bd      	mov	sp, r7
 800fc48:	bd80      	pop	{r7, pc}
 800fc4a:	bf00      	nop
 800fc4c:	58024400 	.word	0x58024400

0800fc50 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800fc50:	b580      	push	{r7, lr}
 800fc52:	b086      	sub	sp, #24
 800fc54:	af00      	add	r7, sp, #0
 800fc56:	6078      	str	r0, [r7, #4]
 800fc58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d101      	bne.n	800fc64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800fc60:	2301      	movs	r3, #1
 800fc62:	e19c      	b.n	800ff9e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800fc64:	4b8a      	ldr	r3, [pc, #552]	; (800fe90 <HAL_RCC_ClockConfig+0x240>)
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	f003 030f 	and.w	r3, r3, #15
 800fc6c:	683a      	ldr	r2, [r7, #0]
 800fc6e:	429a      	cmp	r2, r3
 800fc70:	d910      	bls.n	800fc94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800fc72:	4b87      	ldr	r3, [pc, #540]	; (800fe90 <HAL_RCC_ClockConfig+0x240>)
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	f023 020f 	bic.w	r2, r3, #15
 800fc7a:	4985      	ldr	r1, [pc, #532]	; (800fe90 <HAL_RCC_ClockConfig+0x240>)
 800fc7c:	683b      	ldr	r3, [r7, #0]
 800fc7e:	4313      	orrs	r3, r2
 800fc80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800fc82:	4b83      	ldr	r3, [pc, #524]	; (800fe90 <HAL_RCC_ClockConfig+0x240>)
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	f003 030f 	and.w	r3, r3, #15
 800fc8a:	683a      	ldr	r2, [r7, #0]
 800fc8c:	429a      	cmp	r2, r3
 800fc8e:	d001      	beq.n	800fc94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800fc90:	2301      	movs	r3, #1
 800fc92:	e184      	b.n	800ff9e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	f003 0304 	and.w	r3, r3, #4
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d010      	beq.n	800fcc2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	691a      	ldr	r2, [r3, #16]
 800fca4:	4b7b      	ldr	r3, [pc, #492]	; (800fe94 <HAL_RCC_ClockConfig+0x244>)
 800fca6:	699b      	ldr	r3, [r3, #24]
 800fca8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800fcac:	429a      	cmp	r2, r3
 800fcae:	d908      	bls.n	800fcc2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800fcb0:	4b78      	ldr	r3, [pc, #480]	; (800fe94 <HAL_RCC_ClockConfig+0x244>)
 800fcb2:	699b      	ldr	r3, [r3, #24]
 800fcb4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	691b      	ldr	r3, [r3, #16]
 800fcbc:	4975      	ldr	r1, [pc, #468]	; (800fe94 <HAL_RCC_ClockConfig+0x244>)
 800fcbe:	4313      	orrs	r3, r2
 800fcc0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	f003 0308 	and.w	r3, r3, #8
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d010      	beq.n	800fcf0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	695a      	ldr	r2, [r3, #20]
 800fcd2:	4b70      	ldr	r3, [pc, #448]	; (800fe94 <HAL_RCC_ClockConfig+0x244>)
 800fcd4:	69db      	ldr	r3, [r3, #28]
 800fcd6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800fcda:	429a      	cmp	r2, r3
 800fcdc:	d908      	bls.n	800fcf0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800fcde:	4b6d      	ldr	r3, [pc, #436]	; (800fe94 <HAL_RCC_ClockConfig+0x244>)
 800fce0:	69db      	ldr	r3, [r3, #28]
 800fce2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	695b      	ldr	r3, [r3, #20]
 800fcea:	496a      	ldr	r1, [pc, #424]	; (800fe94 <HAL_RCC_ClockConfig+0x244>)
 800fcec:	4313      	orrs	r3, r2
 800fcee:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	f003 0310 	and.w	r3, r3, #16
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d010      	beq.n	800fd1e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	699a      	ldr	r2, [r3, #24]
 800fd00:	4b64      	ldr	r3, [pc, #400]	; (800fe94 <HAL_RCC_ClockConfig+0x244>)
 800fd02:	69db      	ldr	r3, [r3, #28]
 800fd04:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800fd08:	429a      	cmp	r2, r3
 800fd0a:	d908      	bls.n	800fd1e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800fd0c:	4b61      	ldr	r3, [pc, #388]	; (800fe94 <HAL_RCC_ClockConfig+0x244>)
 800fd0e:	69db      	ldr	r3, [r3, #28]
 800fd10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	699b      	ldr	r3, [r3, #24]
 800fd18:	495e      	ldr	r1, [pc, #376]	; (800fe94 <HAL_RCC_ClockConfig+0x244>)
 800fd1a:	4313      	orrs	r3, r2
 800fd1c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	f003 0320 	and.w	r3, r3, #32
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d010      	beq.n	800fd4c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	69da      	ldr	r2, [r3, #28]
 800fd2e:	4b59      	ldr	r3, [pc, #356]	; (800fe94 <HAL_RCC_ClockConfig+0x244>)
 800fd30:	6a1b      	ldr	r3, [r3, #32]
 800fd32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800fd36:	429a      	cmp	r2, r3
 800fd38:	d908      	bls.n	800fd4c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800fd3a:	4b56      	ldr	r3, [pc, #344]	; (800fe94 <HAL_RCC_ClockConfig+0x244>)
 800fd3c:	6a1b      	ldr	r3, [r3, #32]
 800fd3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	69db      	ldr	r3, [r3, #28]
 800fd46:	4953      	ldr	r1, [pc, #332]	; (800fe94 <HAL_RCC_ClockConfig+0x244>)
 800fd48:	4313      	orrs	r3, r2
 800fd4a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	f003 0302 	and.w	r3, r3, #2
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d010      	beq.n	800fd7a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	68da      	ldr	r2, [r3, #12]
 800fd5c:	4b4d      	ldr	r3, [pc, #308]	; (800fe94 <HAL_RCC_ClockConfig+0x244>)
 800fd5e:	699b      	ldr	r3, [r3, #24]
 800fd60:	f003 030f 	and.w	r3, r3, #15
 800fd64:	429a      	cmp	r2, r3
 800fd66:	d908      	bls.n	800fd7a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800fd68:	4b4a      	ldr	r3, [pc, #296]	; (800fe94 <HAL_RCC_ClockConfig+0x244>)
 800fd6a:	699b      	ldr	r3, [r3, #24]
 800fd6c:	f023 020f 	bic.w	r2, r3, #15
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	68db      	ldr	r3, [r3, #12]
 800fd74:	4947      	ldr	r1, [pc, #284]	; (800fe94 <HAL_RCC_ClockConfig+0x244>)
 800fd76:	4313      	orrs	r3, r2
 800fd78:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	f003 0301 	and.w	r3, r3, #1
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d055      	beq.n	800fe32 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800fd86:	4b43      	ldr	r3, [pc, #268]	; (800fe94 <HAL_RCC_ClockConfig+0x244>)
 800fd88:	699b      	ldr	r3, [r3, #24]
 800fd8a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	689b      	ldr	r3, [r3, #8]
 800fd92:	4940      	ldr	r1, [pc, #256]	; (800fe94 <HAL_RCC_ClockConfig+0x244>)
 800fd94:	4313      	orrs	r3, r2
 800fd96:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	685b      	ldr	r3, [r3, #4]
 800fd9c:	2b02      	cmp	r3, #2
 800fd9e:	d107      	bne.n	800fdb0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800fda0:	4b3c      	ldr	r3, [pc, #240]	; (800fe94 <HAL_RCC_ClockConfig+0x244>)
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d121      	bne.n	800fdf0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800fdac:	2301      	movs	r3, #1
 800fdae:	e0f6      	b.n	800ff9e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	685b      	ldr	r3, [r3, #4]
 800fdb4:	2b03      	cmp	r3, #3
 800fdb6:	d107      	bne.n	800fdc8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800fdb8:	4b36      	ldr	r3, [pc, #216]	; (800fe94 <HAL_RCC_ClockConfig+0x244>)
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d115      	bne.n	800fdf0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800fdc4:	2301      	movs	r3, #1
 800fdc6:	e0ea      	b.n	800ff9e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	685b      	ldr	r3, [r3, #4]
 800fdcc:	2b01      	cmp	r3, #1
 800fdce:	d107      	bne.n	800fde0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800fdd0:	4b30      	ldr	r3, [pc, #192]	; (800fe94 <HAL_RCC_ClockConfig+0x244>)
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d109      	bne.n	800fdf0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800fddc:	2301      	movs	r3, #1
 800fdde:	e0de      	b.n	800ff9e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800fde0:	4b2c      	ldr	r3, [pc, #176]	; (800fe94 <HAL_RCC_ClockConfig+0x244>)
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	f003 0304 	and.w	r3, r3, #4
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d101      	bne.n	800fdf0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800fdec:	2301      	movs	r3, #1
 800fdee:	e0d6      	b.n	800ff9e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800fdf0:	4b28      	ldr	r3, [pc, #160]	; (800fe94 <HAL_RCC_ClockConfig+0x244>)
 800fdf2:	691b      	ldr	r3, [r3, #16]
 800fdf4:	f023 0207 	bic.w	r2, r3, #7
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	685b      	ldr	r3, [r3, #4]
 800fdfc:	4925      	ldr	r1, [pc, #148]	; (800fe94 <HAL_RCC_ClockConfig+0x244>)
 800fdfe:	4313      	orrs	r3, r2
 800fe00:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fe02:	f7f9 f8f7 	bl	8008ff4 <HAL_GetTick>
 800fe06:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800fe08:	e00a      	b.n	800fe20 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800fe0a:	f7f9 f8f3 	bl	8008ff4 <HAL_GetTick>
 800fe0e:	4602      	mov	r2, r0
 800fe10:	697b      	ldr	r3, [r7, #20]
 800fe12:	1ad3      	subs	r3, r2, r3
 800fe14:	f241 3288 	movw	r2, #5000	; 0x1388
 800fe18:	4293      	cmp	r3, r2
 800fe1a:	d901      	bls.n	800fe20 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800fe1c:	2303      	movs	r3, #3
 800fe1e:	e0be      	b.n	800ff9e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800fe20:	4b1c      	ldr	r3, [pc, #112]	; (800fe94 <HAL_RCC_ClockConfig+0x244>)
 800fe22:	691b      	ldr	r3, [r3, #16]
 800fe24:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	685b      	ldr	r3, [r3, #4]
 800fe2c:	00db      	lsls	r3, r3, #3
 800fe2e:	429a      	cmp	r2, r3
 800fe30:	d1eb      	bne.n	800fe0a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	f003 0302 	and.w	r3, r3, #2
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d010      	beq.n	800fe60 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	68da      	ldr	r2, [r3, #12]
 800fe42:	4b14      	ldr	r3, [pc, #80]	; (800fe94 <HAL_RCC_ClockConfig+0x244>)
 800fe44:	699b      	ldr	r3, [r3, #24]
 800fe46:	f003 030f 	and.w	r3, r3, #15
 800fe4a:	429a      	cmp	r2, r3
 800fe4c:	d208      	bcs.n	800fe60 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800fe4e:	4b11      	ldr	r3, [pc, #68]	; (800fe94 <HAL_RCC_ClockConfig+0x244>)
 800fe50:	699b      	ldr	r3, [r3, #24]
 800fe52:	f023 020f 	bic.w	r2, r3, #15
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	68db      	ldr	r3, [r3, #12]
 800fe5a:	490e      	ldr	r1, [pc, #56]	; (800fe94 <HAL_RCC_ClockConfig+0x244>)
 800fe5c:	4313      	orrs	r3, r2
 800fe5e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800fe60:	4b0b      	ldr	r3, [pc, #44]	; (800fe90 <HAL_RCC_ClockConfig+0x240>)
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	f003 030f 	and.w	r3, r3, #15
 800fe68:	683a      	ldr	r2, [r7, #0]
 800fe6a:	429a      	cmp	r2, r3
 800fe6c:	d214      	bcs.n	800fe98 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800fe6e:	4b08      	ldr	r3, [pc, #32]	; (800fe90 <HAL_RCC_ClockConfig+0x240>)
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	f023 020f 	bic.w	r2, r3, #15
 800fe76:	4906      	ldr	r1, [pc, #24]	; (800fe90 <HAL_RCC_ClockConfig+0x240>)
 800fe78:	683b      	ldr	r3, [r7, #0]
 800fe7a:	4313      	orrs	r3, r2
 800fe7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800fe7e:	4b04      	ldr	r3, [pc, #16]	; (800fe90 <HAL_RCC_ClockConfig+0x240>)
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	f003 030f 	and.w	r3, r3, #15
 800fe86:	683a      	ldr	r2, [r7, #0]
 800fe88:	429a      	cmp	r2, r3
 800fe8a:	d005      	beq.n	800fe98 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800fe8c:	2301      	movs	r3, #1
 800fe8e:	e086      	b.n	800ff9e <HAL_RCC_ClockConfig+0x34e>
 800fe90:	52002000 	.word	0x52002000
 800fe94:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	f003 0304 	and.w	r3, r3, #4
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d010      	beq.n	800fec6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	691a      	ldr	r2, [r3, #16]
 800fea8:	4b3f      	ldr	r3, [pc, #252]	; (800ffa8 <HAL_RCC_ClockConfig+0x358>)
 800feaa:	699b      	ldr	r3, [r3, #24]
 800feac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800feb0:	429a      	cmp	r2, r3
 800feb2:	d208      	bcs.n	800fec6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800feb4:	4b3c      	ldr	r3, [pc, #240]	; (800ffa8 <HAL_RCC_ClockConfig+0x358>)
 800feb6:	699b      	ldr	r3, [r3, #24]
 800feb8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	691b      	ldr	r3, [r3, #16]
 800fec0:	4939      	ldr	r1, [pc, #228]	; (800ffa8 <HAL_RCC_ClockConfig+0x358>)
 800fec2:	4313      	orrs	r3, r2
 800fec4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	f003 0308 	and.w	r3, r3, #8
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d010      	beq.n	800fef4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	695a      	ldr	r2, [r3, #20]
 800fed6:	4b34      	ldr	r3, [pc, #208]	; (800ffa8 <HAL_RCC_ClockConfig+0x358>)
 800fed8:	69db      	ldr	r3, [r3, #28]
 800feda:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800fede:	429a      	cmp	r2, r3
 800fee0:	d208      	bcs.n	800fef4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800fee2:	4b31      	ldr	r3, [pc, #196]	; (800ffa8 <HAL_RCC_ClockConfig+0x358>)
 800fee4:	69db      	ldr	r3, [r3, #28]
 800fee6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	695b      	ldr	r3, [r3, #20]
 800feee:	492e      	ldr	r1, [pc, #184]	; (800ffa8 <HAL_RCC_ClockConfig+0x358>)
 800fef0:	4313      	orrs	r3, r2
 800fef2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	f003 0310 	and.w	r3, r3, #16
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d010      	beq.n	800ff22 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	699a      	ldr	r2, [r3, #24]
 800ff04:	4b28      	ldr	r3, [pc, #160]	; (800ffa8 <HAL_RCC_ClockConfig+0x358>)
 800ff06:	69db      	ldr	r3, [r3, #28]
 800ff08:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ff0c:	429a      	cmp	r2, r3
 800ff0e:	d208      	bcs.n	800ff22 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ff10:	4b25      	ldr	r3, [pc, #148]	; (800ffa8 <HAL_RCC_ClockConfig+0x358>)
 800ff12:	69db      	ldr	r3, [r3, #28]
 800ff14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	699b      	ldr	r3, [r3, #24]
 800ff1c:	4922      	ldr	r1, [pc, #136]	; (800ffa8 <HAL_RCC_ClockConfig+0x358>)
 800ff1e:	4313      	orrs	r3, r2
 800ff20:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	f003 0320 	and.w	r3, r3, #32
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d010      	beq.n	800ff50 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	69da      	ldr	r2, [r3, #28]
 800ff32:	4b1d      	ldr	r3, [pc, #116]	; (800ffa8 <HAL_RCC_ClockConfig+0x358>)
 800ff34:	6a1b      	ldr	r3, [r3, #32]
 800ff36:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ff3a:	429a      	cmp	r2, r3
 800ff3c:	d208      	bcs.n	800ff50 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800ff3e:	4b1a      	ldr	r3, [pc, #104]	; (800ffa8 <HAL_RCC_ClockConfig+0x358>)
 800ff40:	6a1b      	ldr	r3, [r3, #32]
 800ff42:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	69db      	ldr	r3, [r3, #28]
 800ff4a:	4917      	ldr	r1, [pc, #92]	; (800ffa8 <HAL_RCC_ClockConfig+0x358>)
 800ff4c:	4313      	orrs	r3, r2
 800ff4e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800ff50:	f000 f834 	bl	800ffbc <HAL_RCC_GetSysClockFreq>
 800ff54:	4602      	mov	r2, r0
 800ff56:	4b14      	ldr	r3, [pc, #80]	; (800ffa8 <HAL_RCC_ClockConfig+0x358>)
 800ff58:	699b      	ldr	r3, [r3, #24]
 800ff5a:	0a1b      	lsrs	r3, r3, #8
 800ff5c:	f003 030f 	and.w	r3, r3, #15
 800ff60:	4912      	ldr	r1, [pc, #72]	; (800ffac <HAL_RCC_ClockConfig+0x35c>)
 800ff62:	5ccb      	ldrb	r3, [r1, r3]
 800ff64:	f003 031f 	and.w	r3, r3, #31
 800ff68:	fa22 f303 	lsr.w	r3, r2, r3
 800ff6c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ff6e:	4b0e      	ldr	r3, [pc, #56]	; (800ffa8 <HAL_RCC_ClockConfig+0x358>)
 800ff70:	699b      	ldr	r3, [r3, #24]
 800ff72:	f003 030f 	and.w	r3, r3, #15
 800ff76:	4a0d      	ldr	r2, [pc, #52]	; (800ffac <HAL_RCC_ClockConfig+0x35c>)
 800ff78:	5cd3      	ldrb	r3, [r2, r3]
 800ff7a:	f003 031f 	and.w	r3, r3, #31
 800ff7e:	693a      	ldr	r2, [r7, #16]
 800ff80:	fa22 f303 	lsr.w	r3, r2, r3
 800ff84:	4a0a      	ldr	r2, [pc, #40]	; (800ffb0 <HAL_RCC_ClockConfig+0x360>)
 800ff86:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ff88:	4a0a      	ldr	r2, [pc, #40]	; (800ffb4 <HAL_RCC_ClockConfig+0x364>)
 800ff8a:	693b      	ldr	r3, [r7, #16]
 800ff8c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800ff8e:	4b0a      	ldr	r3, [pc, #40]	; (800ffb8 <HAL_RCC_ClockConfig+0x368>)
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	4618      	mov	r0, r3
 800ff94:	f7f8 ffe4 	bl	8008f60 <HAL_InitTick>
 800ff98:	4603      	mov	r3, r0
 800ff9a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800ff9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff9e:	4618      	mov	r0, r3
 800ffa0:	3718      	adds	r7, #24
 800ffa2:	46bd      	mov	sp, r7
 800ffa4:	bd80      	pop	{r7, pc}
 800ffa6:	bf00      	nop
 800ffa8:	58024400 	.word	0x58024400
 800ffac:	08015b6c 	.word	0x08015b6c
 800ffb0:	240000f8 	.word	0x240000f8
 800ffb4:	240000f4 	.word	0x240000f4
 800ffb8:	240000fc 	.word	0x240000fc

0800ffbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ffbc:	b480      	push	{r7}
 800ffbe:	b089      	sub	sp, #36	; 0x24
 800ffc0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ffc2:	4bb3      	ldr	r3, [pc, #716]	; (8010290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ffc4:	691b      	ldr	r3, [r3, #16]
 800ffc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ffca:	2b18      	cmp	r3, #24
 800ffcc:	f200 8155 	bhi.w	801027a <HAL_RCC_GetSysClockFreq+0x2be>
 800ffd0:	a201      	add	r2, pc, #4	; (adr r2, 800ffd8 <HAL_RCC_GetSysClockFreq+0x1c>)
 800ffd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffd6:	bf00      	nop
 800ffd8:	0801003d 	.word	0x0801003d
 800ffdc:	0801027b 	.word	0x0801027b
 800ffe0:	0801027b 	.word	0x0801027b
 800ffe4:	0801027b 	.word	0x0801027b
 800ffe8:	0801027b 	.word	0x0801027b
 800ffec:	0801027b 	.word	0x0801027b
 800fff0:	0801027b 	.word	0x0801027b
 800fff4:	0801027b 	.word	0x0801027b
 800fff8:	08010063 	.word	0x08010063
 800fffc:	0801027b 	.word	0x0801027b
 8010000:	0801027b 	.word	0x0801027b
 8010004:	0801027b 	.word	0x0801027b
 8010008:	0801027b 	.word	0x0801027b
 801000c:	0801027b 	.word	0x0801027b
 8010010:	0801027b 	.word	0x0801027b
 8010014:	0801027b 	.word	0x0801027b
 8010018:	08010069 	.word	0x08010069
 801001c:	0801027b 	.word	0x0801027b
 8010020:	0801027b 	.word	0x0801027b
 8010024:	0801027b 	.word	0x0801027b
 8010028:	0801027b 	.word	0x0801027b
 801002c:	0801027b 	.word	0x0801027b
 8010030:	0801027b 	.word	0x0801027b
 8010034:	0801027b 	.word	0x0801027b
 8010038:	0801006f 	.word	0x0801006f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801003c:	4b94      	ldr	r3, [pc, #592]	; (8010290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	f003 0320 	and.w	r3, r3, #32
 8010044:	2b00      	cmp	r3, #0
 8010046:	d009      	beq.n	801005c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8010048:	4b91      	ldr	r3, [pc, #580]	; (8010290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	08db      	lsrs	r3, r3, #3
 801004e:	f003 0303 	and.w	r3, r3, #3
 8010052:	4a90      	ldr	r2, [pc, #576]	; (8010294 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8010054:	fa22 f303 	lsr.w	r3, r2, r3
 8010058:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 801005a:	e111      	b.n	8010280 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 801005c:	4b8d      	ldr	r3, [pc, #564]	; (8010294 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801005e:	61bb      	str	r3, [r7, #24]
    break;
 8010060:	e10e      	b.n	8010280 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8010062:	4b8d      	ldr	r3, [pc, #564]	; (8010298 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8010064:	61bb      	str	r3, [r7, #24]
    break;
 8010066:	e10b      	b.n	8010280 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8010068:	4b8c      	ldr	r3, [pc, #560]	; (801029c <HAL_RCC_GetSysClockFreq+0x2e0>)
 801006a:	61bb      	str	r3, [r7, #24]
    break;
 801006c:	e108      	b.n	8010280 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801006e:	4b88      	ldr	r3, [pc, #544]	; (8010290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010072:	f003 0303 	and.w	r3, r3, #3
 8010076:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8010078:	4b85      	ldr	r3, [pc, #532]	; (8010290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801007a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801007c:	091b      	lsrs	r3, r3, #4
 801007e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010082:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8010084:	4b82      	ldr	r3, [pc, #520]	; (8010290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010088:	f003 0301 	and.w	r3, r3, #1
 801008c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 801008e:	4b80      	ldr	r3, [pc, #512]	; (8010290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010092:	08db      	lsrs	r3, r3, #3
 8010094:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010098:	68fa      	ldr	r2, [r7, #12]
 801009a:	fb02 f303 	mul.w	r3, r2, r3
 801009e:	ee07 3a90 	vmov	s15, r3
 80100a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80100a6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80100aa:	693b      	ldr	r3, [r7, #16]
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	f000 80e1 	beq.w	8010274 <HAL_RCC_GetSysClockFreq+0x2b8>
 80100b2:	697b      	ldr	r3, [r7, #20]
 80100b4:	2b02      	cmp	r3, #2
 80100b6:	f000 8083 	beq.w	80101c0 <HAL_RCC_GetSysClockFreq+0x204>
 80100ba:	697b      	ldr	r3, [r7, #20]
 80100bc:	2b02      	cmp	r3, #2
 80100be:	f200 80a1 	bhi.w	8010204 <HAL_RCC_GetSysClockFreq+0x248>
 80100c2:	697b      	ldr	r3, [r7, #20]
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d003      	beq.n	80100d0 <HAL_RCC_GetSysClockFreq+0x114>
 80100c8:	697b      	ldr	r3, [r7, #20]
 80100ca:	2b01      	cmp	r3, #1
 80100cc:	d056      	beq.n	801017c <HAL_RCC_GetSysClockFreq+0x1c0>
 80100ce:	e099      	b.n	8010204 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80100d0:	4b6f      	ldr	r3, [pc, #444]	; (8010290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	f003 0320 	and.w	r3, r3, #32
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d02d      	beq.n	8010138 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80100dc:	4b6c      	ldr	r3, [pc, #432]	; (8010290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	08db      	lsrs	r3, r3, #3
 80100e2:	f003 0303 	and.w	r3, r3, #3
 80100e6:	4a6b      	ldr	r2, [pc, #428]	; (8010294 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80100e8:	fa22 f303 	lsr.w	r3, r2, r3
 80100ec:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	ee07 3a90 	vmov	s15, r3
 80100f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80100f8:	693b      	ldr	r3, [r7, #16]
 80100fa:	ee07 3a90 	vmov	s15, r3
 80100fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010102:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010106:	4b62      	ldr	r3, [pc, #392]	; (8010290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801010a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801010e:	ee07 3a90 	vmov	s15, r3
 8010112:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010116:	ed97 6a02 	vldr	s12, [r7, #8]
 801011a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80102a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 801011e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010122:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010126:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801012a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801012e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010132:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8010136:	e087      	b.n	8010248 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8010138:	693b      	ldr	r3, [r7, #16]
 801013a:	ee07 3a90 	vmov	s15, r3
 801013e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010142:	eddf 6a58 	vldr	s13, [pc, #352]	; 80102a4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8010146:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801014a:	4b51      	ldr	r3, [pc, #324]	; (8010290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801014c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801014e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010152:	ee07 3a90 	vmov	s15, r3
 8010156:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801015a:	ed97 6a02 	vldr	s12, [r7, #8]
 801015e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80102a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8010162:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010166:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801016a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801016e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010176:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801017a:	e065      	b.n	8010248 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 801017c:	693b      	ldr	r3, [r7, #16]
 801017e:	ee07 3a90 	vmov	s15, r3
 8010182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010186:	eddf 6a48 	vldr	s13, [pc, #288]	; 80102a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 801018a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801018e:	4b40      	ldr	r3, [pc, #256]	; (8010290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010196:	ee07 3a90 	vmov	s15, r3
 801019a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801019e:	ed97 6a02 	vldr	s12, [r7, #8]
 80101a2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80102a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80101a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80101aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80101ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80101b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80101b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80101ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80101be:	e043      	b.n	8010248 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80101c0:	693b      	ldr	r3, [r7, #16]
 80101c2:	ee07 3a90 	vmov	s15, r3
 80101c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80101ca:	eddf 6a38 	vldr	s13, [pc, #224]	; 80102ac <HAL_RCC_GetSysClockFreq+0x2f0>
 80101ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80101d2:	4b2f      	ldr	r3, [pc, #188]	; (8010290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80101d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80101da:	ee07 3a90 	vmov	s15, r3
 80101de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80101e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80101e6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80102a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80101ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80101ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80101f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80101f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80101fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80101fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010202:	e021      	b.n	8010248 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8010204:	693b      	ldr	r3, [r7, #16]
 8010206:	ee07 3a90 	vmov	s15, r3
 801020a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801020e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80102a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8010212:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010216:	4b1e      	ldr	r3, [pc, #120]	; (8010290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801021a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801021e:	ee07 3a90 	vmov	s15, r3
 8010222:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010226:	ed97 6a02 	vldr	s12, [r7, #8]
 801022a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80102a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 801022e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010232:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010236:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801023a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801023e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010242:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010246:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8010248:	4b11      	ldr	r3, [pc, #68]	; (8010290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801024a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801024c:	0a5b      	lsrs	r3, r3, #9
 801024e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010252:	3301      	adds	r3, #1
 8010254:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8010256:	683b      	ldr	r3, [r7, #0]
 8010258:	ee07 3a90 	vmov	s15, r3
 801025c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8010260:	edd7 6a07 	vldr	s13, [r7, #28]
 8010264:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010268:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801026c:	ee17 3a90 	vmov	r3, s15
 8010270:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8010272:	e005      	b.n	8010280 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8010274:	2300      	movs	r3, #0
 8010276:	61bb      	str	r3, [r7, #24]
    break;
 8010278:	e002      	b.n	8010280 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 801027a:	4b07      	ldr	r3, [pc, #28]	; (8010298 <HAL_RCC_GetSysClockFreq+0x2dc>)
 801027c:	61bb      	str	r3, [r7, #24]
    break;
 801027e:	bf00      	nop
  }

  return sysclockfreq;
 8010280:	69bb      	ldr	r3, [r7, #24]
}
 8010282:	4618      	mov	r0, r3
 8010284:	3724      	adds	r7, #36	; 0x24
 8010286:	46bd      	mov	sp, r7
 8010288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801028c:	4770      	bx	lr
 801028e:	bf00      	nop
 8010290:	58024400 	.word	0x58024400
 8010294:	03d09000 	.word	0x03d09000
 8010298:	003d0900 	.word	0x003d0900
 801029c:	017d7840 	.word	0x017d7840
 80102a0:	46000000 	.word	0x46000000
 80102a4:	4c742400 	.word	0x4c742400
 80102a8:	4a742400 	.word	0x4a742400
 80102ac:	4bbebc20 	.word	0x4bbebc20

080102b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80102b0:	b580      	push	{r7, lr}
 80102b2:	b082      	sub	sp, #8
 80102b4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80102b6:	f7ff fe81 	bl	800ffbc <HAL_RCC_GetSysClockFreq>
 80102ba:	4602      	mov	r2, r0
 80102bc:	4b10      	ldr	r3, [pc, #64]	; (8010300 <HAL_RCC_GetHCLKFreq+0x50>)
 80102be:	699b      	ldr	r3, [r3, #24]
 80102c0:	0a1b      	lsrs	r3, r3, #8
 80102c2:	f003 030f 	and.w	r3, r3, #15
 80102c6:	490f      	ldr	r1, [pc, #60]	; (8010304 <HAL_RCC_GetHCLKFreq+0x54>)
 80102c8:	5ccb      	ldrb	r3, [r1, r3]
 80102ca:	f003 031f 	and.w	r3, r3, #31
 80102ce:	fa22 f303 	lsr.w	r3, r2, r3
 80102d2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80102d4:	4b0a      	ldr	r3, [pc, #40]	; (8010300 <HAL_RCC_GetHCLKFreq+0x50>)
 80102d6:	699b      	ldr	r3, [r3, #24]
 80102d8:	f003 030f 	and.w	r3, r3, #15
 80102dc:	4a09      	ldr	r2, [pc, #36]	; (8010304 <HAL_RCC_GetHCLKFreq+0x54>)
 80102de:	5cd3      	ldrb	r3, [r2, r3]
 80102e0:	f003 031f 	and.w	r3, r3, #31
 80102e4:	687a      	ldr	r2, [r7, #4]
 80102e6:	fa22 f303 	lsr.w	r3, r2, r3
 80102ea:	4a07      	ldr	r2, [pc, #28]	; (8010308 <HAL_RCC_GetHCLKFreq+0x58>)
 80102ec:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80102ee:	4a07      	ldr	r2, [pc, #28]	; (801030c <HAL_RCC_GetHCLKFreq+0x5c>)
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80102f4:	4b04      	ldr	r3, [pc, #16]	; (8010308 <HAL_RCC_GetHCLKFreq+0x58>)
 80102f6:	681b      	ldr	r3, [r3, #0]
}
 80102f8:	4618      	mov	r0, r3
 80102fa:	3708      	adds	r7, #8
 80102fc:	46bd      	mov	sp, r7
 80102fe:	bd80      	pop	{r7, pc}
 8010300:	58024400 	.word	0x58024400
 8010304:	08015b6c 	.word	0x08015b6c
 8010308:	240000f8 	.word	0x240000f8
 801030c:	240000f4 	.word	0x240000f4

08010310 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8010310:	b580      	push	{r7, lr}
 8010312:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8010314:	f7ff ffcc 	bl	80102b0 <HAL_RCC_GetHCLKFreq>
 8010318:	4602      	mov	r2, r0
 801031a:	4b06      	ldr	r3, [pc, #24]	; (8010334 <HAL_RCC_GetPCLK2Freq+0x24>)
 801031c:	69db      	ldr	r3, [r3, #28]
 801031e:	0a1b      	lsrs	r3, r3, #8
 8010320:	f003 0307 	and.w	r3, r3, #7
 8010324:	4904      	ldr	r1, [pc, #16]	; (8010338 <HAL_RCC_GetPCLK2Freq+0x28>)
 8010326:	5ccb      	ldrb	r3, [r1, r3]
 8010328:	f003 031f 	and.w	r3, r3, #31
 801032c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8010330:	4618      	mov	r0, r3
 8010332:	bd80      	pop	{r7, pc}
 8010334:	58024400 	.word	0x58024400
 8010338:	08015b6c 	.word	0x08015b6c

0801033c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801033c:	b580      	push	{r7, lr}
 801033e:	b086      	sub	sp, #24
 8010340:	af00      	add	r7, sp, #0
 8010342:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8010344:	2300      	movs	r3, #0
 8010346:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8010348:	2300      	movs	r3, #0
 801034a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010354:	2b00      	cmp	r3, #0
 8010356:	d03f      	beq.n	80103d8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801035c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8010360:	d02a      	beq.n	80103b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8010362:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8010366:	d824      	bhi.n	80103b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8010368:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801036c:	d018      	beq.n	80103a0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 801036e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010372:	d81e      	bhi.n	80103b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8010374:	2b00      	cmp	r3, #0
 8010376:	d003      	beq.n	8010380 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8010378:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801037c:	d007      	beq.n	801038e <HAL_RCCEx_PeriphCLKConfig+0x52>
 801037e:	e018      	b.n	80103b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010380:	4bab      	ldr	r3, [pc, #684]	; (8010630 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8010382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010384:	4aaa      	ldr	r2, [pc, #680]	; (8010630 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8010386:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801038a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 801038c:	e015      	b.n	80103ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	3304      	adds	r3, #4
 8010392:	2102      	movs	r1, #2
 8010394:	4618      	mov	r0, r3
 8010396:	f002 f99b 	bl	80126d0 <RCCEx_PLL2_Config>
 801039a:	4603      	mov	r3, r0
 801039c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 801039e:	e00c      	b.n	80103ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	3324      	adds	r3, #36	; 0x24
 80103a4:	2102      	movs	r1, #2
 80103a6:	4618      	mov	r0, r3
 80103a8:	f002 fa44 	bl	8012834 <RCCEx_PLL3_Config>
 80103ac:	4603      	mov	r3, r0
 80103ae:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80103b0:	e003      	b.n	80103ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80103b2:	2301      	movs	r3, #1
 80103b4:	75fb      	strb	r3, [r7, #23]
      break;
 80103b6:	e000      	b.n	80103ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80103b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80103ba:	7dfb      	ldrb	r3, [r7, #23]
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d109      	bne.n	80103d4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80103c0:	4b9b      	ldr	r3, [pc, #620]	; (8010630 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80103c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80103c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80103cc:	4998      	ldr	r1, [pc, #608]	; (8010630 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80103ce:	4313      	orrs	r3, r2
 80103d0:	650b      	str	r3, [r1, #80]	; 0x50
 80103d2:	e001      	b.n	80103d8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80103d4:	7dfb      	ldrb	r3, [r7, #23]
 80103d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d03d      	beq.n	8010460 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80103e8:	2b04      	cmp	r3, #4
 80103ea:	d826      	bhi.n	801043a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80103ec:	a201      	add	r2, pc, #4	; (adr r2, 80103f4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80103ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103f2:	bf00      	nop
 80103f4:	08010409 	.word	0x08010409
 80103f8:	08010417 	.word	0x08010417
 80103fc:	08010429 	.word	0x08010429
 8010400:	08010441 	.word	0x08010441
 8010404:	08010441 	.word	0x08010441
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010408:	4b89      	ldr	r3, [pc, #548]	; (8010630 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 801040a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801040c:	4a88      	ldr	r2, [pc, #544]	; (8010630 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 801040e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010412:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8010414:	e015      	b.n	8010442 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	3304      	adds	r3, #4
 801041a:	2100      	movs	r1, #0
 801041c:	4618      	mov	r0, r3
 801041e:	f002 f957 	bl	80126d0 <RCCEx_PLL2_Config>
 8010422:	4603      	mov	r3, r0
 8010424:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8010426:	e00c      	b.n	8010442 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	3324      	adds	r3, #36	; 0x24
 801042c:	2100      	movs	r1, #0
 801042e:	4618      	mov	r0, r3
 8010430:	f002 fa00 	bl	8012834 <RCCEx_PLL3_Config>
 8010434:	4603      	mov	r3, r0
 8010436:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8010438:	e003      	b.n	8010442 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801043a:	2301      	movs	r3, #1
 801043c:	75fb      	strb	r3, [r7, #23]
      break;
 801043e:	e000      	b.n	8010442 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8010440:	bf00      	nop
    }

    if(ret == HAL_OK)
 8010442:	7dfb      	ldrb	r3, [r7, #23]
 8010444:	2b00      	cmp	r3, #0
 8010446:	d109      	bne.n	801045c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8010448:	4b79      	ldr	r3, [pc, #484]	; (8010630 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 801044a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801044c:	f023 0207 	bic.w	r2, r3, #7
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010454:	4976      	ldr	r1, [pc, #472]	; (8010630 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8010456:	4313      	orrs	r3, r2
 8010458:	650b      	str	r3, [r1, #80]	; 0x50
 801045a:	e001      	b.n	8010460 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801045c:	7dfb      	ldrb	r3, [r7, #23]
 801045e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010468:	2b00      	cmp	r3, #0
 801046a:	d042      	beq.n	80104f2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010470:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010474:	d02b      	beq.n	80104ce <HAL_RCCEx_PeriphCLKConfig+0x192>
 8010476:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801047a:	d825      	bhi.n	80104c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 801047c:	2bc0      	cmp	r3, #192	; 0xc0
 801047e:	d028      	beq.n	80104d2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8010480:	2bc0      	cmp	r3, #192	; 0xc0
 8010482:	d821      	bhi.n	80104c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8010484:	2b80      	cmp	r3, #128	; 0x80
 8010486:	d016      	beq.n	80104b6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8010488:	2b80      	cmp	r3, #128	; 0x80
 801048a:	d81d      	bhi.n	80104c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 801048c:	2b00      	cmp	r3, #0
 801048e:	d002      	beq.n	8010496 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8010490:	2b40      	cmp	r3, #64	; 0x40
 8010492:	d007      	beq.n	80104a4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8010494:	e018      	b.n	80104c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010496:	4b66      	ldr	r3, [pc, #408]	; (8010630 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8010498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801049a:	4a65      	ldr	r2, [pc, #404]	; (8010630 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 801049c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80104a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80104a2:	e017      	b.n	80104d4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	3304      	adds	r3, #4
 80104a8:	2100      	movs	r1, #0
 80104aa:	4618      	mov	r0, r3
 80104ac:	f002 f910 	bl	80126d0 <RCCEx_PLL2_Config>
 80104b0:	4603      	mov	r3, r0
 80104b2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80104b4:	e00e      	b.n	80104d4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	3324      	adds	r3, #36	; 0x24
 80104ba:	2100      	movs	r1, #0
 80104bc:	4618      	mov	r0, r3
 80104be:	f002 f9b9 	bl	8012834 <RCCEx_PLL3_Config>
 80104c2:	4603      	mov	r3, r0
 80104c4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80104c6:	e005      	b.n	80104d4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80104c8:	2301      	movs	r3, #1
 80104ca:	75fb      	strb	r3, [r7, #23]
      break;
 80104cc:	e002      	b.n	80104d4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80104ce:	bf00      	nop
 80104d0:	e000      	b.n	80104d4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80104d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80104d4:	7dfb      	ldrb	r3, [r7, #23]
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d109      	bne.n	80104ee <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80104da:	4b55      	ldr	r3, [pc, #340]	; (8010630 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80104dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80104de:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80104e6:	4952      	ldr	r1, [pc, #328]	; (8010630 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80104e8:	4313      	orrs	r3, r2
 80104ea:	650b      	str	r3, [r1, #80]	; 0x50
 80104ec:	e001      	b.n	80104f2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80104ee:	7dfb      	ldrb	r3, [r7, #23]
 80104f0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d049      	beq.n	8010592 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8010504:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8010508:	d030      	beq.n	801056c <HAL_RCCEx_PeriphCLKConfig+0x230>
 801050a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801050e:	d82a      	bhi.n	8010566 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8010510:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8010514:	d02c      	beq.n	8010570 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8010516:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 801051a:	d824      	bhi.n	8010566 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 801051c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010520:	d018      	beq.n	8010554 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8010522:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010526:	d81e      	bhi.n	8010566 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8010528:	2b00      	cmp	r3, #0
 801052a:	d003      	beq.n	8010534 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 801052c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010530:	d007      	beq.n	8010542 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8010532:	e018      	b.n	8010566 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010534:	4b3e      	ldr	r3, [pc, #248]	; (8010630 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8010536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010538:	4a3d      	ldr	r2, [pc, #244]	; (8010630 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 801053a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801053e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8010540:	e017      	b.n	8010572 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	3304      	adds	r3, #4
 8010546:	2100      	movs	r1, #0
 8010548:	4618      	mov	r0, r3
 801054a:	f002 f8c1 	bl	80126d0 <RCCEx_PLL2_Config>
 801054e:	4603      	mov	r3, r0
 8010550:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8010552:	e00e      	b.n	8010572 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	3324      	adds	r3, #36	; 0x24
 8010558:	2100      	movs	r1, #0
 801055a:	4618      	mov	r0, r3
 801055c:	f002 f96a 	bl	8012834 <RCCEx_PLL3_Config>
 8010560:	4603      	mov	r3, r0
 8010562:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8010564:	e005      	b.n	8010572 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8010566:	2301      	movs	r3, #1
 8010568:	75fb      	strb	r3, [r7, #23]
      break;
 801056a:	e002      	b.n	8010572 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 801056c:	bf00      	nop
 801056e:	e000      	b.n	8010572 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8010570:	bf00      	nop
    }

    if(ret == HAL_OK)
 8010572:	7dfb      	ldrb	r3, [r7, #23]
 8010574:	2b00      	cmp	r3, #0
 8010576:	d10a      	bne.n	801058e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8010578:	4b2d      	ldr	r3, [pc, #180]	; (8010630 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 801057a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801057c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8010586:	492a      	ldr	r1, [pc, #168]	; (8010630 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8010588:	4313      	orrs	r3, r2
 801058a:	658b      	str	r3, [r1, #88]	; 0x58
 801058c:	e001      	b.n	8010592 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801058e:	7dfb      	ldrb	r3, [r7, #23]
 8010590:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801059a:	2b00      	cmp	r3, #0
 801059c:	d04c      	beq.n	8010638 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80105a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80105a8:	d030      	beq.n	801060c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80105aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80105ae:	d82a      	bhi.n	8010606 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80105b0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80105b4:	d02c      	beq.n	8010610 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80105b6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80105ba:	d824      	bhi.n	8010606 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80105bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80105c0:	d018      	beq.n	80105f4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80105c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80105c6:	d81e      	bhi.n	8010606 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d003      	beq.n	80105d4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80105cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80105d0:	d007      	beq.n	80105e2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80105d2:	e018      	b.n	8010606 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80105d4:	4b16      	ldr	r3, [pc, #88]	; (8010630 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80105d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105d8:	4a15      	ldr	r2, [pc, #84]	; (8010630 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80105da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80105de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80105e0:	e017      	b.n	8010612 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	3304      	adds	r3, #4
 80105e6:	2100      	movs	r1, #0
 80105e8:	4618      	mov	r0, r3
 80105ea:	f002 f871 	bl	80126d0 <RCCEx_PLL2_Config>
 80105ee:	4603      	mov	r3, r0
 80105f0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80105f2:	e00e      	b.n	8010612 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	3324      	adds	r3, #36	; 0x24
 80105f8:	2100      	movs	r1, #0
 80105fa:	4618      	mov	r0, r3
 80105fc:	f002 f91a 	bl	8012834 <RCCEx_PLL3_Config>
 8010600:	4603      	mov	r3, r0
 8010602:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8010604:	e005      	b.n	8010612 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8010606:	2301      	movs	r3, #1
 8010608:	75fb      	strb	r3, [r7, #23]
      break;
 801060a:	e002      	b.n	8010612 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 801060c:	bf00      	nop
 801060e:	e000      	b.n	8010612 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8010610:	bf00      	nop
    }

    if(ret == HAL_OK)
 8010612:	7dfb      	ldrb	r3, [r7, #23]
 8010614:	2b00      	cmp	r3, #0
 8010616:	d10d      	bne.n	8010634 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8010618:	4b05      	ldr	r3, [pc, #20]	; (8010630 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 801061a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801061c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8010626:	4902      	ldr	r1, [pc, #8]	; (8010630 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8010628:	4313      	orrs	r3, r2
 801062a:	658b      	str	r3, [r1, #88]	; 0x58
 801062c:	e004      	b.n	8010638 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 801062e:	bf00      	nop
 8010630:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010634:	7dfb      	ldrb	r3, [r7, #23]
 8010636:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010640:	2b00      	cmp	r3, #0
 8010642:	d032      	beq.n	80106aa <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010648:	2b30      	cmp	r3, #48	; 0x30
 801064a:	d01c      	beq.n	8010686 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 801064c:	2b30      	cmp	r3, #48	; 0x30
 801064e:	d817      	bhi.n	8010680 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8010650:	2b20      	cmp	r3, #32
 8010652:	d00c      	beq.n	801066e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8010654:	2b20      	cmp	r3, #32
 8010656:	d813      	bhi.n	8010680 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8010658:	2b00      	cmp	r3, #0
 801065a:	d016      	beq.n	801068a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 801065c:	2b10      	cmp	r3, #16
 801065e:	d10f      	bne.n	8010680 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010660:	4bb1      	ldr	r3, [pc, #708]	; (8010928 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8010662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010664:	4ab0      	ldr	r2, [pc, #704]	; (8010928 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8010666:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801066a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 801066c:	e00e      	b.n	801068c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	3304      	adds	r3, #4
 8010672:	2102      	movs	r1, #2
 8010674:	4618      	mov	r0, r3
 8010676:	f002 f82b 	bl	80126d0 <RCCEx_PLL2_Config>
 801067a:	4603      	mov	r3, r0
 801067c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 801067e:	e005      	b.n	801068c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8010680:	2301      	movs	r3, #1
 8010682:	75fb      	strb	r3, [r7, #23]
      break;
 8010684:	e002      	b.n	801068c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8010686:	bf00      	nop
 8010688:	e000      	b.n	801068c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 801068a:	bf00      	nop
    }

    if(ret == HAL_OK)
 801068c:	7dfb      	ldrb	r3, [r7, #23]
 801068e:	2b00      	cmp	r3, #0
 8010690:	d109      	bne.n	80106a6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8010692:	4ba5      	ldr	r3, [pc, #660]	; (8010928 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8010694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010696:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801069e:	49a2      	ldr	r1, [pc, #648]	; (8010928 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80106a0:	4313      	orrs	r3, r2
 80106a2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80106a4:	e001      	b.n	80106aa <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80106a6:	7dfb      	ldrb	r3, [r7, #23]
 80106a8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d047      	beq.n	8010746 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80106ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80106be:	d030      	beq.n	8010722 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80106c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80106c4:	d82a      	bhi.n	801071c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80106c6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80106ca:	d02c      	beq.n	8010726 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80106cc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80106d0:	d824      	bhi.n	801071c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80106d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80106d6:	d018      	beq.n	801070a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80106d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80106dc:	d81e      	bhi.n	801071c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d003      	beq.n	80106ea <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80106e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80106e6:	d007      	beq.n	80106f8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80106e8:	e018      	b.n	801071c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80106ea:	4b8f      	ldr	r3, [pc, #572]	; (8010928 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80106ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106ee:	4a8e      	ldr	r2, [pc, #568]	; (8010928 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80106f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80106f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80106f6:	e017      	b.n	8010728 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	3304      	adds	r3, #4
 80106fc:	2100      	movs	r1, #0
 80106fe:	4618      	mov	r0, r3
 8010700:	f001 ffe6 	bl	80126d0 <RCCEx_PLL2_Config>
 8010704:	4603      	mov	r3, r0
 8010706:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8010708:	e00e      	b.n	8010728 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	3324      	adds	r3, #36	; 0x24
 801070e:	2100      	movs	r1, #0
 8010710:	4618      	mov	r0, r3
 8010712:	f002 f88f 	bl	8012834 <RCCEx_PLL3_Config>
 8010716:	4603      	mov	r3, r0
 8010718:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 801071a:	e005      	b.n	8010728 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801071c:	2301      	movs	r3, #1
 801071e:	75fb      	strb	r3, [r7, #23]
      break;
 8010720:	e002      	b.n	8010728 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8010722:	bf00      	nop
 8010724:	e000      	b.n	8010728 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8010726:	bf00      	nop
    }

    if(ret == HAL_OK)
 8010728:	7dfb      	ldrb	r3, [r7, #23]
 801072a:	2b00      	cmp	r3, #0
 801072c:	d109      	bne.n	8010742 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 801072e:	4b7e      	ldr	r3, [pc, #504]	; (8010928 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8010730:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010732:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801073a:	497b      	ldr	r1, [pc, #492]	; (8010928 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 801073c:	4313      	orrs	r3, r2
 801073e:	650b      	str	r3, [r1, #80]	; 0x50
 8010740:	e001      	b.n	8010746 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010742:	7dfb      	ldrb	r3, [r7, #23]
 8010744:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801074e:	2b00      	cmp	r3, #0
 8010750:	d049      	beq.n	80107e6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010756:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801075a:	d02e      	beq.n	80107ba <HAL_RCCEx_PeriphCLKConfig+0x47e>
 801075c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8010760:	d828      	bhi.n	80107b4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8010762:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8010766:	d02a      	beq.n	80107be <HAL_RCCEx_PeriphCLKConfig+0x482>
 8010768:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801076c:	d822      	bhi.n	80107b4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 801076e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8010772:	d026      	beq.n	80107c2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8010774:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8010778:	d81c      	bhi.n	80107b4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 801077a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801077e:	d010      	beq.n	80107a2 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8010780:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010784:	d816      	bhi.n	80107b4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8010786:	2b00      	cmp	r3, #0
 8010788:	d01d      	beq.n	80107c6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 801078a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801078e:	d111      	bne.n	80107b4 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	3304      	adds	r3, #4
 8010794:	2101      	movs	r1, #1
 8010796:	4618      	mov	r0, r3
 8010798:	f001 ff9a 	bl	80126d0 <RCCEx_PLL2_Config>
 801079c:	4603      	mov	r3, r0
 801079e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80107a0:	e012      	b.n	80107c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	3324      	adds	r3, #36	; 0x24
 80107a6:	2101      	movs	r1, #1
 80107a8:	4618      	mov	r0, r3
 80107aa:	f002 f843 	bl	8012834 <RCCEx_PLL3_Config>
 80107ae:	4603      	mov	r3, r0
 80107b0:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80107b2:	e009      	b.n	80107c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80107b4:	2301      	movs	r3, #1
 80107b6:	75fb      	strb	r3, [r7, #23]
      break;
 80107b8:	e006      	b.n	80107c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80107ba:	bf00      	nop
 80107bc:	e004      	b.n	80107c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80107be:	bf00      	nop
 80107c0:	e002      	b.n	80107c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80107c2:	bf00      	nop
 80107c4:	e000      	b.n	80107c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80107c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80107c8:	7dfb      	ldrb	r3, [r7, #23]
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d109      	bne.n	80107e2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80107ce:	4b56      	ldr	r3, [pc, #344]	; (8010928 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80107d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80107d2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80107da:	4953      	ldr	r1, [pc, #332]	; (8010928 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80107dc:	4313      	orrs	r3, r2
 80107de:	650b      	str	r3, [r1, #80]	; 0x50
 80107e0:	e001      	b.n	80107e6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80107e2:	7dfb      	ldrb	r3, [r7, #23]
 80107e4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d04b      	beq.n	801088a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80107f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80107fc:	d02e      	beq.n	801085c <HAL_RCCEx_PeriphCLKConfig+0x520>
 80107fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010802:	d828      	bhi.n	8010856 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8010804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010808:	d02a      	beq.n	8010860 <HAL_RCCEx_PeriphCLKConfig+0x524>
 801080a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801080e:	d822      	bhi.n	8010856 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8010810:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8010814:	d026      	beq.n	8010864 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8010816:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801081a:	d81c      	bhi.n	8010856 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 801081c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010820:	d010      	beq.n	8010844 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8010822:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010826:	d816      	bhi.n	8010856 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8010828:	2b00      	cmp	r3, #0
 801082a:	d01d      	beq.n	8010868 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 801082c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010830:	d111      	bne.n	8010856 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	3304      	adds	r3, #4
 8010836:	2101      	movs	r1, #1
 8010838:	4618      	mov	r0, r3
 801083a:	f001 ff49 	bl	80126d0 <RCCEx_PLL2_Config>
 801083e:	4603      	mov	r3, r0
 8010840:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8010842:	e012      	b.n	801086a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	3324      	adds	r3, #36	; 0x24
 8010848:	2101      	movs	r1, #1
 801084a:	4618      	mov	r0, r3
 801084c:	f001 fff2 	bl	8012834 <RCCEx_PLL3_Config>
 8010850:	4603      	mov	r3, r0
 8010852:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8010854:	e009      	b.n	801086a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8010856:	2301      	movs	r3, #1
 8010858:	75fb      	strb	r3, [r7, #23]
      break;
 801085a:	e006      	b.n	801086a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 801085c:	bf00      	nop
 801085e:	e004      	b.n	801086a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8010860:	bf00      	nop
 8010862:	e002      	b.n	801086a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8010864:	bf00      	nop
 8010866:	e000      	b.n	801086a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8010868:	bf00      	nop
    }

    if(ret == HAL_OK)
 801086a:	7dfb      	ldrb	r3, [r7, #23]
 801086c:	2b00      	cmp	r3, #0
 801086e:	d10a      	bne.n	8010886 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8010870:	4b2d      	ldr	r3, [pc, #180]	; (8010928 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8010872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010874:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801087e:	492a      	ldr	r1, [pc, #168]	; (8010928 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8010880:	4313      	orrs	r3, r2
 8010882:	658b      	str	r3, [r1, #88]	; 0x58
 8010884:	e001      	b.n	801088a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010886:	7dfb      	ldrb	r3, [r7, #23]
 8010888:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010892:	2b00      	cmp	r3, #0
 8010894:	d022      	beq.n	80108dc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    switch(PeriphClkInit->DsiClockSelection)
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801089a:	2b00      	cmp	r3, #0
 801089c:	d00e      	beq.n	80108bc <HAL_RCCEx_PeriphCLKConfig+0x580>
 801089e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80108a2:	d108      	bne.n	80108b6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
    {

    case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	3304      	adds	r3, #4
 80108a8:	2101      	movs	r1, #1
 80108aa:	4618      	mov	r0, r3
 80108ac:	f001 ff10 	bl	80126d0 <RCCEx_PLL2_Config>
 80108b0:	4603      	mov	r3, r0
 80108b2:	75fb      	strb	r3, [r7, #23]

      /* DSI clock source configuration done later after clock selection check */
      break;
 80108b4:	e003      	b.n	80108be <HAL_RCCEx_PeriphCLKConfig+0x582>
      /* PHY is used as clock source for DSI*/
      /* DSI clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80108b6:	2301      	movs	r3, #1
 80108b8:	75fb      	strb	r3, [r7, #23]
      break;
 80108ba:	e000      	b.n	80108be <HAL_RCCEx_PeriphCLKConfig+0x582>
      break;
 80108bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80108be:	7dfb      	ldrb	r3, [r7, #23]
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d109      	bne.n	80108d8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 80108c4:	4b18      	ldr	r3, [pc, #96]	; (8010928 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80108c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80108c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80108d0:	4915      	ldr	r1, [pc, #84]	; (8010928 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80108d2:	4313      	orrs	r3, r2
 80108d4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80108d6:	e001      	b.n	80108dc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80108d8:	7dfb      	ldrb	r3, [r7, #23]
 80108da:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d031      	beq.n	801094c <HAL_RCCEx_PeriphCLKConfig+0x610>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80108ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80108f0:	d00e      	beq.n	8010910 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80108f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80108f6:	d814      	bhi.n	8010922 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d017      	beq.n	801092c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
 80108fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010900:	d10f      	bne.n	8010922 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010902:	4b09      	ldr	r3, [pc, #36]	; (8010928 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8010904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010906:	4a08      	ldr	r2, [pc, #32]	; (8010928 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8010908:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801090c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 801090e:	e00e      	b.n	801092e <HAL_RCCEx_PeriphCLKConfig+0x5f2>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	3304      	adds	r3, #4
 8010914:	2101      	movs	r1, #1
 8010916:	4618      	mov	r0, r3
 8010918:	f001 feda 	bl	80126d0 <RCCEx_PLL2_Config>
 801091c:	4603      	mov	r3, r0
 801091e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8010920:	e005      	b.n	801092e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8010922:	2301      	movs	r3, #1
 8010924:	75fb      	strb	r3, [r7, #23]
      break;
 8010926:	e002      	b.n	801092e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8010928:	58024400 	.word	0x58024400
      break;
 801092c:	bf00      	nop
    }

    if(ret == HAL_OK)
 801092e:	7dfb      	ldrb	r3, [r7, #23]
 8010930:	2b00      	cmp	r3, #0
 8010932:	d109      	bne.n	8010948 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8010934:	4bbc      	ldr	r3, [pc, #752]	; (8010c28 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8010936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010938:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010940:	49b9      	ldr	r1, [pc, #740]	; (8010c28 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8010942:	4313      	orrs	r3, r2
 8010944:	650b      	str	r3, [r1, #80]	; 0x50
 8010946:	e001      	b.n	801094c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010948:	7dfb      	ldrb	r3, [r7, #23]
 801094a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010954:	2b00      	cmp	r3, #0
 8010956:	d032      	beq.n	80109be <HAL_RCCEx_PeriphCLKConfig+0x682>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801095c:	2b03      	cmp	r3, #3
 801095e:	d81b      	bhi.n	8010998 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8010960:	a201      	add	r2, pc, #4	; (adr r2, 8010968 <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 8010962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010966:	bf00      	nop
 8010968:	0801099f 	.word	0x0801099f
 801096c:	08010979 	.word	0x08010979
 8010970:	08010987 	.word	0x08010987
 8010974:	0801099f 	.word	0x0801099f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010978:	4bab      	ldr	r3, [pc, #684]	; (8010c28 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 801097a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801097c:	4aaa      	ldr	r2, [pc, #680]	; (8010c28 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 801097e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010982:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8010984:	e00c      	b.n	80109a0 <HAL_RCCEx_PeriphCLKConfig+0x664>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	3304      	adds	r3, #4
 801098a:	2102      	movs	r1, #2
 801098c:	4618      	mov	r0, r3
 801098e:	f001 fe9f 	bl	80126d0 <RCCEx_PLL2_Config>
 8010992:	4603      	mov	r3, r0
 8010994:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8010996:	e003      	b.n	80109a0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8010998:	2301      	movs	r3, #1
 801099a:	75fb      	strb	r3, [r7, #23]
      break;
 801099c:	e000      	b.n	80109a0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      break;
 801099e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80109a0:	7dfb      	ldrb	r3, [r7, #23]
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d109      	bne.n	80109ba <HAL_RCCEx_PeriphCLKConfig+0x67e>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80109a6:	4ba0      	ldr	r3, [pc, #640]	; (8010c28 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80109a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80109aa:	f023 0203 	bic.w	r2, r3, #3
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80109b2:	499d      	ldr	r1, [pc, #628]	; (8010c28 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80109b4:	4313      	orrs	r3, r2
 80109b6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80109b8:	e001      	b.n	80109be <HAL_RCCEx_PeriphCLKConfig+0x682>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80109ba:	7dfb      	ldrb	r3, [r7, #23]
 80109bc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	f000 8086 	beq.w	8010ad8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80109cc:	4b97      	ldr	r3, [pc, #604]	; (8010c2c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	4a96      	ldr	r2, [pc, #600]	; (8010c2c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80109d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80109d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80109d8:	f7f8 fb0c 	bl	8008ff4 <HAL_GetTick>
 80109dc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80109de:	e009      	b.n	80109f4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80109e0:	f7f8 fb08 	bl	8008ff4 <HAL_GetTick>
 80109e4:	4602      	mov	r2, r0
 80109e6:	693b      	ldr	r3, [r7, #16]
 80109e8:	1ad3      	subs	r3, r2, r3
 80109ea:	2b64      	cmp	r3, #100	; 0x64
 80109ec:	d902      	bls.n	80109f4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
      {
        ret = HAL_TIMEOUT;
 80109ee:	2303      	movs	r3, #3
 80109f0:	75fb      	strb	r3, [r7, #23]
        break;
 80109f2:	e005      	b.n	8010a00 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80109f4:	4b8d      	ldr	r3, [pc, #564]	; (8010c2c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d0ef      	beq.n	80109e0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      }
    }

    if(ret == HAL_OK)
 8010a00:	7dfb      	ldrb	r3, [r7, #23]
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d166      	bne.n	8010ad4 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8010a06:	4b88      	ldr	r3, [pc, #544]	; (8010c28 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8010a08:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8010a10:	4053      	eors	r3, r2
 8010a12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d013      	beq.n	8010a42 <HAL_RCCEx_PeriphCLKConfig+0x706>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8010a1a:	4b83      	ldr	r3, [pc, #524]	; (8010c28 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8010a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010a1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010a22:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8010a24:	4b80      	ldr	r3, [pc, #512]	; (8010c28 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8010a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010a28:	4a7f      	ldr	r2, [pc, #508]	; (8010c28 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8010a2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010a2e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8010a30:	4b7d      	ldr	r3, [pc, #500]	; (8010c28 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8010a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010a34:	4a7c      	ldr	r2, [pc, #496]	; (8010c28 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8010a36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010a3a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8010a3c:	4a7a      	ldr	r2, [pc, #488]	; (8010c28 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8010a48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010a4c:	d115      	bne.n	8010a7a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010a4e:	f7f8 fad1 	bl	8008ff4 <HAL_GetTick>
 8010a52:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8010a54:	e00b      	b.n	8010a6e <HAL_RCCEx_PeriphCLKConfig+0x732>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010a56:	f7f8 facd 	bl	8008ff4 <HAL_GetTick>
 8010a5a:	4602      	mov	r2, r0
 8010a5c:	693b      	ldr	r3, [r7, #16]
 8010a5e:	1ad3      	subs	r3, r2, r3
 8010a60:	f241 3288 	movw	r2, #5000	; 0x1388
 8010a64:	4293      	cmp	r3, r2
 8010a66:	d902      	bls.n	8010a6e <HAL_RCCEx_PeriphCLKConfig+0x732>
          {
            ret = HAL_TIMEOUT;
 8010a68:	2303      	movs	r3, #3
 8010a6a:	75fb      	strb	r3, [r7, #23]
            break;
 8010a6c:	e005      	b.n	8010a7a <HAL_RCCEx_PeriphCLKConfig+0x73e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8010a6e:	4b6e      	ldr	r3, [pc, #440]	; (8010c28 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8010a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010a72:	f003 0302 	and.w	r3, r3, #2
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d0ed      	beq.n	8010a56 <HAL_RCCEx_PeriphCLKConfig+0x71a>
          }
        }
      }

      if(ret == HAL_OK)
 8010a7a:	7dfb      	ldrb	r3, [r7, #23]
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d126      	bne.n	8010ace <HAL_RCCEx_PeriphCLKConfig+0x792>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8010a86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010a8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010a8e:	d10d      	bne.n	8010aac <HAL_RCCEx_PeriphCLKConfig+0x770>
 8010a90:	4b65      	ldr	r3, [pc, #404]	; (8010c28 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8010a92:	691b      	ldr	r3, [r3, #16]
 8010a94:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8010a9e:	0919      	lsrs	r1, r3, #4
 8010aa0:	4b63      	ldr	r3, [pc, #396]	; (8010c30 <HAL_RCCEx_PeriphCLKConfig+0x8f4>)
 8010aa2:	400b      	ands	r3, r1
 8010aa4:	4960      	ldr	r1, [pc, #384]	; (8010c28 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8010aa6:	4313      	orrs	r3, r2
 8010aa8:	610b      	str	r3, [r1, #16]
 8010aaa:	e005      	b.n	8010ab8 <HAL_RCCEx_PeriphCLKConfig+0x77c>
 8010aac:	4b5e      	ldr	r3, [pc, #376]	; (8010c28 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8010aae:	691b      	ldr	r3, [r3, #16]
 8010ab0:	4a5d      	ldr	r2, [pc, #372]	; (8010c28 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8010ab2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010ab6:	6113      	str	r3, [r2, #16]
 8010ab8:	4b5b      	ldr	r3, [pc, #364]	; (8010c28 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8010aba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8010ac2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010ac6:	4958      	ldr	r1, [pc, #352]	; (8010c28 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8010ac8:	4313      	orrs	r3, r2
 8010aca:	670b      	str	r3, [r1, #112]	; 0x70
 8010acc:	e004      	b.n	8010ad8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8010ace:	7dfb      	ldrb	r3, [r7, #23]
 8010ad0:	75bb      	strb	r3, [r7, #22]
 8010ad2:	e001      	b.n	8010ad8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010ad4:	7dfb      	ldrb	r3, [r7, #23]
 8010ad6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	f003 0301 	and.w	r3, r3, #1
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d07e      	beq.n	8010be2 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010ae8:	2b28      	cmp	r3, #40	; 0x28
 8010aea:	d867      	bhi.n	8010bbc <HAL_RCCEx_PeriphCLKConfig+0x880>
 8010aec:	a201      	add	r2, pc, #4	; (adr r2, 8010af4 <HAL_RCCEx_PeriphCLKConfig+0x7b8>)
 8010aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010af2:	bf00      	nop
 8010af4:	08010bc3 	.word	0x08010bc3
 8010af8:	08010bbd 	.word	0x08010bbd
 8010afc:	08010bbd 	.word	0x08010bbd
 8010b00:	08010bbd 	.word	0x08010bbd
 8010b04:	08010bbd 	.word	0x08010bbd
 8010b08:	08010bbd 	.word	0x08010bbd
 8010b0c:	08010bbd 	.word	0x08010bbd
 8010b10:	08010bbd 	.word	0x08010bbd
 8010b14:	08010b99 	.word	0x08010b99
 8010b18:	08010bbd 	.word	0x08010bbd
 8010b1c:	08010bbd 	.word	0x08010bbd
 8010b20:	08010bbd 	.word	0x08010bbd
 8010b24:	08010bbd 	.word	0x08010bbd
 8010b28:	08010bbd 	.word	0x08010bbd
 8010b2c:	08010bbd 	.word	0x08010bbd
 8010b30:	08010bbd 	.word	0x08010bbd
 8010b34:	08010bab 	.word	0x08010bab
 8010b38:	08010bbd 	.word	0x08010bbd
 8010b3c:	08010bbd 	.word	0x08010bbd
 8010b40:	08010bbd 	.word	0x08010bbd
 8010b44:	08010bbd 	.word	0x08010bbd
 8010b48:	08010bbd 	.word	0x08010bbd
 8010b4c:	08010bbd 	.word	0x08010bbd
 8010b50:	08010bbd 	.word	0x08010bbd
 8010b54:	08010bc3 	.word	0x08010bc3
 8010b58:	08010bbd 	.word	0x08010bbd
 8010b5c:	08010bbd 	.word	0x08010bbd
 8010b60:	08010bbd 	.word	0x08010bbd
 8010b64:	08010bbd 	.word	0x08010bbd
 8010b68:	08010bbd 	.word	0x08010bbd
 8010b6c:	08010bbd 	.word	0x08010bbd
 8010b70:	08010bbd 	.word	0x08010bbd
 8010b74:	08010bc3 	.word	0x08010bc3
 8010b78:	08010bbd 	.word	0x08010bbd
 8010b7c:	08010bbd 	.word	0x08010bbd
 8010b80:	08010bbd 	.word	0x08010bbd
 8010b84:	08010bbd 	.word	0x08010bbd
 8010b88:	08010bbd 	.word	0x08010bbd
 8010b8c:	08010bbd 	.word	0x08010bbd
 8010b90:	08010bbd 	.word	0x08010bbd
 8010b94:	08010bc3 	.word	0x08010bc3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	3304      	adds	r3, #4
 8010b9c:	2101      	movs	r1, #1
 8010b9e:	4618      	mov	r0, r3
 8010ba0:	f001 fd96 	bl	80126d0 <RCCEx_PLL2_Config>
 8010ba4:	4603      	mov	r3, r0
 8010ba6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8010ba8:	e00c      	b.n	8010bc4 <HAL_RCCEx_PeriphCLKConfig+0x888>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	3324      	adds	r3, #36	; 0x24
 8010bae:	2101      	movs	r1, #1
 8010bb0:	4618      	mov	r0, r3
 8010bb2:	f001 fe3f 	bl	8012834 <RCCEx_PLL3_Config>
 8010bb6:	4603      	mov	r3, r0
 8010bb8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8010bba:	e003      	b.n	8010bc4 <HAL_RCCEx_PeriphCLKConfig+0x888>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8010bbc:	2301      	movs	r3, #1
 8010bbe:	75fb      	strb	r3, [r7, #23]
      break;
 8010bc0:	e000      	b.n	8010bc4 <HAL_RCCEx_PeriphCLKConfig+0x888>
      break;
 8010bc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8010bc4:	7dfb      	ldrb	r3, [r7, #23]
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d109      	bne.n	8010bde <HAL_RCCEx_PeriphCLKConfig+0x8a2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8010bca:	4b17      	ldr	r3, [pc, #92]	; (8010c28 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8010bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010bce:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010bd6:	4914      	ldr	r1, [pc, #80]	; (8010c28 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8010bd8:	4313      	orrs	r3, r2
 8010bda:	654b      	str	r3, [r1, #84]	; 0x54
 8010bdc:	e001      	b.n	8010be2 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010bde:	7dfb      	ldrb	r3, [r7, #23]
 8010be0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	f003 0302 	and.w	r3, r3, #2
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d03e      	beq.n	8010c6c <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010bf2:	2b05      	cmp	r3, #5
 8010bf4:	d827      	bhi.n	8010c46 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8010bf6:	a201      	add	r2, pc, #4	; (adr r2, 8010bfc <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8010bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010bfc:	08010c4d 	.word	0x08010c4d
 8010c00:	08010c15 	.word	0x08010c15
 8010c04:	08010c35 	.word	0x08010c35
 8010c08:	08010c4d 	.word	0x08010c4d
 8010c0c:	08010c4d 	.word	0x08010c4d
 8010c10:	08010c4d 	.word	0x08010c4d
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	3304      	adds	r3, #4
 8010c18:	2101      	movs	r1, #1
 8010c1a:	4618      	mov	r0, r3
 8010c1c:	f001 fd58 	bl	80126d0 <RCCEx_PLL2_Config>
 8010c20:	4603      	mov	r3, r0
 8010c22:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8010c24:	e013      	b.n	8010c4e <HAL_RCCEx_PeriphCLKConfig+0x912>
 8010c26:	bf00      	nop
 8010c28:	58024400 	.word	0x58024400
 8010c2c:	58024800 	.word	0x58024800
 8010c30:	00ffffcf 	.word	0x00ffffcf

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	3324      	adds	r3, #36	; 0x24
 8010c38:	2101      	movs	r1, #1
 8010c3a:	4618      	mov	r0, r3
 8010c3c:	f001 fdfa 	bl	8012834 <RCCEx_PLL3_Config>
 8010c40:	4603      	mov	r3, r0
 8010c42:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8010c44:	e003      	b.n	8010c4e <HAL_RCCEx_PeriphCLKConfig+0x912>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8010c46:	2301      	movs	r3, #1
 8010c48:	75fb      	strb	r3, [r7, #23]
      break;
 8010c4a:	e000      	b.n	8010c4e <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 8010c4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8010c4e:	7dfb      	ldrb	r3, [r7, #23]
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d109      	bne.n	8010c68 <HAL_RCCEx_PeriphCLKConfig+0x92c>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8010c54:	4b9f      	ldr	r3, [pc, #636]	; (8010ed4 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8010c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010c58:	f023 0207 	bic.w	r2, r3, #7
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010c60:	499c      	ldr	r1, [pc, #624]	; (8010ed4 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8010c62:	4313      	orrs	r3, r2
 8010c64:	654b      	str	r3, [r1, #84]	; 0x54
 8010c66:	e001      	b.n	8010c6c <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010c68:	7dfb      	ldrb	r3, [r7, #23]
 8010c6a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	f003 0304 	and.w	r3, r3, #4
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d039      	beq.n	8010cec <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010c7e:	2b05      	cmp	r3, #5
 8010c80:	d820      	bhi.n	8010cc4 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8010c82:	a201      	add	r2, pc, #4	; (adr r2, 8010c88 <HAL_RCCEx_PeriphCLKConfig+0x94c>)
 8010c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c88:	08010ccb 	.word	0x08010ccb
 8010c8c:	08010ca1 	.word	0x08010ca1
 8010c90:	08010cb3 	.word	0x08010cb3
 8010c94:	08010ccb 	.word	0x08010ccb
 8010c98:	08010ccb 	.word	0x08010ccb
 8010c9c:	08010ccb 	.word	0x08010ccb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	3304      	adds	r3, #4
 8010ca4:	2101      	movs	r1, #1
 8010ca6:	4618      	mov	r0, r3
 8010ca8:	f001 fd12 	bl	80126d0 <RCCEx_PLL2_Config>
 8010cac:	4603      	mov	r3, r0
 8010cae:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8010cb0:	e00c      	b.n	8010ccc <HAL_RCCEx_PeriphCLKConfig+0x990>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	3324      	adds	r3, #36	; 0x24
 8010cb6:	2101      	movs	r1, #1
 8010cb8:	4618      	mov	r0, r3
 8010cba:	f001 fdbb 	bl	8012834 <RCCEx_PLL3_Config>
 8010cbe:	4603      	mov	r3, r0
 8010cc0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8010cc2:	e003      	b.n	8010ccc <HAL_RCCEx_PeriphCLKConfig+0x990>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8010cc4:	2301      	movs	r3, #1
 8010cc6:	75fb      	strb	r3, [r7, #23]
      break;
 8010cc8:	e000      	b.n	8010ccc <HAL_RCCEx_PeriphCLKConfig+0x990>
      break;
 8010cca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8010ccc:	7dfb      	ldrb	r3, [r7, #23]
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d10a      	bne.n	8010ce8 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8010cd2:	4b80      	ldr	r3, [pc, #512]	; (8010ed4 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8010cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010cd6:	f023 0207 	bic.w	r2, r3, #7
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010ce0:	497c      	ldr	r1, [pc, #496]	; (8010ed4 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8010ce2:	4313      	orrs	r3, r2
 8010ce4:	658b      	str	r3, [r1, #88]	; 0x58
 8010ce6:	e001      	b.n	8010cec <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010ce8:	7dfb      	ldrb	r3, [r7, #23]
 8010cea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	f003 0320 	and.w	r3, r3, #32
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d04b      	beq.n	8010d90 <HAL_RCCEx_PeriphCLKConfig+0xa54>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010cfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010d02:	d02e      	beq.n	8010d62 <HAL_RCCEx_PeriphCLKConfig+0xa26>
 8010d04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010d08:	d828      	bhi.n	8010d5c <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8010d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010d0e:	d02a      	beq.n	8010d66 <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 8010d10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010d14:	d822      	bhi.n	8010d5c <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8010d16:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8010d1a:	d026      	beq.n	8010d6a <HAL_RCCEx_PeriphCLKConfig+0xa2e>
 8010d1c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8010d20:	d81c      	bhi.n	8010d5c <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8010d22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010d26:	d010      	beq.n	8010d4a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8010d28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010d2c:	d816      	bhi.n	8010d5c <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d01d      	beq.n	8010d6e <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8010d32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010d36:	d111      	bne.n	8010d5c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	3304      	adds	r3, #4
 8010d3c:	2100      	movs	r1, #0
 8010d3e:	4618      	mov	r0, r3
 8010d40:	f001 fcc6 	bl	80126d0 <RCCEx_PLL2_Config>
 8010d44:	4603      	mov	r3, r0
 8010d46:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8010d48:	e012      	b.n	8010d70 <HAL_RCCEx_PeriphCLKConfig+0xa34>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	3324      	adds	r3, #36	; 0x24
 8010d4e:	2102      	movs	r1, #2
 8010d50:	4618      	mov	r0, r3
 8010d52:	f001 fd6f 	bl	8012834 <RCCEx_PLL3_Config>
 8010d56:	4603      	mov	r3, r0
 8010d58:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8010d5a:	e009      	b.n	8010d70 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8010d5c:	2301      	movs	r3, #1
 8010d5e:	75fb      	strb	r3, [r7, #23]
      break;
 8010d60:	e006      	b.n	8010d70 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8010d62:	bf00      	nop
 8010d64:	e004      	b.n	8010d70 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8010d66:	bf00      	nop
 8010d68:	e002      	b.n	8010d70 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8010d6a:	bf00      	nop
 8010d6c:	e000      	b.n	8010d70 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8010d6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8010d70:	7dfb      	ldrb	r3, [r7, #23]
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d10a      	bne.n	8010d8c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8010d76:	4b57      	ldr	r3, [pc, #348]	; (8010ed4 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8010d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010d7a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010d84:	4953      	ldr	r1, [pc, #332]	; (8010ed4 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8010d86:	4313      	orrs	r3, r2
 8010d88:	654b      	str	r3, [r1, #84]	; 0x54
 8010d8a:	e001      	b.n	8010d90 <HAL_RCCEx_PeriphCLKConfig+0xa54>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010d8c:	7dfb      	ldrb	r3, [r7, #23]
 8010d8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d04b      	beq.n	8010e34 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8010da2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8010da6:	d02e      	beq.n	8010e06 <HAL_RCCEx_PeriphCLKConfig+0xaca>
 8010da8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8010dac:	d828      	bhi.n	8010e00 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8010dae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010db2:	d02a      	beq.n	8010e0a <HAL_RCCEx_PeriphCLKConfig+0xace>
 8010db4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010db8:	d822      	bhi.n	8010e00 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8010dba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010dbe:	d026      	beq.n	8010e0e <HAL_RCCEx_PeriphCLKConfig+0xad2>
 8010dc0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010dc4:	d81c      	bhi.n	8010e00 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8010dc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010dca:	d010      	beq.n	8010dee <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8010dcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010dd0:	d816      	bhi.n	8010e00 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d01d      	beq.n	8010e12 <HAL_RCCEx_PeriphCLKConfig+0xad6>
 8010dd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010dda:	d111      	bne.n	8010e00 <HAL_RCCEx_PeriphCLKConfig+0xac4>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	3304      	adds	r3, #4
 8010de0:	2100      	movs	r1, #0
 8010de2:	4618      	mov	r0, r3
 8010de4:	f001 fc74 	bl	80126d0 <RCCEx_PLL2_Config>
 8010de8:	4603      	mov	r3, r0
 8010dea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8010dec:	e012      	b.n	8010e14 <HAL_RCCEx_PeriphCLKConfig+0xad8>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	3324      	adds	r3, #36	; 0x24
 8010df2:	2102      	movs	r1, #2
 8010df4:	4618      	mov	r0, r3
 8010df6:	f001 fd1d 	bl	8012834 <RCCEx_PLL3_Config>
 8010dfa:	4603      	mov	r3, r0
 8010dfc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8010dfe:	e009      	b.n	8010e14 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8010e00:	2301      	movs	r3, #1
 8010e02:	75fb      	strb	r3, [r7, #23]
      break;
 8010e04:	e006      	b.n	8010e14 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8010e06:	bf00      	nop
 8010e08:	e004      	b.n	8010e14 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8010e0a:	bf00      	nop
 8010e0c:	e002      	b.n	8010e14 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8010e0e:	bf00      	nop
 8010e10:	e000      	b.n	8010e14 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8010e12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8010e14:	7dfb      	ldrb	r3, [r7, #23]
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d10a      	bne.n	8010e30 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8010e1a:	4b2e      	ldr	r3, [pc, #184]	; (8010ed4 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8010e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010e1e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8010e28:	492a      	ldr	r1, [pc, #168]	; (8010ed4 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8010e2a:	4313      	orrs	r3, r2
 8010e2c:	658b      	str	r3, [r1, #88]	; 0x58
 8010e2e:	e001      	b.n	8010e34 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010e30:	7dfb      	ldrb	r3, [r7, #23]
 8010e32:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d04d      	beq.n	8010edc <HAL_RCCEx_PeriphCLKConfig+0xba0>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8010e46:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8010e4a:	d02e      	beq.n	8010eaa <HAL_RCCEx_PeriphCLKConfig+0xb6e>
 8010e4c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8010e50:	d828      	bhi.n	8010ea4 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8010e52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010e56:	d02a      	beq.n	8010eae <HAL_RCCEx_PeriphCLKConfig+0xb72>
 8010e58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010e5c:	d822      	bhi.n	8010ea4 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8010e5e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8010e62:	d026      	beq.n	8010eb2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
 8010e64:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8010e68:	d81c      	bhi.n	8010ea4 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8010e6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010e6e:	d010      	beq.n	8010e92 <HAL_RCCEx_PeriphCLKConfig+0xb56>
 8010e70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010e74:	d816      	bhi.n	8010ea4 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d01d      	beq.n	8010eb6 <HAL_RCCEx_PeriphCLKConfig+0xb7a>
 8010e7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010e7e:	d111      	bne.n	8010ea4 <HAL_RCCEx_PeriphCLKConfig+0xb68>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	3304      	adds	r3, #4
 8010e84:	2100      	movs	r1, #0
 8010e86:	4618      	mov	r0, r3
 8010e88:	f001 fc22 	bl	80126d0 <RCCEx_PLL2_Config>
 8010e8c:	4603      	mov	r3, r0
 8010e8e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8010e90:	e012      	b.n	8010eb8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	3324      	adds	r3, #36	; 0x24
 8010e96:	2102      	movs	r1, #2
 8010e98:	4618      	mov	r0, r3
 8010e9a:	f001 fccb 	bl	8012834 <RCCEx_PLL3_Config>
 8010e9e:	4603      	mov	r3, r0
 8010ea0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8010ea2:	e009      	b.n	8010eb8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8010ea4:	2301      	movs	r3, #1
 8010ea6:	75fb      	strb	r3, [r7, #23]
      break;
 8010ea8:	e006      	b.n	8010eb8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8010eaa:	bf00      	nop
 8010eac:	e004      	b.n	8010eb8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8010eae:	bf00      	nop
 8010eb0:	e002      	b.n	8010eb8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8010eb2:	bf00      	nop
 8010eb4:	e000      	b.n	8010eb8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8010eb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8010eb8:	7dfb      	ldrb	r3, [r7, #23]
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d10c      	bne.n	8010ed8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8010ebe:	4b05      	ldr	r3, [pc, #20]	; (8010ed4 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8010ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010ec2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8010ecc:	4901      	ldr	r1, [pc, #4]	; (8010ed4 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8010ece:	4313      	orrs	r3, r2
 8010ed0:	658b      	str	r3, [r1, #88]	; 0x58
 8010ed2:	e003      	b.n	8010edc <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8010ed4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010ed8:	7dfb      	ldrb	r3, [r7, #23]
 8010eda:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	f003 0308 	and.w	r3, r3, #8
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d01a      	beq.n	8010f1e <HAL_RCCEx_PeriphCLKConfig+0xbe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010eee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010ef2:	d10a      	bne.n	8010f0a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	3324      	adds	r3, #36	; 0x24
 8010ef8:	2102      	movs	r1, #2
 8010efa:	4618      	mov	r0, r3
 8010efc:	f001 fc9a 	bl	8012834 <RCCEx_PLL3_Config>
 8010f00:	4603      	mov	r3, r0
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d001      	beq.n	8010f0a <HAL_RCCEx_PeriphCLKConfig+0xbce>
        {
          status = HAL_ERROR;
 8010f06:	2301      	movs	r3, #1
 8010f08:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8010f0a:	4b8c      	ldr	r3, [pc, #560]	; (801113c <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8010f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010f0e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010f18:	4988      	ldr	r1, [pc, #544]	; (801113c <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8010f1a:	4313      	orrs	r3, r2
 8010f1c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	f003 0310 	and.w	r3, r3, #16
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d01a      	beq.n	8010f60 <HAL_RCCEx_PeriphCLKConfig+0xc24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8010f30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010f34:	d10a      	bne.n	8010f4c <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	3324      	adds	r3, #36	; 0x24
 8010f3a:	2102      	movs	r1, #2
 8010f3c:	4618      	mov	r0, r3
 8010f3e:	f001 fc79 	bl	8012834 <RCCEx_PLL3_Config>
 8010f42:	4603      	mov	r3, r0
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d001      	beq.n	8010f4c <HAL_RCCEx_PeriphCLKConfig+0xc10>
      {
        status = HAL_ERROR;
 8010f48:	2301      	movs	r3, #1
 8010f4a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8010f4c:	4b7b      	ldr	r3, [pc, #492]	; (801113c <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8010f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010f50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8010f5a:	4978      	ldr	r1, [pc, #480]	; (801113c <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8010f5c:	4313      	orrs	r3, r2
 8010f5e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d034      	beq.n	8010fd6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010f72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010f76:	d01d      	beq.n	8010fb4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8010f78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010f7c:	d817      	bhi.n	8010fae <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d003      	beq.n	8010f8a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8010f82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010f86:	d009      	beq.n	8010f9c <HAL_RCCEx_PeriphCLKConfig+0xc60>
 8010f88:	e011      	b.n	8010fae <HAL_RCCEx_PeriphCLKConfig+0xc72>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	3304      	adds	r3, #4
 8010f8e:	2100      	movs	r1, #0
 8010f90:	4618      	mov	r0, r3
 8010f92:	f001 fb9d 	bl	80126d0 <RCCEx_PLL2_Config>
 8010f96:	4603      	mov	r3, r0
 8010f98:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8010f9a:	e00c      	b.n	8010fb6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	3324      	adds	r3, #36	; 0x24
 8010fa0:	2102      	movs	r1, #2
 8010fa2:	4618      	mov	r0, r3
 8010fa4:	f001 fc46 	bl	8012834 <RCCEx_PLL3_Config>
 8010fa8:	4603      	mov	r3, r0
 8010faa:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8010fac:	e003      	b.n	8010fb6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8010fae:	2301      	movs	r3, #1
 8010fb0:	75fb      	strb	r3, [r7, #23]
      break;
 8010fb2:	e000      	b.n	8010fb6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      break;
 8010fb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8010fb6:	7dfb      	ldrb	r3, [r7, #23]
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d10a      	bne.n	8010fd2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8010fbc:	4b5f      	ldr	r3, [pc, #380]	; (801113c <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8010fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010fc0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010fca:	495c      	ldr	r1, [pc, #368]	; (801113c <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8010fcc:	4313      	orrs	r3, r2
 8010fce:	658b      	str	r3, [r1, #88]	; 0x58
 8010fd0:	e001      	b.n	8010fd6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010fd2:	7dfb      	ldrb	r3, [r7, #23]
 8010fd4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d033      	beq.n	801104a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010fe8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8010fec:	d01c      	beq.n	8011028 <HAL_RCCEx_PeriphCLKConfig+0xcec>
 8010fee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8010ff2:	d816      	bhi.n	8011022 <HAL_RCCEx_PeriphCLKConfig+0xce6>
 8010ff4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010ff8:	d003      	beq.n	8011002 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8010ffa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010ffe:	d007      	beq.n	8011010 <HAL_RCCEx_PeriphCLKConfig+0xcd4>
 8011000:	e00f      	b.n	8011022 <HAL_RCCEx_PeriphCLKConfig+0xce6>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011002:	4b4e      	ldr	r3, [pc, #312]	; (801113c <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8011004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011006:	4a4d      	ldr	r2, [pc, #308]	; (801113c <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8011008:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801100c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 801100e:	e00c      	b.n	801102a <HAL_RCCEx_PeriphCLKConfig+0xcee>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	3324      	adds	r3, #36	; 0x24
 8011014:	2101      	movs	r1, #1
 8011016:	4618      	mov	r0, r3
 8011018:	f001 fc0c 	bl	8012834 <RCCEx_PLL3_Config>
 801101c:	4603      	mov	r3, r0
 801101e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8011020:	e003      	b.n	801102a <HAL_RCCEx_PeriphCLKConfig+0xcee>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011022:	2301      	movs	r3, #1
 8011024:	75fb      	strb	r3, [r7, #23]
      break;
 8011026:	e000      	b.n	801102a <HAL_RCCEx_PeriphCLKConfig+0xcee>
      break;
 8011028:	bf00      	nop
    }

    if(ret == HAL_OK)
 801102a:	7dfb      	ldrb	r3, [r7, #23]
 801102c:	2b00      	cmp	r3, #0
 801102e:	d10a      	bne.n	8011046 <HAL_RCCEx_PeriphCLKConfig+0xd0a>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8011030:	4b42      	ldr	r3, [pc, #264]	; (801113c <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8011032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011034:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801103e:	493f      	ldr	r1, [pc, #252]	; (801113c <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8011040:	4313      	orrs	r3, r2
 8011042:	654b      	str	r3, [r1, #84]	; 0x54
 8011044:	e001      	b.n	801104a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011046:	7dfb      	ldrb	r3, [r7, #23]
 8011048:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011052:	2b00      	cmp	r3, #0
 8011054:	d029      	beq.n	80110aa <HAL_RCCEx_PeriphCLKConfig+0xd6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801105a:	2b00      	cmp	r3, #0
 801105c:	d003      	beq.n	8011066 <HAL_RCCEx_PeriphCLKConfig+0xd2a>
 801105e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011062:	d007      	beq.n	8011074 <HAL_RCCEx_PeriphCLKConfig+0xd38>
 8011064:	e00f      	b.n	8011086 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011066:	4b35      	ldr	r3, [pc, #212]	; (801113c <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8011068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801106a:	4a34      	ldr	r2, [pc, #208]	; (801113c <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 801106c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011070:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8011072:	e00b      	b.n	801108c <HAL_RCCEx_PeriphCLKConfig+0xd50>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	3304      	adds	r3, #4
 8011078:	2102      	movs	r1, #2
 801107a:	4618      	mov	r0, r3
 801107c:	f001 fb28 	bl	80126d0 <RCCEx_PLL2_Config>
 8011080:	4603      	mov	r3, r0
 8011082:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8011084:	e002      	b.n	801108c <HAL_RCCEx_PeriphCLKConfig+0xd50>

    default:
      ret = HAL_ERROR;
 8011086:	2301      	movs	r3, #1
 8011088:	75fb      	strb	r3, [r7, #23]
      break;
 801108a:	bf00      	nop
    }

    if(ret == HAL_OK)
 801108c:	7dfb      	ldrb	r3, [r7, #23]
 801108e:	2b00      	cmp	r3, #0
 8011090:	d109      	bne.n	80110a6 <HAL_RCCEx_PeriphCLKConfig+0xd6a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8011092:	4b2a      	ldr	r3, [pc, #168]	; (801113c <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8011094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011096:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801109e:	4927      	ldr	r1, [pc, #156]	; (801113c <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80110a0:	4313      	orrs	r3, r2
 80110a2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80110a4:	e001      	b.n	80110aa <HAL_RCCEx_PeriphCLKConfig+0xd6e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80110a6:	7dfb      	ldrb	r3, [r7, #23]
 80110a8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d00a      	beq.n	80110cc <HAL_RCCEx_PeriphCLKConfig+0xd90>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	3324      	adds	r3, #36	; 0x24
 80110ba:	2102      	movs	r1, #2
 80110bc:	4618      	mov	r0, r3
 80110be:	f001 fbb9 	bl	8012834 <RCCEx_PLL3_Config>
 80110c2:	4603      	mov	r3, r0
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d001      	beq.n	80110cc <HAL_RCCEx_PeriphCLKConfig+0xd90>
    {
      status=HAL_ERROR;
 80110c8:	2301      	movs	r3, #1
 80110ca:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	681b      	ldr	r3, [r3, #0]
 80110d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d035      	beq.n	8011144 <HAL_RCCEx_PeriphCLKConfig+0xe08>
  {

    switch(PeriphClkInit->RngClockSelection)
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80110de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80110e2:	d017      	beq.n	8011114 <HAL_RCCEx_PeriphCLKConfig+0xdd8>
 80110e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80110e8:	d811      	bhi.n	801110e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80110ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80110ee:	d013      	beq.n	8011118 <HAL_RCCEx_PeriphCLKConfig+0xddc>
 80110f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80110f4:	d80b      	bhi.n	801110e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d010      	beq.n	801111c <HAL_RCCEx_PeriphCLKConfig+0xde0>
 80110fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80110fe:	d106      	bne.n	801110e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011100:	4b0e      	ldr	r3, [pc, #56]	; (801113c <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8011102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011104:	4a0d      	ldr	r2, [pc, #52]	; (801113c <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8011106:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801110a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 801110c:	e007      	b.n	801111e <HAL_RCCEx_PeriphCLKConfig+0xde2>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801110e:	2301      	movs	r3, #1
 8011110:	75fb      	strb	r3, [r7, #23]
      break;
 8011112:	e004      	b.n	801111e <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 8011114:	bf00      	nop
 8011116:	e002      	b.n	801111e <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 8011118:	bf00      	nop
 801111a:	e000      	b.n	801111e <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 801111c:	bf00      	nop
    }

    if(ret == HAL_OK)
 801111e:	7dfb      	ldrb	r3, [r7, #23]
 8011120:	2b00      	cmp	r3, #0
 8011122:	d10d      	bne.n	8011140 <HAL_RCCEx_PeriphCLKConfig+0xe04>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8011124:	4b05      	ldr	r3, [pc, #20]	; (801113c <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8011126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011128:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011132:	4902      	ldr	r1, [pc, #8]	; (801113c <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8011134:	4313      	orrs	r3, r2
 8011136:	654b      	str	r3, [r1, #84]	; 0x54
 8011138:	e004      	b.n	8011144 <HAL_RCCEx_PeriphCLKConfig+0xe08>
 801113a:	bf00      	nop
 801113c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011140:	7dfb      	ldrb	r3, [r7, #23]
 8011142:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801114c:	2b00      	cmp	r3, #0
 801114e:	d008      	beq.n	8011162 <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8011150:	4b31      	ldr	r3, [pc, #196]	; (8011218 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8011152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011154:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801115c:	492e      	ldr	r1, [pc, #184]	; (8011218 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 801115e:	4313      	orrs	r3, r2
 8011160:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801116a:	2b00      	cmp	r3, #0
 801116c:	d009      	beq.n	8011182 <HAL_RCCEx_PeriphCLKConfig+0xe46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 801116e:	4b2a      	ldr	r3, [pc, #168]	; (8011218 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8011170:	691b      	ldr	r3, [r3, #16]
 8011172:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801117c:	4926      	ldr	r1, [pc, #152]	; (8011218 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 801117e:	4313      	orrs	r3, r2
 8011180:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801118a:	2b00      	cmp	r3, #0
 801118c:	d008      	beq.n	80111a0 <HAL_RCCEx_PeriphCLKConfig+0xe64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 801118e:	4b22      	ldr	r3, [pc, #136]	; (8011218 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8011190:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011192:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801119a:	491f      	ldr	r1, [pc, #124]	; (8011218 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 801119c:	4313      	orrs	r3, r2
 801119e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	681b      	ldr	r3, [r3, #0]
 80111a4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d00d      	beq.n	80111c8 <HAL_RCCEx_PeriphCLKConfig+0xe8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80111ac:	4b1a      	ldr	r3, [pc, #104]	; (8011218 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80111ae:	691b      	ldr	r3, [r3, #16]
 80111b0:	4a19      	ldr	r2, [pc, #100]	; (8011218 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80111b2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80111b6:	6113      	str	r3, [r2, #16]
 80111b8:	4b17      	ldr	r3, [pc, #92]	; (8011218 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80111ba:	691a      	ldr	r2, [r3, #16]
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80111c2:	4915      	ldr	r1, [pc, #84]	; (8011218 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80111c4:	4313      	orrs	r3, r2
 80111c6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	da08      	bge.n	80111e2 <HAL_RCCEx_PeriphCLKConfig+0xea6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80111d0:	4b11      	ldr	r3, [pc, #68]	; (8011218 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80111d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80111d4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80111dc:	490e      	ldr	r1, [pc, #56]	; (8011218 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80111de:	4313      	orrs	r3, r2
 80111e0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	681b      	ldr	r3, [r3, #0]
 80111e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d009      	beq.n	8011202 <HAL_RCCEx_PeriphCLKConfig+0xec6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80111ee:	4b0a      	ldr	r3, [pc, #40]	; (8011218 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80111f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80111f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80111fc:	4906      	ldr	r1, [pc, #24]	; (8011218 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80111fe:	4313      	orrs	r3, r2
 8011200:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8011202:	7dbb      	ldrb	r3, [r7, #22]
 8011204:	2b00      	cmp	r3, #0
 8011206:	d101      	bne.n	801120c <HAL_RCCEx_PeriphCLKConfig+0xed0>
  {
    return HAL_OK;
 8011208:	2300      	movs	r3, #0
 801120a:	e000      	b.n	801120e <HAL_RCCEx_PeriphCLKConfig+0xed2>
  }
  return HAL_ERROR;
 801120c:	2301      	movs	r3, #1
}
 801120e:	4618      	mov	r0, r3
 8011210:	3718      	adds	r7, #24
 8011212:	46bd      	mov	sp, r7
 8011214:	bd80      	pop	{r7, pc}
 8011216:	bf00      	nop
 8011218:	58024400 	.word	0x58024400

0801121c <HAL_RCCEx_GetPeriphCLKConfig>:
  * @retval None
  *
  *   (*) : Available on some STM32H7 lines only.
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801121c:	b480      	push	{r7}
 801121e:	b083      	sub	sp, #12
 8011220:	af00      	add	r7, sp, #0
 8011222:	6078      	str	r0, [r7, #4]
  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection =
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	4aa3      	ldr	r2, [pc, #652]	; (80114b4 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8011228:	601a      	str	r2, [r3, #0]
	         RCC_PERIPHCLK_CKPER;

#if defined(I2C5)
PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_I2C1235;
#else
PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_I2C123;
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	f043 0208 	orr.w	r2, r3, #8
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	601a      	str	r2, [r3, #0]
#endif /* RCC_CDCCIP1R_SAI2ASEL */
#if defined(RCC_CDCCIP1R_SAI2BSEL)		 
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI2B;
#endif /* RCC_CDCCIP1R_SAI2BSEL */
#if defined(SAI3)	 
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI23;
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	601a      	str	r2, [r3, #0]
#endif /* SAI3 */
#if defined(SAI4)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI4A;
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	601a      	str	r2, [r3, #0]
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI4B;
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	601a      	str	r2, [r3, #0]
#endif /* SAI4 */
#if defined(DFSDM2_BASE)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_DFSDM2;
#endif /* DFSDM2 */
#if defined(QUADSPI)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_QSPI;
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	601a      	str	r2, [r3, #0]
#endif /* QUADSPI */
#if defined(OCTOSPI1) || defined(OCTOSPI2)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_OSPI;
#endif /* OCTOSPI1 || OCTOSPI2 */
#if defined(HRTIM1)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_HRTIM1;
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	601a      	str	r2, [r3, #0]
#endif /* HRTIM1 */
#if defined(LTDC)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_LTDC;
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	681b      	ldr	r3, [r3, #0]
 8011276:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	601a      	str	r2, [r3, #0]
#endif /* LTDC */
#if defined(DSI)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_DSI;
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	601a      	str	r2, [r3, #0]
#endif /* DSI */

  /* Get the PLL3 Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLL3.PLL3M = (uint32_t)((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> RCC_PLLCKSELR_DIVM3_Pos);
 801128a:	4b8b      	ldr	r3, [pc, #556]	; (80114b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 801128c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801128e:	0d1b      	lsrs	r3, r3, #20
 8011290:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	625a      	str	r2, [r3, #36]	; 0x24
  PeriphClkInit->PLL3.PLL3N = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) >> RCC_PLL3DIVR_N3_Pos)+ 1U;
 8011298:	4b87      	ldr	r3, [pc, #540]	; (80114b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 801129a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801129c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80112a0:	1c5a      	adds	r2, r3, #1
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInit->PLL3.PLL3R = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> RCC_PLL3DIVR_R3_Pos)+ 1U;
 80112a6:	4b84      	ldr	r3, [pc, #528]	; (80114b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 80112a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112aa:	0e1b      	lsrs	r3, r3, #24
 80112ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80112b0:	1c5a      	adds	r2, r3, #1
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	635a      	str	r2, [r3, #52]	; 0x34
  PeriphClkInit->PLL3.PLL3P = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> RCC_PLL3DIVR_P3_Pos)+ 1U;
 80112b6:	4b80      	ldr	r3, [pc, #512]	; (80114b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 80112b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112ba:	0a5b      	lsrs	r3, r3, #9
 80112bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80112c0:	1c5a      	adds	r2, r3, #1
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	62da      	str	r2, [r3, #44]	; 0x2c
  PeriphClkInit->PLL3.PLL3Q = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> RCC_PLL3DIVR_Q3_Pos)+ 1U;
 80112c6:	4b7c      	ldr	r3, [pc, #496]	; (80114b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 80112c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112ca:	0c1b      	lsrs	r3, r3, #16
 80112cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80112d0:	1c5a      	adds	r2, r3, #1
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	631a      	str	r2, [r3, #48]	; 0x30
  PeriphClkInit->PLL3.PLL3RGE = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL3RGE) >> RCC_PLLCFGR_PLL3RGE_Pos);
 80112d6:	4b78      	ldr	r3, [pc, #480]	; (80114b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 80112d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112da:	0a9b      	lsrs	r3, r3, #10
 80112dc:	f003 0203 	and.w	r2, r3, #3
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	639a      	str	r2, [r3, #56]	; 0x38
  PeriphClkInit->PLL3.PLL3VCOSEL = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL3VCOSEL) >> RCC_PLLCFGR_PLL3VCOSEL_Pos);
 80112e4:	4b74      	ldr	r3, [pc, #464]	; (80114b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 80112e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112e8:	0a5b      	lsrs	r3, r3, #9
 80112ea:	f003 0201 	and.w	r2, r3, #1
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Get the PLL2 Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLL2.PLL2M = (uint32_t)((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> RCC_PLLCKSELR_DIVM2_Pos);
 80112f2:	4b71      	ldr	r3, [pc, #452]	; (80114b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 80112f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80112f6:	0b1b      	lsrs	r3, r3, #12
 80112f8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLL2.PLL2N = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) >> RCC_PLL2DIVR_N2_Pos)+ 1U;
 8011300:	4b6d      	ldr	r3, [pc, #436]	; (80114b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 8011302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011304:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011308:	1c5a      	adds	r2, r3, #1
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	609a      	str	r2, [r3, #8]
  PeriphClkInit->PLL2.PLL2R = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> RCC_PLL2DIVR_R2_Pos)+ 1U;
 801130e:	4b6a      	ldr	r3, [pc, #424]	; (80114b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 8011310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011312:	0e1b      	lsrs	r3, r3, #24
 8011314:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011318:	1c5a      	adds	r2, r3, #1
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLL2.PLL2P = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> RCC_PLL2DIVR_P2_Pos)+ 1U;
 801131e:	4b66      	ldr	r3, [pc, #408]	; (80114b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 8011320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011322:	0a5b      	lsrs	r3, r3, #9
 8011324:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011328:	1c5a      	adds	r2, r3, #1
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLL2.PLL2Q = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> RCC_PLL2DIVR_Q2_Pos)+ 1U;
 801132e:	4b62      	ldr	r3, [pc, #392]	; (80114b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 8011330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011332:	0c1b      	lsrs	r3, r3, #16
 8011334:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011338:	1c5a      	adds	r2, r3, #1
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLL2.PLL2RGE = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL2RGE) >> RCC_PLLCFGR_PLL2RGE_Pos);
 801133e:	4b5e      	ldr	r3, [pc, #376]	; (80114b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 8011340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011342:	099b      	lsrs	r3, r3, #6
 8011344:	f003 0203 	and.w	r2, r3, #3
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLL2.PLL2VCOSEL = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL2VCOSEL) >> RCC_PLLCFGR_PLL2VCOSEL_Pos);
 801134c:	4b5a      	ldr	r3, [pc, #360]	; (80114b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 801134e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011350:	095b      	lsrs	r3, r3, #5
 8011352:	f003 0201 	and.w	r2, r3, #1
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	61da      	str	r2, [r3, #28]

  /* Get the USART1 configuration --------------------------------------------*/
  PeriphClkInit->Usart16ClockSelection      = __HAL_RCC_GET_USART16_SOURCE();
 801135a:	4b57      	ldr	r3, [pc, #348]	; (80114b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 801135c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801135e:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	67da      	str	r2, [r3, #124]	; 0x7c
  /* Get the USART2/3/4/5/7/8 clock source -----------------------------------*/
  PeriphClkInit->Usart234578ClockSelection  = __HAL_RCC_GET_USART234578_SOURCE();
 8011366:	4b54      	ldr	r3, [pc, #336]	; (80114b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 8011368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801136a:	f003 0207 	and.w	r2, r3, #7
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	679a      	str	r2, [r3, #120]	; 0x78
  /* Get the LPUART1 clock source --------------------------------------------*/
  PeriphClkInit->Lpuart1ClockSelection      = __HAL_RCC_GET_LPUART1_SOURCE();
 8011372:	4b51      	ldr	r3, [pc, #324]	; (80114b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 8011374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011376:	f003 0207 	and.w	r2, r3, #7
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if defined(I2C5)
  /* Get the I2C1/2/3/5 clock source -----------------------------------------*/
  PeriphClkInit->I2c1235ClockSelection       = __HAL_RCC_GET_I2C1_SOURCE();
#else
  /* Get the I2C1/2/3 clock source -------------------------------------------*/
  PeriphClkInit->I2c123ClockSelection       = __HAL_RCC_GET_I2C1_SOURCE();
 8011380:	4b4d      	ldr	r3, [pc, #308]	; (80114b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 8011382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011384:	f403 5240 	and.w	r2, r3, #12288	; 0x3000
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /*I2C5*/
  /* Get the LPTIM1 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection       = __HAL_RCC_GET_LPTIM1_SOURCE();
 801138e:	4b4a      	ldr	r3, [pc, #296]	; (80114b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 8011390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011392:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  /* Get the LPTIM2 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim2ClockSelection       = __HAL_RCC_GET_LPTIM2_SOURCE();
 801139c:	4b46      	ldr	r3, [pc, #280]	; (80114b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 801139e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80113a0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  /* Get the LPTIM3/4/5 clock source -----------------------------------------*/
  PeriphClkInit->Lptim345ClockSelection     = __HAL_RCC_GET_LPTIM345_SOURCE();
 80113aa:	4b43      	ldr	r3, [pc, #268]	; (80114b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 80113ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80113ae:	f403 4260 	and.w	r2, r3, #57344	; 0xe000
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  /* Get the SAI1 clock source -----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection         = __HAL_RCC_GET_SAI1_SOURCE();
 80113b8:	4b3f      	ldr	r3, [pc, #252]	; (80114b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 80113ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80113bc:	f003 0207 	and.w	r2, r3, #7
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	659a      	str	r2, [r3, #88]	; 0x58
#if defined(SAI3)
  /* Get the SAI2/3 clock source ---------------------------------------------*/
  PeriphClkInit->Sai23ClockSelection        = __HAL_RCC_GET_SAI23_SOURCE();
 80113c4:	4b3c      	ldr	r3, [pc, #240]	; (80114b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 80113c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80113c8:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Get the SAI2B clock source ---------------------------------------------*/
  PeriphClkInit->Sai2BClockSelection        = __HAL_RCC_GET_SAI2B_SOURCE();
#endif  /*SAI2B*/
#if defined(SAI4)
  /* Get the SAI4A clock source ----------------------------------------------*/
  PeriphClkInit->Sai4AClockSelection        = __HAL_RCC_GET_SAI4A_SOURCE();
 80113d0:	4b39      	ldr	r3, [pc, #228]	; (80114b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 80113d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80113d4:	f403 0260 	and.w	r2, r3, #14680064	; 0xe00000
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  /* Get the SAI4B clock source ----------------------------------------------*/
  PeriphClkInit->Sai4BClockSelection        = __HAL_RCC_GET_SAI4B_SOURCE();
 80113de:	4b36      	ldr	r3, [pc, #216]	; (80114b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 80113e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80113e2:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif  /*SAI4*/
  /* Get the RTC clock source ------------------------------------------------*/
  PeriphClkInit->RTCClockSelection          = __HAL_RCC_GET_RTC_SOURCE();
 80113ec:	4b32      	ldr	r3, [pc, #200]	; (80114b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 80113ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80113f0:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  /* Get the USB clock source ------------------------------------------------*/
  PeriphClkInit->UsbClockSelection          = __HAL_RCC_GET_USB_SOURCE();
 80113fa:	4b2f      	ldr	r3, [pc, #188]	; (80114b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 80113fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80113fe:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  /* Get the SDMMC clock source ----------------------------------------------*/
  PeriphClkInit->SdmmcClockSelection        = __HAL_RCC_GET_SDMMC_SOURCE();
 8011408:	4b2b      	ldr	r3, [pc, #172]	; (80114b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 801140a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801140c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	651a      	str	r2, [r3, #80]	; 0x50
  /* Get the RNG clock source ------------------------------------------------*/
  PeriphClkInit->RngClockSelection          = __HAL_RCC_GET_RNG_SOURCE();
 8011414:	4b28      	ldr	r3, [pc, #160]	; (80114b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 8011416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011418:	f403 7240 	and.w	r2, r3, #768	; 0x300
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(HRTIM1)
  /* Get the HRTIM1 clock source ---------------------------------------------*/
  PeriphClkInit->Hrtim1ClockSelection       = __HAL_RCC_GET_HRTIM1_SOURCE();
 8011422:	4b25      	ldr	r3, [pc, #148]	; (80114b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 8011424:	691b      	ldr	r3, [r3, #16]
 8011426:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
#endif /* HRTIM1 */
  /* Get the ADC clock source ------------------------------------------------*/
  PeriphClkInit->AdcClockSelection          = __HAL_RCC_GET_ADC_SOURCE();
 8011430:	4b21      	ldr	r3, [pc, #132]	; (80114b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 8011432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011434:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  /* Get the SWPMI1 clock source ---------------------------------------------*/
  PeriphClkInit->Swpmi1ClockSelection       = __HAL_RCC_GET_SWPMI1_SOURCE();
 801143e:	4b1e      	ldr	r3, [pc, #120]	; (80114b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 8011440:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011442:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	675a      	str	r2, [r3, #116]	; 0x74
  /* Get the DFSDM1 clock source ---------------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection       = __HAL_RCC_GET_DFSDM1_SOURCE();
 801144a:	4b1b      	ldr	r3, [pc, #108]	; (80114b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 801144c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801144e:	f003 7280 	and.w	r2, r3, #16777216	; 0x1000000
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	66da      	str	r2, [r3, #108]	; 0x6c
#if defined(DFSDM2_BASE)
  /* Get the DFSDM2 clock source ---------------------------------------------*/
  PeriphClkInit->Dfsdm2ClockSelection       = __HAL_RCC_GET_DFSDM2_SOURCE();
#endif /* DFSDM2 */
  /* Get the SPDIFRX clock source --------------------------------------------*/
  PeriphClkInit->SpdifrxClockSelection      = __HAL_RCC_GET_SPDIFRX_SOURCE();
 8011456:	4b18      	ldr	r3, [pc, #96]	; (80114b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 8011458:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801145a:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	669a      	str	r2, [r3, #104]	; 0x68
  /* Get the SPI1/2/3 clock source -------------------------------------------*/
  PeriphClkInit->Spi123ClockSelection       = __HAL_RCC_GET_SPI123_SOURCE();
 8011462:	4b15      	ldr	r3, [pc, #84]	; (80114b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 8011464:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011466:	f403 42e0 	and.w	r2, r3, #28672	; 0x7000
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	661a      	str	r2, [r3, #96]	; 0x60
  /* Get the SPI4/5 clock source ---------------------------------------------*/
  PeriphClkInit->Spi45ClockSelection        = __HAL_RCC_GET_SPI45_SOURCE();
 801146e:	4b12      	ldr	r3, [pc, #72]	; (80114b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 8011470:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011472:	f403 22e0 	and.w	r2, r3, #458752	; 0x70000
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	665a      	str	r2, [r3, #100]	; 0x64
  /* Get the SPI6 clock source -----------------------------------------------*/
  PeriphClkInit->Spi6ClockSelection         = __HAL_RCC_GET_SPI6_SOURCE();
 801147a:	4b0f      	ldr	r3, [pc, #60]	; (80114b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 801147c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801147e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* Get the FDCAN clock source ----------------------------------------------*/
  PeriphClkInit->FdcanClockSelection        = __HAL_RCC_GET_FDCAN_SOURCE();
 8011488:	4b0b      	ldr	r3, [pc, #44]	; (80114b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 801148a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801148c:	f003 5240 	and.w	r2, r3, #805306368	; 0x30000000
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	671a      	str	r2, [r3, #112]	; 0x70
  /* Get the CEC clock source ------------------------------------------------*/
  PeriphClkInit->CecClockSelection          = __HAL_RCC_GET_CEC_SOURCE();
 8011494:	4b08      	ldr	r3, [pc, #32]	; (80114b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 8011496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011498:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  /* Get the FMC clock source ------------------------------------------------*/
  PeriphClkInit->FmcClockSelection          = __HAL_RCC_GET_FMC_SOURCE();
 80114a2:	4b05      	ldr	r3, [pc, #20]	; (80114b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 80114a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80114a6:	f003 0203 	and.w	r2, r3, #3
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	645a      	str	r2, [r3, #68]	; 0x44
#if defined(QUADSPI)
  /* Get the QSPI clock source -----------------------------------------------*/
  PeriphClkInit->QspiClockSelection         = __HAL_RCC_GET_QSPI_SOURCE();
 80114ae:	4b02      	ldr	r3, [pc, #8]	; (80114b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 80114b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80114b2:	e003      	b.n	80114bc <HAL_RCCEx_GetPeriphCLKConfig+0x2a0>
 80114b4:	c9fff1f7 	.word	0xc9fff1f7
 80114b8:	58024400 	.word	0x58024400
 80114bc:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	649a      	str	r2, [r3, #72]	; 0x48
  PeriphClkInit->OspiClockSelection         = __HAL_RCC_GET_OSPI_SOURCE();
#endif /* OCTOSPI1 || OCTOSPI2 */

#if defined(DSI)
  /* Get the DSI clock source ------------------------------------------------*/
  PeriphClkInit->DsiClockSelection          = __HAL_RCC_GET_DSI_SOURCE();
 80114c4:	4b10      	ldr	r3, [pc, #64]	; (8011508 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 80114c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80114c8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /*DSI*/

  /* Get the CKPER clock source ----------------------------------------------*/
  PeriphClkInit->CkperClockSelection        = __HAL_RCC_GET_CLKP_SOURCE();
 80114d0:	4b0d      	ldr	r3, [pc, #52]	; (8011508 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 80114d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80114d4:	f003 5240 	and.w	r2, r3, #805306368	; 0x30000000
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get the TIM Prescaler configuration -------------------------------------*/
  if ((RCC->CFGR & RCC_CFGR_TIMPRE) == 0U)
 80114dc:	4b0a      	ldr	r3, [pc, #40]	; (8011508 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 80114de:	691b      	ldr	r3, [r3, #16]
 80114e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d104      	bne.n	80114f2 <HAL_RCCEx_GetPeriphCLKConfig+0x2d6>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	2200      	movs	r2, #0
 80114ec:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 80114f0:	e004      	b.n	80114fc <HAL_RCCEx_GetPeriphCLKConfig+0x2e0>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80114f8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
}
 80114fc:	bf00      	nop
 80114fe:	370c      	adds	r7, #12
 8011500:	46bd      	mov	sp, r7
 8011502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011506:	4770      	bx	lr
 8011508:	58024400 	.word	0x58024400

0801150c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 801150c:	b580      	push	{r7, lr}
 801150e:	b090      	sub	sp, #64	; 0x40
 8011510:	af00      	add	r7, sp, #0
 8011512:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801151a:	f040 8095 	bne.w	8011648 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 801151e:	4bae      	ldr	r3, [pc, #696]	; (80117d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8011520:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011522:	f003 0307 	and.w	r3, r3, #7
 8011526:	633b      	str	r3, [r7, #48]	; 0x30
 8011528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801152a:	2b04      	cmp	r3, #4
 801152c:	f200 8088 	bhi.w	8011640 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8011530:	a201      	add	r2, pc, #4	; (adr r2, 8011538 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8011532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011536:	bf00      	nop
 8011538:	0801154d 	.word	0x0801154d
 801153c:	08011575 	.word	0x08011575
 8011540:	0801159d 	.word	0x0801159d
 8011544:	08011639 	.word	0x08011639
 8011548:	080115c5 	.word	0x080115c5

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801154c:	4ba2      	ldr	r3, [pc, #648]	; (80117d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011554:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011558:	d108      	bne.n	801156c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801155a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801155e:	4618      	mov	r0, r3
 8011560:	f000 ff64 	bl	801242c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8011564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011566:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8011568:	f000 bc95 	b.w	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 801156c:	2300      	movs	r3, #0
 801156e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8011570:	f000 bc91 	b.w	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8011574:	4b98      	ldr	r3, [pc, #608]	; (80117d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801157c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011580:	d108      	bne.n	8011594 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011582:	f107 0318 	add.w	r3, r7, #24
 8011586:	4618      	mov	r0, r3
 8011588:	f000 fca8 	bl	8011edc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801158c:	69bb      	ldr	r3, [r7, #24]
 801158e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8011590:	f000 bc81 	b.w	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8011594:	2300      	movs	r3, #0
 8011596:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8011598:	f000 bc7d 	b.w	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801159c:	4b8e      	ldr	r3, [pc, #568]	; (80117d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80115a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80115a8:	d108      	bne.n	80115bc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80115aa:	f107 030c 	add.w	r3, r7, #12
 80115ae:	4618      	mov	r0, r3
 80115b0:	f000 fde8 	bl	8012184 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80115b8:	f000 bc6d 	b.w	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80115bc:	2300      	movs	r3, #0
 80115be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80115c0:	f000 bc69 	b.w	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80115c4:	4b84      	ldr	r3, [pc, #528]	; (80117d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80115c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80115c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80115cc:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80115ce:	4b82      	ldr	r3, [pc, #520]	; (80117d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	f003 0304 	and.w	r3, r3, #4
 80115d6:	2b04      	cmp	r3, #4
 80115d8:	d10c      	bne.n	80115f4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 80115da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d109      	bne.n	80115f4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80115e0:	4b7d      	ldr	r3, [pc, #500]	; (80117d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	08db      	lsrs	r3, r3, #3
 80115e6:	f003 0303 	and.w	r3, r3, #3
 80115ea:	4a7c      	ldr	r2, [pc, #496]	; (80117dc <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80115ec:	fa22 f303 	lsr.w	r3, r2, r3
 80115f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80115f2:	e01f      	b.n	8011634 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80115f4:	4b78      	ldr	r3, [pc, #480]	; (80117d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80115fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011600:	d106      	bne.n	8011610 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8011602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011604:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011608:	d102      	bne.n	8011610 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 801160a:	4b75      	ldr	r3, [pc, #468]	; (80117e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 801160c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801160e:	e011      	b.n	8011634 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8011610:	4b71      	ldr	r3, [pc, #452]	; (80117d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011618:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801161c:	d106      	bne.n	801162c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 801161e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011620:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011624:	d102      	bne.n	801162c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8011626:	4b6f      	ldr	r3, [pc, #444]	; (80117e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8011628:	63fb      	str	r3, [r7, #60]	; 0x3c
 801162a:	e003      	b.n	8011634 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 801162c:	2300      	movs	r3, #0
 801162e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8011630:	f000 bc31 	b.w	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8011634:	f000 bc2f 	b.w	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8011638:	4b6b      	ldr	r3, [pc, #428]	; (80117e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 801163a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801163c:	f000 bc2b 	b.w	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8011640:	2300      	movs	r3, #0
 8011642:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8011644:	f000 bc27 	b.w	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801164e:	f040 8095 	bne.w	801177c <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8011652:	4b61      	ldr	r3, [pc, #388]	; (80117d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8011654:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011656:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 801165a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 801165c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801165e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011662:	d04d      	beq.n	8011700 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8011664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011666:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801166a:	f200 8084 	bhi.w	8011776 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 801166e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011670:	2bc0      	cmp	r3, #192	; 0xc0
 8011672:	d07d      	beq.n	8011770 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8011674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011676:	2bc0      	cmp	r3, #192	; 0xc0
 8011678:	d87d      	bhi.n	8011776 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 801167a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801167c:	2b80      	cmp	r3, #128	; 0x80
 801167e:	d02d      	beq.n	80116dc <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8011680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011682:	2b80      	cmp	r3, #128	; 0x80
 8011684:	d877      	bhi.n	8011776 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8011686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011688:	2b00      	cmp	r3, #0
 801168a:	d003      	beq.n	8011694 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 801168c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801168e:	2b40      	cmp	r3, #64	; 0x40
 8011690:	d012      	beq.n	80116b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8011692:	e070      	b.n	8011776 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8011694:	4b50      	ldr	r3, [pc, #320]	; (80117d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8011696:	681b      	ldr	r3, [r3, #0]
 8011698:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801169c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80116a0:	d107      	bne.n	80116b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80116a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80116a6:	4618      	mov	r0, r3
 80116a8:	f000 fec0 	bl	801242c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80116ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116ae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80116b0:	e3f1      	b.n	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80116b2:	2300      	movs	r3, #0
 80116b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80116b6:	e3ee      	b.n	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80116b8:	4b47      	ldr	r3, [pc, #284]	; (80117d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80116ba:	681b      	ldr	r3, [r3, #0]
 80116bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80116c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80116c4:	d107      	bne.n	80116d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80116c6:	f107 0318 	add.w	r3, r7, #24
 80116ca:	4618      	mov	r0, r3
 80116cc:	f000 fc06 	bl	8011edc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80116d0:	69bb      	ldr	r3, [r7, #24]
 80116d2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80116d4:	e3df      	b.n	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80116d6:	2300      	movs	r3, #0
 80116d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80116da:	e3dc      	b.n	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80116dc:	4b3e      	ldr	r3, [pc, #248]	; (80117d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80116e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80116e8:	d107      	bne.n	80116fa <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80116ea:	f107 030c 	add.w	r3, r7, #12
 80116ee:	4618      	mov	r0, r3
 80116f0:	f000 fd48 	bl	8012184 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80116f8:	e3cd      	b.n	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80116fa:	2300      	movs	r3, #0
 80116fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80116fe:	e3ca      	b.n	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8011700:	4b35      	ldr	r3, [pc, #212]	; (80117d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8011702:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011704:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8011708:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801170a:	4b33      	ldr	r3, [pc, #204]	; (80117d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 801170c:	681b      	ldr	r3, [r3, #0]
 801170e:	f003 0304 	and.w	r3, r3, #4
 8011712:	2b04      	cmp	r3, #4
 8011714:	d10c      	bne.n	8011730 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8011716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011718:	2b00      	cmp	r3, #0
 801171a:	d109      	bne.n	8011730 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 801171c:	4b2e      	ldr	r3, [pc, #184]	; (80117d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 801171e:	681b      	ldr	r3, [r3, #0]
 8011720:	08db      	lsrs	r3, r3, #3
 8011722:	f003 0303 	and.w	r3, r3, #3
 8011726:	4a2d      	ldr	r2, [pc, #180]	; (80117dc <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8011728:	fa22 f303 	lsr.w	r3, r2, r3
 801172c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801172e:	e01e      	b.n	801176e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8011730:	4b29      	ldr	r3, [pc, #164]	; (80117d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011738:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801173c:	d106      	bne.n	801174c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 801173e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011740:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011744:	d102      	bne.n	801174c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8011746:	4b26      	ldr	r3, [pc, #152]	; (80117e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8011748:	63fb      	str	r3, [r7, #60]	; 0x3c
 801174a:	e010      	b.n	801176e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801174c:	4b22      	ldr	r3, [pc, #136]	; (80117d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 801174e:	681b      	ldr	r3, [r3, #0]
 8011750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011754:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011758:	d106      	bne.n	8011768 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 801175a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801175c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011760:	d102      	bne.n	8011768 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8011762:	4b20      	ldr	r3, [pc, #128]	; (80117e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8011764:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011766:	e002      	b.n	801176e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8011768:	2300      	movs	r3, #0
 801176a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 801176c:	e393      	b.n	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801176e:	e392      	b.n	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8011770:	4b1d      	ldr	r3, [pc, #116]	; (80117e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8011772:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8011774:	e38f      	b.n	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8011776:	2300      	movs	r3, #0
 8011778:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801177a:	e38c      	b.n	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011782:	f040 80a7 	bne.w	80118d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8011786:	4b14      	ldr	r3, [pc, #80]	; (80117d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8011788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801178a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 801178e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8011790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011792:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8011796:	d05f      	beq.n	8011858 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8011798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801179a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801179e:	f200 8096 	bhi.w	80118ce <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80117a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117a4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80117a8:	f000 808e 	beq.w	80118c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 80117ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117ae:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80117b2:	f200 808c 	bhi.w	80118ce <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80117b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80117bc:	d03a      	beq.n	8011834 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 80117be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80117c4:	f200 8083 	bhi.w	80118ce <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80117c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d00e      	beq.n	80117ec <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 80117ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80117d4:	d01c      	beq.n	8011810 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 80117d6:	e07a      	b.n	80118ce <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80117d8:	58024400 	.word	0x58024400
 80117dc:	03d09000 	.word	0x03d09000
 80117e0:	003d0900 	.word	0x003d0900
 80117e4:	017d7840 	.word	0x017d7840
 80117e8:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80117ec:	4baa      	ldr	r3, [pc, #680]	; (8011a98 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80117f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80117f8:	d107      	bne.n	801180a <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80117fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80117fe:	4618      	mov	r0, r3
 8011800:	f000 fe14 	bl	801242c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8011804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011806:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8011808:	e345      	b.n	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 801180a:	2300      	movs	r3, #0
 801180c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801180e:	e342      	b.n	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8011810:	4ba1      	ldr	r3, [pc, #644]	; (8011a98 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011818:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801181c:	d107      	bne.n	801182e <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801181e:	f107 0318 	add.w	r3, r7, #24
 8011822:	4618      	mov	r0, r3
 8011824:	f000 fb5a 	bl	8011edc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8011828:	69bb      	ldr	r3, [r7, #24]
 801182a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 801182c:	e333      	b.n	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 801182e:	2300      	movs	r3, #0
 8011830:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8011832:	e330      	b.n	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8011834:	4b98      	ldr	r3, [pc, #608]	; (8011a98 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8011836:	681b      	ldr	r3, [r3, #0]
 8011838:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801183c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011840:	d107      	bne.n	8011852 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011842:	f107 030c 	add.w	r3, r7, #12
 8011846:	4618      	mov	r0, r3
 8011848:	f000 fc9c 	bl	8012184 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801184c:	68fb      	ldr	r3, [r7, #12]
 801184e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8011850:	e321      	b.n	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8011852:	2300      	movs	r3, #0
 8011854:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8011856:	e31e      	b.n	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8011858:	4b8f      	ldr	r3, [pc, #572]	; (8011a98 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 801185a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801185c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8011860:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8011862:	4b8d      	ldr	r3, [pc, #564]	; (8011a98 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	f003 0304 	and.w	r3, r3, #4
 801186a:	2b04      	cmp	r3, #4
 801186c:	d10c      	bne.n	8011888 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 801186e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011870:	2b00      	cmp	r3, #0
 8011872:	d109      	bne.n	8011888 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8011874:	4b88      	ldr	r3, [pc, #544]	; (8011a98 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8011876:	681b      	ldr	r3, [r3, #0]
 8011878:	08db      	lsrs	r3, r3, #3
 801187a:	f003 0303 	and.w	r3, r3, #3
 801187e:	4a87      	ldr	r2, [pc, #540]	; (8011a9c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8011880:	fa22 f303 	lsr.w	r3, r2, r3
 8011884:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011886:	e01e      	b.n	80118c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8011888:	4b83      	ldr	r3, [pc, #524]	; (8011a98 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 801188a:	681b      	ldr	r3, [r3, #0]
 801188c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011890:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011894:	d106      	bne.n	80118a4 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 8011896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011898:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801189c:	d102      	bne.n	80118a4 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 801189e:	4b80      	ldr	r3, [pc, #512]	; (8011aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80118a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80118a2:	e010      	b.n	80118c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80118a4:	4b7c      	ldr	r3, [pc, #496]	; (8011a98 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80118a6:	681b      	ldr	r3, [r3, #0]
 80118a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80118ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80118b0:	d106      	bne.n	80118c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 80118b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80118b8:	d102      	bne.n	80118c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80118ba:	4b7a      	ldr	r3, [pc, #488]	; (8011aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80118bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80118be:	e002      	b.n	80118c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80118c0:	2300      	movs	r3, #0
 80118c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80118c4:	e2e7      	b.n	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80118c6:	e2e6      	b.n	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80118c8:	4b77      	ldr	r3, [pc, #476]	; (8011aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80118ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80118cc:	e2e3      	b.n	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80118ce:	2300      	movs	r3, #0
 80118d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80118d2:	e2e0      	b.n	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80118da:	f040 809c 	bne.w	8011a16 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80118de:	4b6e      	ldr	r3, [pc, #440]	; (8011a98 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80118e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80118e2:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80118e6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80118e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80118ee:	d054      	beq.n	801199a <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 80118f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80118f6:	f200 808b 	bhi.w	8011a10 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 80118fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118fc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8011900:	f000 8083 	beq.w	8011a0a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8011904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011906:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 801190a:	f200 8081 	bhi.w	8011a10 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 801190e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011910:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011914:	d02f      	beq.n	8011976 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8011916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011918:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801191c:	d878      	bhi.n	8011a10 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 801191e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011920:	2b00      	cmp	r3, #0
 8011922:	d004      	beq.n	801192e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8011924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011926:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801192a:	d012      	beq.n	8011952 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 801192c:	e070      	b.n	8011a10 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801192e:	4b5a      	ldr	r3, [pc, #360]	; (8011a98 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011936:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801193a:	d107      	bne.n	801194c <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801193c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011940:	4618      	mov	r0, r3
 8011942:	f000 fd73 	bl	801242c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8011946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011948:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 801194a:	e2a4      	b.n	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 801194c:	2300      	movs	r3, #0
 801194e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8011950:	e2a1      	b.n	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8011952:	4b51      	ldr	r3, [pc, #324]	; (8011a98 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801195a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801195e:	d107      	bne.n	8011970 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011960:	f107 0318 	add.w	r3, r7, #24
 8011964:	4618      	mov	r0, r3
 8011966:	f000 fab9 	bl	8011edc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801196a:	69bb      	ldr	r3, [r7, #24]
 801196c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 801196e:	e292      	b.n	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8011970:	2300      	movs	r3, #0
 8011972:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8011974:	e28f      	b.n	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8011976:	4b48      	ldr	r3, [pc, #288]	; (8011a98 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801197e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011982:	d107      	bne.n	8011994 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011984:	f107 030c 	add.w	r3, r7, #12
 8011988:	4618      	mov	r0, r3
 801198a:	f000 fbfb 	bl	8012184 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801198e:	68fb      	ldr	r3, [r7, #12]
 8011990:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8011992:	e280      	b.n	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8011994:	2300      	movs	r3, #0
 8011996:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8011998:	e27d      	b.n	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 801199a:	4b3f      	ldr	r3, [pc, #252]	; (8011a98 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 801199c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801199e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80119a2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80119a4:	4b3c      	ldr	r3, [pc, #240]	; (8011a98 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	f003 0304 	and.w	r3, r3, #4
 80119ac:	2b04      	cmp	r3, #4
 80119ae:	d10c      	bne.n	80119ca <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 80119b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d109      	bne.n	80119ca <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80119b6:	4b38      	ldr	r3, [pc, #224]	; (8011a98 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80119b8:	681b      	ldr	r3, [r3, #0]
 80119ba:	08db      	lsrs	r3, r3, #3
 80119bc:	f003 0303 	and.w	r3, r3, #3
 80119c0:	4a36      	ldr	r2, [pc, #216]	; (8011a9c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80119c2:	fa22 f303 	lsr.w	r3, r2, r3
 80119c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80119c8:	e01e      	b.n	8011a08 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80119ca:	4b33      	ldr	r3, [pc, #204]	; (8011a98 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80119d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80119d6:	d106      	bne.n	80119e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 80119d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80119de:	d102      	bne.n	80119e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80119e0:	4b2f      	ldr	r3, [pc, #188]	; (8011aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80119e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80119e4:	e010      	b.n	8011a08 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80119e6:	4b2c      	ldr	r3, [pc, #176]	; (8011a98 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80119ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80119f2:	d106      	bne.n	8011a02 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 80119f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80119fa:	d102      	bne.n	8011a02 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80119fc:	4b29      	ldr	r3, [pc, #164]	; (8011aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80119fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011a00:	e002      	b.n	8011a08 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8011a02:	2300      	movs	r3, #0
 8011a04:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8011a06:	e246      	b.n	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8011a08:	e245      	b.n	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8011a0a:	4b27      	ldr	r3, [pc, #156]	; (8011aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8011a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8011a0e:	e242      	b.n	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8011a10:	2300      	movs	r3, #0
 8011a12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8011a14:	e23f      	b.n	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011a1c:	f040 80a8 	bne.w	8011b70 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8011a20:	4b1d      	ldr	r3, [pc, #116]	; (8011a98 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8011a22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011a24:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8011a28:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8011a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011a30:	d060      	beq.n	8011af4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8011a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011a38:	f200 8097 	bhi.w	8011b6a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8011a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a3e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8011a42:	f000 808f 	beq.w	8011b64 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8011a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a48:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8011a4c:	f200 808d 	bhi.w	8011b6a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8011a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011a56:	d03b      	beq.n	8011ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8011a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011a5e:	f200 8084 	bhi.w	8011b6a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8011a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d004      	beq.n	8011a72 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8011a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011a6e:	d01d      	beq.n	8011aac <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8011a70:	e07b      	b.n	8011b6a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8011a72:	4b09      	ldr	r3, [pc, #36]	; (8011a98 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8011a74:	681b      	ldr	r3, [r3, #0]
 8011a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011a7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011a7e:	d107      	bne.n	8011a90 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8011a80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011a84:	4618      	mov	r0, r3
 8011a86:	f000 fcd1 	bl	801242c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8011a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8011a8e:	e202      	b.n	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8011a90:	2300      	movs	r3, #0
 8011a92:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8011a94:	e1ff      	b.n	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8011a96:	bf00      	nop
 8011a98:	58024400 	.word	0x58024400
 8011a9c:	03d09000 	.word	0x03d09000
 8011aa0:	003d0900 	.word	0x003d0900
 8011aa4:	017d7840 	.word	0x017d7840
 8011aa8:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8011aac:	4ba3      	ldr	r3, [pc, #652]	; (8011d3c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011ab4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011ab8:	d107      	bne.n	8011aca <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011aba:	f107 0318 	add.w	r3, r7, #24
 8011abe:	4618      	mov	r0, r3
 8011ac0:	f000 fa0c 	bl	8011edc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8011ac4:	69bb      	ldr	r3, [r7, #24]
 8011ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8011ac8:	e1e5      	b.n	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8011aca:	2300      	movs	r3, #0
 8011acc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8011ace:	e1e2      	b.n	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8011ad0:	4b9a      	ldr	r3, [pc, #616]	; (8011d3c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011ad8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011adc:	d107      	bne.n	8011aee <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011ade:	f107 030c 	add.w	r3, r7, #12
 8011ae2:	4618      	mov	r0, r3
 8011ae4:	f000 fb4e 	bl	8012184 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8011ae8:	68fb      	ldr	r3, [r7, #12]
 8011aea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8011aec:	e1d3      	b.n	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8011aee:	2300      	movs	r3, #0
 8011af0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8011af2:	e1d0      	b.n	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8011af4:	4b91      	ldr	r3, [pc, #580]	; (8011d3c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8011af6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011af8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8011afc:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8011afe:	4b8f      	ldr	r3, [pc, #572]	; (8011d3c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8011b00:	681b      	ldr	r3, [r3, #0]
 8011b02:	f003 0304 	and.w	r3, r3, #4
 8011b06:	2b04      	cmp	r3, #4
 8011b08:	d10c      	bne.n	8011b24 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8011b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d109      	bne.n	8011b24 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8011b10:	4b8a      	ldr	r3, [pc, #552]	; (8011d3c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8011b12:	681b      	ldr	r3, [r3, #0]
 8011b14:	08db      	lsrs	r3, r3, #3
 8011b16:	f003 0303 	and.w	r3, r3, #3
 8011b1a:	4a89      	ldr	r2, [pc, #548]	; (8011d40 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8011b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8011b20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011b22:	e01e      	b.n	8011b62 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8011b24:	4b85      	ldr	r3, [pc, #532]	; (8011d3c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011b2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011b30:	d106      	bne.n	8011b40 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8011b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011b38:	d102      	bne.n	8011b40 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8011b3a:	4b82      	ldr	r3, [pc, #520]	; (8011d44 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8011b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011b3e:	e010      	b.n	8011b62 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8011b40:	4b7e      	ldr	r3, [pc, #504]	; (8011d3c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011b48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011b4c:	d106      	bne.n	8011b5c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8011b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011b54:	d102      	bne.n	8011b5c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8011b56:	4b7c      	ldr	r3, [pc, #496]	; (8011d48 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8011b58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011b5a:	e002      	b.n	8011b62 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8011b5c:	2300      	movs	r3, #0
 8011b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8011b60:	e199      	b.n	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8011b62:	e198      	b.n	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8011b64:	4b79      	ldr	r3, [pc, #484]	; (8011d4c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8011b66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8011b68:	e195      	b.n	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8011b6a:	2300      	movs	r3, #0
 8011b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8011b6e:	e192      	b.n	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8011b76:	d173      	bne.n	8011c60 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8011b78:	4b70      	ldr	r3, [pc, #448]	; (8011d3c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8011b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011b7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8011b80:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8011b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011b88:	d02f      	beq.n	8011bea <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8011b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011b90:	d863      	bhi.n	8011c5a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8011b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d004      	beq.n	8011ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8011b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011b9e:	d012      	beq.n	8011bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8011ba0:	e05b      	b.n	8011c5a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8011ba2:	4b66      	ldr	r3, [pc, #408]	; (8011d3c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011baa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011bae:	d107      	bne.n	8011bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011bb0:	f107 0318 	add.w	r3, r7, #24
 8011bb4:	4618      	mov	r0, r3
 8011bb6:	f000 f991 	bl	8011edc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8011bba:	69bb      	ldr	r3, [r7, #24]
 8011bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8011bbe:	e16a      	b.n	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8011bc0:	2300      	movs	r3, #0
 8011bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8011bc4:	e167      	b.n	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8011bc6:	4b5d      	ldr	r3, [pc, #372]	; (8011d3c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011bce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011bd2:	d107      	bne.n	8011be4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011bd4:	f107 030c 	add.w	r3, r7, #12
 8011bd8:	4618      	mov	r0, r3
 8011bda:	f000 fad3 	bl	8012184 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8011bde:	697b      	ldr	r3, [r7, #20]
 8011be0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8011be2:	e158      	b.n	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8011be4:	2300      	movs	r3, #0
 8011be6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8011be8:	e155      	b.n	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8011bea:	4b54      	ldr	r3, [pc, #336]	; (8011d3c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8011bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011bee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8011bf2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8011bf4:	4b51      	ldr	r3, [pc, #324]	; (8011d3c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	f003 0304 	and.w	r3, r3, #4
 8011bfc:	2b04      	cmp	r3, #4
 8011bfe:	d10c      	bne.n	8011c1a <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8011c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d109      	bne.n	8011c1a <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8011c06:	4b4d      	ldr	r3, [pc, #308]	; (8011d3c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	08db      	lsrs	r3, r3, #3
 8011c0c:	f003 0303 	and.w	r3, r3, #3
 8011c10:	4a4b      	ldr	r2, [pc, #300]	; (8011d40 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8011c12:	fa22 f303 	lsr.w	r3, r2, r3
 8011c16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011c18:	e01e      	b.n	8011c58 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8011c1a:	4b48      	ldr	r3, [pc, #288]	; (8011d3c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011c22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011c26:	d106      	bne.n	8011c36 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8011c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011c2e:	d102      	bne.n	8011c36 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8011c30:	4b44      	ldr	r3, [pc, #272]	; (8011d44 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8011c32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011c34:	e010      	b.n	8011c58 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8011c36:	4b41      	ldr	r3, [pc, #260]	; (8011d3c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011c3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011c42:	d106      	bne.n	8011c52 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8011c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011c4a:	d102      	bne.n	8011c52 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8011c4c:	4b3e      	ldr	r3, [pc, #248]	; (8011d48 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8011c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011c50:	e002      	b.n	8011c58 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8011c52:	2300      	movs	r3, #0
 8011c54:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8011c56:	e11e      	b.n	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8011c58:	e11d      	b.n	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8011c5a:	2300      	movs	r3, #0
 8011c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8011c5e:	e11a      	b.n	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011c66:	d133      	bne.n	8011cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8011c68:	4b34      	ldr	r3, [pc, #208]	; (8011d3c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8011c6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011c6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011c70:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8011c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d004      	beq.n	8011c82 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 8011c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011c7e:	d012      	beq.n	8011ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8011c80:	e023      	b.n	8011cca <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8011c82:	4b2e      	ldr	r3, [pc, #184]	; (8011d3c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011c8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011c8e:	d107      	bne.n	8011ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8011c90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011c94:	4618      	mov	r0, r3
 8011c96:	f000 fbc9 	bl	801242c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8011c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8011c9e:	e0fa      	b.n	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8011ca0:	2300      	movs	r3, #0
 8011ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8011ca4:	e0f7      	b.n	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8011ca6:	4b25      	ldr	r3, [pc, #148]	; (8011d3c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011cae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011cb2:	d107      	bne.n	8011cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011cb4:	f107 0318 	add.w	r3, r7, #24
 8011cb8:	4618      	mov	r0, r3
 8011cba:	f000 f90f 	bl	8011edc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8011cbe:	6a3b      	ldr	r3, [r7, #32]
 8011cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8011cc2:	e0e8      	b.n	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8011cc4:	2300      	movs	r3, #0
 8011cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8011cc8:	e0e5      	b.n	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8011cca:	2300      	movs	r3, #0
 8011ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8011cce:	e0e2      	b.n	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011cd6:	f040 808f 	bne.w	8011df8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8011cda:	4b18      	ldr	r3, [pc, #96]	; (8011d3c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8011cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011cde:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8011ce2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8011ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ce6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011cea:	d075      	beq.n	8011dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8011cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011cf2:	d87e      	bhi.n	8011df2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8011cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011cfa:	d060      	beq.n	8011dbe <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8011cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011d02:	d876      	bhi.n	8011df2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8011d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d06:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8011d0a:	d045      	beq.n	8011d98 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8011d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d0e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8011d12:	d86e      	bhi.n	8011df2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8011d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011d1a:	d02b      	beq.n	8011d74 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8011d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011d22:	d866      	bhi.n	8011df2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8011d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d004      	beq.n	8011d34 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8011d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011d30:	d00e      	beq.n	8011d50 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8011d32:	e05e      	b.n	8011df2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8011d34:	f000 f8bc 	bl	8011eb0 <HAL_RCCEx_GetD3PCLK1Freq>
 8011d38:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8011d3a:	e0ac      	b.n	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8011d3c:	58024400 	.word	0x58024400
 8011d40:	03d09000 	.word	0x03d09000
 8011d44:	003d0900 	.word	0x003d0900
 8011d48:	017d7840 	.word	0x017d7840
 8011d4c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8011d50:	4b53      	ldr	r3, [pc, #332]	; (8011ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8011d52:	681b      	ldr	r3, [r3, #0]
 8011d54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011d58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011d5c:	d107      	bne.n	8011d6e <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011d5e:	f107 0318 	add.w	r3, r7, #24
 8011d62:	4618      	mov	r0, r3
 8011d64:	f000 f8ba 	bl	8011edc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8011d68:	69fb      	ldr	r3, [r7, #28]
 8011d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8011d6c:	e093      	b.n	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8011d6e:	2300      	movs	r3, #0
 8011d70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8011d72:	e090      	b.n	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8011d74:	4b4a      	ldr	r3, [pc, #296]	; (8011ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011d7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011d80:	d107      	bne.n	8011d92 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011d82:	f107 030c 	add.w	r3, r7, #12
 8011d86:	4618      	mov	r0, r3
 8011d88:	f000 f9fc 	bl	8012184 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8011d8c:	693b      	ldr	r3, [r7, #16]
 8011d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8011d90:	e081      	b.n	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8011d92:	2300      	movs	r3, #0
 8011d94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8011d96:	e07e      	b.n	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8011d98:	4b41      	ldr	r3, [pc, #260]	; (8011ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	f003 0304 	and.w	r3, r3, #4
 8011da0:	2b04      	cmp	r3, #4
 8011da2:	d109      	bne.n	8011db8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8011da4:	4b3e      	ldr	r3, [pc, #248]	; (8011ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8011da6:	681b      	ldr	r3, [r3, #0]
 8011da8:	08db      	lsrs	r3, r3, #3
 8011daa:	f003 0303 	and.w	r3, r3, #3
 8011dae:	4a3d      	ldr	r2, [pc, #244]	; (8011ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8011db0:	fa22 f303 	lsr.w	r3, r2, r3
 8011db4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8011db6:	e06e      	b.n	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8011db8:	2300      	movs	r3, #0
 8011dba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8011dbc:	e06b      	b.n	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8011dbe:	4b38      	ldr	r3, [pc, #224]	; (8011ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8011dc0:	681b      	ldr	r3, [r3, #0]
 8011dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011dc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011dca:	d102      	bne.n	8011dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8011dcc:	4b36      	ldr	r3, [pc, #216]	; (8011ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8011dce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8011dd0:	e061      	b.n	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8011dd2:	2300      	movs	r3, #0
 8011dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8011dd6:	e05e      	b.n	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8011dd8:	4b31      	ldr	r3, [pc, #196]	; (8011ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011de0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011de4:	d102      	bne.n	8011dec <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 8011de6:	4b31      	ldr	r3, [pc, #196]	; (8011eac <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8011de8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8011dea:	e054      	b.n	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8011dec:	2300      	movs	r3, #0
 8011dee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8011df0:	e051      	b.n	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8011df2:	2300      	movs	r3, #0
 8011df4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8011df6:	e04e      	b.n	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011dfe:	d148      	bne.n	8011e92 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8011e00:	4b27      	ldr	r3, [pc, #156]	; (8011ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8011e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011e04:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8011e08:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8011e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011e10:	d02a      	beq.n	8011e68 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8011e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011e18:	d838      	bhi.n	8011e8c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8011e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d004      	beq.n	8011e2a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8011e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011e26:	d00d      	beq.n	8011e44 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8011e28:	e030      	b.n	8011e8c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8011e2a:	4b1d      	ldr	r3, [pc, #116]	; (8011ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011e32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011e36:	d102      	bne.n	8011e3e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 8011e38:	4b1c      	ldr	r3, [pc, #112]	; (8011eac <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8011e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8011e3c:	e02b      	b.n	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8011e3e:	2300      	movs	r3, #0
 8011e40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8011e42:	e028      	b.n	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8011e44:	4b16      	ldr	r3, [pc, #88]	; (8011ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8011e46:	681b      	ldr	r3, [r3, #0]
 8011e48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011e4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011e50:	d107      	bne.n	8011e62 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8011e52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011e56:	4618      	mov	r0, r3
 8011e58:	f000 fae8 	bl	801242c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8011e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8011e60:	e019      	b.n	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8011e62:	2300      	movs	r3, #0
 8011e64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8011e66:	e016      	b.n	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8011e68:	4b0d      	ldr	r3, [pc, #52]	; (8011ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8011e6a:	681b      	ldr	r3, [r3, #0]
 8011e6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011e70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011e74:	d107      	bne.n	8011e86 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011e76:	f107 0318 	add.w	r3, r7, #24
 8011e7a:	4618      	mov	r0, r3
 8011e7c:	f000 f82e 	bl	8011edc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8011e80:	69fb      	ldr	r3, [r7, #28]
 8011e82:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8011e84:	e007      	b.n	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8011e86:	2300      	movs	r3, #0
 8011e88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8011e8a:	e004      	b.n	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8011e8c:	2300      	movs	r3, #0
 8011e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8011e90:	e001      	b.n	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 8011e92:	2300      	movs	r3, #0
 8011e94:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8011e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8011e98:	4618      	mov	r0, r3
 8011e9a:	3740      	adds	r7, #64	; 0x40
 8011e9c:	46bd      	mov	sp, r7
 8011e9e:	bd80      	pop	{r7, pc}
 8011ea0:	58024400 	.word	0x58024400
 8011ea4:	03d09000 	.word	0x03d09000
 8011ea8:	003d0900 	.word	0x003d0900
 8011eac:	017d7840 	.word	0x017d7840

08011eb0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8011eb0:	b580      	push	{r7, lr}
 8011eb2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8011eb4:	f7fe f9fc 	bl	80102b0 <HAL_RCC_GetHCLKFreq>
 8011eb8:	4602      	mov	r2, r0
 8011eba:	4b06      	ldr	r3, [pc, #24]	; (8011ed4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8011ebc:	6a1b      	ldr	r3, [r3, #32]
 8011ebe:	091b      	lsrs	r3, r3, #4
 8011ec0:	f003 0307 	and.w	r3, r3, #7
 8011ec4:	4904      	ldr	r1, [pc, #16]	; (8011ed8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8011ec6:	5ccb      	ldrb	r3, [r1, r3]
 8011ec8:	f003 031f 	and.w	r3, r3, #31
 8011ecc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8011ed0:	4618      	mov	r0, r3
 8011ed2:	bd80      	pop	{r7, pc}
 8011ed4:	58024400 	.word	0x58024400
 8011ed8:	08015b6c 	.word	0x08015b6c

08011edc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8011edc:	b480      	push	{r7}
 8011ede:	b089      	sub	sp, #36	; 0x24
 8011ee0:	af00      	add	r7, sp, #0
 8011ee2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8011ee4:	4ba1      	ldr	r3, [pc, #644]	; (801216c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011ee8:	f003 0303 	and.w	r3, r3, #3
 8011eec:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8011eee:	4b9f      	ldr	r3, [pc, #636]	; (801216c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011ef2:	0b1b      	lsrs	r3, r3, #12
 8011ef4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011ef8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8011efa:	4b9c      	ldr	r3, [pc, #624]	; (801216c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011efe:	091b      	lsrs	r3, r3, #4
 8011f00:	f003 0301 	and.w	r3, r3, #1
 8011f04:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8011f06:	4b99      	ldr	r3, [pc, #612]	; (801216c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011f0a:	08db      	lsrs	r3, r3, #3
 8011f0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011f10:	693a      	ldr	r2, [r7, #16]
 8011f12:	fb02 f303 	mul.w	r3, r2, r3
 8011f16:	ee07 3a90 	vmov	s15, r3
 8011f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011f1e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8011f22:	697b      	ldr	r3, [r7, #20]
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	f000 8111 	beq.w	801214c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8011f2a:	69bb      	ldr	r3, [r7, #24]
 8011f2c:	2b02      	cmp	r3, #2
 8011f2e:	f000 8083 	beq.w	8012038 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8011f32:	69bb      	ldr	r3, [r7, #24]
 8011f34:	2b02      	cmp	r3, #2
 8011f36:	f200 80a1 	bhi.w	801207c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8011f3a:	69bb      	ldr	r3, [r7, #24]
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d003      	beq.n	8011f48 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8011f40:	69bb      	ldr	r3, [r7, #24]
 8011f42:	2b01      	cmp	r3, #1
 8011f44:	d056      	beq.n	8011ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8011f46:	e099      	b.n	801207c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011f48:	4b88      	ldr	r3, [pc, #544]	; (801216c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011f4a:	681b      	ldr	r3, [r3, #0]
 8011f4c:	f003 0320 	and.w	r3, r3, #32
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d02d      	beq.n	8011fb0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8011f54:	4b85      	ldr	r3, [pc, #532]	; (801216c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011f56:	681b      	ldr	r3, [r3, #0]
 8011f58:	08db      	lsrs	r3, r3, #3
 8011f5a:	f003 0303 	and.w	r3, r3, #3
 8011f5e:	4a84      	ldr	r2, [pc, #528]	; (8012170 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8011f60:	fa22 f303 	lsr.w	r3, r2, r3
 8011f64:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8011f66:	68bb      	ldr	r3, [r7, #8]
 8011f68:	ee07 3a90 	vmov	s15, r3
 8011f6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011f70:	697b      	ldr	r3, [r7, #20]
 8011f72:	ee07 3a90 	vmov	s15, r3
 8011f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011f7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011f7e:	4b7b      	ldr	r3, [pc, #492]	; (801216c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011f86:	ee07 3a90 	vmov	s15, r3
 8011f8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011f8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8011f92:	eddf 5a78 	vldr	s11, [pc, #480]	; 8012174 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8011f96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011f9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011f9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011fa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011fa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011faa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8011fae:	e087      	b.n	80120c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8011fb0:	697b      	ldr	r3, [r7, #20]
 8011fb2:	ee07 3a90 	vmov	s15, r3
 8011fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011fba:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8012178 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8011fbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011fc2:	4b6a      	ldr	r3, [pc, #424]	; (801216c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011fc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011fca:	ee07 3a90 	vmov	s15, r3
 8011fce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011fd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8011fd6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8012174 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8011fda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011fde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011fe2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011fe6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011fee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8011ff2:	e065      	b.n	80120c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8011ff4:	697b      	ldr	r3, [r7, #20]
 8011ff6:	ee07 3a90 	vmov	s15, r3
 8011ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011ffe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 801217c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8012002:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012006:	4b59      	ldr	r3, [pc, #356]	; (801216c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801200a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801200e:	ee07 3a90 	vmov	s15, r3
 8012012:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012016:	ed97 6a03 	vldr	s12, [r7, #12]
 801201a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8012174 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801201e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012022:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012026:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801202a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801202e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012032:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8012036:	e043      	b.n	80120c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8012038:	697b      	ldr	r3, [r7, #20]
 801203a:	ee07 3a90 	vmov	s15, r3
 801203e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012042:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8012180 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8012046:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801204a:	4b48      	ldr	r3, [pc, #288]	; (801216c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801204c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801204e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012052:	ee07 3a90 	vmov	s15, r3
 8012056:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801205a:	ed97 6a03 	vldr	s12, [r7, #12]
 801205e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8012174 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8012062:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012066:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801206a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801206e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012072:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012076:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801207a:	e021      	b.n	80120c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 801207c:	697b      	ldr	r3, [r7, #20]
 801207e:	ee07 3a90 	vmov	s15, r3
 8012082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012086:	eddf 6a3d 	vldr	s13, [pc, #244]	; 801217c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801208a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801208e:	4b37      	ldr	r3, [pc, #220]	; (801216c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012092:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012096:	ee07 3a90 	vmov	s15, r3
 801209a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801209e:	ed97 6a03 	vldr	s12, [r7, #12]
 80120a2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8012174 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80120a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80120aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80120ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80120b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80120b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80120ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80120be:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80120c0:	4b2a      	ldr	r3, [pc, #168]	; (801216c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80120c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80120c4:	0a5b      	lsrs	r3, r3, #9
 80120c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80120ca:	ee07 3a90 	vmov	s15, r3
 80120ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80120d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80120d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80120da:	edd7 6a07 	vldr	s13, [r7, #28]
 80120de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80120e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80120e6:	ee17 2a90 	vmov	r2, s15
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80120ee:	4b1f      	ldr	r3, [pc, #124]	; (801216c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80120f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80120f2:	0c1b      	lsrs	r3, r3, #16
 80120f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80120f8:	ee07 3a90 	vmov	s15, r3
 80120fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012100:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012104:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012108:	edd7 6a07 	vldr	s13, [r7, #28]
 801210c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012110:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012114:	ee17 2a90 	vmov	r2, s15
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 801211c:	4b13      	ldr	r3, [pc, #76]	; (801216c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801211e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012120:	0e1b      	lsrs	r3, r3, #24
 8012122:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012126:	ee07 3a90 	vmov	s15, r3
 801212a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801212e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012132:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012136:	edd7 6a07 	vldr	s13, [r7, #28]
 801213a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801213e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012142:	ee17 2a90 	vmov	r2, s15
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 801214a:	e008      	b.n	801215e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	2200      	movs	r2, #0
 8012150:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	2200      	movs	r2, #0
 8012156:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	2200      	movs	r2, #0
 801215c:	609a      	str	r2, [r3, #8]
}
 801215e:	bf00      	nop
 8012160:	3724      	adds	r7, #36	; 0x24
 8012162:	46bd      	mov	sp, r7
 8012164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012168:	4770      	bx	lr
 801216a:	bf00      	nop
 801216c:	58024400 	.word	0x58024400
 8012170:	03d09000 	.word	0x03d09000
 8012174:	46000000 	.word	0x46000000
 8012178:	4c742400 	.word	0x4c742400
 801217c:	4a742400 	.word	0x4a742400
 8012180:	4bbebc20 	.word	0x4bbebc20

08012184 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8012184:	b480      	push	{r7}
 8012186:	b089      	sub	sp, #36	; 0x24
 8012188:	af00      	add	r7, sp, #0
 801218a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801218c:	4ba1      	ldr	r3, [pc, #644]	; (8012414 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801218e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012190:	f003 0303 	and.w	r3, r3, #3
 8012194:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8012196:	4b9f      	ldr	r3, [pc, #636]	; (8012414 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801219a:	0d1b      	lsrs	r3, r3, #20
 801219c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80121a0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80121a2:	4b9c      	ldr	r3, [pc, #624]	; (8012414 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80121a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121a6:	0a1b      	lsrs	r3, r3, #8
 80121a8:	f003 0301 	and.w	r3, r3, #1
 80121ac:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80121ae:	4b99      	ldr	r3, [pc, #612]	; (8012414 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80121b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80121b2:	08db      	lsrs	r3, r3, #3
 80121b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80121b8:	693a      	ldr	r2, [r7, #16]
 80121ba:	fb02 f303 	mul.w	r3, r2, r3
 80121be:	ee07 3a90 	vmov	s15, r3
 80121c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80121c6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80121ca:	697b      	ldr	r3, [r7, #20]
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	f000 8111 	beq.w	80123f4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80121d2:	69bb      	ldr	r3, [r7, #24]
 80121d4:	2b02      	cmp	r3, #2
 80121d6:	f000 8083 	beq.w	80122e0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80121da:	69bb      	ldr	r3, [r7, #24]
 80121dc:	2b02      	cmp	r3, #2
 80121de:	f200 80a1 	bhi.w	8012324 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80121e2:	69bb      	ldr	r3, [r7, #24]
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d003      	beq.n	80121f0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80121e8:	69bb      	ldr	r3, [r7, #24]
 80121ea:	2b01      	cmp	r3, #1
 80121ec:	d056      	beq.n	801229c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80121ee:	e099      	b.n	8012324 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80121f0:	4b88      	ldr	r3, [pc, #544]	; (8012414 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	f003 0320 	and.w	r3, r3, #32
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d02d      	beq.n	8012258 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80121fc:	4b85      	ldr	r3, [pc, #532]	; (8012414 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80121fe:	681b      	ldr	r3, [r3, #0]
 8012200:	08db      	lsrs	r3, r3, #3
 8012202:	f003 0303 	and.w	r3, r3, #3
 8012206:	4a84      	ldr	r2, [pc, #528]	; (8012418 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8012208:	fa22 f303 	lsr.w	r3, r2, r3
 801220c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 801220e:	68bb      	ldr	r3, [r7, #8]
 8012210:	ee07 3a90 	vmov	s15, r3
 8012214:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012218:	697b      	ldr	r3, [r7, #20]
 801221a:	ee07 3a90 	vmov	s15, r3
 801221e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012222:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012226:	4b7b      	ldr	r3, [pc, #492]	; (8012414 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801222a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801222e:	ee07 3a90 	vmov	s15, r3
 8012232:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012236:	ed97 6a03 	vldr	s12, [r7, #12]
 801223a:	eddf 5a78 	vldr	s11, [pc, #480]	; 801241c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801223e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012242:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012246:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801224a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801224e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012252:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8012256:	e087      	b.n	8012368 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8012258:	697b      	ldr	r3, [r7, #20]
 801225a:	ee07 3a90 	vmov	s15, r3
 801225e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012262:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8012420 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8012266:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801226a:	4b6a      	ldr	r3, [pc, #424]	; (8012414 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801226e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012272:	ee07 3a90 	vmov	s15, r3
 8012276:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801227a:	ed97 6a03 	vldr	s12, [r7, #12]
 801227e:	eddf 5a67 	vldr	s11, [pc, #412]	; 801241c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8012282:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012286:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801228a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801228e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012296:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801229a:	e065      	b.n	8012368 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 801229c:	697b      	ldr	r3, [r7, #20]
 801229e:	ee07 3a90 	vmov	s15, r3
 80122a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80122a6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8012424 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80122aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80122ae:	4b59      	ldr	r3, [pc, #356]	; (8012414 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80122b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80122b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80122b6:	ee07 3a90 	vmov	s15, r3
 80122ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80122be:	ed97 6a03 	vldr	s12, [r7, #12]
 80122c2:	eddf 5a56 	vldr	s11, [pc, #344]	; 801241c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80122c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80122ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80122ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80122d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80122d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80122da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80122de:	e043      	b.n	8012368 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80122e0:	697b      	ldr	r3, [r7, #20]
 80122e2:	ee07 3a90 	vmov	s15, r3
 80122e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80122ea:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8012428 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80122ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80122f2:	4b48      	ldr	r3, [pc, #288]	; (8012414 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80122f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80122f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80122fa:	ee07 3a90 	vmov	s15, r3
 80122fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012302:	ed97 6a03 	vldr	s12, [r7, #12]
 8012306:	eddf 5a45 	vldr	s11, [pc, #276]	; 801241c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801230a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801230e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012312:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012316:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801231a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801231e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8012322:	e021      	b.n	8012368 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8012324:	697b      	ldr	r3, [r7, #20]
 8012326:	ee07 3a90 	vmov	s15, r3
 801232a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801232e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8012424 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8012332:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012336:	4b37      	ldr	r3, [pc, #220]	; (8012414 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801233a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801233e:	ee07 3a90 	vmov	s15, r3
 8012342:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012346:	ed97 6a03 	vldr	s12, [r7, #12]
 801234a:	eddf 5a34 	vldr	s11, [pc, #208]	; 801241c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801234e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012352:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012356:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801235a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801235e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012362:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8012366:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8012368:	4b2a      	ldr	r3, [pc, #168]	; (8012414 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801236a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801236c:	0a5b      	lsrs	r3, r3, #9
 801236e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012372:	ee07 3a90 	vmov	s15, r3
 8012376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801237a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801237e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012382:	edd7 6a07 	vldr	s13, [r7, #28]
 8012386:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801238a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801238e:	ee17 2a90 	vmov	r2, s15
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8012396:	4b1f      	ldr	r3, [pc, #124]	; (8012414 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801239a:	0c1b      	lsrs	r3, r3, #16
 801239c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80123a0:	ee07 3a90 	vmov	s15, r3
 80123a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80123a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80123ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80123b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80123b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80123b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80123bc:	ee17 2a90 	vmov	r2, s15
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80123c4:	4b13      	ldr	r3, [pc, #76]	; (8012414 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80123c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80123c8:	0e1b      	lsrs	r3, r3, #24
 80123ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80123ce:	ee07 3a90 	vmov	s15, r3
 80123d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80123d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80123da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80123de:	edd7 6a07 	vldr	s13, [r7, #28]
 80123e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80123e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80123ea:	ee17 2a90 	vmov	r2, s15
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80123f2:	e008      	b.n	8012406 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	2200      	movs	r2, #0
 80123f8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	2200      	movs	r2, #0
 80123fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	2200      	movs	r2, #0
 8012404:	609a      	str	r2, [r3, #8]
}
 8012406:	bf00      	nop
 8012408:	3724      	adds	r7, #36	; 0x24
 801240a:	46bd      	mov	sp, r7
 801240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012410:	4770      	bx	lr
 8012412:	bf00      	nop
 8012414:	58024400 	.word	0x58024400
 8012418:	03d09000 	.word	0x03d09000
 801241c:	46000000 	.word	0x46000000
 8012420:	4c742400 	.word	0x4c742400
 8012424:	4a742400 	.word	0x4a742400
 8012428:	4bbebc20 	.word	0x4bbebc20

0801242c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 801242c:	b480      	push	{r7}
 801242e:	b089      	sub	sp, #36	; 0x24
 8012430:	af00      	add	r7, sp, #0
 8012432:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8012434:	4ba0      	ldr	r3, [pc, #640]	; (80126b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012438:	f003 0303 	and.w	r3, r3, #3
 801243c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 801243e:	4b9e      	ldr	r3, [pc, #632]	; (80126b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012442:	091b      	lsrs	r3, r3, #4
 8012444:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012448:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 801244a:	4b9b      	ldr	r3, [pc, #620]	; (80126b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801244c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801244e:	f003 0301 	and.w	r3, r3, #1
 8012452:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8012454:	4b98      	ldr	r3, [pc, #608]	; (80126b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012458:	08db      	lsrs	r3, r3, #3
 801245a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801245e:	693a      	ldr	r2, [r7, #16]
 8012460:	fb02 f303 	mul.w	r3, r2, r3
 8012464:	ee07 3a90 	vmov	s15, r3
 8012468:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801246c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8012470:	697b      	ldr	r3, [r7, #20]
 8012472:	2b00      	cmp	r3, #0
 8012474:	f000 8111 	beq.w	801269a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8012478:	69bb      	ldr	r3, [r7, #24]
 801247a:	2b02      	cmp	r3, #2
 801247c:	f000 8083 	beq.w	8012586 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8012480:	69bb      	ldr	r3, [r7, #24]
 8012482:	2b02      	cmp	r3, #2
 8012484:	f200 80a1 	bhi.w	80125ca <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8012488:	69bb      	ldr	r3, [r7, #24]
 801248a:	2b00      	cmp	r3, #0
 801248c:	d003      	beq.n	8012496 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 801248e:	69bb      	ldr	r3, [r7, #24]
 8012490:	2b01      	cmp	r3, #1
 8012492:	d056      	beq.n	8012542 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8012494:	e099      	b.n	80125ca <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012496:	4b88      	ldr	r3, [pc, #544]	; (80126b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012498:	681b      	ldr	r3, [r3, #0]
 801249a:	f003 0320 	and.w	r3, r3, #32
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d02d      	beq.n	80124fe <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80124a2:	4b85      	ldr	r3, [pc, #532]	; (80126b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80124a4:	681b      	ldr	r3, [r3, #0]
 80124a6:	08db      	lsrs	r3, r3, #3
 80124a8:	f003 0303 	and.w	r3, r3, #3
 80124ac:	4a83      	ldr	r2, [pc, #524]	; (80126bc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80124ae:	fa22 f303 	lsr.w	r3, r2, r3
 80124b2:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80124b4:	68bb      	ldr	r3, [r7, #8]
 80124b6:	ee07 3a90 	vmov	s15, r3
 80124ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80124be:	697b      	ldr	r3, [r7, #20]
 80124c0:	ee07 3a90 	vmov	s15, r3
 80124c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80124c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80124cc:	4b7a      	ldr	r3, [pc, #488]	; (80126b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80124ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80124d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80124d4:	ee07 3a90 	vmov	s15, r3
 80124d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80124dc:	ed97 6a03 	vldr	s12, [r7, #12]
 80124e0:	eddf 5a77 	vldr	s11, [pc, #476]	; 80126c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80124e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80124e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80124ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80124f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80124f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80124f8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80124fc:	e087      	b.n	801260e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80124fe:	697b      	ldr	r3, [r7, #20]
 8012500:	ee07 3a90 	vmov	s15, r3
 8012504:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012508:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80126c4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 801250c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012510:	4b69      	ldr	r3, [pc, #420]	; (80126b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012514:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012518:	ee07 3a90 	vmov	s15, r3
 801251c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012520:	ed97 6a03 	vldr	s12, [r7, #12]
 8012524:	eddf 5a66 	vldr	s11, [pc, #408]	; 80126c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8012528:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801252c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012530:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012534:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012538:	ee67 7a27 	vmul.f32	s15, s14, s15
 801253c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8012540:	e065      	b.n	801260e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8012542:	697b      	ldr	r3, [r7, #20]
 8012544:	ee07 3a90 	vmov	s15, r3
 8012548:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801254c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80126c8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8012550:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012554:	4b58      	ldr	r3, [pc, #352]	; (80126b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012558:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801255c:	ee07 3a90 	vmov	s15, r3
 8012560:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012564:	ed97 6a03 	vldr	s12, [r7, #12]
 8012568:	eddf 5a55 	vldr	s11, [pc, #340]	; 80126c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801256c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012570:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012574:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012578:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801257c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012580:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8012584:	e043      	b.n	801260e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8012586:	697b      	ldr	r3, [r7, #20]
 8012588:	ee07 3a90 	vmov	s15, r3
 801258c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012590:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80126cc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8012594:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012598:	4b47      	ldr	r3, [pc, #284]	; (80126b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801259a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801259c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80125a0:	ee07 3a90 	vmov	s15, r3
 80125a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80125a8:	ed97 6a03 	vldr	s12, [r7, #12]
 80125ac:	eddf 5a44 	vldr	s11, [pc, #272]	; 80126c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80125b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80125b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80125b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80125bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80125c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80125c4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80125c8:	e021      	b.n	801260e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80125ca:	697b      	ldr	r3, [r7, #20]
 80125cc:	ee07 3a90 	vmov	s15, r3
 80125d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80125d4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80126c4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80125d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80125dc:	4b36      	ldr	r3, [pc, #216]	; (80126b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80125de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80125e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80125e4:	ee07 3a90 	vmov	s15, r3
 80125e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80125ec:	ed97 6a03 	vldr	s12, [r7, #12]
 80125f0:	eddf 5a33 	vldr	s11, [pc, #204]	; 80126c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80125f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80125f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80125fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012600:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012604:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012608:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801260c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 801260e:	4b2a      	ldr	r3, [pc, #168]	; (80126b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012612:	0a5b      	lsrs	r3, r3, #9
 8012614:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012618:	ee07 3a90 	vmov	s15, r3
 801261c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012620:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012624:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012628:	edd7 6a07 	vldr	s13, [r7, #28]
 801262c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012630:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012634:	ee17 2a90 	vmov	r2, s15
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 801263c:	4b1e      	ldr	r3, [pc, #120]	; (80126b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801263e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012640:	0c1b      	lsrs	r3, r3, #16
 8012642:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012646:	ee07 3a90 	vmov	s15, r3
 801264a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801264e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012652:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012656:	edd7 6a07 	vldr	s13, [r7, #28]
 801265a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801265e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012662:	ee17 2a90 	vmov	r2, s15
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 801266a:	4b13      	ldr	r3, [pc, #76]	; (80126b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801266c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801266e:	0e1b      	lsrs	r3, r3, #24
 8012670:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012674:	ee07 3a90 	vmov	s15, r3
 8012678:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801267c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012680:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012684:	edd7 6a07 	vldr	s13, [r7, #28]
 8012688:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801268c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012690:	ee17 2a90 	vmov	r2, s15
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8012698:	e008      	b.n	80126ac <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	2200      	movs	r2, #0
 801269e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	2200      	movs	r2, #0
 80126a4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	2200      	movs	r2, #0
 80126aa:	609a      	str	r2, [r3, #8]
}
 80126ac:	bf00      	nop
 80126ae:	3724      	adds	r7, #36	; 0x24
 80126b0:	46bd      	mov	sp, r7
 80126b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126b6:	4770      	bx	lr
 80126b8:	58024400 	.word	0x58024400
 80126bc:	03d09000 	.word	0x03d09000
 80126c0:	46000000 	.word	0x46000000
 80126c4:	4c742400 	.word	0x4c742400
 80126c8:	4a742400 	.word	0x4a742400
 80126cc:	4bbebc20 	.word	0x4bbebc20

080126d0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80126d0:	b580      	push	{r7, lr}
 80126d2:	b084      	sub	sp, #16
 80126d4:	af00      	add	r7, sp, #0
 80126d6:	6078      	str	r0, [r7, #4]
 80126d8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80126da:	2300      	movs	r3, #0
 80126dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80126de:	4b53      	ldr	r3, [pc, #332]	; (801282c <RCCEx_PLL2_Config+0x15c>)
 80126e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80126e2:	f003 0303 	and.w	r3, r3, #3
 80126e6:	2b03      	cmp	r3, #3
 80126e8:	d101      	bne.n	80126ee <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80126ea:	2301      	movs	r3, #1
 80126ec:	e099      	b.n	8012822 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80126ee:	4b4f      	ldr	r3, [pc, #316]	; (801282c <RCCEx_PLL2_Config+0x15c>)
 80126f0:	681b      	ldr	r3, [r3, #0]
 80126f2:	4a4e      	ldr	r2, [pc, #312]	; (801282c <RCCEx_PLL2_Config+0x15c>)
 80126f4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80126f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80126fa:	f7f6 fc7b 	bl	8008ff4 <HAL_GetTick>
 80126fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8012700:	e008      	b.n	8012714 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8012702:	f7f6 fc77 	bl	8008ff4 <HAL_GetTick>
 8012706:	4602      	mov	r2, r0
 8012708:	68bb      	ldr	r3, [r7, #8]
 801270a:	1ad3      	subs	r3, r2, r3
 801270c:	2b02      	cmp	r3, #2
 801270e:	d901      	bls.n	8012714 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8012710:	2303      	movs	r3, #3
 8012712:	e086      	b.n	8012822 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8012714:	4b45      	ldr	r3, [pc, #276]	; (801282c <RCCEx_PLL2_Config+0x15c>)
 8012716:	681b      	ldr	r3, [r3, #0]
 8012718:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801271c:	2b00      	cmp	r3, #0
 801271e:	d1f0      	bne.n	8012702 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8012720:	4b42      	ldr	r3, [pc, #264]	; (801282c <RCCEx_PLL2_Config+0x15c>)
 8012722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012724:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	681b      	ldr	r3, [r3, #0]
 801272c:	031b      	lsls	r3, r3, #12
 801272e:	493f      	ldr	r1, [pc, #252]	; (801282c <RCCEx_PLL2_Config+0x15c>)
 8012730:	4313      	orrs	r3, r2
 8012732:	628b      	str	r3, [r1, #40]	; 0x28
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	685b      	ldr	r3, [r3, #4]
 8012738:	3b01      	subs	r3, #1
 801273a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	689b      	ldr	r3, [r3, #8]
 8012742:	3b01      	subs	r3, #1
 8012744:	025b      	lsls	r3, r3, #9
 8012746:	b29b      	uxth	r3, r3
 8012748:	431a      	orrs	r2, r3
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	68db      	ldr	r3, [r3, #12]
 801274e:	3b01      	subs	r3, #1
 8012750:	041b      	lsls	r3, r3, #16
 8012752:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8012756:	431a      	orrs	r2, r3
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	691b      	ldr	r3, [r3, #16]
 801275c:	3b01      	subs	r3, #1
 801275e:	061b      	lsls	r3, r3, #24
 8012760:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8012764:	4931      	ldr	r1, [pc, #196]	; (801282c <RCCEx_PLL2_Config+0x15c>)
 8012766:	4313      	orrs	r3, r2
 8012768:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 801276a:	4b30      	ldr	r3, [pc, #192]	; (801282c <RCCEx_PLL2_Config+0x15c>)
 801276c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801276e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	695b      	ldr	r3, [r3, #20]
 8012776:	492d      	ldr	r1, [pc, #180]	; (801282c <RCCEx_PLL2_Config+0x15c>)
 8012778:	4313      	orrs	r3, r2
 801277a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 801277c:	4b2b      	ldr	r3, [pc, #172]	; (801282c <RCCEx_PLL2_Config+0x15c>)
 801277e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012780:	f023 0220 	bic.w	r2, r3, #32
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	699b      	ldr	r3, [r3, #24]
 8012788:	4928      	ldr	r1, [pc, #160]	; (801282c <RCCEx_PLL2_Config+0x15c>)
 801278a:	4313      	orrs	r3, r2
 801278c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 801278e:	4b27      	ldr	r3, [pc, #156]	; (801282c <RCCEx_PLL2_Config+0x15c>)
 8012790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012792:	4a26      	ldr	r2, [pc, #152]	; (801282c <RCCEx_PLL2_Config+0x15c>)
 8012794:	f023 0310 	bic.w	r3, r3, #16
 8012798:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801279a:	4b24      	ldr	r3, [pc, #144]	; (801282c <RCCEx_PLL2_Config+0x15c>)
 801279c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801279e:	4b24      	ldr	r3, [pc, #144]	; (8012830 <RCCEx_PLL2_Config+0x160>)
 80127a0:	4013      	ands	r3, r2
 80127a2:	687a      	ldr	r2, [r7, #4]
 80127a4:	69d2      	ldr	r2, [r2, #28]
 80127a6:	00d2      	lsls	r2, r2, #3
 80127a8:	4920      	ldr	r1, [pc, #128]	; (801282c <RCCEx_PLL2_Config+0x15c>)
 80127aa:	4313      	orrs	r3, r2
 80127ac:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80127ae:	4b1f      	ldr	r3, [pc, #124]	; (801282c <RCCEx_PLL2_Config+0x15c>)
 80127b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80127b2:	4a1e      	ldr	r2, [pc, #120]	; (801282c <RCCEx_PLL2_Config+0x15c>)
 80127b4:	f043 0310 	orr.w	r3, r3, #16
 80127b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80127ba:	683b      	ldr	r3, [r7, #0]
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d106      	bne.n	80127ce <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80127c0:	4b1a      	ldr	r3, [pc, #104]	; (801282c <RCCEx_PLL2_Config+0x15c>)
 80127c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80127c4:	4a19      	ldr	r2, [pc, #100]	; (801282c <RCCEx_PLL2_Config+0x15c>)
 80127c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80127ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80127cc:	e00f      	b.n	80127ee <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80127ce:	683b      	ldr	r3, [r7, #0]
 80127d0:	2b01      	cmp	r3, #1
 80127d2:	d106      	bne.n	80127e2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80127d4:	4b15      	ldr	r3, [pc, #84]	; (801282c <RCCEx_PLL2_Config+0x15c>)
 80127d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80127d8:	4a14      	ldr	r2, [pc, #80]	; (801282c <RCCEx_PLL2_Config+0x15c>)
 80127da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80127de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80127e0:	e005      	b.n	80127ee <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80127e2:	4b12      	ldr	r3, [pc, #72]	; (801282c <RCCEx_PLL2_Config+0x15c>)
 80127e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80127e6:	4a11      	ldr	r2, [pc, #68]	; (801282c <RCCEx_PLL2_Config+0x15c>)
 80127e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80127ec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80127ee:	4b0f      	ldr	r3, [pc, #60]	; (801282c <RCCEx_PLL2_Config+0x15c>)
 80127f0:	681b      	ldr	r3, [r3, #0]
 80127f2:	4a0e      	ldr	r2, [pc, #56]	; (801282c <RCCEx_PLL2_Config+0x15c>)
 80127f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80127f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80127fa:	f7f6 fbfb 	bl	8008ff4 <HAL_GetTick>
 80127fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8012800:	e008      	b.n	8012814 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8012802:	f7f6 fbf7 	bl	8008ff4 <HAL_GetTick>
 8012806:	4602      	mov	r2, r0
 8012808:	68bb      	ldr	r3, [r7, #8]
 801280a:	1ad3      	subs	r3, r2, r3
 801280c:	2b02      	cmp	r3, #2
 801280e:	d901      	bls.n	8012814 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8012810:	2303      	movs	r3, #3
 8012812:	e006      	b.n	8012822 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8012814:	4b05      	ldr	r3, [pc, #20]	; (801282c <RCCEx_PLL2_Config+0x15c>)
 8012816:	681b      	ldr	r3, [r3, #0]
 8012818:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801281c:	2b00      	cmp	r3, #0
 801281e:	d0f0      	beq.n	8012802 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8012820:	7bfb      	ldrb	r3, [r7, #15]
}
 8012822:	4618      	mov	r0, r3
 8012824:	3710      	adds	r7, #16
 8012826:	46bd      	mov	sp, r7
 8012828:	bd80      	pop	{r7, pc}
 801282a:	bf00      	nop
 801282c:	58024400 	.word	0x58024400
 8012830:	ffff0007 	.word	0xffff0007

08012834 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8012834:	b580      	push	{r7, lr}
 8012836:	b084      	sub	sp, #16
 8012838:	af00      	add	r7, sp, #0
 801283a:	6078      	str	r0, [r7, #4]
 801283c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801283e:	2300      	movs	r3, #0
 8012840:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8012842:	4b53      	ldr	r3, [pc, #332]	; (8012990 <RCCEx_PLL3_Config+0x15c>)
 8012844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012846:	f003 0303 	and.w	r3, r3, #3
 801284a:	2b03      	cmp	r3, #3
 801284c:	d101      	bne.n	8012852 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801284e:	2301      	movs	r3, #1
 8012850:	e099      	b.n	8012986 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8012852:	4b4f      	ldr	r3, [pc, #316]	; (8012990 <RCCEx_PLL3_Config+0x15c>)
 8012854:	681b      	ldr	r3, [r3, #0]
 8012856:	4a4e      	ldr	r2, [pc, #312]	; (8012990 <RCCEx_PLL3_Config+0x15c>)
 8012858:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801285c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801285e:	f7f6 fbc9 	bl	8008ff4 <HAL_GetTick>
 8012862:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8012864:	e008      	b.n	8012878 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8012866:	f7f6 fbc5 	bl	8008ff4 <HAL_GetTick>
 801286a:	4602      	mov	r2, r0
 801286c:	68bb      	ldr	r3, [r7, #8]
 801286e:	1ad3      	subs	r3, r2, r3
 8012870:	2b02      	cmp	r3, #2
 8012872:	d901      	bls.n	8012878 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8012874:	2303      	movs	r3, #3
 8012876:	e086      	b.n	8012986 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8012878:	4b45      	ldr	r3, [pc, #276]	; (8012990 <RCCEx_PLL3_Config+0x15c>)
 801287a:	681b      	ldr	r3, [r3, #0]
 801287c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012880:	2b00      	cmp	r3, #0
 8012882:	d1f0      	bne.n	8012866 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8012884:	4b42      	ldr	r3, [pc, #264]	; (8012990 <RCCEx_PLL3_Config+0x15c>)
 8012886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012888:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	681b      	ldr	r3, [r3, #0]
 8012890:	051b      	lsls	r3, r3, #20
 8012892:	493f      	ldr	r1, [pc, #252]	; (8012990 <RCCEx_PLL3_Config+0x15c>)
 8012894:	4313      	orrs	r3, r2
 8012896:	628b      	str	r3, [r1, #40]	; 0x28
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	685b      	ldr	r3, [r3, #4]
 801289c:	3b01      	subs	r3, #1
 801289e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	689b      	ldr	r3, [r3, #8]
 80128a6:	3b01      	subs	r3, #1
 80128a8:	025b      	lsls	r3, r3, #9
 80128aa:	b29b      	uxth	r3, r3
 80128ac:	431a      	orrs	r2, r3
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	68db      	ldr	r3, [r3, #12]
 80128b2:	3b01      	subs	r3, #1
 80128b4:	041b      	lsls	r3, r3, #16
 80128b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80128ba:	431a      	orrs	r2, r3
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	691b      	ldr	r3, [r3, #16]
 80128c0:	3b01      	subs	r3, #1
 80128c2:	061b      	lsls	r3, r3, #24
 80128c4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80128c8:	4931      	ldr	r1, [pc, #196]	; (8012990 <RCCEx_PLL3_Config+0x15c>)
 80128ca:	4313      	orrs	r3, r2
 80128cc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80128ce:	4b30      	ldr	r3, [pc, #192]	; (8012990 <RCCEx_PLL3_Config+0x15c>)
 80128d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	695b      	ldr	r3, [r3, #20]
 80128da:	492d      	ldr	r1, [pc, #180]	; (8012990 <RCCEx_PLL3_Config+0x15c>)
 80128dc:	4313      	orrs	r3, r2
 80128de:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80128e0:	4b2b      	ldr	r3, [pc, #172]	; (8012990 <RCCEx_PLL3_Config+0x15c>)
 80128e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128e4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	699b      	ldr	r3, [r3, #24]
 80128ec:	4928      	ldr	r1, [pc, #160]	; (8012990 <RCCEx_PLL3_Config+0x15c>)
 80128ee:	4313      	orrs	r3, r2
 80128f0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80128f2:	4b27      	ldr	r3, [pc, #156]	; (8012990 <RCCEx_PLL3_Config+0x15c>)
 80128f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128f6:	4a26      	ldr	r2, [pc, #152]	; (8012990 <RCCEx_PLL3_Config+0x15c>)
 80128f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80128fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80128fe:	4b24      	ldr	r3, [pc, #144]	; (8012990 <RCCEx_PLL3_Config+0x15c>)
 8012900:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012902:	4b24      	ldr	r3, [pc, #144]	; (8012994 <RCCEx_PLL3_Config+0x160>)
 8012904:	4013      	ands	r3, r2
 8012906:	687a      	ldr	r2, [r7, #4]
 8012908:	69d2      	ldr	r2, [r2, #28]
 801290a:	00d2      	lsls	r2, r2, #3
 801290c:	4920      	ldr	r1, [pc, #128]	; (8012990 <RCCEx_PLL3_Config+0x15c>)
 801290e:	4313      	orrs	r3, r2
 8012910:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8012912:	4b1f      	ldr	r3, [pc, #124]	; (8012990 <RCCEx_PLL3_Config+0x15c>)
 8012914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012916:	4a1e      	ldr	r2, [pc, #120]	; (8012990 <RCCEx_PLL3_Config+0x15c>)
 8012918:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801291c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 801291e:	683b      	ldr	r3, [r7, #0]
 8012920:	2b00      	cmp	r3, #0
 8012922:	d106      	bne.n	8012932 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8012924:	4b1a      	ldr	r3, [pc, #104]	; (8012990 <RCCEx_PLL3_Config+0x15c>)
 8012926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012928:	4a19      	ldr	r2, [pc, #100]	; (8012990 <RCCEx_PLL3_Config+0x15c>)
 801292a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801292e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8012930:	e00f      	b.n	8012952 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8012932:	683b      	ldr	r3, [r7, #0]
 8012934:	2b01      	cmp	r3, #1
 8012936:	d106      	bne.n	8012946 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8012938:	4b15      	ldr	r3, [pc, #84]	; (8012990 <RCCEx_PLL3_Config+0x15c>)
 801293a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801293c:	4a14      	ldr	r2, [pc, #80]	; (8012990 <RCCEx_PLL3_Config+0x15c>)
 801293e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8012942:	62d3      	str	r3, [r2, #44]	; 0x2c
 8012944:	e005      	b.n	8012952 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8012946:	4b12      	ldr	r3, [pc, #72]	; (8012990 <RCCEx_PLL3_Config+0x15c>)
 8012948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801294a:	4a11      	ldr	r2, [pc, #68]	; (8012990 <RCCEx_PLL3_Config+0x15c>)
 801294c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8012950:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8012952:	4b0f      	ldr	r3, [pc, #60]	; (8012990 <RCCEx_PLL3_Config+0x15c>)
 8012954:	681b      	ldr	r3, [r3, #0]
 8012956:	4a0e      	ldr	r2, [pc, #56]	; (8012990 <RCCEx_PLL3_Config+0x15c>)
 8012958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801295c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801295e:	f7f6 fb49 	bl	8008ff4 <HAL_GetTick>
 8012962:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8012964:	e008      	b.n	8012978 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8012966:	f7f6 fb45 	bl	8008ff4 <HAL_GetTick>
 801296a:	4602      	mov	r2, r0
 801296c:	68bb      	ldr	r3, [r7, #8]
 801296e:	1ad3      	subs	r3, r2, r3
 8012970:	2b02      	cmp	r3, #2
 8012972:	d901      	bls.n	8012978 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8012974:	2303      	movs	r3, #3
 8012976:	e006      	b.n	8012986 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8012978:	4b05      	ldr	r3, [pc, #20]	; (8012990 <RCCEx_PLL3_Config+0x15c>)
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012980:	2b00      	cmp	r3, #0
 8012982:	d0f0      	beq.n	8012966 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8012984:	7bfb      	ldrb	r3, [r7, #15]
}
 8012986:	4618      	mov	r0, r3
 8012988:	3710      	adds	r7, #16
 801298a:	46bd      	mov	sp, r7
 801298c:	bd80      	pop	{r7, pc}
 801298e:	bf00      	nop
 8012990:	58024400 	.word	0x58024400
 8012994:	ffff0007 	.word	0xffff0007

08012998 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8012998:	b580      	push	{r7, lr}
 801299a:	b08a      	sub	sp, #40	; 0x28
 801299c:	af00      	add	r7, sp, #0
 801299e:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d101      	bne.n	80129aa <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 80129a6:	2301      	movs	r3, #1
 80129a8:	e283      	b.n	8012eb2 <HAL_SAI_Init+0x51a>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X) 
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 80129aa:	f7f6 fb53 	bl	8009054 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80129b4:	2b01      	cmp	r3, #1
 80129b6:	d113      	bne.n	80129e0 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	681b      	ldr	r3, [r3, #0]
 80129bc:	4a94      	ldr	r2, [pc, #592]	; (8012c10 <HAL_SAI_Init+0x278>)
 80129be:	4293      	cmp	r3, r2
 80129c0:	d004      	beq.n	80129cc <HAL_SAI_Init+0x34>
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	681b      	ldr	r3, [r3, #0]
 80129c6:	4a93      	ldr	r2, [pc, #588]	; (8012c14 <HAL_SAI_Init+0x27c>)
 80129c8:	4293      	cmp	r3, r2
 80129ca:	d107      	bne.n	80129dc <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 80129d0:	2b01      	cmp	r3, #1
 80129d2:	d103      	bne.n	80129dc <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d001      	beq.n	80129e0 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 80129dc:	2301      	movs	r3, #1
 80129de:	e268      	b.n	8012eb2 <HAL_SAI_Init+0x51a>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	681b      	ldr	r3, [r3, #0]
 80129e4:	4a8a      	ldr	r2, [pc, #552]	; (8012c10 <HAL_SAI_Init+0x278>)
 80129e6:	4293      	cmp	r3, r2
 80129e8:	d004      	beq.n	80129f4 <HAL_SAI_Init+0x5c>
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	681b      	ldr	r3, [r3, #0]
 80129ee:	4a8a      	ldr	r2, [pc, #552]	; (8012c18 <HAL_SAI_Init+0x280>)
 80129f0:	4293      	cmp	r3, r2
 80129f2:	d102      	bne.n	80129fa <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 80129f4:	4b89      	ldr	r3, [pc, #548]	; (8012c1c <HAL_SAI_Init+0x284>)
 80129f6:	61bb      	str	r3, [r7, #24]
 80129f8:	e028      	b.n	8012a4c <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	681b      	ldr	r3, [r3, #0]
 80129fe:	4a88      	ldr	r2, [pc, #544]	; (8012c20 <HAL_SAI_Init+0x288>)
 8012a00:	4293      	cmp	r3, r2
 8012a02:	d004      	beq.n	8012a0e <HAL_SAI_Init+0x76>
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	681b      	ldr	r3, [r3, #0]
 8012a08:	4a86      	ldr	r2, [pc, #536]	; (8012c24 <HAL_SAI_Init+0x28c>)
 8012a0a:	4293      	cmp	r3, r2
 8012a0c:	d102      	bne.n	8012a14 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 8012a0e:	4b86      	ldr	r3, [pc, #536]	; (8012c28 <HAL_SAI_Init+0x290>)
 8012a10:	61bb      	str	r3, [r7, #24]
 8012a12:	e01b      	b.n	8012a4c <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	681b      	ldr	r3, [r3, #0]
 8012a18:	4a84      	ldr	r2, [pc, #528]	; (8012c2c <HAL_SAI_Init+0x294>)
 8012a1a:	4293      	cmp	r3, r2
 8012a1c:	d004      	beq.n	8012a28 <HAL_SAI_Init+0x90>
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	681b      	ldr	r3, [r3, #0]
 8012a22:	4a83      	ldr	r2, [pc, #524]	; (8012c30 <HAL_SAI_Init+0x298>)
 8012a24:	4293      	cmp	r3, r2
 8012a26:	d102      	bne.n	8012a2e <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 8012a28:	4b82      	ldr	r3, [pc, #520]	; (8012c34 <HAL_SAI_Init+0x29c>)
 8012a2a:	61bb      	str	r3, [r7, #24]
 8012a2c:	e00e      	b.n	8012a4c <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	681b      	ldr	r3, [r3, #0]
 8012a32:	4a78      	ldr	r2, [pc, #480]	; (8012c14 <HAL_SAI_Init+0x27c>)
 8012a34:	4293      	cmp	r3, r2
 8012a36:	d004      	beq.n	8012a42 <HAL_SAI_Init+0xaa>
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	681b      	ldr	r3, [r3, #0]
 8012a3c:	4a7e      	ldr	r2, [pc, #504]	; (8012c38 <HAL_SAI_Init+0x2a0>)
 8012a3e:	4293      	cmp	r3, r2
 8012a40:	d102      	bne.n	8012a48 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 8012a42:	4b7e      	ldr	r3, [pc, #504]	; (8012c3c <HAL_SAI_Init+0x2a4>)
 8012a44:	61bb      	str	r3, [r7, #24]
 8012a46:	e001      	b.n	8012a4c <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8012a48:	2301      	movs	r3, #1
 8012a4a:	e232      	b.n	8012eb2 <HAL_SAI_Init+0x51a>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8012a52:	b2db      	uxtb	r3, r3
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d106      	bne.n	8012a66 <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	2200      	movs	r2, #0
 8012a5c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8012a60:	6878      	ldr	r0, [r7, #4]
 8012a62:	f000 fa9f 	bl	8012fa4 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8012a66:	6878      	ldr	r0, [r7, #4]
 8012a68:	f000 fcb0 	bl	80133cc <SAI_Disable>
 8012a6c:	4603      	mov	r3, r0
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d001      	beq.n	8012a76 <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 8012a72:	2301      	movs	r3, #1
 8012a74:	e21d      	b.n	8012eb2 <HAL_SAI_Init+0x51a>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	2202      	movs	r2, #2
 8012a7a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	68db      	ldr	r3, [r3, #12]
 8012a82:	2b02      	cmp	r3, #2
 8012a84:	d00c      	beq.n	8012aa0 <HAL_SAI_Init+0x108>
 8012a86:	2b02      	cmp	r3, #2
 8012a88:	d80d      	bhi.n	8012aa6 <HAL_SAI_Init+0x10e>
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d002      	beq.n	8012a94 <HAL_SAI_Init+0xfc>
 8012a8e:	2b01      	cmp	r3, #1
 8012a90:	d003      	beq.n	8012a9a <HAL_SAI_Init+0x102>
 8012a92:	e008      	b.n	8012aa6 <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8012a94:	2300      	movs	r3, #0
 8012a96:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8012a98:	e008      	b.n	8012aac <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8012a9a:	2310      	movs	r3, #16
 8012a9c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8012a9e:	e005      	b.n	8012aac <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8012aa0:	2320      	movs	r3, #32
 8012aa2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8012aa4:	e002      	b.n	8012aac <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 8012aa6:	2300      	movs	r3, #0
 8012aa8:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8012aaa:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	689b      	ldr	r3, [r3, #8]
 8012ab0:	2b05      	cmp	r3, #5
 8012ab2:	d832      	bhi.n	8012b1a <HAL_SAI_Init+0x182>
 8012ab4:	a201      	add	r2, pc, #4	; (adr r2, 8012abc <HAL_SAI_Init+0x124>)
 8012ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012aba:	bf00      	nop
 8012abc:	08012ad5 	.word	0x08012ad5
 8012ac0:	08012adb 	.word	0x08012adb
 8012ac4:	08012ae3 	.word	0x08012ae3
 8012ac8:	08012aeb 	.word	0x08012aeb
 8012acc:	08012afb 	.word	0x08012afb
 8012ad0:	08012b0b 	.word	0x08012b0b
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8012ad4:	2300      	movs	r3, #0
 8012ad6:	61fb      	str	r3, [r7, #28]
      break;
 8012ad8:	e022      	b.n	8012b20 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8012ada:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012ade:	61fb      	str	r3, [r7, #28]
      break;
 8012ae0:	e01e      	b.n	8012b20 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8012ae2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012ae6:	61fb      	str	r3, [r7, #28]
      break;
 8012ae8:	e01a      	b.n	8012b20 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8012aea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012aee:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8012af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012af2:	f043 0301 	orr.w	r3, r3, #1
 8012af6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8012af8:	e012      	b.n	8012b20 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8012afa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012afe:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8012b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b02:	f043 0302 	orr.w	r3, r3, #2
 8012b06:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8012b08:	e00a      	b.n	8012b20 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8012b0a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012b0e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8012b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b12:	f043 0303 	orr.w	r3, r3, #3
 8012b16:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8012b18:	e002      	b.n	8012b20 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 8012b1a:	2300      	movs	r3, #0
 8012b1c:	61fb      	str	r3, [r7, #28]
      break;
 8012b1e:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8012b20:	69bb      	ldr	r3, [r7, #24]
 8012b22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012b24:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	6a1b      	ldr	r3, [r3, #32]
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	f000 80ba 	beq.w	8012ca4 <HAL_SAI_Init+0x30c>
  {
    uint32_t freq = 0;
 8012b30:	2300      	movs	r3, #0
 8012b32:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	681b      	ldr	r3, [r3, #0]
 8012b38:	4a35      	ldr	r2, [pc, #212]	; (8012c10 <HAL_SAI_Init+0x278>)
 8012b3a:	4293      	cmp	r3, r2
 8012b3c:	d004      	beq.n	8012b48 <HAL_SAI_Init+0x1b0>
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	681b      	ldr	r3, [r3, #0]
 8012b42:	4a35      	ldr	r2, [pc, #212]	; (8012c18 <HAL_SAI_Init+0x280>)
 8012b44:	4293      	cmp	r3, r2
 8012b46:	d104      	bne.n	8012b52 <HAL_SAI_Init+0x1ba>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8012b48:	f44f 7080 	mov.w	r0, #256	; 0x100
 8012b4c:	f7fe fcde 	bl	801150c <HAL_RCCEx_GetPeriphCLKFreq>
 8012b50:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	681b      	ldr	r3, [r3, #0]
 8012b56:	4a32      	ldr	r2, [pc, #200]	; (8012c20 <HAL_SAI_Init+0x288>)
 8012b58:	4293      	cmp	r3, r2
 8012b5a:	d004      	beq.n	8012b66 <HAL_SAI_Init+0x1ce>
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	681b      	ldr	r3, [r3, #0]
 8012b60:	4a30      	ldr	r2, [pc, #192]	; (8012c24 <HAL_SAI_Init+0x28c>)
 8012b62:	4293      	cmp	r3, r2
 8012b64:	d104      	bne.n	8012b70 <HAL_SAI_Init+0x1d8>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8012b66:	f44f 7000 	mov.w	r0, #512	; 0x200
 8012b6a:	f7fe fccf 	bl	801150c <HAL_RCCEx_GetPeriphCLKFreq>
 8012b6e:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	681b      	ldr	r3, [r3, #0]
 8012b74:	4a2d      	ldr	r2, [pc, #180]	; (8012c2c <HAL_SAI_Init+0x294>)
 8012b76:	4293      	cmp	r3, r2
 8012b78:	d004      	beq.n	8012b84 <HAL_SAI_Init+0x1ec>
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	681b      	ldr	r3, [r3, #0]
 8012b7e:	4a2c      	ldr	r2, [pc, #176]	; (8012c30 <HAL_SAI_Init+0x298>)
 8012b80:	4293      	cmp	r3, r2
 8012b82:	d104      	bne.n	8012b8e <HAL_SAI_Init+0x1f6>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8012b84:	f44f 7000 	mov.w	r0, #512	; 0x200
 8012b88:	f7fe fcc0 	bl	801150c <HAL_RCCEx_GetPeriphCLKFreq>
 8012b8c:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	681b      	ldr	r3, [r3, #0]
 8012b92:	4a20      	ldr	r2, [pc, #128]	; (8012c14 <HAL_SAI_Init+0x27c>)
 8012b94:	4293      	cmp	r3, r2
 8012b96:	d104      	bne.n	8012ba2 <HAL_SAI_Init+0x20a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8012b98:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8012b9c:	f7fe fcb6 	bl	801150c <HAL_RCCEx_GetPeriphCLKFreq>
 8012ba0:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	681b      	ldr	r3, [r3, #0]
 8012ba6:	4a24      	ldr	r2, [pc, #144]	; (8012c38 <HAL_SAI_Init+0x2a0>)
 8012ba8:	4293      	cmp	r3, r2
 8012baa:	d104      	bne.n	8012bb6 <HAL_SAI_Init+0x21e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8012bac:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8012bb0:	f7fe fcac 	bl	801150c <HAL_RCCEx_GetPeriphCLKFreq>
 8012bb4:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	699b      	ldr	r3, [r3, #24]
 8012bba:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8012bbe:	d120      	bne.n	8012c02 <HAL_SAI_Init+0x26a>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012bc4:	2b04      	cmp	r3, #4
 8012bc6:	d102      	bne.n	8012bce <HAL_SAI_Init+0x236>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 8012bc8:	2340      	movs	r3, #64	; 0x40
 8012bca:	60fb      	str	r3, [r7, #12]
 8012bcc:	e00a      	b.n	8012be4 <HAL_SAI_Init+0x24c>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012bd2:	2b08      	cmp	r3, #8
 8012bd4:	d103      	bne.n	8012bde <HAL_SAI_Init+0x246>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 8012bd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012bda:	60fb      	str	r3, [r7, #12]
 8012bdc:	e002      	b.n	8012be4 <HAL_SAI_Init+0x24c>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012be2:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8012be4:	697a      	ldr	r2, [r7, #20]
 8012be6:	4613      	mov	r3, r2
 8012be8:	009b      	lsls	r3, r3, #2
 8012bea:	4413      	add	r3, r2
 8012bec:	005b      	lsls	r3, r3, #1
 8012bee:	4619      	mov	r1, r3
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	6a1b      	ldr	r3, [r3, #32]
 8012bf4:	68fa      	ldr	r2, [r7, #12]
 8012bf6:	fb02 f303 	mul.w	r3, r2, r3
 8012bfa:	fbb1 f3f3 	udiv	r3, r1, r3
 8012bfe:	613b      	str	r3, [r7, #16]
 8012c00:	e02f      	b.n	8012c62 <HAL_SAI_Init+0x2ca>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c06:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8012c0a:	d119      	bne.n	8012c40 <HAL_SAI_Init+0x2a8>
 8012c0c:	2302      	movs	r3, #2
 8012c0e:	e018      	b.n	8012c42 <HAL_SAI_Init+0x2aa>
 8012c10:	40015804 	.word	0x40015804
 8012c14:	58005404 	.word	0x58005404
 8012c18:	40015824 	.word	0x40015824
 8012c1c:	40015800 	.word	0x40015800
 8012c20:	40015c04 	.word	0x40015c04
 8012c24:	40015c24 	.word	0x40015c24
 8012c28:	40015c00 	.word	0x40015c00
 8012c2c:	40016004 	.word	0x40016004
 8012c30:	40016024 	.word	0x40016024
 8012c34:	40016000 	.word	0x40016000
 8012c38:	58005424 	.word	0x58005424
 8012c3c:	58005400 	.word	0x58005400
 8012c40:	2301      	movs	r3, #1
 8012c42:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8012c44:	697a      	ldr	r2, [r7, #20]
 8012c46:	4613      	mov	r3, r2
 8012c48:	009b      	lsls	r3, r3, #2
 8012c4a:	4413      	add	r3, r2
 8012c4c:	005b      	lsls	r3, r3, #1
 8012c4e:	4619      	mov	r1, r3
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	6a1b      	ldr	r3, [r3, #32]
 8012c54:	68ba      	ldr	r2, [r7, #8]
 8012c56:	fb02 f303 	mul.w	r3, r2, r3
 8012c5a:	021b      	lsls	r3, r3, #8
 8012c5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8012c60:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8012c62:	693b      	ldr	r3, [r7, #16]
 8012c64:	4a95      	ldr	r2, [pc, #596]	; (8012ebc <HAL_SAI_Init+0x524>)
 8012c66:	fba2 2303 	umull	r2, r3, r2, r3
 8012c6a:	08da      	lsrs	r2, r3, #3
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8012c70:	6939      	ldr	r1, [r7, #16]
 8012c72:	4b92      	ldr	r3, [pc, #584]	; (8012ebc <HAL_SAI_Init+0x524>)
 8012c74:	fba3 2301 	umull	r2, r3, r3, r1
 8012c78:	08da      	lsrs	r2, r3, #3
 8012c7a:	4613      	mov	r3, r2
 8012c7c:	009b      	lsls	r3, r3, #2
 8012c7e:	4413      	add	r3, r2
 8012c80:	005b      	lsls	r3, r3, #1
 8012c82:	1aca      	subs	r2, r1, r3
 8012c84:	2a08      	cmp	r2, #8
 8012c86:	d904      	bls.n	8012c92 <HAL_SAI_Init+0x2fa>
    {
      hsai->Init.Mckdiv += 1U;
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c8c:	1c5a      	adds	r2, r3, #1
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012c96:	2b04      	cmp	r3, #4
 8012c98:	d104      	bne.n	8012ca4 <HAL_SAI_Init+0x30c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c9e:	085a      	lsrs	r2, r3, #1
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	685b      	ldr	r3, [r3, #4]
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d003      	beq.n	8012cb4 <HAL_SAI_Init+0x31c>
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	685b      	ldr	r3, [r3, #4]
 8012cb0:	2b02      	cmp	r3, #2
 8012cb2:	d109      	bne.n	8012cc8 <HAL_SAI_Init+0x330>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012cb8:	2b01      	cmp	r3, #1
 8012cba:	d101      	bne.n	8012cc0 <HAL_SAI_Init+0x328>
 8012cbc:	2300      	movs	r3, #0
 8012cbe:	e001      	b.n	8012cc4 <HAL_SAI_Init+0x32c>
 8012cc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012cc4:	623b      	str	r3, [r7, #32]
 8012cc6:	e008      	b.n	8012cda <HAL_SAI_Init+0x342>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012ccc:	2b01      	cmp	r3, #1
 8012cce:	d102      	bne.n	8012cd6 <HAL_SAI_Init+0x33e>
 8012cd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012cd4:	e000      	b.n	8012cd8 <HAL_SAI_Init+0x340>
 8012cd6:	2300      	movs	r3, #0
 8012cd8:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8012cda:	f7f6 f9bb 	bl	8009054 <HAL_GetREVID>
 8012cde:	4603      	mov	r3, r0
 8012ce0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012ce4:	d331      	bcc.n	8012d4a <HAL_SAI_Init+0x3b2>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	681b      	ldr	r3, [r3, #0]
 8012cea:	6819      	ldr	r1, [r3, #0]
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	681a      	ldr	r2, [r3, #0]
 8012cf0:	4b73      	ldr	r3, [pc, #460]	; (8012ec0 <HAL_SAI_Init+0x528>)
 8012cf2:	400b      	ands	r3, r1
 8012cf4:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	681b      	ldr	r3, [r3, #0]
 8012cfa:	6819      	ldr	r1, [r3, #0]
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	685a      	ldr	r2, [r3, #4]
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012d04:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8012d0a:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012d10:	431a      	orrs	r2, r3
 8012d12:	6a3b      	ldr	r3, [r7, #32]
 8012d14:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8012d16:	69fb      	ldr	r3, [r7, #28]
 8012d18:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8012d1e:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	695b      	ldr	r3, [r3, #20]
 8012d24:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8012d2a:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d30:	051b      	lsls	r3, r3, #20
 8012d32:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8012d38:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	691b      	ldr	r3, [r3, #16]
 8012d3e:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	681b      	ldr	r3, [r3, #0]
 8012d44:	430a      	orrs	r2, r1
 8012d46:	601a      	str	r2, [r3, #0]
 8012d48:	e02d      	b.n	8012da6 <HAL_SAI_Init+0x40e>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	681b      	ldr	r3, [r3, #0]
 8012d4e:	6819      	ldr	r1, [r3, #0]
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	681a      	ldr	r2, [r3, #0]
 8012d54:	4b5b      	ldr	r3, [pc, #364]	; (8012ec4 <HAL_SAI_Init+0x52c>)
 8012d56:	400b      	ands	r3, r1
 8012d58:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	681b      	ldr	r3, [r3, #0]
 8012d5e:	6819      	ldr	r1, [r3, #0]
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	685a      	ldr	r2, [r3, #4]
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012d68:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8012d6e:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012d74:	431a      	orrs	r2, r3
 8012d76:	6a3b      	ldr	r3, [r7, #32]
 8012d78:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8012d7a:	69fb      	ldr	r3, [r7, #28]
 8012d7c:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8012d82:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	695b      	ldr	r3, [r3, #20]
 8012d88:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8012d8e:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d94:	051b      	lsls	r3, r3, #20
 8012d96:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8012d9c:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	430a      	orrs	r2, r1
 8012da4:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	681b      	ldr	r3, [r3, #0]
 8012daa:	6859      	ldr	r1, [r3, #4]
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	681a      	ldr	r2, [r3, #0]
 8012db0:	4b45      	ldr	r3, [pc, #276]	; (8012ec8 <HAL_SAI_Init+0x530>)
 8012db2:	400b      	ands	r3, r1
 8012db4:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	681b      	ldr	r3, [r3, #0]
 8012dba:	6859      	ldr	r1, [r3, #4]
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	69da      	ldr	r2, [r3, #28]
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012dc4:	431a      	orrs	r2, r3
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012dca:	431a      	orrs	r2, r3
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	681b      	ldr	r3, [r3, #0]
 8012dd0:	430a      	orrs	r2, r1
 8012dd2:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	681b      	ldr	r3, [r3, #0]
 8012dd8:	6899      	ldr	r1, [r3, #8]
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	681a      	ldr	r2, [r3, #0]
 8012dde:	4b3b      	ldr	r3, [pc, #236]	; (8012ecc <HAL_SAI_Init+0x534>)
 8012de0:	400b      	ands	r3, r1
 8012de2:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	681b      	ldr	r3, [r3, #0]
 8012de8:	6899      	ldr	r1, [r3, #8]
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012dee:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8012df4:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8012dfa:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8012e00:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012e06:	3b01      	subs	r3, #1
 8012e08:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8012e0a:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	681b      	ldr	r3, [r3, #0]
 8012e10:	430a      	orrs	r2, r1
 8012e12:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	681b      	ldr	r3, [r3, #0]
 8012e18:	68d9      	ldr	r1, [r3, #12]
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	681a      	ldr	r2, [r3, #0]
 8012e1e:	f24f 0320 	movw	r3, #61472	; 0xf020
 8012e22:	400b      	ands	r3, r1
 8012e24:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	681b      	ldr	r3, [r3, #0]
 8012e2a:	68d9      	ldr	r1, [r3, #12]
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e34:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012e3a:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8012e3c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012e42:	3b01      	subs	r3, #1
 8012e44:	021b      	lsls	r3, r3, #8
 8012e46:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	430a      	orrs	r2, r1
 8012e4e:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	681b      	ldr	r3, [r3, #0]
 8012e54:	4a1e      	ldr	r2, [pc, #120]	; (8012ed0 <HAL_SAI_Init+0x538>)
 8012e56:	4293      	cmp	r3, r2
 8012e58:	d004      	beq.n	8012e64 <HAL_SAI_Init+0x4cc>
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	681b      	ldr	r3, [r3, #0]
 8012e5e:	4a1d      	ldr	r2, [pc, #116]	; (8012ed4 <HAL_SAI_Init+0x53c>)
 8012e60:	4293      	cmp	r3, r2
 8012e62:	d119      	bne.n	8012e98 <HAL_SAI_Init+0x500>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8012e64:	69bb      	ldr	r3, [r7, #24]
 8012e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012e68:	f023 0201 	bic.w	r2, r3, #1
 8012e6c:	69bb      	ldr	r3, [r7, #24]
 8012e6e:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012e76:	2b01      	cmp	r3, #1
 8012e78:	d10e      	bne.n	8012e98 <HAL_SAI_Init+0x500>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012e82:	3b01      	subs	r3, #1
 8012e84:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8012e86:	431a      	orrs	r2, r3
 8012e88:	69bb      	ldr	r3, [r7, #24]
 8012e8a:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8012e8c:	69bb      	ldr	r3, [r7, #24]
 8012e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012e90:	f043 0201 	orr.w	r2, r3, #1
 8012e94:	69bb      	ldr	r3, [r7, #24]
 8012e96:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	2200      	movs	r2, #0
 8012e9c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	2201      	movs	r2, #1
 8012ea4:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	2200      	movs	r2, #0
 8012eac:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8012eb0:	2300      	movs	r3, #0
}
 8012eb2:	4618      	mov	r0, r3
 8012eb4:	3728      	adds	r7, #40	; 0x28
 8012eb6:	46bd      	mov	sp, r7
 8012eb8:	bd80      	pop	{r7, pc}
 8012eba:	bf00      	nop
 8012ebc:	cccccccd 	.word	0xcccccccd
 8012ec0:	f005c010 	.word	0xf005c010
 8012ec4:	f805c010 	.word	0xf805c010
 8012ec8:	ffff1ff0 	.word	0xffff1ff0
 8012ecc:	fff88000 	.word	0xfff88000
 8012ed0:	40015804 	.word	0x40015804
 8012ed4:	58005404 	.word	0x58005404

08012ed8 <HAL_SAI_DeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai)
{
 8012ed8:	b580      	push	{r7, lr}
 8012eda:	b084      	sub	sp, #16
 8012edc:	af00      	add	r7, sp, #0
 8012ede:	6078      	str	r0, [r7, #4]
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d101      	bne.n	8012eea <HAL_SAI_DeInit+0x12>
  {
    return HAL_ERROR;
 8012ee6:	2301      	movs	r3, #1
 8012ee8:	e050      	b.n	8012f8c <HAL_SAI_DeInit+0xb4>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	2202      	movs	r2, #2
 8012eee:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	681b      	ldr	r3, [r3, #0]
 8012ef6:	2200      	movs	r2, #0
 8012ef8:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	681b      	ldr	r3, [r3, #0]
 8012efe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012f02:	619a      	str	r2, [r3, #24]

  /* Disable the SAI */
  if (SAI_Disable(hsai) != HAL_OK)
 8012f04:	6878      	ldr	r0, [r7, #4]
 8012f06:	f000 fa61 	bl	80133cc <SAI_Disable>
 8012f0a:	4603      	mov	r3, r0
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d009      	beq.n	8012f24 <HAL_SAI_DeInit+0x4c>
  {
    /* Reset SAI state to ready */
    hsai->State = HAL_SAI_STATE_READY;
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	2201      	movs	r2, #1
 8012f14:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Release Lock */
    __HAL_UNLOCK(hsai);
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	2200      	movs	r2, #0
 8012f1c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_ERROR;
 8012f20:	2301      	movs	r3, #1
 8012f22:	e033      	b.n	8012f8c <HAL_SAI_DeInit+0xb4>
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	681b      	ldr	r3, [r3, #0]
 8012f28:	685a      	ldr	r2, [r3, #4]
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	681b      	ldr	r3, [r3, #0]
 8012f2e:	f042 0208 	orr.w	r2, r2, #8
 8012f32:	605a      	str	r2, [r3, #4]

  /* Disable SAI PDM interface */
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	681b      	ldr	r3, [r3, #0]
 8012f38:	4a16      	ldr	r2, [pc, #88]	; (8012f94 <HAL_SAI_DeInit+0xbc>)
 8012f3a:	4293      	cmp	r3, r2
 8012f3c:	d004      	beq.n	8012f48 <HAL_SAI_DeInit+0x70>
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	681b      	ldr	r3, [r3, #0]
 8012f42:	4a15      	ldr	r2, [pc, #84]	; (8012f98 <HAL_SAI_DeInit+0xc0>)
 8012f44:	4293      	cmp	r3, r2
 8012f46:	d111      	bne.n	8012f6c <HAL_SAI_DeInit+0x94>
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Get the SAI base address according to the SAI handle */
#if defined(SAI4)
    SaiBaseAddress = (hsai->Instance == SAI1_Block_A) ? SAI1 : SAI4;
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	681b      	ldr	r3, [r3, #0]
 8012f4c:	4a11      	ldr	r2, [pc, #68]	; (8012f94 <HAL_SAI_DeInit+0xbc>)
 8012f4e:	4293      	cmp	r3, r2
 8012f50:	d101      	bne.n	8012f56 <HAL_SAI_DeInit+0x7e>
 8012f52:	4b12      	ldr	r3, [pc, #72]	; (8012f9c <HAL_SAI_DeInit+0xc4>)
 8012f54:	e000      	b.n	8012f58 <HAL_SAI_DeInit+0x80>
 8012f56:	4b12      	ldr	r3, [pc, #72]	; (8012fa0 <HAL_SAI_DeInit+0xc8>)
 8012f58:	60fb      	str	r3, [r7, #12]
#else
    SaiBaseAddress = SAI1;
#endif /* SAI4 */

    /* Reset PDM delays */
    SaiBaseAddress->PDMDLY = 0U;
 8012f5a:	68fb      	ldr	r3, [r7, #12]
 8012f5c:	2200      	movs	r2, #0
 8012f5e:	649a      	str	r2, [r3, #72]	; 0x48

    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8012f60:	68fb      	ldr	r3, [r7, #12]
 8012f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012f64:	f023 0201 	bic.w	r2, r3, #1
 8012f68:	68fb      	ldr	r3, [r7, #12]
 8012f6a:	645a      	str	r2, [r3, #68]	; 0x44
  {
    hsai->MspDeInitCallback = HAL_SAI_MspDeInit;
  }
  hsai->MspDeInitCallback(hsai);
#else
  HAL_SAI_MspDeInit(hsai);
 8012f6c:	6878      	ldr	r0, [r7, #4]
 8012f6e:	f000 f823 	bl	8012fb8 <HAL_SAI_MspDeInit>
#endif

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	2200      	movs	r2, #0
 8012f76:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_RESET;
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	2200      	movs	r2, #0
 8012f7e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	2200      	movs	r2, #0
 8012f86:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8012f8a:	2300      	movs	r3, #0
}
 8012f8c:	4618      	mov	r0, r3
 8012f8e:	3710      	adds	r7, #16
 8012f90:	46bd      	mov	sp, r7
 8012f92:	bd80      	pop	{r7, pc}
 8012f94:	40015804 	.word	0x40015804
 8012f98:	58005404 	.word	0x58005404
 8012f9c:	40015800 	.word	0x40015800
 8012fa0:	58005400 	.word	0x58005400

08012fa4 <HAL_SAI_MspInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_MspInit(SAI_HandleTypeDef *hsai)
{
 8012fa4:	b480      	push	{r7}
 8012fa6:	b083      	sub	sp, #12
 8012fa8:	af00      	add	r7, sp, #0
 8012faa:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_MspInit could be implemented in the user file
   */
}
 8012fac:	bf00      	nop
 8012fae:	370c      	adds	r7, #12
 8012fb0:	46bd      	mov	sp, r7
 8012fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fb6:	4770      	bx	lr

08012fb8 <HAL_SAI_MspDeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_MspDeInit(SAI_HandleTypeDef *hsai)
{
 8012fb8:	b480      	push	{r7}
 8012fba:	b083      	sub	sp, #12
 8012fbc:	af00      	add	r7, sp, #0
 8012fbe:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_MspDeInit could be implemented in the user file
   */
}
 8012fc0:	bf00      	nop
 8012fc2:	370c      	adds	r7, #12
 8012fc4:	46bd      	mov	sp, r7
 8012fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fca:	4770      	bx	lr

08012fcc <HAL_SAI_DMAStop>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAStop(SAI_HandleTypeDef *hsai)
{
 8012fcc:	b580      	push	{r7, lr}
 8012fce:	b084      	sub	sp, #16
 8012fd0:	af00      	add	r7, sp, #0
 8012fd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012fd4:	2300      	movs	r3, #0
 8012fd6:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8012fde:	2b01      	cmp	r3, #1
 8012fe0:	d101      	bne.n	8012fe6 <HAL_SAI_DMAStop+0x1a>
 8012fe2:	2302      	movs	r3, #2
 8012fe4:	e06c      	b.n	80130c0 <HAL_SAI_DMAStop+0xf4>
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	2201      	movs	r2, #1
 8012fea:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	681b      	ldr	r3, [r3, #0]
 8012ff2:	681a      	ldr	r2, [r3, #0]
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	681b      	ldr	r3, [r3, #0]
 8012ff8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8012ffc:	601a      	str	r2, [r3, #0]

  /* Abort the SAI Tx DMA Stream */
  if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8013004:	b2db      	uxtb	r3, r3
 8013006:	2b12      	cmp	r3, #18
 8013008:	d11d      	bne.n	8013046 <HAL_SAI_DMAStop+0x7a>
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013010:	2b00      	cmp	r3, #0
 8013012:	d018      	beq.n	8013046 <HAL_SAI_DMAStop+0x7a>
  {
    if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801301a:	4618      	mov	r0, r3
 801301c:	f7f7 faa8 	bl	800a570 <HAL_DMA_Abort>
 8013020:	4603      	mov	r3, r0
 8013022:	2b00      	cmp	r3, #0
 8013024:	d00f      	beq.n	8013046 <HAL_SAI_DMAStop+0x7a>
    {
      /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801302c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801302e:	2b80      	cmp	r3, #128	; 0x80
 8013030:	d009      	beq.n	8013046 <HAL_SAI_DMAStop+0x7a>
      {
        status = HAL_ERROR;
 8013032:	2301      	movs	r3, #1
 8013034:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801303c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      }
    }
  }

  /* Abort the SAI Rx DMA Stream */
  if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 801304c:	b2db      	uxtb	r3, r3
 801304e:	2b22      	cmp	r3, #34	; 0x22
 8013050:	d11d      	bne.n	801308e <HAL_SAI_DMAStop+0xc2>
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013058:	2b00      	cmp	r3, #0
 801305a:	d018      	beq.n	801308e <HAL_SAI_DMAStop+0xc2>
  {
    if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013062:	4618      	mov	r0, r3
 8013064:	f7f7 fa84 	bl	800a570 <HAL_DMA_Abort>
 8013068:	4603      	mov	r3, r0
 801306a:	2b00      	cmp	r3, #0
 801306c:	d00f      	beq.n	801308e <HAL_SAI_DMAStop+0xc2>
    {
      /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013076:	2b80      	cmp	r3, #128	; 0x80
 8013078:	d009      	beq.n	801308e <HAL_SAI_DMAStop+0xc2>
      {
        status = HAL_ERROR;
 801307a:	2301      	movs	r3, #1
 801307c:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013084:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      }
    }
  }

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 801308e:	6878      	ldr	r0, [r7, #4]
 8013090:	f000 f99c 	bl	80133cc <SAI_Disable>
 8013094:	4603      	mov	r3, r0
 8013096:	2b00      	cmp	r3, #0
 8013098:	d001      	beq.n	801309e <HAL_SAI_DMAStop+0xd2>
  {
    status = HAL_ERROR;
 801309a:	2301      	movs	r3, #1
 801309c:	73fb      	strb	r3, [r7, #15]
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	681b      	ldr	r3, [r3, #0]
 80130a2:	685a      	ldr	r2, [r3, #4]
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	681b      	ldr	r3, [r3, #0]
 80130a8:	f042 0208 	orr.w	r2, r2, #8
 80130ac:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	2201      	movs	r2, #1
 80130b2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	2200      	movs	r2, #0
 80130ba:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return status;
 80130be:	7bfb      	ldrb	r3, [r7, #15]
}
 80130c0:	4618      	mov	r0, r3
 80130c2:	3710      	adds	r7, #16
 80130c4:	46bd      	mov	sp, r7
 80130c6:	bd80      	pop	{r7, pc}

080130c8 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 80130c8:	b580      	push	{r7, lr}
 80130ca:	b086      	sub	sp, #24
 80130cc:	af00      	add	r7, sp, #0
 80130ce:	60f8      	str	r0, [r7, #12]
 80130d0:	60b9      	str	r1, [r7, #8]
 80130d2:	4613      	mov	r3, r2
 80130d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 80130d6:	f7f5 ff8d 	bl	8008ff4 <HAL_GetTick>
 80130da:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80130dc:	68bb      	ldr	r3, [r7, #8]
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d002      	beq.n	80130e8 <HAL_SAI_Transmit_DMA+0x20>
 80130e2:	88fb      	ldrh	r3, [r7, #6]
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	d101      	bne.n	80130ec <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 80130e8:	2301      	movs	r3, #1
 80130ea:	e098      	b.n	801321e <HAL_SAI_Transmit_DMA+0x156>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 80130ec:	68fb      	ldr	r3, [r7, #12]
 80130ee:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80130f2:	b2db      	uxtb	r3, r3
 80130f4:	2b01      	cmp	r3, #1
 80130f6:	f040 8091 	bne.w	801321c <HAL_SAI_Transmit_DMA+0x154>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 80130fa:	68fb      	ldr	r3, [r7, #12]
 80130fc:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8013100:	2b01      	cmp	r3, #1
 8013102:	d101      	bne.n	8013108 <HAL_SAI_Transmit_DMA+0x40>
 8013104:	2302      	movs	r3, #2
 8013106:	e08a      	b.n	801321e <HAL_SAI_Transmit_DMA+0x156>
 8013108:	68fb      	ldr	r3, [r7, #12]
 801310a:	2201      	movs	r2, #1
 801310c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 8013110:	68fb      	ldr	r3, [r7, #12]
 8013112:	68ba      	ldr	r2, [r7, #8]
 8013114:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 8013116:	68fb      	ldr	r3, [r7, #12]
 8013118:	88fa      	ldrh	r2, [r7, #6]
 801311a:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 801311e:	68fb      	ldr	r3, [r7, #12]
 8013120:	88fa      	ldrh	r2, [r7, #6]
 8013122:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8013126:	68fb      	ldr	r3, [r7, #12]
 8013128:	2200      	movs	r2, #0
 801312a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 801312e:	68fb      	ldr	r3, [r7, #12]
 8013130:	2212      	movs	r2, #18
 8013132:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8013136:	68fb      	ldr	r3, [r7, #12]
 8013138:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801313c:	4a3a      	ldr	r2, [pc, #232]	; (8013228 <HAL_SAI_Transmit_DMA+0x160>)
 801313e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8013140:	68fb      	ldr	r3, [r7, #12]
 8013142:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013146:	4a39      	ldr	r2, [pc, #228]	; (801322c <HAL_SAI_Transmit_DMA+0x164>)
 8013148:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 801314a:	68fb      	ldr	r3, [r7, #12]
 801314c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013150:	4a37      	ldr	r2, [pc, #220]	; (8013230 <HAL_SAI_Transmit_DMA+0x168>)
 8013152:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 8013154:	68fb      	ldr	r3, [r7, #12]
 8013156:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801315a:	2200      	movs	r2, #0
 801315c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 801315e:	68fb      	ldr	r3, [r7, #12]
 8013160:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8013164:	68fb      	ldr	r3, [r7, #12]
 8013166:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013168:	4619      	mov	r1, r3
 801316a:	68fb      	ldr	r3, [r7, #12]
 801316c:	681b      	ldr	r3, [r3, #0]
 801316e:	331c      	adds	r3, #28
 8013170:	461a      	mov	r2, r3
 8013172:	68fb      	ldr	r3, [r7, #12]
 8013174:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8013178:	f7f6 ff90 	bl	800a09c <HAL_DMA_Start_IT>
 801317c:	4603      	mov	r3, r0
 801317e:	2b00      	cmp	r3, #0
 8013180:	d005      	beq.n	801318e <HAL_SAI_Transmit_DMA+0xc6>
    {
      __HAL_UNLOCK(hsai);
 8013182:	68fb      	ldr	r3, [r7, #12]
 8013184:	2200      	movs	r2, #0
 8013186:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 801318a:	2301      	movs	r3, #1
 801318c:	e047      	b.n	801321e <HAL_SAI_Transmit_DMA+0x156>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 801318e:	2100      	movs	r1, #0
 8013190:	68f8      	ldr	r0, [r7, #12]
 8013192:	f000 f8e3 	bl	801335c <SAI_InterruptFlag>
 8013196:	4601      	mov	r1, r0
 8013198:	68fb      	ldr	r3, [r7, #12]
 801319a:	681b      	ldr	r3, [r3, #0]
 801319c:	691a      	ldr	r2, [r3, #16]
 801319e:	68fb      	ldr	r3, [r7, #12]
 80131a0:	681b      	ldr	r3, [r3, #0]
 80131a2:	430a      	orrs	r2, r1
 80131a4:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80131a6:	68fb      	ldr	r3, [r7, #12]
 80131a8:	681b      	ldr	r3, [r3, #0]
 80131aa:	681a      	ldr	r2, [r3, #0]
 80131ac:	68fb      	ldr	r3, [r7, #12]
 80131ae:	681b      	ldr	r3, [r3, #0]
 80131b0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80131b4:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 80131b6:	e015      	b.n	80131e4 <HAL_SAI_Transmit_DMA+0x11c>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 80131b8:	f7f5 ff1c 	bl	8008ff4 <HAL_GetTick>
 80131bc:	4602      	mov	r2, r0
 80131be:	697b      	ldr	r3, [r7, #20]
 80131c0:	1ad3      	subs	r3, r2, r3
 80131c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80131c6:	d90d      	bls.n	80131e4 <HAL_SAI_Transmit_DMA+0x11c>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80131c8:	68fb      	ldr	r3, [r7, #12]
 80131ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80131ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80131d2:	68fb      	ldr	r3, [r7, #12]
 80131d4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 80131d8:	68fb      	ldr	r3, [r7, #12]
 80131da:	2200      	movs	r2, #0
 80131dc:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        return HAL_TIMEOUT;
 80131e0:	2303      	movs	r3, #3
 80131e2:	e01c      	b.n	801321e <HAL_SAI_Transmit_DMA+0x156>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 80131e4:	68fb      	ldr	r3, [r7, #12]
 80131e6:	681b      	ldr	r3, [r3, #0]
 80131e8:	695b      	ldr	r3, [r3, #20]
 80131ea:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d0e2      	beq.n	80131b8 <HAL_SAI_Transmit_DMA+0xf0>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 80131f2:	68fb      	ldr	r3, [r7, #12]
 80131f4:	681b      	ldr	r3, [r3, #0]
 80131f6:	681b      	ldr	r3, [r3, #0]
 80131f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d107      	bne.n	8013210 <HAL_SAI_Transmit_DMA+0x148>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8013200:	68fb      	ldr	r3, [r7, #12]
 8013202:	681b      	ldr	r3, [r3, #0]
 8013204:	681a      	ldr	r2, [r3, #0]
 8013206:	68fb      	ldr	r3, [r7, #12]
 8013208:	681b      	ldr	r3, [r3, #0]
 801320a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 801320e:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8013210:	68fb      	ldr	r3, [r7, #12]
 8013212:	2200      	movs	r2, #0
 8013214:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 8013218:	2300      	movs	r3, #0
 801321a:	e000      	b.n	801321e <HAL_SAI_Transmit_DMA+0x156>
  }
  else
  {
    return HAL_BUSY;
 801321c:	2302      	movs	r3, #2
  }
}
 801321e:	4618      	mov	r0, r3
 8013220:	3718      	adds	r7, #24
 8013222:	46bd      	mov	sp, r7
 8013224:	bd80      	pop	{r7, pc}
 8013226:	bf00      	nop
 8013228:	080134a1 	.word	0x080134a1
 801322c:	08013441 	.word	0x08013441
 8013230:	08013539 	.word	0x08013539

08013234 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8013234:	b580      	push	{r7, lr}
 8013236:	b084      	sub	sp, #16
 8013238:	af00      	add	r7, sp, #0
 801323a:	60f8      	str	r0, [r7, #12]
 801323c:	60b9      	str	r1, [r7, #8]
 801323e:	4613      	mov	r3, r2
 8013240:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 8013242:	68bb      	ldr	r3, [r7, #8]
 8013244:	2b00      	cmp	r3, #0
 8013246:	d002      	beq.n	801324e <HAL_SAI_Receive_DMA+0x1a>
 8013248:	88fb      	ldrh	r3, [r7, #6]
 801324a:	2b00      	cmp	r3, #0
 801324c:	d101      	bne.n	8013252 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 801324e:	2301      	movs	r3, #1
 8013250:	e079      	b.n	8013346 <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8013252:	68fb      	ldr	r3, [r7, #12]
 8013254:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8013258:	b2db      	uxtb	r3, r3
 801325a:	2b01      	cmp	r3, #1
 801325c:	d172      	bne.n	8013344 <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8013264:	2b01      	cmp	r3, #1
 8013266:	d101      	bne.n	801326c <HAL_SAI_Receive_DMA+0x38>
 8013268:	2302      	movs	r3, #2
 801326a:	e06c      	b.n	8013346 <HAL_SAI_Receive_DMA+0x112>
 801326c:	68fb      	ldr	r3, [r7, #12]
 801326e:	2201      	movs	r2, #1
 8013270:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 8013274:	68fb      	ldr	r3, [r7, #12]
 8013276:	68ba      	ldr	r2, [r7, #8]
 8013278:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 801327a:	68fb      	ldr	r3, [r7, #12]
 801327c:	88fa      	ldrh	r2, [r7, #6]
 801327e:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 8013282:	68fb      	ldr	r3, [r7, #12]
 8013284:	88fa      	ldrh	r2, [r7, #6]
 8013286:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 801328a:	68fb      	ldr	r3, [r7, #12]
 801328c:	2200      	movs	r2, #0
 801328e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8013292:	68fb      	ldr	r3, [r7, #12]
 8013294:	2222      	movs	r2, #34	; 0x22
 8013296:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 801329a:	68fb      	ldr	r3, [r7, #12]
 801329c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80132a0:	4a2b      	ldr	r2, [pc, #172]	; (8013350 <HAL_SAI_Receive_DMA+0x11c>)
 80132a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 80132a4:	68fb      	ldr	r3, [r7, #12]
 80132a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80132aa:	4a2a      	ldr	r2, [pc, #168]	; (8013354 <HAL_SAI_Receive_DMA+0x120>)
 80132ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 80132ae:	68fb      	ldr	r3, [r7, #12]
 80132b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80132b4:	4a28      	ldr	r2, [pc, #160]	; (8013358 <HAL_SAI_Receive_DMA+0x124>)
 80132b6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 80132b8:	68fb      	ldr	r3, [r7, #12]
 80132ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80132be:	2200      	movs	r2, #0
 80132c0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 80132c2:	68fb      	ldr	r3, [r7, #12]
 80132c4:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 80132c8:	68fb      	ldr	r3, [r7, #12]
 80132ca:	681b      	ldr	r3, [r3, #0]
 80132cc:	331c      	adds	r3, #28
 80132ce:	4619      	mov	r1, r3
 80132d0:	68fb      	ldr	r3, [r7, #12]
 80132d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80132d4:	461a      	mov	r2, r3
 80132d6:	68fb      	ldr	r3, [r7, #12]
 80132d8:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80132dc:	f7f6 fede 	bl	800a09c <HAL_DMA_Start_IT>
 80132e0:	4603      	mov	r3, r0
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	d005      	beq.n	80132f2 <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 80132e6:	68fb      	ldr	r3, [r7, #12]
 80132e8:	2200      	movs	r2, #0
 80132ea:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 80132ee:	2301      	movs	r3, #1
 80132f0:	e029      	b.n	8013346 <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80132f2:	2100      	movs	r1, #0
 80132f4:	68f8      	ldr	r0, [r7, #12]
 80132f6:	f000 f831 	bl	801335c <SAI_InterruptFlag>
 80132fa:	4601      	mov	r1, r0
 80132fc:	68fb      	ldr	r3, [r7, #12]
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	691a      	ldr	r2, [r3, #16]
 8013302:	68fb      	ldr	r3, [r7, #12]
 8013304:	681b      	ldr	r3, [r3, #0]
 8013306:	430a      	orrs	r2, r1
 8013308:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 801330a:	68fb      	ldr	r3, [r7, #12]
 801330c:	681b      	ldr	r3, [r3, #0]
 801330e:	681a      	ldr	r2, [r3, #0]
 8013310:	68fb      	ldr	r3, [r7, #12]
 8013312:	681b      	ldr	r3, [r3, #0]
 8013314:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8013318:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 801331a:	68fb      	ldr	r3, [r7, #12]
 801331c:	681b      	ldr	r3, [r3, #0]
 801331e:	681b      	ldr	r3, [r3, #0]
 8013320:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013324:	2b00      	cmp	r3, #0
 8013326:	d107      	bne.n	8013338 <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8013328:	68fb      	ldr	r3, [r7, #12]
 801332a:	681b      	ldr	r3, [r3, #0]
 801332c:	681a      	ldr	r2, [r3, #0]
 801332e:	68fb      	ldr	r3, [r7, #12]
 8013330:	681b      	ldr	r3, [r3, #0]
 8013332:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8013336:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8013338:	68fb      	ldr	r3, [r7, #12]
 801333a:	2200      	movs	r2, #0
 801333c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 8013340:	2300      	movs	r3, #0
 8013342:	e000      	b.n	8013346 <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 8013344:	2302      	movs	r3, #2
  }
}
 8013346:	4618      	mov	r0, r3
 8013348:	3710      	adds	r7, #16
 801334a:	46bd      	mov	sp, r7
 801334c:	bd80      	pop	{r7, pc}
 801334e:	bf00      	nop
 8013350:	0801351d 	.word	0x0801351d
 8013354:	080134bd 	.word	0x080134bd
 8013358:	08013539 	.word	0x08013539

0801335c <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 801335c:	b480      	push	{r7}
 801335e:	b085      	sub	sp, #20
 8013360:	af00      	add	r7, sp, #0
 8013362:	6078      	str	r0, [r7, #4]
 8013364:	460b      	mov	r3, r1
 8013366:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8013368:	2301      	movs	r3, #1
 801336a:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 801336c:	78fb      	ldrb	r3, [r7, #3]
 801336e:	2b01      	cmp	r3, #1
 8013370:	d103      	bne.n	801337a <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 8013372:	68fb      	ldr	r3, [r7, #12]
 8013374:	f043 0308 	orr.w	r3, r3, #8
 8013378:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801337e:	2b08      	cmp	r3, #8
 8013380:	d10b      	bne.n	801339a <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8013386:	2b03      	cmp	r3, #3
 8013388:	d003      	beq.n	8013392 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	685b      	ldr	r3, [r3, #4]
 801338e:	2b01      	cmp	r3, #1
 8013390:	d103      	bne.n	801339a <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 8013392:	68fb      	ldr	r3, [r7, #12]
 8013394:	f043 0310 	orr.w	r3, r3, #16
 8013398:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	685b      	ldr	r3, [r3, #4]
 801339e:	2b03      	cmp	r3, #3
 80133a0:	d003      	beq.n	80133aa <SAI_InterruptFlag+0x4e>
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	685b      	ldr	r3, [r3, #4]
 80133a6:	2b02      	cmp	r3, #2
 80133a8:	d104      	bne.n	80133b4 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 80133aa:	68fb      	ldr	r3, [r7, #12]
 80133ac:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80133b0:	60fb      	str	r3, [r7, #12]
 80133b2:	e003      	b.n	80133bc <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 80133b4:	68fb      	ldr	r3, [r7, #12]
 80133b6:	f043 0304 	orr.w	r3, r3, #4
 80133ba:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 80133bc:	68fb      	ldr	r3, [r7, #12]
}
 80133be:	4618      	mov	r0, r3
 80133c0:	3714      	adds	r7, #20
 80133c2:	46bd      	mov	sp, r7
 80133c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133c8:	4770      	bx	lr
	...

080133cc <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80133cc:	b480      	push	{r7}
 80133ce:	b085      	sub	sp, #20
 80133d0:	af00      	add	r7, sp, #0
 80133d2:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80133d4:	4b18      	ldr	r3, [pc, #96]	; (8013438 <SAI_Disable+0x6c>)
 80133d6:	681b      	ldr	r3, [r3, #0]
 80133d8:	4a18      	ldr	r2, [pc, #96]	; (801343c <SAI_Disable+0x70>)
 80133da:	fba2 2303 	umull	r2, r3, r2, r3
 80133de:	0b1b      	lsrs	r3, r3, #12
 80133e0:	009b      	lsls	r3, r3, #2
 80133e2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80133e4:	2300      	movs	r3, #0
 80133e6:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	681b      	ldr	r3, [r3, #0]
 80133ec:	681a      	ldr	r2, [r3, #0]
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	681b      	ldr	r3, [r3, #0]
 80133f2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80133f6:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80133f8:	68fb      	ldr	r3, [r7, #12]
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d10a      	bne.n	8013414 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013404:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 801340e:	2303      	movs	r3, #3
 8013410:	72fb      	strb	r3, [r7, #11]
      break;
 8013412:	e009      	b.n	8013428 <SAI_Disable+0x5c>
    }
    count--;
 8013414:	68fb      	ldr	r3, [r7, #12]
 8013416:	3b01      	subs	r3, #1
 8013418:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	681b      	ldr	r3, [r3, #0]
 801341e:	681b      	ldr	r3, [r3, #0]
 8013420:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013424:	2b00      	cmp	r3, #0
 8013426:	d1e7      	bne.n	80133f8 <SAI_Disable+0x2c>

  return status;
 8013428:	7afb      	ldrb	r3, [r7, #11]
}
 801342a:	4618      	mov	r0, r3
 801342c:	3714      	adds	r7, #20
 801342e:	46bd      	mov	sp, r7
 8013430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013434:	4770      	bx	lr
 8013436:	bf00      	nop
 8013438:	240000f4 	.word	0x240000f4
 801343c:	95cbec1b 	.word	0x95cbec1b

08013440 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8013440:	b580      	push	{r7, lr}
 8013442:	b084      	sub	sp, #16
 8013444:	af00      	add	r7, sp, #0
 8013446:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801344c:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	69db      	ldr	r3, [r3, #28]
 8013452:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013456:	d01c      	beq.n	8013492 <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 8013458:	68fb      	ldr	r3, [r7, #12]
 801345a:	2200      	movs	r2, #0
 801345c:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8013460:	68fb      	ldr	r3, [r7, #12]
 8013462:	681b      	ldr	r3, [r3, #0]
 8013464:	681a      	ldr	r2, [r3, #0]
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	681b      	ldr	r3, [r3, #0]
 801346a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 801346e:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8013470:	2100      	movs	r1, #0
 8013472:	68f8      	ldr	r0, [r7, #12]
 8013474:	f7ff ff72 	bl	801335c <SAI_InterruptFlag>
 8013478:	4603      	mov	r3, r0
 801347a:	43d9      	mvns	r1, r3
 801347c:	68fb      	ldr	r3, [r7, #12]
 801347e:	681b      	ldr	r3, [r3, #0]
 8013480:	691a      	ldr	r2, [r3, #16]
 8013482:	68fb      	ldr	r3, [r7, #12]
 8013484:	681b      	ldr	r3, [r3, #0]
 8013486:	400a      	ands	r2, r1
 8013488:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 801348a:	68fb      	ldr	r3, [r7, #12]
 801348c:	2201      	movs	r2, #1
 801348e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8013492:	68f8      	ldr	r0, [r7, #12]
 8013494:	f7f2 fcd8 	bl	8005e48 <HAL_SAI_TxCpltCallback>
#endif
}
 8013498:	bf00      	nop
 801349a:	3710      	adds	r7, #16
 801349c:	46bd      	mov	sp, r7
 801349e:	bd80      	pop	{r7, pc}

080134a0 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80134a0:	b580      	push	{r7, lr}
 80134a2:	b084      	sub	sp, #16
 80134a4:	af00      	add	r7, sp, #0
 80134a6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80134ac:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 80134ae:	68f8      	ldr	r0, [r7, #12]
 80134b0:	f7f2 fcd5 	bl	8005e5e <HAL_SAI_TxHalfCpltCallback>
#endif
}
 80134b4:	bf00      	nop
 80134b6:	3710      	adds	r7, #16
 80134b8:	46bd      	mov	sp, r7
 80134ba:	bd80      	pop	{r7, pc}

080134bc <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80134bc:	b580      	push	{r7, lr}
 80134be:	b084      	sub	sp, #16
 80134c0:	af00      	add	r7, sp, #0
 80134c2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80134c8:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	69db      	ldr	r3, [r3, #28]
 80134ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80134d2:	d01c      	beq.n	801350e <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80134d4:	68fb      	ldr	r3, [r7, #12]
 80134d6:	681b      	ldr	r3, [r3, #0]
 80134d8:	681a      	ldr	r2, [r3, #0]
 80134da:	68fb      	ldr	r3, [r7, #12]
 80134dc:	681b      	ldr	r3, [r3, #0]
 80134de:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80134e2:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 80134e4:	68fb      	ldr	r3, [r7, #12]
 80134e6:	2200      	movs	r2, #0
 80134e8:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80134ec:	2100      	movs	r1, #0
 80134ee:	68f8      	ldr	r0, [r7, #12]
 80134f0:	f7ff ff34 	bl	801335c <SAI_InterruptFlag>
 80134f4:	4603      	mov	r3, r0
 80134f6:	43d9      	mvns	r1, r3
 80134f8:	68fb      	ldr	r3, [r7, #12]
 80134fa:	681b      	ldr	r3, [r3, #0]
 80134fc:	691a      	ldr	r2, [r3, #16]
 80134fe:	68fb      	ldr	r3, [r7, #12]
 8013500:	681b      	ldr	r3, [r3, #0]
 8013502:	400a      	ands	r2, r1
 8013504:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8013506:	68fb      	ldr	r3, [r7, #12]
 8013508:	2201      	movs	r2, #1
 801350a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 801350e:	68f8      	ldr	r0, [r7, #12]
 8013510:	f7f3 f974 	bl	80067fc <HAL_SAI_RxCpltCallback>
#endif
}
 8013514:	bf00      	nop
 8013516:	3710      	adds	r7, #16
 8013518:	46bd      	mov	sp, r7
 801351a:	bd80      	pop	{r7, pc}

0801351c <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801351c:	b580      	push	{r7, lr}
 801351e:	b084      	sub	sp, #16
 8013520:	af00      	add	r7, sp, #0
 8013522:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013528:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 801352a:	68f8      	ldr	r0, [r7, #12]
 801352c:	f7f3 f950 	bl	80067d0 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 8013530:	bf00      	nop
 8013532:	3710      	adds	r7, #16
 8013534:	46bd      	mov	sp, r7
 8013536:	bd80      	pop	{r7, pc}

08013538 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8013538:	b580      	push	{r7, lr}
 801353a:	b084      	sub	sp, #16
 801353c:	af00      	add	r7, sp, #0
 801353e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013544:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8013546:	6878      	ldr	r0, [r7, #4]
 8013548:	f7f8 fc9e 	bl	800be88 <HAL_DMA_GetError>
 801354c:	4603      	mov	r3, r0
 801354e:	2b02      	cmp	r3, #2
 8013550:	d01d      	beq.n	801358e <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8013552:	68fb      	ldr	r3, [r7, #12]
 8013554:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013558:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801355c:	68fb      	ldr	r3, [r7, #12]
 801355e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8013562:	68fb      	ldr	r3, [r7, #12]
 8013564:	681b      	ldr	r3, [r3, #0]
 8013566:	681a      	ldr	r2, [r3, #0]
 8013568:	68fb      	ldr	r3, [r7, #12]
 801356a:	681b      	ldr	r3, [r3, #0]
 801356c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8013570:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 8013572:	68f8      	ldr	r0, [r7, #12]
 8013574:	f7ff ff2a 	bl	80133cc <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8013578:	68fb      	ldr	r3, [r7, #12]
 801357a:	2201      	movs	r2, #1
 801357c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8013580:	68fb      	ldr	r3, [r7, #12]
 8013582:	2200      	movs	r2, #0
 8013584:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 8013588:	68f8      	ldr	r0, [r7, #12]
 801358a:	f7f2 fc73 	bl	8005e74 <HAL_SAI_ErrorCallback>
#endif
  }
}
 801358e:	bf00      	nop
 8013590:	3710      	adds	r7, #16
 8013592:	46bd      	mov	sp, r7
 8013594:	bd80      	pop	{r7, pc}
	...

08013598 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8013598:	b580      	push	{r7, lr}
 801359a:	b084      	sub	sp, #16
 801359c:	af00      	add	r7, sp, #0
 801359e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135a4:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	681b      	ldr	r3, [r3, #0]
 80135aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80135ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	d008      	beq.n	80135c6 <HAL_SD_IRQHandler+0x2e>
 80135b4:	68fb      	ldr	r3, [r7, #12]
 80135b6:	f003 0308 	and.w	r3, r3, #8
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	d003      	beq.n	80135c6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80135be:	6878      	ldr	r0, [r7, #4]
 80135c0:	f000 f9aa 	bl	8013918 <SD_Read_IT>
 80135c4:	e19a      	b.n	80138fc <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	681b      	ldr	r3, [r3, #0]
 80135ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80135cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	f000 80ac 	beq.w	801372e <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	681b      	ldr	r3, [r3, #0]
 80135da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80135de:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	681b      	ldr	r3, [r3, #0]
 80135e4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	681a      	ldr	r2, [r3, #0]
 80135ea:	4b9d      	ldr	r3, [pc, #628]	; (8013860 <HAL_SD_IRQHandler+0x2c8>)
 80135ec:	400b      	ands	r3, r1
 80135ee:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	681b      	ldr	r3, [r3, #0]
 80135f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	681b      	ldr	r3, [r3, #0]
 80135fa:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80135fe:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	681b      	ldr	r3, [r3, #0]
 8013604:	68da      	ldr	r2, [r3, #12]
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	681b      	ldr	r3, [r3, #0]
 801360a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801360e:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8013610:	68fb      	ldr	r3, [r7, #12]
 8013612:	f003 0308 	and.w	r3, r3, #8
 8013616:	2b00      	cmp	r3, #0
 8013618:	d038      	beq.n	801368c <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 801361a:	68fb      	ldr	r3, [r7, #12]
 801361c:	f003 0302 	and.w	r3, r3, #2
 8013620:	2b00      	cmp	r3, #0
 8013622:	d104      	bne.n	801362e <HAL_SD_IRQHandler+0x96>
 8013624:	68fb      	ldr	r3, [r7, #12]
 8013626:	f003 0320 	and.w	r3, r3, #32
 801362a:	2b00      	cmp	r3, #0
 801362c:	d011      	beq.n	8013652 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	681b      	ldr	r3, [r3, #0]
 8013632:	4618      	mov	r0, r3
 8013634:	f000 fc36 	bl	8013ea4 <SDMMC_CmdStopTransfer>
 8013638:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 801363a:	68bb      	ldr	r3, [r7, #8]
 801363c:	2b00      	cmp	r3, #0
 801363e:	d008      	beq.n	8013652 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013644:	68bb      	ldr	r3, [r7, #8]
 8013646:	431a      	orrs	r2, r3
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 801364c:	6878      	ldr	r0, [r7, #4]
 801364e:	f000 f959 	bl	8013904 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	681b      	ldr	r3, [r3, #0]
 8013656:	4a83      	ldr	r2, [pc, #524]	; (8013864 <HAL_SD_IRQHandler+0x2cc>)
 8013658:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	2201      	movs	r2, #1
 801365e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	2200      	movs	r2, #0
 8013666:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8013668:	68fb      	ldr	r3, [r7, #12]
 801366a:	f003 0301 	and.w	r3, r3, #1
 801366e:	2b00      	cmp	r3, #0
 8013670:	d104      	bne.n	801367c <HAL_SD_IRQHandler+0xe4>
 8013672:	68fb      	ldr	r3, [r7, #12]
 8013674:	f003 0302 	and.w	r3, r3, #2
 8013678:	2b00      	cmp	r3, #0
 801367a:	d003      	beq.n	8013684 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 801367c:	6878      	ldr	r0, [r7, #4]
 801367e:	f7f5 f9cf 	bl	8008a20 <HAL_SD_RxCpltCallback>
 8013682:	e13b      	b.n	80138fc <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8013684:	6878      	ldr	r0, [r7, #4]
 8013686:	f7f5 f9b7 	bl	80089f8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 801368a:	e137      	b.n	80138fc <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 801368c:	68fb      	ldr	r3, [r7, #12]
 801368e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013692:	2b00      	cmp	r3, #0
 8013694:	f000 8132 	beq.w	80138fc <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	681b      	ldr	r3, [r3, #0]
 801369c:	2200      	movs	r2, #0
 801369e:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	681b      	ldr	r3, [r3, #0]
 80136a4:	2200      	movs	r2, #0
 80136a6:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	681b      	ldr	r3, [r3, #0]
 80136ac:	2200      	movs	r2, #0
 80136ae:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80136b0:	68fb      	ldr	r3, [r7, #12]
 80136b2:	f003 0302 	and.w	r3, r3, #2
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d104      	bne.n	80136c4 <HAL_SD_IRQHandler+0x12c>
 80136ba:	68fb      	ldr	r3, [r7, #12]
 80136bc:	f003 0320 	and.w	r3, r3, #32
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d011      	beq.n	80136e8 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	681b      	ldr	r3, [r3, #0]
 80136c8:	4618      	mov	r0, r3
 80136ca:	f000 fbeb 	bl	8013ea4 <SDMMC_CmdStopTransfer>
 80136ce:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 80136d0:	68bb      	ldr	r3, [r7, #8]
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	d008      	beq.n	80136e8 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80136da:	68bb      	ldr	r3, [r7, #8]
 80136dc:	431a      	orrs	r2, r3
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 80136e2:	6878      	ldr	r0, [r7, #4]
 80136e4:	f000 f90e 	bl	8013904 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	2201      	movs	r2, #1
 80136ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	2200      	movs	r2, #0
 80136f4:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80136f6:	68fb      	ldr	r3, [r7, #12]
 80136f8:	f003 0310 	and.w	r3, r3, #16
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d104      	bne.n	801370a <HAL_SD_IRQHandler+0x172>
 8013700:	68fb      	ldr	r3, [r7, #12]
 8013702:	f003 0320 	and.w	r3, r3, #32
 8013706:	2b00      	cmp	r3, #0
 8013708:	d002      	beq.n	8013710 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 801370a:	6878      	ldr	r0, [r7, #4]
 801370c:	f7f5 f974 	bl	80089f8 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8013710:	68fb      	ldr	r3, [r7, #12]
 8013712:	f003 0301 	and.w	r3, r3, #1
 8013716:	2b00      	cmp	r3, #0
 8013718:	d105      	bne.n	8013726 <HAL_SD_IRQHandler+0x18e>
 801371a:	68fb      	ldr	r3, [r7, #12]
 801371c:	f003 0302 	and.w	r3, r3, #2
 8013720:	2b00      	cmp	r3, #0
 8013722:	f000 80eb 	beq.w	80138fc <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8013726:	6878      	ldr	r0, [r7, #4]
 8013728:	f7f5 f97a 	bl	8008a20 <HAL_SD_RxCpltCallback>
}
 801372c:	e0e6      	b.n	80138fc <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	681b      	ldr	r3, [r3, #0]
 8013732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013734:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013738:	2b00      	cmp	r3, #0
 801373a:	d008      	beq.n	801374e <HAL_SD_IRQHandler+0x1b6>
 801373c:	68fb      	ldr	r3, [r7, #12]
 801373e:	f003 0308 	and.w	r3, r3, #8
 8013742:	2b00      	cmp	r3, #0
 8013744:	d003      	beq.n	801374e <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
 8013746:	6878      	ldr	r0, [r7, #4]
 8013748:	f000 f92c 	bl	80139a4 <SD_Write_IT>
 801374c:	e0d6      	b.n	80138fc <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	681b      	ldr	r3, [r3, #0]
 8013752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013754:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8013758:	2b00      	cmp	r3, #0
 801375a:	f000 80a2 	beq.w	80138a2 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	681b      	ldr	r3, [r3, #0]
 8013762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013764:	f003 0302 	and.w	r3, r3, #2
 8013768:	2b00      	cmp	r3, #0
 801376a:	d005      	beq.n	8013778 <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013770:	f043 0202 	orr.w	r2, r3, #2
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	681b      	ldr	r3, [r3, #0]
 801377c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801377e:	f003 0308 	and.w	r3, r3, #8
 8013782:	2b00      	cmp	r3, #0
 8013784:	d005      	beq.n	8013792 <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801378a:	f043 0208 	orr.w	r2, r3, #8
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	681b      	ldr	r3, [r3, #0]
 8013796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013798:	f003 0320 	and.w	r3, r3, #32
 801379c:	2b00      	cmp	r3, #0
 801379e:	d005      	beq.n	80137ac <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80137a4:	f043 0220 	orr.w	r2, r3, #32
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	681b      	ldr	r3, [r3, #0]
 80137b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80137b2:	f003 0310 	and.w	r3, r3, #16
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	d005      	beq.n	80137c6 <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80137be:	f043 0210 	orr.w	r2, r3, #16
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	681b      	ldr	r3, [r3, #0]
 80137ca:	4a26      	ldr	r2, [pc, #152]	; (8013864 <HAL_SD_IRQHandler+0x2cc>)
 80137cc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	681b      	ldr	r3, [r3, #0]
 80137d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	681b      	ldr	r3, [r3, #0]
 80137d8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80137dc:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	681b      	ldr	r3, [r3, #0]
 80137e2:	68da      	ldr	r2, [r3, #12]
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	681b      	ldr	r3, [r3, #0]
 80137e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80137ec:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	681b      	ldr	r3, [r3, #0]
 80137f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	681b      	ldr	r3, [r3, #0]
 80137f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80137fc:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	681b      	ldr	r3, [r3, #0]
 8013802:	68da      	ldr	r2, [r3, #12]
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	681b      	ldr	r3, [r3, #0]
 8013808:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801380c:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	681b      	ldr	r3, [r3, #0]
 8013812:	4618      	mov	r0, r3
 8013814:	f000 fb46 	bl	8013ea4 <SDMMC_CmdStopTransfer>
 8013818:	4602      	mov	r2, r0
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801381e:	431a      	orrs	r2, r3
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	681b      	ldr	r3, [r3, #0]
 8013828:	68da      	ldr	r2, [r3, #12]
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	681b      	ldr	r3, [r3, #0]
 801382e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8013832:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	681b      	ldr	r3, [r3, #0]
 8013838:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801383c:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 801383e:	68fb      	ldr	r3, [r7, #12]
 8013840:	f003 0308 	and.w	r3, r3, #8
 8013844:	2b00      	cmp	r3, #0
 8013846:	d00f      	beq.n	8013868 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	2201      	movs	r2, #1
 801384c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	2200      	movs	r2, #0
 8013854:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 8013856:	6878      	ldr	r0, [r7, #4]
 8013858:	f000 f854 	bl	8013904 <HAL_SD_ErrorCallback>
}
 801385c:	e04e      	b.n	80138fc <HAL_SD_IRQHandler+0x364>
 801385e:	bf00      	nop
 8013860:	ffff3ec5 	.word	0xffff3ec5
 8013864:	18000f3a 	.word	0x18000f3a
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8013868:	68fb      	ldr	r3, [r7, #12]
 801386a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801386e:	2b00      	cmp	r3, #0
 8013870:	d044      	beq.n	80138fc <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013876:	2b00      	cmp	r3, #0
 8013878:	d040      	beq.n	80138fc <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	681b      	ldr	r3, [r3, #0]
 801387e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	681b      	ldr	r3, [r3, #0]
 8013884:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8013888:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	681b      	ldr	r3, [r3, #0]
 801388e:	2200      	movs	r2, #0
 8013890:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	2201      	movs	r2, #1
 8013896:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 801389a:	6878      	ldr	r0, [r7, #4]
 801389c:	f000 f832 	bl	8013904 <HAL_SD_ErrorCallback>
}
 80138a0:	e02c      	b.n	80138fc <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	681b      	ldr	r3, [r3, #0]
 80138a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80138a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d025      	beq.n	80138fc <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	681b      	ldr	r3, [r3, #0]
 80138b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80138b8:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	681b      	ldr	r3, [r3, #0]
 80138be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80138c0:	f003 0304 	and.w	r3, r3, #4
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d10c      	bne.n	80138e2 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80138c8:	68fb      	ldr	r3, [r7, #12]
 80138ca:	f003 0320 	and.w	r3, r3, #32
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d003      	beq.n	80138da <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 80138d2:	6878      	ldr	r0, [r7, #4]
 80138d4:	f000 f8ce 	bl	8013a74 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 80138d8:	e010      	b.n	80138fc <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 80138da:	6878      	ldr	r0, [r7, #4]
 80138dc:	f000 f8b6 	bl	8013a4c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 80138e0:	e00c      	b.n	80138fc <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80138e2:	68fb      	ldr	r3, [r7, #12]
 80138e4:	f003 0320 	and.w	r3, r3, #32
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	d003      	beq.n	80138f4 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 80138ec:	6878      	ldr	r0, [r7, #4]
 80138ee:	f000 f8b7 	bl	8013a60 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 80138f2:	e003      	b.n	80138fc <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 80138f4:	6878      	ldr	r0, [r7, #4]
 80138f6:	f000 f89f 	bl	8013a38 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 80138fa:	e7ff      	b.n	80138fc <HAL_SD_IRQHandler+0x364>
 80138fc:	bf00      	nop
 80138fe:	3710      	adds	r7, #16
 8013900:	46bd      	mov	sp, r7
 8013902:	bd80      	pop	{r7, pc}

08013904 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8013904:	b480      	push	{r7}
 8013906:	b083      	sub	sp, #12
 8013908:	af00      	add	r7, sp, #0
 801390a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 801390c:	bf00      	nop
 801390e:	370c      	adds	r7, #12
 8013910:	46bd      	mov	sp, r7
 8013912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013916:	4770      	bx	lr

08013918 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8013918:	b580      	push	{r7, lr}
 801391a:	b086      	sub	sp, #24
 801391c:	af00      	add	r7, sp, #0
 801391e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013924:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801392a:	2b1f      	cmp	r3, #31
 801392c:	d936      	bls.n	801399c <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 801392e:	2300      	movs	r3, #0
 8013930:	617b      	str	r3, [r7, #20]
 8013932:	e027      	b.n	8013984 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	681b      	ldr	r3, [r3, #0]
 8013938:	4618      	mov	r0, r3
 801393a:	f000 fa4b 	bl	8013dd4 <SDMMC_ReadFIFO>
 801393e:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 8013940:	68fb      	ldr	r3, [r7, #12]
 8013942:	b2da      	uxtb	r2, r3
 8013944:	693b      	ldr	r3, [r7, #16]
 8013946:	701a      	strb	r2, [r3, #0]
      tmp++;
 8013948:	693b      	ldr	r3, [r7, #16]
 801394a:	3301      	adds	r3, #1
 801394c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 801394e:	68fb      	ldr	r3, [r7, #12]
 8013950:	0a1b      	lsrs	r3, r3, #8
 8013952:	b2da      	uxtb	r2, r3
 8013954:	693b      	ldr	r3, [r7, #16]
 8013956:	701a      	strb	r2, [r3, #0]
      tmp++;
 8013958:	693b      	ldr	r3, [r7, #16]
 801395a:	3301      	adds	r3, #1
 801395c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 801395e:	68fb      	ldr	r3, [r7, #12]
 8013960:	0c1b      	lsrs	r3, r3, #16
 8013962:	b2da      	uxtb	r2, r3
 8013964:	693b      	ldr	r3, [r7, #16]
 8013966:	701a      	strb	r2, [r3, #0]
      tmp++;
 8013968:	693b      	ldr	r3, [r7, #16]
 801396a:	3301      	adds	r3, #1
 801396c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 801396e:	68fb      	ldr	r3, [r7, #12]
 8013970:	0e1b      	lsrs	r3, r3, #24
 8013972:	b2da      	uxtb	r2, r3
 8013974:	693b      	ldr	r3, [r7, #16]
 8013976:	701a      	strb	r2, [r3, #0]
      tmp++;
 8013978:	693b      	ldr	r3, [r7, #16]
 801397a:	3301      	adds	r3, #1
 801397c:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 801397e:	697b      	ldr	r3, [r7, #20]
 8013980:	3301      	adds	r3, #1
 8013982:	617b      	str	r3, [r7, #20]
 8013984:	697b      	ldr	r3, [r7, #20]
 8013986:	2b07      	cmp	r3, #7
 8013988:	d9d4      	bls.n	8013934 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	693a      	ldr	r2, [r7, #16]
 801398e:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013994:	f1a3 0220 	sub.w	r2, r3, #32
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 801399c:	bf00      	nop
 801399e:	3718      	adds	r7, #24
 80139a0:	46bd      	mov	sp, r7
 80139a2:	bd80      	pop	{r7, pc}

080139a4 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80139a4:	b580      	push	{r7, lr}
 80139a6:	b086      	sub	sp, #24
 80139a8:	af00      	add	r7, sp, #0
 80139aa:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	69db      	ldr	r3, [r3, #28]
 80139b0:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	6a1b      	ldr	r3, [r3, #32]
 80139b6:	2b1f      	cmp	r3, #31
 80139b8:	d93a      	bls.n	8013a30 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 80139ba:	2300      	movs	r3, #0
 80139bc:	617b      	str	r3, [r7, #20]
 80139be:	e02b      	b.n	8013a18 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 80139c0:	693b      	ldr	r3, [r7, #16]
 80139c2:	781b      	ldrb	r3, [r3, #0]
 80139c4:	60fb      	str	r3, [r7, #12]
      tmp++;
 80139c6:	693b      	ldr	r3, [r7, #16]
 80139c8:	3301      	adds	r3, #1
 80139ca:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80139cc:	693b      	ldr	r3, [r7, #16]
 80139ce:	781b      	ldrb	r3, [r3, #0]
 80139d0:	021a      	lsls	r2, r3, #8
 80139d2:	68fb      	ldr	r3, [r7, #12]
 80139d4:	4313      	orrs	r3, r2
 80139d6:	60fb      	str	r3, [r7, #12]
      tmp++;
 80139d8:	693b      	ldr	r3, [r7, #16]
 80139da:	3301      	adds	r3, #1
 80139dc:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80139de:	693b      	ldr	r3, [r7, #16]
 80139e0:	781b      	ldrb	r3, [r3, #0]
 80139e2:	041a      	lsls	r2, r3, #16
 80139e4:	68fb      	ldr	r3, [r7, #12]
 80139e6:	4313      	orrs	r3, r2
 80139e8:	60fb      	str	r3, [r7, #12]
      tmp++;
 80139ea:	693b      	ldr	r3, [r7, #16]
 80139ec:	3301      	adds	r3, #1
 80139ee:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80139f0:	693b      	ldr	r3, [r7, #16]
 80139f2:	781b      	ldrb	r3, [r3, #0]
 80139f4:	061a      	lsls	r2, r3, #24
 80139f6:	68fb      	ldr	r3, [r7, #12]
 80139f8:	4313      	orrs	r3, r2
 80139fa:	60fb      	str	r3, [r7, #12]
      tmp++;
 80139fc:	693b      	ldr	r3, [r7, #16]
 80139fe:	3301      	adds	r3, #1
 8013a00:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	681b      	ldr	r3, [r3, #0]
 8013a06:	f107 020c 	add.w	r2, r7, #12
 8013a0a:	4611      	mov	r1, r2
 8013a0c:	4618      	mov	r0, r3
 8013a0e:	f000 f9ee 	bl	8013dee <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 8013a12:	697b      	ldr	r3, [r7, #20]
 8013a14:	3301      	adds	r3, #1
 8013a16:	617b      	str	r3, [r7, #20]
 8013a18:	697b      	ldr	r3, [r7, #20]
 8013a1a:	2b07      	cmp	r3, #7
 8013a1c:	d9d0      	bls.n	80139c0 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	693a      	ldr	r2, [r7, #16]
 8013a22:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	6a1b      	ldr	r3, [r3, #32]
 8013a28:	f1a3 0220 	sub.w	r2, r3, #32
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	621a      	str	r2, [r3, #32]
  }
}
 8013a30:	bf00      	nop
 8013a32:	3718      	adds	r7, #24
 8013a34:	46bd      	mov	sp, r7
 8013a36:	bd80      	pop	{r7, pc}

08013a38 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8013a38:	b480      	push	{r7}
 8013a3a:	b083      	sub	sp, #12
 8013a3c:	af00      	add	r7, sp, #0
 8013a3e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8013a40:	bf00      	nop
 8013a42:	370c      	adds	r7, #12
 8013a44:	46bd      	mov	sp, r7
 8013a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a4a:	4770      	bx	lr

08013a4c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8013a4c:	b480      	push	{r7}
 8013a4e:	b083      	sub	sp, #12
 8013a50:	af00      	add	r7, sp, #0
 8013a52:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8013a54:	bf00      	nop
 8013a56:	370c      	adds	r7, #12
 8013a58:	46bd      	mov	sp, r7
 8013a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a5e:	4770      	bx	lr

08013a60 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8013a60:	b480      	push	{r7}
 8013a62:	b083      	sub	sp, #12
 8013a64:	af00      	add	r7, sp, #0
 8013a66:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8013a68:	bf00      	nop
 8013a6a:	370c      	adds	r7, #12
 8013a6c:	46bd      	mov	sp, r7
 8013a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a72:	4770      	bx	lr

08013a74 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8013a74:	b480      	push	{r7}
 8013a76:	b083      	sub	sp, #12
 8013a78:	af00      	add	r7, sp, #0
 8013a7a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8013a7c:	bf00      	nop
 8013a7e:	370c      	adds	r7, #12
 8013a80:	46bd      	mov	sp, r7
 8013a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a86:	4770      	bx	lr

08013a88 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8013a88:	b580      	push	{r7, lr}
 8013a8a:	b082      	sub	sp, #8
 8013a8c:	af00      	add	r7, sp, #0
 8013a8e:	6078      	str	r0, [r7, #4]
 8013a90:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	d101      	bne.n	8013a9c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8013a98:	2301      	movs	r3, #1
 8013a9a:	e02b      	b.n	8013af4 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013aa2:	b2db      	uxtb	r3, r3
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d106      	bne.n	8013ab6 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	2200      	movs	r2, #0
 8013aac:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8013ab0:	6878      	ldr	r0, [r7, #4]
 8013ab2:	f000 f825 	bl	8013b00 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	2202      	movs	r2, #2
 8013aba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	681a      	ldr	r2, [r3, #0]
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	3304      	adds	r3, #4
 8013ac6:	4619      	mov	r1, r3
 8013ac8:	4610      	mov	r0, r2
 8013aca:	f000 f881 	bl	8013bd0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	6818      	ldr	r0, [r3, #0]
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	685b      	ldr	r3, [r3, #4]
 8013ad6:	461a      	mov	r2, r3
 8013ad8:	6839      	ldr	r1, [r7, #0]
 8013ada:	f000 f8d5 	bl	8013c88 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8013ade:	4b07      	ldr	r3, [pc, #28]	; (8013afc <HAL_SDRAM_Init+0x74>)
 8013ae0:	681b      	ldr	r3, [r3, #0]
 8013ae2:	4a06      	ldr	r2, [pc, #24]	; (8013afc <HAL_SDRAM_Init+0x74>)
 8013ae4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8013ae8:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	2201      	movs	r2, #1
 8013aee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8013af2:	2300      	movs	r3, #0
}
 8013af4:	4618      	mov	r0, r3
 8013af6:	3708      	adds	r7, #8
 8013af8:	46bd      	mov	sp, r7
 8013afa:	bd80      	pop	{r7, pc}
 8013afc:	52004000 	.word	0x52004000

08013b00 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8013b00:	b480      	push	{r7}
 8013b02:	b083      	sub	sp, #12
 8013b04:	af00      	add	r7, sp, #0
 8013b06:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8013b08:	bf00      	nop
 8013b0a:	370c      	adds	r7, #12
 8013b0c:	46bd      	mov	sp, r7
 8013b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b12:	4770      	bx	lr

08013b14 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8013b14:	b580      	push	{r7, lr}
 8013b16:	b086      	sub	sp, #24
 8013b18:	af00      	add	r7, sp, #0
 8013b1a:	60f8      	str	r0, [r7, #12]
 8013b1c:	60b9      	str	r1, [r7, #8]
 8013b1e:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8013b20:	68fb      	ldr	r3, [r7, #12]
 8013b22:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013b26:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8013b28:	7dfb      	ldrb	r3, [r7, #23]
 8013b2a:	2b02      	cmp	r3, #2
 8013b2c:	d101      	bne.n	8013b32 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8013b2e:	2302      	movs	r3, #2
 8013b30:	e021      	b.n	8013b76 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8013b32:	7dfb      	ldrb	r3, [r7, #23]
 8013b34:	2b01      	cmp	r3, #1
 8013b36:	d002      	beq.n	8013b3e <HAL_SDRAM_SendCommand+0x2a>
 8013b38:	7dfb      	ldrb	r3, [r7, #23]
 8013b3a:	2b05      	cmp	r3, #5
 8013b3c:	d118      	bne.n	8013b70 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8013b3e:	68fb      	ldr	r3, [r7, #12]
 8013b40:	2202      	movs	r2, #2
 8013b42:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8013b46:	68fb      	ldr	r3, [r7, #12]
 8013b48:	681b      	ldr	r3, [r3, #0]
 8013b4a:	687a      	ldr	r2, [r7, #4]
 8013b4c:	68b9      	ldr	r1, [r7, #8]
 8013b4e:	4618      	mov	r0, r3
 8013b50:	f000 f904 	bl	8013d5c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8013b54:	68bb      	ldr	r3, [r7, #8]
 8013b56:	681b      	ldr	r3, [r3, #0]
 8013b58:	2b02      	cmp	r3, #2
 8013b5a:	d104      	bne.n	8013b66 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8013b5c:	68fb      	ldr	r3, [r7, #12]
 8013b5e:	2205      	movs	r2, #5
 8013b60:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8013b64:	e006      	b.n	8013b74 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8013b66:	68fb      	ldr	r3, [r7, #12]
 8013b68:	2201      	movs	r2, #1
 8013b6a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8013b6e:	e001      	b.n	8013b74 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8013b70:	2301      	movs	r3, #1
 8013b72:	e000      	b.n	8013b76 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8013b74:	2300      	movs	r3, #0
}
 8013b76:	4618      	mov	r0, r3
 8013b78:	3718      	adds	r7, #24
 8013b7a:	46bd      	mov	sp, r7
 8013b7c:	bd80      	pop	{r7, pc}

08013b7e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8013b7e:	b580      	push	{r7, lr}
 8013b80:	b082      	sub	sp, #8
 8013b82:	af00      	add	r7, sp, #0
 8013b84:	6078      	str	r0, [r7, #4]
 8013b86:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013b8e:	b2db      	uxtb	r3, r3
 8013b90:	2b02      	cmp	r3, #2
 8013b92:	d101      	bne.n	8013b98 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8013b94:	2302      	movs	r3, #2
 8013b96:	e016      	b.n	8013bc6 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013b9e:	b2db      	uxtb	r3, r3
 8013ba0:	2b01      	cmp	r3, #1
 8013ba2:	d10f      	bne.n	8013bc4 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	2202      	movs	r2, #2
 8013ba8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	681b      	ldr	r3, [r3, #0]
 8013bb0:	6839      	ldr	r1, [r7, #0]
 8013bb2:	4618      	mov	r0, r3
 8013bb4:	f000 f8f6 	bl	8013da4 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	2201      	movs	r2, #1
 8013bbc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8013bc0:	2300      	movs	r3, #0
 8013bc2:	e000      	b.n	8013bc6 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8013bc4:	2301      	movs	r3, #1
}
 8013bc6:	4618      	mov	r0, r3
 8013bc8:	3708      	adds	r7, #8
 8013bca:	46bd      	mov	sp, r7
 8013bcc:	bd80      	pop	{r7, pc}
	...

08013bd0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8013bd0:	b480      	push	{r7}
 8013bd2:	b083      	sub	sp, #12
 8013bd4:	af00      	add	r7, sp, #0
 8013bd6:	6078      	str	r0, [r7, #4]
 8013bd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8013bda:	683b      	ldr	r3, [r7, #0]
 8013bdc:	681b      	ldr	r3, [r3, #0]
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d121      	bne.n	8013c26 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	681a      	ldr	r2, [r3, #0]
 8013be6:	4b27      	ldr	r3, [pc, #156]	; (8013c84 <FMC_SDRAM_Init+0xb4>)
 8013be8:	4013      	ands	r3, r2
 8013bea:	683a      	ldr	r2, [r7, #0]
 8013bec:	6851      	ldr	r1, [r2, #4]
 8013bee:	683a      	ldr	r2, [r7, #0]
 8013bf0:	6892      	ldr	r2, [r2, #8]
 8013bf2:	4311      	orrs	r1, r2
 8013bf4:	683a      	ldr	r2, [r7, #0]
 8013bf6:	68d2      	ldr	r2, [r2, #12]
 8013bf8:	4311      	orrs	r1, r2
 8013bfa:	683a      	ldr	r2, [r7, #0]
 8013bfc:	6912      	ldr	r2, [r2, #16]
 8013bfe:	4311      	orrs	r1, r2
 8013c00:	683a      	ldr	r2, [r7, #0]
 8013c02:	6952      	ldr	r2, [r2, #20]
 8013c04:	4311      	orrs	r1, r2
 8013c06:	683a      	ldr	r2, [r7, #0]
 8013c08:	6992      	ldr	r2, [r2, #24]
 8013c0a:	4311      	orrs	r1, r2
 8013c0c:	683a      	ldr	r2, [r7, #0]
 8013c0e:	69d2      	ldr	r2, [r2, #28]
 8013c10:	4311      	orrs	r1, r2
 8013c12:	683a      	ldr	r2, [r7, #0]
 8013c14:	6a12      	ldr	r2, [r2, #32]
 8013c16:	4311      	orrs	r1, r2
 8013c18:	683a      	ldr	r2, [r7, #0]
 8013c1a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8013c1c:	430a      	orrs	r2, r1
 8013c1e:	431a      	orrs	r2, r3
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	601a      	str	r2, [r3, #0]
 8013c24:	e026      	b.n	8013c74 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	681b      	ldr	r3, [r3, #0]
 8013c2a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8013c2e:	683b      	ldr	r3, [r7, #0]
 8013c30:	69d9      	ldr	r1, [r3, #28]
 8013c32:	683b      	ldr	r3, [r7, #0]
 8013c34:	6a1b      	ldr	r3, [r3, #32]
 8013c36:	4319      	orrs	r1, r3
 8013c38:	683b      	ldr	r3, [r7, #0]
 8013c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c3c:	430b      	orrs	r3, r1
 8013c3e:	431a      	orrs	r2, r3
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	685a      	ldr	r2, [r3, #4]
 8013c48:	4b0e      	ldr	r3, [pc, #56]	; (8013c84 <FMC_SDRAM_Init+0xb4>)
 8013c4a:	4013      	ands	r3, r2
 8013c4c:	683a      	ldr	r2, [r7, #0]
 8013c4e:	6851      	ldr	r1, [r2, #4]
 8013c50:	683a      	ldr	r2, [r7, #0]
 8013c52:	6892      	ldr	r2, [r2, #8]
 8013c54:	4311      	orrs	r1, r2
 8013c56:	683a      	ldr	r2, [r7, #0]
 8013c58:	68d2      	ldr	r2, [r2, #12]
 8013c5a:	4311      	orrs	r1, r2
 8013c5c:	683a      	ldr	r2, [r7, #0]
 8013c5e:	6912      	ldr	r2, [r2, #16]
 8013c60:	4311      	orrs	r1, r2
 8013c62:	683a      	ldr	r2, [r7, #0]
 8013c64:	6952      	ldr	r2, [r2, #20]
 8013c66:	4311      	orrs	r1, r2
 8013c68:	683a      	ldr	r2, [r7, #0]
 8013c6a:	6992      	ldr	r2, [r2, #24]
 8013c6c:	430a      	orrs	r2, r1
 8013c6e:	431a      	orrs	r2, r3
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8013c74:	2300      	movs	r3, #0
}
 8013c76:	4618      	mov	r0, r3
 8013c78:	370c      	adds	r7, #12
 8013c7a:	46bd      	mov	sp, r7
 8013c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c80:	4770      	bx	lr
 8013c82:	bf00      	nop
 8013c84:	ffff8000 	.word	0xffff8000

08013c88 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8013c88:	b480      	push	{r7}
 8013c8a:	b085      	sub	sp, #20
 8013c8c:	af00      	add	r7, sp, #0
 8013c8e:	60f8      	str	r0, [r7, #12]
 8013c90:	60b9      	str	r1, [r7, #8]
 8013c92:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d128      	bne.n	8013cec <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8013c9a:	68fb      	ldr	r3, [r7, #12]
 8013c9c:	689b      	ldr	r3, [r3, #8]
 8013c9e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8013ca2:	68bb      	ldr	r3, [r7, #8]
 8013ca4:	681b      	ldr	r3, [r3, #0]
 8013ca6:	1e59      	subs	r1, r3, #1
 8013ca8:	68bb      	ldr	r3, [r7, #8]
 8013caa:	685b      	ldr	r3, [r3, #4]
 8013cac:	3b01      	subs	r3, #1
 8013cae:	011b      	lsls	r3, r3, #4
 8013cb0:	4319      	orrs	r1, r3
 8013cb2:	68bb      	ldr	r3, [r7, #8]
 8013cb4:	689b      	ldr	r3, [r3, #8]
 8013cb6:	3b01      	subs	r3, #1
 8013cb8:	021b      	lsls	r3, r3, #8
 8013cba:	4319      	orrs	r1, r3
 8013cbc:	68bb      	ldr	r3, [r7, #8]
 8013cbe:	68db      	ldr	r3, [r3, #12]
 8013cc0:	3b01      	subs	r3, #1
 8013cc2:	031b      	lsls	r3, r3, #12
 8013cc4:	4319      	orrs	r1, r3
 8013cc6:	68bb      	ldr	r3, [r7, #8]
 8013cc8:	691b      	ldr	r3, [r3, #16]
 8013cca:	3b01      	subs	r3, #1
 8013ccc:	041b      	lsls	r3, r3, #16
 8013cce:	4319      	orrs	r1, r3
 8013cd0:	68bb      	ldr	r3, [r7, #8]
 8013cd2:	695b      	ldr	r3, [r3, #20]
 8013cd4:	3b01      	subs	r3, #1
 8013cd6:	051b      	lsls	r3, r3, #20
 8013cd8:	4319      	orrs	r1, r3
 8013cda:	68bb      	ldr	r3, [r7, #8]
 8013cdc:	699b      	ldr	r3, [r3, #24]
 8013cde:	3b01      	subs	r3, #1
 8013ce0:	061b      	lsls	r3, r3, #24
 8013ce2:	430b      	orrs	r3, r1
 8013ce4:	431a      	orrs	r2, r3
 8013ce6:	68fb      	ldr	r3, [r7, #12]
 8013ce8:	609a      	str	r2, [r3, #8]
 8013cea:	e02d      	b.n	8013d48 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8013cec:	68fb      	ldr	r3, [r7, #12]
 8013cee:	689a      	ldr	r2, [r3, #8]
 8013cf0:	4b19      	ldr	r3, [pc, #100]	; (8013d58 <FMC_SDRAM_Timing_Init+0xd0>)
 8013cf2:	4013      	ands	r3, r2
 8013cf4:	68ba      	ldr	r2, [r7, #8]
 8013cf6:	68d2      	ldr	r2, [r2, #12]
 8013cf8:	3a01      	subs	r2, #1
 8013cfa:	0311      	lsls	r1, r2, #12
 8013cfc:	68ba      	ldr	r2, [r7, #8]
 8013cfe:	6952      	ldr	r2, [r2, #20]
 8013d00:	3a01      	subs	r2, #1
 8013d02:	0512      	lsls	r2, r2, #20
 8013d04:	430a      	orrs	r2, r1
 8013d06:	431a      	orrs	r2, r3
 8013d08:	68fb      	ldr	r3, [r7, #12]
 8013d0a:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8013d0c:	68fb      	ldr	r3, [r7, #12]
 8013d0e:	68db      	ldr	r3, [r3, #12]
 8013d10:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8013d14:	68bb      	ldr	r3, [r7, #8]
 8013d16:	681b      	ldr	r3, [r3, #0]
 8013d18:	1e59      	subs	r1, r3, #1
 8013d1a:	68bb      	ldr	r3, [r7, #8]
 8013d1c:	685b      	ldr	r3, [r3, #4]
 8013d1e:	3b01      	subs	r3, #1
 8013d20:	011b      	lsls	r3, r3, #4
 8013d22:	4319      	orrs	r1, r3
 8013d24:	68bb      	ldr	r3, [r7, #8]
 8013d26:	689b      	ldr	r3, [r3, #8]
 8013d28:	3b01      	subs	r3, #1
 8013d2a:	021b      	lsls	r3, r3, #8
 8013d2c:	4319      	orrs	r1, r3
 8013d2e:	68bb      	ldr	r3, [r7, #8]
 8013d30:	691b      	ldr	r3, [r3, #16]
 8013d32:	3b01      	subs	r3, #1
 8013d34:	041b      	lsls	r3, r3, #16
 8013d36:	4319      	orrs	r1, r3
 8013d38:	68bb      	ldr	r3, [r7, #8]
 8013d3a:	699b      	ldr	r3, [r3, #24]
 8013d3c:	3b01      	subs	r3, #1
 8013d3e:	061b      	lsls	r3, r3, #24
 8013d40:	430b      	orrs	r3, r1
 8013d42:	431a      	orrs	r2, r3
 8013d44:	68fb      	ldr	r3, [r7, #12]
 8013d46:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 8013d48:	2300      	movs	r3, #0
}
 8013d4a:	4618      	mov	r0, r3
 8013d4c:	3714      	adds	r7, #20
 8013d4e:	46bd      	mov	sp, r7
 8013d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d54:	4770      	bx	lr
 8013d56:	bf00      	nop
 8013d58:	ff0f0fff 	.word	0xff0f0fff

08013d5c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8013d5c:	b480      	push	{r7}
 8013d5e:	b085      	sub	sp, #20
 8013d60:	af00      	add	r7, sp, #0
 8013d62:	60f8      	str	r0, [r7, #12]
 8013d64:	60b9      	str	r1, [r7, #8]
 8013d66:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 8013d68:	68fb      	ldr	r3, [r7, #12]
 8013d6a:	691a      	ldr	r2, [r3, #16]
 8013d6c:	4b0c      	ldr	r3, [pc, #48]	; (8013da0 <FMC_SDRAM_SendCommand+0x44>)
 8013d6e:	4013      	ands	r3, r2
 8013d70:	68ba      	ldr	r2, [r7, #8]
 8013d72:	6811      	ldr	r1, [r2, #0]
 8013d74:	68ba      	ldr	r2, [r7, #8]
 8013d76:	6852      	ldr	r2, [r2, #4]
 8013d78:	4311      	orrs	r1, r2
 8013d7a:	68ba      	ldr	r2, [r7, #8]
 8013d7c:	6892      	ldr	r2, [r2, #8]
 8013d7e:	3a01      	subs	r2, #1
 8013d80:	0152      	lsls	r2, r2, #5
 8013d82:	4311      	orrs	r1, r2
 8013d84:	68ba      	ldr	r2, [r7, #8]
 8013d86:	68d2      	ldr	r2, [r2, #12]
 8013d88:	0252      	lsls	r2, r2, #9
 8013d8a:	430a      	orrs	r2, r1
 8013d8c:	431a      	orrs	r2, r3
 8013d8e:	68fb      	ldr	r3, [r7, #12]
 8013d90:	611a      	str	r2, [r3, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8013d92:	2300      	movs	r3, #0
}
 8013d94:	4618      	mov	r0, r3
 8013d96:	3714      	adds	r7, #20
 8013d98:	46bd      	mov	sp, r7
 8013d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d9e:	4770      	bx	lr
 8013da0:	ffc00000 	.word	0xffc00000

08013da4 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8013da4:	b480      	push	{r7}
 8013da6:	b083      	sub	sp, #12
 8013da8:	af00      	add	r7, sp, #0
 8013daa:	6078      	str	r0, [r7, #4]
 8013dac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	695a      	ldr	r2, [r3, #20]
 8013db2:	4b07      	ldr	r3, [pc, #28]	; (8013dd0 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8013db4:	4013      	ands	r3, r2
 8013db6:	683a      	ldr	r2, [r7, #0]
 8013db8:	0052      	lsls	r2, r2, #1
 8013dba:	431a      	orrs	r2, r3
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8013dc0:	2300      	movs	r3, #0
}
 8013dc2:	4618      	mov	r0, r3
 8013dc4:	370c      	adds	r7, #12
 8013dc6:	46bd      	mov	sp, r7
 8013dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dcc:	4770      	bx	lr
 8013dce:	bf00      	nop
 8013dd0:	ffffc001 	.word	0xffffc001

08013dd4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8013dd4:	b480      	push	{r7}
 8013dd6:	b083      	sub	sp, #12
 8013dd8:	af00      	add	r7, sp, #0
 8013dda:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8013de2:	4618      	mov	r0, r3
 8013de4:	370c      	adds	r7, #12
 8013de6:	46bd      	mov	sp, r7
 8013de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dec:	4770      	bx	lr

08013dee <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8013dee:	b480      	push	{r7}
 8013df0:	b083      	sub	sp, #12
 8013df2:	af00      	add	r7, sp, #0
 8013df4:	6078      	str	r0, [r7, #4]
 8013df6:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8013df8:	683b      	ldr	r3, [r7, #0]
 8013dfa:	681a      	ldr	r2, [r3, #0]
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8013e02:	2300      	movs	r3, #0
}
 8013e04:	4618      	mov	r0, r3
 8013e06:	370c      	adds	r7, #12
 8013e08:	46bd      	mov	sp, r7
 8013e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e0e:	4770      	bx	lr

08013e10 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8013e10:	b480      	push	{r7}
 8013e12:	b085      	sub	sp, #20
 8013e14:	af00      	add	r7, sp, #0
 8013e16:	6078      	str	r0, [r7, #4]
 8013e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8013e1a:	2300      	movs	r3, #0
 8013e1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8013e1e:	683b      	ldr	r3, [r7, #0]
 8013e20:	681a      	ldr	r2, [r3, #0]
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8013e26:	683b      	ldr	r3, [r7, #0]
 8013e28:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8013e2a:	683b      	ldr	r3, [r7, #0]
 8013e2c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8013e2e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8013e30:	683b      	ldr	r3, [r7, #0]
 8013e32:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8013e34:	431a      	orrs	r2, r3
                       Command->CPSM);
 8013e36:	683b      	ldr	r3, [r7, #0]
 8013e38:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8013e3a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8013e3c:	68fa      	ldr	r2, [r7, #12]
 8013e3e:	4313      	orrs	r3, r2
 8013e40:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	68da      	ldr	r2, [r3, #12]
 8013e46:	4b06      	ldr	r3, [pc, #24]	; (8013e60 <SDMMC_SendCommand+0x50>)
 8013e48:	4013      	ands	r3, r2
 8013e4a:	68fa      	ldr	r2, [r7, #12]
 8013e4c:	431a      	orrs	r2, r3
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8013e52:	2300      	movs	r3, #0
}
 8013e54:	4618      	mov	r0, r3
 8013e56:	3714      	adds	r7, #20
 8013e58:	46bd      	mov	sp, r7
 8013e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e5e:	4770      	bx	lr
 8013e60:	fffee0c0 	.word	0xfffee0c0

08013e64 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8013e64:	b480      	push	{r7}
 8013e66:	b083      	sub	sp, #12
 8013e68:	af00      	add	r7, sp, #0
 8013e6a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	691b      	ldr	r3, [r3, #16]
 8013e70:	b2db      	uxtb	r3, r3
}
 8013e72:	4618      	mov	r0, r3
 8013e74:	370c      	adds	r7, #12
 8013e76:	46bd      	mov	sp, r7
 8013e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e7c:	4770      	bx	lr

08013e7e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8013e7e:	b480      	push	{r7}
 8013e80:	b085      	sub	sp, #20
 8013e82:	af00      	add	r7, sp, #0
 8013e84:	6078      	str	r0, [r7, #4]
 8013e86:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	3314      	adds	r3, #20
 8013e8c:	461a      	mov	r2, r3
 8013e8e:	683b      	ldr	r3, [r7, #0]
 8013e90:	4413      	add	r3, r2
 8013e92:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8013e94:	68fb      	ldr	r3, [r7, #12]
 8013e96:	681b      	ldr	r3, [r3, #0]
}
 8013e98:	4618      	mov	r0, r3
 8013e9a:	3714      	adds	r7, #20
 8013e9c:	46bd      	mov	sp, r7
 8013e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ea2:	4770      	bx	lr

08013ea4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8013ea4:	b580      	push	{r7, lr}
 8013ea6:	b088      	sub	sp, #32
 8013ea8:	af00      	add	r7, sp, #0
 8013eaa:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8013eac:	2300      	movs	r3, #0
 8013eae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8013eb0:	230c      	movs	r3, #12
 8013eb2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013eb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013eb8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013eba:	2300      	movs	r3, #0
 8013ebc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013ebe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013ec2:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	68db      	ldr	r3, [r3, #12]
 8013ec8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	68db      	ldr	r3, [r3, #12]
 8013ed4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013edc:	f107 0308 	add.w	r3, r7, #8
 8013ee0:	4619      	mov	r1, r3
 8013ee2:	6878      	ldr	r0, [r7, #4]
 8013ee4:	f7ff ff94 	bl	8013e10 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8013ee8:	4a0b      	ldr	r2, [pc, #44]	; (8013f18 <SDMMC_CmdStopTransfer+0x74>)
 8013eea:	210c      	movs	r1, #12
 8013eec:	6878      	ldr	r0, [r7, #4]
 8013eee:	f000 f815 	bl	8013f1c <SDMMC_GetCmdResp1>
 8013ef2:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	68db      	ldr	r3, [r3, #12]
 8013ef8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8013f00:	69fb      	ldr	r3, [r7, #28]
 8013f02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8013f06:	d101      	bne.n	8013f0c <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8013f08:	2300      	movs	r3, #0
 8013f0a:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8013f0c:	69fb      	ldr	r3, [r7, #28]
}
 8013f0e:	4618      	mov	r0, r3
 8013f10:	3720      	adds	r7, #32
 8013f12:	46bd      	mov	sp, r7
 8013f14:	bd80      	pop	{r7, pc}
 8013f16:	bf00      	nop
 8013f18:	05f5e100 	.word	0x05f5e100

08013f1c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8013f1c:	b580      	push	{r7, lr}
 8013f1e:	b088      	sub	sp, #32
 8013f20:	af00      	add	r7, sp, #0
 8013f22:	60f8      	str	r0, [r7, #12]
 8013f24:	460b      	mov	r3, r1
 8013f26:	607a      	str	r2, [r7, #4]
 8013f28:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8013f2a:	4b70      	ldr	r3, [pc, #448]	; (80140ec <SDMMC_GetCmdResp1+0x1d0>)
 8013f2c:	681b      	ldr	r3, [r3, #0]
 8013f2e:	4a70      	ldr	r2, [pc, #448]	; (80140f0 <SDMMC_GetCmdResp1+0x1d4>)
 8013f30:	fba2 2303 	umull	r2, r3, r2, r3
 8013f34:	0a5a      	lsrs	r2, r3, #9
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	fb02 f303 	mul.w	r3, r2, r3
 8013f3c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8013f3e:	69fb      	ldr	r3, [r7, #28]
 8013f40:	1e5a      	subs	r2, r3, #1
 8013f42:	61fa      	str	r2, [r7, #28]
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	d102      	bne.n	8013f4e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013f48:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013f4c:	e0c9      	b.n	80140e2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8013f4e:	68fb      	ldr	r3, [r7, #12]
 8013f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013f52:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8013f54:	69ba      	ldr	r2, [r7, #24]
 8013f56:	4b67      	ldr	r3, [pc, #412]	; (80140f4 <SDMMC_GetCmdResp1+0x1d8>)
 8013f58:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d0ef      	beq.n	8013f3e <SDMMC_GetCmdResp1+0x22>
 8013f5e:	69bb      	ldr	r3, [r7, #24]
 8013f60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d1ea      	bne.n	8013f3e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013f68:	68fb      	ldr	r3, [r7, #12]
 8013f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013f6c:	f003 0304 	and.w	r3, r3, #4
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	d004      	beq.n	8013f7e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013f74:	68fb      	ldr	r3, [r7, #12]
 8013f76:	2204      	movs	r2, #4
 8013f78:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013f7a:	2304      	movs	r3, #4
 8013f7c:	e0b1      	b.n	80140e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013f7e:	68fb      	ldr	r3, [r7, #12]
 8013f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013f82:	f003 0301 	and.w	r3, r3, #1
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	d004      	beq.n	8013f94 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013f8a:	68fb      	ldr	r3, [r7, #12]
 8013f8c:	2201      	movs	r2, #1
 8013f8e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013f90:	2301      	movs	r3, #1
 8013f92:	e0a6      	b.n	80140e2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013f94:	68fb      	ldr	r3, [r7, #12]
 8013f96:	4a58      	ldr	r2, [pc, #352]	; (80140f8 <SDMMC_GetCmdResp1+0x1dc>)
 8013f98:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8013f9a:	68f8      	ldr	r0, [r7, #12]
 8013f9c:	f7ff ff62 	bl	8013e64 <SDMMC_GetCommandResponse>
 8013fa0:	4603      	mov	r3, r0
 8013fa2:	461a      	mov	r2, r3
 8013fa4:	7afb      	ldrb	r3, [r7, #11]
 8013fa6:	4293      	cmp	r3, r2
 8013fa8:	d001      	beq.n	8013fae <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013faa:	2301      	movs	r3, #1
 8013fac:	e099      	b.n	80140e2 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8013fae:	2100      	movs	r1, #0
 8013fb0:	68f8      	ldr	r0, [r7, #12]
 8013fb2:	f7ff ff64 	bl	8013e7e <SDMMC_GetResponse>
 8013fb6:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8013fb8:	697a      	ldr	r2, [r7, #20]
 8013fba:	4b50      	ldr	r3, [pc, #320]	; (80140fc <SDMMC_GetCmdResp1+0x1e0>)
 8013fbc:	4013      	ands	r3, r2
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	d101      	bne.n	8013fc6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8013fc2:	2300      	movs	r3, #0
 8013fc4:	e08d      	b.n	80140e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8013fc6:	697b      	ldr	r3, [r7, #20]
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	da02      	bge.n	8013fd2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8013fcc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8013fd0:	e087      	b.n	80140e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8013fd2:	697b      	ldr	r3, [r7, #20]
 8013fd4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	d001      	beq.n	8013fe0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8013fdc:	2340      	movs	r3, #64	; 0x40
 8013fde:	e080      	b.n	80140e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8013fe0:	697b      	ldr	r3, [r7, #20]
 8013fe2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d001      	beq.n	8013fee <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8013fea:	2380      	movs	r3, #128	; 0x80
 8013fec:	e079      	b.n	80140e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8013fee:	697b      	ldr	r3, [r7, #20]
 8013ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	d002      	beq.n	8013ffe <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8013ff8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013ffc:	e071      	b.n	80140e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8013ffe:	697b      	ldr	r3, [r7, #20]
 8014000:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8014004:	2b00      	cmp	r3, #0
 8014006:	d002      	beq.n	801400e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8014008:	f44f 7300 	mov.w	r3, #512	; 0x200
 801400c:	e069      	b.n	80140e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801400e:	697b      	ldr	r3, [r7, #20]
 8014010:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8014014:	2b00      	cmp	r3, #0
 8014016:	d002      	beq.n	801401e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8014018:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801401c:	e061      	b.n	80140e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801401e:	697b      	ldr	r3, [r7, #20]
 8014020:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8014024:	2b00      	cmp	r3, #0
 8014026:	d002      	beq.n	801402e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8014028:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801402c:	e059      	b.n	80140e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801402e:	697b      	ldr	r3, [r7, #20]
 8014030:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8014034:	2b00      	cmp	r3, #0
 8014036:	d002      	beq.n	801403e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8014038:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801403c:	e051      	b.n	80140e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801403e:	697b      	ldr	r3, [r7, #20]
 8014040:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014044:	2b00      	cmp	r3, #0
 8014046:	d002      	beq.n	801404e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8014048:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801404c:	e049      	b.n	80140e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801404e:	697b      	ldr	r3, [r7, #20]
 8014050:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8014054:	2b00      	cmp	r3, #0
 8014056:	d002      	beq.n	801405e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8014058:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801405c:	e041      	b.n	80140e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801405e:	697b      	ldr	r3, [r7, #20]
 8014060:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8014064:	2b00      	cmp	r3, #0
 8014066:	d002      	beq.n	801406e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8014068:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801406c:	e039      	b.n	80140e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801406e:	697b      	ldr	r3, [r7, #20]
 8014070:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8014074:	2b00      	cmp	r3, #0
 8014076:	d002      	beq.n	801407e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8014078:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801407c:	e031      	b.n	80140e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801407e:	697b      	ldr	r3, [r7, #20]
 8014080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014084:	2b00      	cmp	r3, #0
 8014086:	d002      	beq.n	801408e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8014088:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801408c:	e029      	b.n	80140e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801408e:	697b      	ldr	r3, [r7, #20]
 8014090:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8014094:	2b00      	cmp	r3, #0
 8014096:	d002      	beq.n	801409e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8014098:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801409c:	e021      	b.n	80140e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801409e:	697b      	ldr	r3, [r7, #20]
 80140a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d002      	beq.n	80140ae <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80140a8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80140ac:	e019      	b.n	80140e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80140ae:	697b      	ldr	r3, [r7, #20]
 80140b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	d002      	beq.n	80140be <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80140b8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80140bc:	e011      	b.n	80140e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80140be:	697b      	ldr	r3, [r7, #20]
 80140c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80140c4:	2b00      	cmp	r3, #0
 80140c6:	d002      	beq.n	80140ce <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80140c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80140cc:	e009      	b.n	80140e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80140ce:	697b      	ldr	r3, [r7, #20]
 80140d0:	f003 0308 	and.w	r3, r3, #8
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	d002      	beq.n	80140de <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80140d8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80140dc:	e001      	b.n	80140e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80140de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80140e2:	4618      	mov	r0, r3
 80140e4:	3720      	adds	r7, #32
 80140e6:	46bd      	mov	sp, r7
 80140e8:	bd80      	pop	{r7, pc}
 80140ea:	bf00      	nop
 80140ec:	240000f4 	.word	0x240000f4
 80140f0:	10624dd3 	.word	0x10624dd3
 80140f4:	00200045 	.word	0x00200045
 80140f8:	002000c5 	.word	0x002000c5
 80140fc:	fdffe008 	.word	0xfdffe008

08014100 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8014100:	f8df d034 	ldr.w	sp, [pc, #52]	; 8014138 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8014104:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8014106:	e003      	b.n	8014110 <LoopCopyDataInit>

08014108 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8014108:	4b0c      	ldr	r3, [pc, #48]	; (801413c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 801410a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 801410c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 801410e:	3104      	adds	r1, #4

08014110 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8014110:	480b      	ldr	r0, [pc, #44]	; (8014140 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8014112:	4b0c      	ldr	r3, [pc, #48]	; (8014144 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8014114:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8014116:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8014118:	d3f6      	bcc.n	8014108 <CopyDataInit>
  ldr  r2, =_sbss
 801411a:	4a0b      	ldr	r2, [pc, #44]	; (8014148 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 801411c:	e002      	b.n	8014124 <LoopFillZerobss>

0801411e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 801411e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8014120:	f842 3b04 	str.w	r3, [r2], #4

08014124 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8014124:	4b09      	ldr	r3, [pc, #36]	; (801414c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8014126:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8014128:	d3f9      	bcc.n	801411e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 801412a:	f7f4 fe5f 	bl	8008dec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801412e:	f001 fba9 	bl	8015884 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8014132:	f000 fafd 	bl	8014730 <main>
  bx  lr    
 8014136:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8014138:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 801413c:	0801c1e0 	.word	0x0801c1e0
  ldr  r0, =_sdata
 8014140:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8014144:	240005fc 	.word	0x240005fc
  ldr  r2, =_sbss
 8014148:	24000600 	.word	0x24000600
  ldr  r3, = _ebss
 801414c:	2400e220 	.word	0x2400e220

08014150 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8014150:	e7fe      	b.n	8014150 <ADC3_IRQHandler>
	...

08014154 <BSP_AUDIO_OUT_TransferComplete_CallBack>:
  * @brief  Manages the full Transfer complete event.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_OUT_TransferComplete_CallBack(uint32_t Instance)
{
 8014154:	b480      	push	{r7}
 8014156:	b083      	sub	sp, #12
 8014158:	af00      	add	r7, sp, #0
 801415a:	6078      	str	r0, [r7, #4]
    if(audio_state == AUDIO_STATE_PLAYING)
 801415c:	4b06      	ldr	r3, [pc, #24]	; (8014178 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x24>)
 801415e:	781b      	ldrb	r3, [r3, #0]
 8014160:	2b02      	cmp	r3, #2
 8014162:	d103      	bne.n	801416c <BSP_AUDIO_OUT_TransferComplete_CallBack+0x18>
  {
    /* allows AUDIO_Process() to refill 2nd part of the buffer  */
    buffer_ctl.state = BUFFER_OFFSET_FULL;
 8014164:	4b05      	ldr	r3, [pc, #20]	; (801417c <BSP_AUDIO_OUT_TransferComplete_CallBack+0x28>)
 8014166:	2202      	movs	r2, #2
 8014168:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
  }
}
 801416c:	bf00      	nop
 801416e:	370c      	adds	r7, #12
 8014170:	46bd      	mov	sp, r7
 8014172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014176:	4770      	bx	lr
 8014178:	24001c50 	.word	0x24001c50
 801417c:	24001440 	.word	0x24001440

08014180 <BSP_AUDIO_OUT_HalfTransfer_CallBack>:
  * @brief  Manages the DMA Half Transfer complete event.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_OUT_HalfTransfer_CallBack(uint32_t Instance)
{
 8014180:	b480      	push	{r7}
 8014182:	b083      	sub	sp, #12
 8014184:	af00      	add	r7, sp, #0
 8014186:	6078      	str	r0, [r7, #4]
    if(audio_state == AUDIO_STATE_PLAYING)
 8014188:	4b06      	ldr	r3, [pc, #24]	; (80141a4 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x24>)
 801418a:	781b      	ldrb	r3, [r3, #0]
 801418c:	2b02      	cmp	r3, #2
 801418e:	d103      	bne.n	8014198 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x18>
  {
    /* allows AUDIO_Process() to refill 1st part of the buffer  */
    buffer_ctl.state = BUFFER_OFFSET_HALF;
 8014190:	4b05      	ldr	r3, [pc, #20]	; (80141a8 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x28>)
 8014192:	2201      	movs	r2, #1
 8014194:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
  }

}
 8014198:	bf00      	nop
 801419a:	370c      	adds	r7, #12
 801419c:	46bd      	mov	sp, r7
 801419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141a2:	4770      	bx	lr
 80141a4:	24001c50 	.word	0x24001c50
 80141a8:	24001440 	.word	0x24001440

080141ac <BSP_AUDIO_OUT_Error_CallBack>:
  * @brief  Manages the DMA FIFO error event.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_OUT_Error_CallBack(uint32_t Instance)
{
 80141ac:	b580      	push	{r7, lr}
 80141ae:	b082      	sub	sp, #8
 80141b0:	af00      	add	r7, sp, #0
 80141b2:	6078      	str	r0, [r7, #4]
  /* Display message on the LCD screen */
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_RED);
 80141b4:	480f      	ldr	r0, [pc, #60]	; (80141f4 <BSP_AUDIO_OUT_Error_CallBack+0x48>)
 80141b6:	f000 fddf 	bl	8014d78 <UTIL_LCD_SetBackColor>
  UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"       DMA  ERROR     ", CENTER_MODE);
 80141ba:	f000 fe05 	bl	8014dc8 <UTIL_LCD_GetFont>
 80141be:	4603      	mov	r3, r0
 80141c0:	88db      	ldrh	r3, [r3, #6]
 80141c2:	461a      	mov	r2, r3
 80141c4:	4613      	mov	r3, r2
 80141c6:	00db      	lsls	r3, r3, #3
 80141c8:	1a9b      	subs	r3, r3, r2
 80141ca:	005b      	lsls	r3, r3, #1
 80141cc:	4619      	mov	r1, r3
 80141ce:	2301      	movs	r3, #1
 80141d0:	4a09      	ldr	r2, [pc, #36]	; (80141f8 <BSP_AUDIO_OUT_Error_CallBack+0x4c>)
 80141d2:	2000      	movs	r0, #0
 80141d4:	f000 fedc 	bl	8014f90 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_WHITE);
 80141d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80141dc:	f000 fdcc 	bl	8014d78 <UTIL_LCD_SetBackColor>

  /* Stop the program with an infinite loop */
  while (BSP_PB_GetState(BUTTON_WAKEUP) != RESET)
 80141e0:	bf00      	nop
 80141e2:	2000      	movs	r0, #0
 80141e4:	f7f1 f96c 	bl	80054c0 <BSP_PB_GetState>
 80141e8:	4603      	mov	r3, r0
 80141ea:	2b00      	cmp	r3, #0
  {
    return;
 80141ec:	bf00      	nop
  }

  /* could also generate a system reset to recover from the error */
  /* .... */
}
 80141ee:	3708      	adds	r7, #8
 80141f0:	46bd      	mov	sp, r7
 80141f2:	bd80      	pop	{r7, pc}
 80141f4:	ffff0000 	.word	0xffff0000
 80141f8:	08015d78 	.word	0x08015d78

080141fc <AudioRecord>:
  *   Audio peripheral.
  * @param  None
  * @retval None
*/
void AudioRecord(void)
{
 80141fc:	b580      	push	{r7, lr}
 80141fe:	b086      	sub	sp, #24
 8014200:	af02      	add	r7, sp, #8
   uint32_t channel_nbr = 2;
 8014202:	2302      	movs	r3, #2
 8014204:	60fb      	str	r3, [r7, #12]

  uint32_t x_size, y_size;

  BSP_LCD_GetXSize(0, &x_size);
 8014206:	f107 0308 	add.w	r3, r7, #8
 801420a:	4619      	mov	r1, r3
 801420c:	2000      	movs	r0, #0
 801420e:	f7f3 fe89 	bl	8007f24 <BSP_LCD_GetXSize>
  BSP_LCD_GetYSize(0, &y_size);
 8014212:	1d3b      	adds	r3, r7, #4
 8014214:	4619      	mov	r1, r3
 8014216:	2000      	movs	r0, #0
 8014218:	f7f3 feac 	bl	8007f74 <BSP_LCD_GetYSize>

  /* Clear the LCD */
  UTIL_LCD_Clear(UTIL_LCD_COLOR_WHITE);
 801421c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014220:	f000 fe6a 	bl	8014ef8 <UTIL_LCD_Clear>
  /* Set Audio Demo description */
  UTIL_LCD_FillRect(0, 0, x_size, 90, UTIL_LCD_COLOR_BLUE);
 8014224:	68ba      	ldr	r2, [r7, #8]
 8014226:	4b56      	ldr	r3, [pc, #344]	; (8014380 <AudioRecord+0x184>)
 8014228:	9300      	str	r3, [sp, #0]
 801422a:	235a      	movs	r3, #90	; 0x5a
 801422c:	2100      	movs	r1, #0
 801422e:	2000      	movs	r0, #0
 8014230:	f000 ff9c 	bl	801516c <UTIL_LCD_FillRect>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 8014234:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014238:	f000 fd8a 	bl	8014d50 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLUE);
 801423c:	4850      	ldr	r0, [pc, #320]	; (8014380 <AudioRecord+0x184>)
 801423e:	f000 fd9b 	bl	8014d78 <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetFont(&Font24);
 8014242:	4850      	ldr	r0, [pc, #320]	; (8014384 <AudioRecord+0x188>)
 8014244:	f000 fdac 	bl	8014da0 <UTIL_LCD_SetFont>
  UTIL_LCD_DisplayStringAt(0, 0, (uint8_t *)"AUDIO RECORD SAI PDM EXAMPLE", CENTER_MODE);
 8014248:	2301      	movs	r3, #1
 801424a:	4a4f      	ldr	r2, [pc, #316]	; (8014388 <AudioRecord+0x18c>)
 801424c:	2100      	movs	r1, #0
 801424e:	2000      	movs	r0, #0
 8014250:	f000 fe9e 	bl	8014f90 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_SetFont(&Font16);
 8014254:	484d      	ldr	r0, [pc, #308]	; (801438c <AudioRecord+0x190>)
 8014256:	f000 fda3 	bl	8014da0 <UTIL_LCD_SetFont>
  UTIL_LCD_DisplayStringAt(0, 24, (uint8_t *)"Make sure the SW2 is in position PDM ", CENTER_MODE);
 801425a:	2301      	movs	r3, #1
 801425c:	4a4c      	ldr	r2, [pc, #304]	; (8014390 <AudioRecord+0x194>)
 801425e:	2118      	movs	r1, #24
 8014260:	2000      	movs	r0, #0
 8014262:	f000 fe95 	bl	8014f90 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, 40,  (uint8_t *)"Press User button for next menu", CENTER_MODE);
 8014266:	2301      	movs	r3, #1
 8014268:	4a4a      	ldr	r2, [pc, #296]	; (8014394 <AudioRecord+0x198>)
 801426a:	2128      	movs	r1, #40	; 0x28
 801426c:	2000      	movs	r0, #0
 801426e:	f000 fe8f 	bl	8014f90 <UTIL_LCD_DisplayStringAt>
  /* Set the LCD Text Color */
  UTIL_LCD_DrawRect(10, 100, x_size - 20, y_size - 110, UTIL_LCD_COLOR_BLUE);
 8014272:	68bb      	ldr	r3, [r7, #8]
 8014274:	f1a3 0214 	sub.w	r2, r3, #20
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	3b6e      	subs	r3, #110	; 0x6e
 801427c:	4940      	ldr	r1, [pc, #256]	; (8014380 <AudioRecord+0x184>)
 801427e:	9100      	str	r1, [sp, #0]
 8014280:	2164      	movs	r1, #100	; 0x64
 8014282:	200a      	movs	r0, #10
 8014284:	f000 ff32 	bl	80150ec <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(11, 101, x_size - 22, y_size - 112, UTIL_LCD_COLOR_BLUE);
 8014288:	68bb      	ldr	r3, [r7, #8]
 801428a:	f1a3 0216 	sub.w	r2, r3, #22
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	3b70      	subs	r3, #112	; 0x70
 8014292:	493b      	ldr	r1, [pc, #236]	; (8014380 <AudioRecord+0x184>)
 8014294:	9100      	str	r1, [sp, #0]
 8014296:	2165      	movs	r1, #101	; 0x65
 8014298:	200b      	movs	r0, #11
 801429a:	f000 ff27 	bl	80150ec <UTIL_LCD_DrawRect>

  AudioFreq_ptr = AudioFreq+2; /* AUDIO_FREQUENCY_16K; */
 801429e:	4a3e      	ldr	r2, [pc, #248]	; (8014398 <AudioRecord+0x19c>)
 80142a0:	4b3e      	ldr	r3, [pc, #248]	; (801439c <AudioRecord+0x1a0>)
 80142a2:	601a      	str	r2, [r3, #0]

  AudioOutInit.Device = AUDIO_OUT_DEVICE_AUTO;
 80142a4:	4b3e      	ldr	r3, [pc, #248]	; (80143a0 <AudioRecord+0x1a4>)
 80142a6:	2204      	movs	r2, #4
 80142a8:	601a      	str	r2, [r3, #0]
  AudioOutInit.ChannelsNbr = channel_nbr;
 80142aa:	4a3d      	ldr	r2, [pc, #244]	; (80143a0 <AudioRecord+0x1a4>)
 80142ac:	68fb      	ldr	r3, [r7, #12]
 80142ae:	60d3      	str	r3, [r2, #12]
  AudioOutInit.SampleRate = *AudioFreq_ptr;
 80142b0:	4b3a      	ldr	r3, [pc, #232]	; (801439c <AudioRecord+0x1a0>)
 80142b2:	681b      	ldr	r3, [r3, #0]
 80142b4:	681b      	ldr	r3, [r3, #0]
 80142b6:	4a3a      	ldr	r2, [pc, #232]	; (80143a0 <AudioRecord+0x1a4>)
 80142b8:	6053      	str	r3, [r2, #4]
  AudioOutInit.BitsPerSample = AUDIO_RESOLUTION_16B;
 80142ba:	4b39      	ldr	r3, [pc, #228]	; (80143a0 <AudioRecord+0x1a4>)
 80142bc:	2210      	movs	r2, #16
 80142be:	609a      	str	r2, [r3, #8]
  AudioOutInit.Volume = VolumeLevel;
 80142c0:	4b38      	ldr	r3, [pc, #224]	; (80143a4 <AudioRecord+0x1a8>)
 80142c2:	681b      	ldr	r3, [r3, #0]
 80142c4:	4a36      	ldr	r2, [pc, #216]	; (80143a0 <AudioRecord+0x1a4>)
 80142c6:	6113      	str	r3, [r2, #16]

  AudioInInit.Device = AUDIO_IN_DEVICE_DIGITAL_MIC;
 80142c8:	4b37      	ldr	r3, [pc, #220]	; (80143a8 <AudioRecord+0x1ac>)
 80142ca:	2210      	movs	r2, #16
 80142cc:	601a      	str	r2, [r3, #0]
  AudioInInit.ChannelsNbr = channel_nbr;
 80142ce:	4a36      	ldr	r2, [pc, #216]	; (80143a8 <AudioRecord+0x1ac>)
 80142d0:	68fb      	ldr	r3, [r7, #12]
 80142d2:	60d3      	str	r3, [r2, #12]
  AudioInInit.SampleRate = *AudioFreq_ptr;
 80142d4:	4b31      	ldr	r3, [pc, #196]	; (801439c <AudioRecord+0x1a0>)
 80142d6:	681b      	ldr	r3, [r3, #0]
 80142d8:	681b      	ldr	r3, [r3, #0]
 80142da:	4a33      	ldr	r2, [pc, #204]	; (80143a8 <AudioRecord+0x1ac>)
 80142dc:	6053      	str	r3, [r2, #4]
  AudioInInit.BitsPerSample = AUDIO_RESOLUTION_16B;
 80142de:	4b32      	ldr	r3, [pc, #200]	; (80143a8 <AudioRecord+0x1ac>)
 80142e0:	2210      	movs	r2, #16
 80142e2:	609a      	str	r2, [r3, #8]
  AudioInInit.Volume = VolumeLevel;
 80142e4:	4b2f      	ldr	r3, [pc, #188]	; (80143a4 <AudioRecord+0x1a8>)
 80142e6:	681b      	ldr	r3, [r3, #0]
 80142e8:	4a2f      	ldr	r2, [pc, #188]	; (80143a8 <AudioRecord+0x1ac>)
 80142ea:	6113      	str	r3, [r2, #16]

  BSP_JOY_Init(JOY1, JOY_MODE_GPIO, JOY_ALL);
 80142ec:	221f      	movs	r2, #31
 80142ee:	2100      	movs	r1, #0
 80142f0:	2000      	movs	r0, #0
 80142f2:	f7f1 f915 	bl	8005520 <BSP_JOY_Init>

  /* Initialize Audio Recorder with 2 channels to be used */
  BSP_AUDIO_IN_Init(1, &AudioInInit);
 80142f6:	492c      	ldr	r1, [pc, #176]	; (80143a8 <AudioRecord+0x1ac>)
 80142f8:	2001      	movs	r0, #1
 80142fa:	f7f1 fdd1 	bl	8005ea0 <BSP_AUDIO_IN_Init>
  BSP_AUDIO_IN_GetState(1, &InState);
 80142fe:	492b      	ldr	r1, [pc, #172]	; (80143ac <AudioRecord+0x1b0>)
 8014300:	2001      	movs	r0, #1
 8014302:	f7f2 fa2b 	bl	800675c <BSP_AUDIO_IN_GetState>

  BSP_AUDIO_OUT_Init(0, &AudioOutInit);
 8014306:	4926      	ldr	r1, [pc, #152]	; (80143a0 <AudioRecord+0x1a4>)
 8014308:	2000      	movs	r0, #0
 801430a:	f7f1 fa4b 	bl	80057a4 <BSP_AUDIO_OUT_Init>

  BSP_AUDIO_OUT_SetDevice(0, AUDIO_OUT_DEVICE_HEADPHONE);
 801430e:	2102      	movs	r1, #2
 8014310:	2000      	movs	r0, #0
 8014312:	f7f1 fd5f 	bl	8005dd4 <BSP_AUDIO_OUT_SetDevice>

  /* Start Recording */
  UTIL_LCD_DisplayStringAt(0, 190, (uint8_t *)"Start Recording ", CENTER_MODE);
 8014316:	2301      	movs	r3, #1
 8014318:	4a25      	ldr	r2, [pc, #148]	; (80143b0 <AudioRecord+0x1b4>)
 801431a:	21be      	movs	r1, #190	; 0xbe
 801431c:	2000      	movs	r0, #0
 801431e:	f000 fe37 	bl	8014f90 <UTIL_LCD_DisplayStringAt>
  BSP_AUDIO_IN_RecordPDM(1, (uint8_t*)&recordPDMBuf, 2*AUDIO_IN_PDM_BUFFER_SIZE);
 8014322:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014326:	4923      	ldr	r1, [pc, #140]	; (80143b4 <AudioRecord+0x1b8>)
 8014328:	2001      	movs	r0, #1
 801432a:	f7f2 f9e5 	bl	80066f8 <BSP_AUDIO_IN_RecordPDM>

  HAL_Delay(1200);
 801432e:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8014332:	f7f4 fe6b 	bl	800900c <HAL_Delay>

  /* Play the recorded buffer*/
  UTIL_LCD_DisplayStringAt(0, 220, (uint8_t *)"Play the recorded buffer... ", CENTER_MODE);
 8014336:	2301      	movs	r3, #1
 8014338:	4a1f      	ldr	r2, [pc, #124]	; (80143b8 <AudioRecord+0x1bc>)
 801433a:	21dc      	movs	r1, #220	; 0xdc
 801433c:	2000      	movs	r0, #0
 801433e:	f000 fe27 	bl	8014f90 <UTIL_LCD_DisplayStringAt>
  BSP_AUDIO_OUT_Play(0, (uint8_t*)&RecPlayback[0], 2*RECORD_BUFFER_SIZE);
 8014342:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8014346:	491d      	ldr	r1, [pc, #116]	; (80143bc <AudioRecord+0x1c0>)
 8014348:	2000      	movs	r0, #0
 801434a:	f7f1 fc7b 	bl	8005c44 <BSP_AUDIO_OUT_Play>


  while (1)
  {
    if (CheckForUserInput() > 0)
 801434e:	f000 fb41 	bl	80149d4 <CheckForUserInput>
 8014352:	4603      	mov	r3, r0
 8014354:	2b00      	cmp	r3, #0
 8014356:	d0fa      	beq.n	801434e <AudioRecord+0x152>
    {
      ButtonState = 0;
 8014358:	4b19      	ldr	r3, [pc, #100]	; (80143c0 <AudioRecord+0x1c4>)
 801435a:	2200      	movs	r2, #0
 801435c:	601a      	str	r2, [r3, #0]
      BSP_AUDIO_OUT_Stop(0);
 801435e:	2000      	movs	r0, #0
 8014360:	f7f1 fcea 	bl	8005d38 <BSP_AUDIO_OUT_Stop>
      BSP_AUDIO_OUT_DeInit(0);
 8014364:	2000      	movs	r0, #0
 8014366:	f7f1 fb17 	bl	8005998 <BSP_AUDIO_OUT_DeInit>
      BSP_AUDIO_IN_Stop(1);
 801436a:	2001      	movs	r0, #1
 801436c:	f7f2 f982 	bl	8006674 <BSP_AUDIO_IN_Stop>
      BSP_AUDIO_IN_DeInit(1);
 8014370:	2001      	movs	r0, #1
 8014372:	f7f1 ff25 	bl	80061c0 <BSP_AUDIO_IN_DeInit>
      return;
 8014376:	bf00      	nop
    }
  }
}
 8014378:	3710      	adds	r7, #16
 801437a:	46bd      	mov	sp, r7
 801437c:	bd80      	pop	{r7, pc}
 801437e:	bf00      	nop
 8014380:	ff0000ff 	.word	0xff0000ff
 8014384:	2400016c 	.word	0x2400016c
 8014388:	08015d90 	.word	0x08015d90
 801438c:	2400017c 	.word	0x2400017c
 8014390:	08015db0 	.word	0x08015db0
 8014394:	08015dd8 	.word	0x08015dd8
 8014398:	2400010c 	.word	0x2400010c
 801439c:	2400e21c 	.word	0x2400e21c
 80143a0:	240021e0 	.word	0x240021e0
 80143a4:	24000128 	.word	0x24000128
 80143a8:	2400a200 	.word	0x2400a200
 80143ac:	24001c58 	.word	0x24001c58
 80143b0:	08015df8 	.word	0x08015df8
 80143b4:	38000000 	.word	0x38000000
 80143b8:	08015e0c 	.word	0x08015e0c
 80143bc:	24002200 	.word	0x24002200
 80143c0:	24001c90 	.word	0x24001c90

080143c4 <BSP_AUDIO_IN_TransferComplete_CallBack>:
  * @brief Calculates the remaining file size and new position of the pointer.
  * @param  None
  * @retval None
  */
void  BSP_AUDIO_IN_TransferComplete_CallBack(uint32_t Instance)
{
 80143c4:	b580      	push	{r7, lr}
 80143c6:	b08a      	sub	sp, #40	; 0x28
 80143c8:	af00      	add	r7, sp, #0
 80143ca:	6078      	str	r0, [r7, #4]
    if(Instance == 1U)
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	2b01      	cmp	r3, #1
 80143d0:	d168      	bne.n	80144a4 <BSP_AUDIO_IN_TransferComplete_CallBack+0xe0>
 80143d2:	4b38      	ldr	r3, [pc, #224]	; (80144b4 <BSP_AUDIO_IN_TransferComplete_CallBack+0xf0>)
 80143d4:	617b      	str	r3, [r7, #20]
 80143d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80143da:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 80143dc:	693b      	ldr	r3, [r7, #16]
 80143de:	2b00      	cmp	r3, #0
 80143e0:	dd1d      	ble.n	801441e <BSP_AUDIO_IN_TransferComplete_CallBack+0x5a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80143e2:	697b      	ldr	r3, [r7, #20]
 80143e4:	f003 021f 	and.w	r2, r3, #31
 80143e8:	693b      	ldr	r3, [r7, #16]
 80143ea:	4413      	add	r3, r2
 80143ec:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80143ee:	697b      	ldr	r3, [r7, #20]
 80143f0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 80143f2:	f3bf 8f4f 	dsb	sy
}
 80143f6:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80143f8:	4a2f      	ldr	r2, [pc, #188]	; (80144b8 <BSP_AUDIO_IN_TransferComplete_CallBack+0xf4>)
 80143fa:	68bb      	ldr	r3, [r7, #8]
 80143fc:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8014400:	68bb      	ldr	r3, [r7, #8]
 8014402:	3320      	adds	r3, #32
 8014404:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8014406:	68fb      	ldr	r3, [r7, #12]
 8014408:	3b20      	subs	r3, #32
 801440a:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 801440c:	68fb      	ldr	r3, [r7, #12]
 801440e:	2b00      	cmp	r3, #0
 8014410:	dcf2      	bgt.n	80143f8 <BSP_AUDIO_IN_TransferComplete_CallBack+0x34>
  __ASM volatile ("dsb 0xF":::"memory");
 8014412:	f3bf 8f4f 	dsb	sy
}
 8014416:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8014418:	f3bf 8f6f 	isb	sy
}
 801441c:	bf00      	nop
}
 801441e:	bf00      	nop
  {
    /* Invalidate Data Cache to get the updated content of the SRAM*/
    SCB_InvalidateDCache_by_Addr((uint32_t *)&recordPDMBuf[AUDIO_IN_PDM_BUFFER_SIZE/2], AUDIO_IN_PDM_BUFFER_SIZE*2);

    BSP_AUDIO_IN_PDMToPCM(Instance, (uint16_t*)&recordPDMBuf[AUDIO_IN_PDM_BUFFER_SIZE/2], &RecPlayback[playbackPtr]);
 8014420:	4b26      	ldr	r3, [pc, #152]	; (80144bc <BSP_AUDIO_IN_TransferComplete_CallBack+0xf8>)
 8014422:	681b      	ldr	r3, [r3, #0]
 8014424:	005b      	lsls	r3, r3, #1
 8014426:	4a26      	ldr	r2, [pc, #152]	; (80144c0 <BSP_AUDIO_IN_TransferComplete_CallBack+0xfc>)
 8014428:	4413      	add	r3, r2
 801442a:	461a      	mov	r2, r3
 801442c:	4921      	ldr	r1, [pc, #132]	; (80144b4 <BSP_AUDIO_IN_TransferComplete_CallBack+0xf0>)
 801442e:	6878      	ldr	r0, [r7, #4]
 8014430:	f7f2 f8e6 	bl	8006600 <BSP_AUDIO_IN_PDMToPCM>

    /* Clean Data Cache to update the content of the SRAM */
    SCB_CleanDCache_by_Addr((uint32_t*)&RecPlayback[playbackPtr], AUDIO_IN_PDM_BUFFER_SIZE/4);
 8014434:	4b21      	ldr	r3, [pc, #132]	; (80144bc <BSP_AUDIO_IN_TransferComplete_CallBack+0xf8>)
 8014436:	681b      	ldr	r3, [r3, #0]
 8014438:	005b      	lsls	r3, r3, #1
 801443a:	4a21      	ldr	r2, [pc, #132]	; (80144c0 <BSP_AUDIO_IN_TransferComplete_CallBack+0xfc>)
 801443c:	4413      	add	r3, r2
 801443e:	627b      	str	r3, [r7, #36]	; 0x24
 8014440:	2340      	movs	r3, #64	; 0x40
 8014442:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 8014444:	6a3b      	ldr	r3, [r7, #32]
 8014446:	2b00      	cmp	r3, #0
 8014448:	dd1d      	ble.n	8014486 <BSP_AUDIO_IN_TransferComplete_CallBack+0xc2>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 801444a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801444c:	f003 021f 	and.w	r2, r3, #31
 8014450:	6a3b      	ldr	r3, [r7, #32]
 8014452:	4413      	add	r3, r2
 8014454:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8014456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014458:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 801445a:	f3bf 8f4f 	dsb	sy
}
 801445e:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8014460:	4a15      	ldr	r2, [pc, #84]	; (80144b8 <BSP_AUDIO_IN_TransferComplete_CallBack+0xf4>)
 8014462:	69bb      	ldr	r3, [r7, #24]
 8014464:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8014468:	69bb      	ldr	r3, [r7, #24]
 801446a:	3320      	adds	r3, #32
 801446c:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 801446e:	69fb      	ldr	r3, [r7, #28]
 8014470:	3b20      	subs	r3, #32
 8014472:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8014474:	69fb      	ldr	r3, [r7, #28]
 8014476:	2b00      	cmp	r3, #0
 8014478:	dcf2      	bgt.n	8014460 <BSP_AUDIO_IN_TransferComplete_CallBack+0x9c>
  __ASM volatile ("dsb 0xF":::"memory");
 801447a:	f3bf 8f4f 	dsb	sy
}
 801447e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8014480:	f3bf 8f6f 	isb	sy
}
 8014484:	bf00      	nop
}
 8014486:	bf00      	nop

    playbackPtr += AUDIO_IN_PDM_BUFFER_SIZE/4/2;
 8014488:	4b0c      	ldr	r3, [pc, #48]	; (80144bc <BSP_AUDIO_IN_TransferComplete_CallBack+0xf8>)
 801448a:	681b      	ldr	r3, [r3, #0]
 801448c:	3320      	adds	r3, #32
 801448e:	4a0b      	ldr	r2, [pc, #44]	; (80144bc <BSP_AUDIO_IN_TransferComplete_CallBack+0xf8>)
 8014490:	6013      	str	r3, [r2, #0]
    if(playbackPtr >= RECORD_BUFFER_SIZE)
 8014492:	4b0a      	ldr	r3, [pc, #40]	; (80144bc <BSP_AUDIO_IN_TransferComplete_CallBack+0xf8>)
 8014494:	681b      	ldr	r3, [r3, #0]
 8014496:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801449a:	d306      	bcc.n	80144aa <BSP_AUDIO_IN_TransferComplete_CallBack+0xe6>
      playbackPtr = 0;
 801449c:	4b07      	ldr	r3, [pc, #28]	; (80144bc <BSP_AUDIO_IN_TransferComplete_CallBack+0xf8>)
 801449e:	2200      	movs	r2, #0
 80144a0:	601a      	str	r2, [r3, #0]
  else
  {
    AudioBufferOffset = BUFFER_OFFSET_FULL;
  }

}
 80144a2:	e002      	b.n	80144aa <BSP_AUDIO_IN_TransferComplete_CallBack+0xe6>
    AudioBufferOffset = BUFFER_OFFSET_FULL;
 80144a4:	4b07      	ldr	r3, [pc, #28]	; (80144c4 <BSP_AUDIO_IN_TransferComplete_CallBack+0x100>)
 80144a6:	2202      	movs	r2, #2
 80144a8:	601a      	str	r2, [r3, #0]
}
 80144aa:	bf00      	nop
 80144ac:	3728      	adds	r7, #40	; 0x28
 80144ae:	46bd      	mov	sp, r7
 80144b0:	bd80      	pop	{r7, pc}
 80144b2:	bf00      	nop
 80144b4:	38000100 	.word	0x38000100
 80144b8:	e000ed00 	.word	0xe000ed00
 80144bc:	2400a214 	.word	0x2400a214
 80144c0:	24002200 	.word	0x24002200
 80144c4:	2400e218 	.word	0x2400e218

080144c8 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
  * @brief  Manages the DMA Half Transfer complete interrupt.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_IN_HalfTransfer_CallBack(uint32_t Instance)
{
 80144c8:	b580      	push	{r7, lr}
 80144ca:	b08a      	sub	sp, #40	; 0x28
 80144cc:	af00      	add	r7, sp, #0
 80144ce:	6078      	str	r0, [r7, #4]
    if(Instance == 1U)
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	2b01      	cmp	r3, #1
 80144d4:	d168      	bne.n	80145a8 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xe0>
 80144d6:	4b38      	ldr	r3, [pc, #224]	; (80145b8 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xf0>)
 80144d8:	617b      	str	r3, [r7, #20]
 80144da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80144de:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 80144e0:	693b      	ldr	r3, [r7, #16]
 80144e2:	2b00      	cmp	r3, #0
 80144e4:	dd1d      	ble.n	8014522 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x5a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80144e6:	697b      	ldr	r3, [r7, #20]
 80144e8:	f003 021f 	and.w	r2, r3, #31
 80144ec:	693b      	ldr	r3, [r7, #16]
 80144ee:	4413      	add	r3, r2
 80144f0:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80144f2:	697b      	ldr	r3, [r7, #20]
 80144f4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 80144f6:	f3bf 8f4f 	dsb	sy
}
 80144fa:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80144fc:	4a2f      	ldr	r2, [pc, #188]	; (80145bc <BSP_AUDIO_IN_HalfTransfer_CallBack+0xf4>)
 80144fe:	68bb      	ldr	r3, [r7, #8]
 8014500:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8014504:	68bb      	ldr	r3, [r7, #8]
 8014506:	3320      	adds	r3, #32
 8014508:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 801450a:	68fb      	ldr	r3, [r7, #12]
 801450c:	3b20      	subs	r3, #32
 801450e:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8014510:	68fb      	ldr	r3, [r7, #12]
 8014512:	2b00      	cmp	r3, #0
 8014514:	dcf2      	bgt.n	80144fc <BSP_AUDIO_IN_HalfTransfer_CallBack+0x34>
  __ASM volatile ("dsb 0xF":::"memory");
 8014516:	f3bf 8f4f 	dsb	sy
}
 801451a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801451c:	f3bf 8f6f 	isb	sy
}
 8014520:	bf00      	nop
}
 8014522:	bf00      	nop
  {
    /* Invalidate Data Cache to get the updated content of the SRAM*/
    SCB_InvalidateDCache_by_Addr((uint32_t *)&recordPDMBuf[0], AUDIO_IN_PDM_BUFFER_SIZE*2);

    BSP_AUDIO_IN_PDMToPCM(Instance, (uint16_t*)&recordPDMBuf[0], &RecPlayback[playbackPtr]);
 8014524:	4b26      	ldr	r3, [pc, #152]	; (80145c0 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xf8>)
 8014526:	681b      	ldr	r3, [r3, #0]
 8014528:	005b      	lsls	r3, r3, #1
 801452a:	4a26      	ldr	r2, [pc, #152]	; (80145c4 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xfc>)
 801452c:	4413      	add	r3, r2
 801452e:	461a      	mov	r2, r3
 8014530:	4921      	ldr	r1, [pc, #132]	; (80145b8 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xf0>)
 8014532:	6878      	ldr	r0, [r7, #4]
 8014534:	f7f2 f864 	bl	8006600 <BSP_AUDIO_IN_PDMToPCM>

    /* Clean Data Cache to update the content of the SRAM */
    SCB_CleanDCache_by_Addr((uint32_t*)&RecPlayback[playbackPtr], AUDIO_IN_PDM_BUFFER_SIZE/4);
 8014538:	4b21      	ldr	r3, [pc, #132]	; (80145c0 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xf8>)
 801453a:	681b      	ldr	r3, [r3, #0]
 801453c:	005b      	lsls	r3, r3, #1
 801453e:	4a21      	ldr	r2, [pc, #132]	; (80145c4 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xfc>)
 8014540:	4413      	add	r3, r2
 8014542:	627b      	str	r3, [r7, #36]	; 0x24
 8014544:	2340      	movs	r3, #64	; 0x40
 8014546:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 8014548:	6a3b      	ldr	r3, [r7, #32]
 801454a:	2b00      	cmp	r3, #0
 801454c:	dd1d      	ble.n	801458a <BSP_AUDIO_IN_HalfTransfer_CallBack+0xc2>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 801454e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014550:	f003 021f 	and.w	r2, r3, #31
 8014554:	6a3b      	ldr	r3, [r7, #32]
 8014556:	4413      	add	r3, r2
 8014558:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 801455a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801455c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 801455e:	f3bf 8f4f 	dsb	sy
}
 8014562:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8014564:	4a15      	ldr	r2, [pc, #84]	; (80145bc <BSP_AUDIO_IN_HalfTransfer_CallBack+0xf4>)
 8014566:	69bb      	ldr	r3, [r7, #24]
 8014568:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 801456c:	69bb      	ldr	r3, [r7, #24]
 801456e:	3320      	adds	r3, #32
 8014570:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8014572:	69fb      	ldr	r3, [r7, #28]
 8014574:	3b20      	subs	r3, #32
 8014576:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8014578:	69fb      	ldr	r3, [r7, #28]
 801457a:	2b00      	cmp	r3, #0
 801457c:	dcf2      	bgt.n	8014564 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x9c>
  __ASM volatile ("dsb 0xF":::"memory");
 801457e:	f3bf 8f4f 	dsb	sy
}
 8014582:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8014584:	f3bf 8f6f 	isb	sy
}
 8014588:	bf00      	nop
}
 801458a:	bf00      	nop

    playbackPtr += AUDIO_IN_PDM_BUFFER_SIZE/4/2;
 801458c:	4b0c      	ldr	r3, [pc, #48]	; (80145c0 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xf8>)
 801458e:	681b      	ldr	r3, [r3, #0]
 8014590:	3320      	adds	r3, #32
 8014592:	4a0b      	ldr	r2, [pc, #44]	; (80145c0 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xf8>)
 8014594:	6013      	str	r3, [r2, #0]
    if(playbackPtr >= RECORD_BUFFER_SIZE)
 8014596:	4b0a      	ldr	r3, [pc, #40]	; (80145c0 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xf8>)
 8014598:	681b      	ldr	r3, [r3, #0]
 801459a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801459e:	d306      	bcc.n	80145ae <BSP_AUDIO_IN_HalfTransfer_CallBack+0xe6>
    {
      playbackPtr = 0;
 80145a0:	4b07      	ldr	r3, [pc, #28]	; (80145c0 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xf8>)
 80145a2:	2200      	movs	r2, #0
 80145a4:	601a      	str	r2, [r3, #0]
  else
  {
    AudioBufferOffset = BUFFER_OFFSET_HALF;
  }

}
 80145a6:	e002      	b.n	80145ae <BSP_AUDIO_IN_HalfTransfer_CallBack+0xe6>
    AudioBufferOffset = BUFFER_OFFSET_HALF;
 80145a8:	4b07      	ldr	r3, [pc, #28]	; (80145c8 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x100>)
 80145aa:	2201      	movs	r2, #1
 80145ac:	601a      	str	r2, [r3, #0]
}
 80145ae:	bf00      	nop
 80145b0:	3728      	adds	r7, #40	; 0x28
 80145b2:	46bd      	mov	sp, r7
 80145b4:	bd80      	pop	{r7, pc}
 80145b6:	bf00      	nop
 80145b8:	38000000 	.word	0x38000000
 80145bc:	e000ed00 	.word	0xe000ed00
 80145c0:	2400a214 	.word	0x2400a214
 80145c4:	24002200 	.word	0x24002200
 80145c8:	2400e218 	.word	0x2400e218

080145cc <BSP_AUDIO_IN_Error_CallBack>:
  * @brief  Audio IN Error callback function
  * @param  None
  * @retval None
  */
void BSP_AUDIO_IN_Error_CallBack(uint32_t Instance)
{
 80145cc:	b580      	push	{r7, lr}
 80145ce:	b082      	sub	sp, #8
 80145d0:	af00      	add	r7, sp, #0
 80145d2:	6078      	str	r0, [r7, #4]
  /* Stop the program with an infinite loop */
  Error_Handler();
 80145d4:	f000 fa1e 	bl	8014a14 <Error_Handler>
}
 80145d8:	bf00      	nop
 80145da:	3708      	adds	r7, #8
 80145dc:	46bd      	mov	sp, r7
 80145de:	bd80      	pop	{r7, pc}

080145e0 <BSP_CAMERA_FrameEventCallback>:

/**
  * @brief  Camera Frame Event callback.
  */
void BSP_CAMERA_FrameEventCallback(uint32_t Instance)
{
 80145e0:	b580      	push	{r7, lr}
 80145e2:	b082      	sub	sp, #8
 80145e4:	af00      	add	r7, sp, #0
 80145e6:	6078      	str	r0, [r7, #4]
  BSP_CAMERA_Suspend(0);
 80145e8:	2000      	movs	r0, #0
 80145ea:	f7f3 f8df 	bl	80077ac <BSP_CAMERA_Suspend>

  /* Convert captured frame to ARGB8888 and copy it to LCD FRAME BUFFER */
  LCD_LL_Convert_RGB565ToARGB8888((uint32_t *)(CAMERA_FRAME_BUFFER), (uint32_t *)(LCD_LAYER_0_ADDRESS), CameraResX[index_resolution], CameraResY[index_resolution]);
 80145ee:	4b0c      	ldr	r3, [pc, #48]	; (8014620 <BSP_CAMERA_FrameEventCallback+0x40>)
 80145f0:	681b      	ldr	r3, [r3, #0]
 80145f2:	4a0c      	ldr	r2, [pc, #48]	; (8014624 <BSP_CAMERA_FrameEventCallback+0x44>)
 80145f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80145f8:	b29a      	uxth	r2, r3
 80145fa:	4b09      	ldr	r3, [pc, #36]	; (8014620 <BSP_CAMERA_FrameEventCallback+0x40>)
 80145fc:	681b      	ldr	r3, [r3, #0]
 80145fe:	490a      	ldr	r1, [pc, #40]	; (8014628 <BSP_CAMERA_FrameEventCallback+0x48>)
 8014600:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8014604:	b29b      	uxth	r3, r3
 8014606:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 801460a:	4808      	ldr	r0, [pc, #32]	; (801462c <BSP_CAMERA_FrameEventCallback+0x4c>)
 801460c:	f000 f810 	bl	8014630 <LCD_LL_Convert_RGB565ToARGB8888>



  BSP_CAMERA_Resume(0);
 8014610:	2000      	movs	r0, #0
 8014612:	f7f3 f8e9 	bl	80077e8 <BSP_CAMERA_Resume>
}
 8014616:	bf00      	nop
 8014618:	3708      	adds	r7, #8
 801461a:	46bd      	mov	sp, r7
 801461c:	bd80      	pop	{r7, pc}
 801461e:	bf00      	nop
 8014620:	24001c70 	.word	0x24001c70
 8014624:	24000144 	.word	0x24000144
 8014628:	24000158 	.word	0x24000158
 801462c:	d0600000 	.word	0xd0600000

08014630 <LCD_LL_Convert_RGB565ToARGB8888>:
  * @param  pSrc: Pointer to source buffer
  * @param  pDst: Pointer to destination buffer
  * @retval None
  */
static void LCD_LL_Convert_RGB565ToARGB8888(void *pSrc, void *pDst, uint16_t xsize, uint16_t ysize)
{
 8014630:	b580      	push	{r7, lr}
 8014632:	b08c      	sub	sp, #48	; 0x30
 8014634:	af02      	add	r7, sp, #8
 8014636:	60f8      	str	r0, [r7, #12]
 8014638:	60b9      	str	r1, [r7, #8]
 801463a:	4611      	mov	r1, r2
 801463c:	461a      	mov	r2, r3
 801463e:	460b      	mov	r3, r1
 8014640:	80fb      	strh	r3, [r7, #6]
 8014642:	4613      	mov	r3, r2
 8014644:	80bb      	strh	r3, [r7, #4]
  uint32_t xPos, yPos, destination;
  uint32_t LcdResX,LcdResY;
  BSP_LCD_GetXSize(0, &LcdResX);
 8014646:	f107 0318 	add.w	r3, r7, #24
 801464a:	4619      	mov	r1, r3
 801464c:	2000      	movs	r0, #0
 801464e:	f7f3 fc69 	bl	8007f24 <BSP_LCD_GetXSize>
  BSP_LCD_GetYSize(0, &LcdResY);
 8014652:	f107 0314 	add.w	r3, r7, #20
 8014656:	4619      	mov	r1, r3
 8014658:	2000      	movs	r0, #0
 801465a:	f7f3 fc8b 	bl	8007f74 <BSP_LCD_GetYSize>
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 801465e:	4b29      	ldr	r3, [pc, #164]	; (8014704 <LCD_LL_Convert_RGB565ToARGB8888+0xd4>)
 8014660:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8014664:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 8014666:	4b27      	ldr	r3, [pc, #156]	; (8014704 <LCD_LL_Convert_RGB565ToARGB8888+0xd4>)
 8014668:	2200      	movs	r2, #0
 801466a:	609a      	str	r2, [r3, #8]
  hlcd_dma2d.Init.OutputOffset = LcdResX - xsize;
 801466c:	69ba      	ldr	r2, [r7, #24]
 801466e:	88fb      	ldrh	r3, [r7, #6]
 8014670:	1ad3      	subs	r3, r2, r3
 8014672:	4a24      	ldr	r2, [pc, #144]	; (8014704 <LCD_LL_Convert_RGB565ToARGB8888+0xd4>)
 8014674:	60d3      	str	r3, [r2, #12]
  /* DMA2D Callbacks Configuration */
  hlcd_dma2d.XferCpltCallback  = NULL;
 8014676:	4b23      	ldr	r3, [pc, #140]	; (8014704 <LCD_LL_Convert_RGB565ToARGB8888+0xd4>)
 8014678:	2200      	movs	r2, #0
 801467a:	621a      	str	r2, [r3, #32]

  /* Foreground Configuration */
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 801467c:	4b21      	ldr	r3, [pc, #132]	; (8014704 <LCD_LL_Convert_RGB565ToARGB8888+0xd4>)
 801467e:	2201      	movs	r2, #1
 8014680:	64da      	str	r2, [r3, #76]	; 0x4c
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 8014682:	4b20      	ldr	r3, [pc, #128]	; (8014704 <LCD_LL_Convert_RGB565ToARGB8888+0xd4>)
 8014684:	22ff      	movs	r2, #255	; 0xff
 8014686:	651a      	str	r2, [r3, #80]	; 0x50
  hlcd_dma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8014688:	4b1e      	ldr	r3, [pc, #120]	; (8014704 <LCD_LL_Convert_RGB565ToARGB8888+0xd4>)
 801468a:	2202      	movs	r2, #2
 801468c:	649a      	str	r2, [r3, #72]	; 0x48
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 801468e:	4b1d      	ldr	r3, [pc, #116]	; (8014704 <LCD_LL_Convert_RGB565ToARGB8888+0xd4>)
 8014690:	2200      	movs	r2, #0
 8014692:	645a      	str	r2, [r3, #68]	; 0x44

  hlcd_dma2d.Instance = DMA2D;
 8014694:	4b1b      	ldr	r3, [pc, #108]	; (8014704 <LCD_LL_Convert_RGB565ToARGB8888+0xd4>)
 8014696:	4a1c      	ldr	r2, [pc, #112]	; (8014708 <LCD_LL_Convert_RGB565ToARGB8888+0xd8>)
 8014698:	601a      	str	r2, [r3, #0]

  /* Calculate the destination transfer address */
  xPos = (LcdResX  - xsize)/2;
 801469a:	69ba      	ldr	r2, [r7, #24]
 801469c:	88fb      	ldrh	r3, [r7, #6]
 801469e:	1ad3      	subs	r3, r2, r3
 80146a0:	085b      	lsrs	r3, r3, #1
 80146a2:	627b      	str	r3, [r7, #36]	; 0x24
  yPos = (LcdResY  - ysize)/2;
 80146a4:	697a      	ldr	r2, [r7, #20]
 80146a6:	88bb      	ldrh	r3, [r7, #4]
 80146a8:	1ad3      	subs	r3, r2, r3
 80146aa:	085b      	lsrs	r3, r3, #1
 80146ac:	623b      	str	r3, [r7, #32]

  destination = (uint32_t)pDst + (yPos * LcdResX + xPos) * 4;
 80146ae:	69bb      	ldr	r3, [r7, #24]
 80146b0:	6a3a      	ldr	r2, [r7, #32]
 80146b2:	fb02 f203 	mul.w	r2, r2, r3
 80146b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146b8:	4413      	add	r3, r2
 80146ba:	009a      	lsls	r2, r3, #2
 80146bc:	68bb      	ldr	r3, [r7, #8]
 80146be:	4413      	add	r3, r2
 80146c0:	61fb      	str	r3, [r7, #28]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 80146c2:	4810      	ldr	r0, [pc, #64]	; (8014704 <LCD_LL_Convert_RGB565ToARGB8888+0xd4>)
 80146c4:	f7f7 ffd4 	bl	800c670 <HAL_DMA2D_Init>
 80146c8:	4603      	mov	r3, r0
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	d116      	bne.n	80146fc <LCD_LL_Convert_RGB565ToARGB8888+0xcc>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 80146ce:	2101      	movs	r1, #1
 80146d0:	480c      	ldr	r0, [pc, #48]	; (8014704 <LCD_LL_Convert_RGB565ToARGB8888+0xd4>)
 80146d2:	f7f8 f94f 	bl	800c974 <HAL_DMA2D_ConfigLayer>
 80146d6:	4603      	mov	r3, r0
 80146d8:	2b00      	cmp	r3, #0
 80146da:	d10f      	bne.n	80146fc <LCD_LL_Convert_RGB565ToARGB8888+0xcc>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, destination, xsize, ysize) == HAL_OK)
 80146dc:	68f9      	ldr	r1, [r7, #12]
 80146de:	88fa      	ldrh	r2, [r7, #6]
 80146e0:	88bb      	ldrh	r3, [r7, #4]
 80146e2:	9300      	str	r3, [sp, #0]
 80146e4:	4613      	mov	r3, r2
 80146e6:	69fa      	ldr	r2, [r7, #28]
 80146e8:	4806      	ldr	r0, [pc, #24]	; (8014704 <LCD_LL_Convert_RGB565ToARGB8888+0xd4>)
 80146ea:	f7f8 f82f 	bl	800c74c <HAL_DMA2D_Start>
 80146ee:	4603      	mov	r3, r0
 80146f0:	2b00      	cmp	r3, #0
 80146f2:	d103      	bne.n	80146fc <LCD_LL_Convert_RGB565ToARGB8888+0xcc>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 100);
 80146f4:	2164      	movs	r1, #100	; 0x64
 80146f6:	4803      	ldr	r0, [pc, #12]	; (8014704 <LCD_LL_Convert_RGB565ToARGB8888+0xd4>)
 80146f8:	f7f8 f853 	bl	800c7a2 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 80146fc:	bf00      	nop
 80146fe:	3728      	adds	r7, #40	; 0x28
 8014700:	46bd      	mov	sp, r7
 8014702:	bd80      	pop	{r7, pc}
 8014704:	240020a0 	.word	0x240020a0
 8014708:	52001000 	.word	0x52001000

0801470c <BSP_JOY_Callback>:
     HAL_Delay(6);
  }
}

void BSP_JOY_Callback(JOY_TypeDef JOY, uint32_t JoyPin)
{
 801470c:	b480      	push	{r7}
 801470e:	b083      	sub	sp, #12
 8014710:	af00      	add	r7, sp, #0
 8014712:	4603      	mov	r3, r0
 8014714:	6039      	str	r1, [r7, #0]
 8014716:	71fb      	strb	r3, [r7, #7]
    JoyPinPressed = JoyPin;
 8014718:	4a04      	ldr	r2, [pc, #16]	; (801472c <BSP_JOY_Callback+0x20>)
 801471a:	683b      	ldr	r3, [r7, #0]
 801471c:	6013      	str	r3, [r2, #0]
}
 801471e:	bf00      	nop
 8014720:	370c      	adds	r7, #12
 8014722:	46bd      	mov	sp, r7
 8014724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014728:	4770      	bx	lr
 801472a:	bf00      	nop
 801472c:	24001c78 	.word	0x24001c78

08014730 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8014730:	b580      	push	{r7, lr}
 8014732:	af00      	add	r7, sp, #0
  /* System Init, System clock, voltage scaling and L1-Cache configuration are done by CPU1 (Cortex-M7)
     in the meantime Domain D2 is put in STOP mode(Cortex-M4 in deep-sleep)
  */

  /* Configure the MPU attributes as Write Through */
  MPU_Config();
 8014734:	f000 f974 	bl	8014a20 <MPU_Config>

  /* Enable the CPU Cache */
 CPU_CACHE_Enable();
 8014738:	f000 f99a 	bl	8014a70 <CPU_CACHE_Enable>
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
     */
  HAL_Init();
 801473c:	f7f4 fbcc 	bl	8008ed8 <HAL_Init>

  /* Configure the system clock to 400 MHz */
  SystemClock_Config();
 8014740:	f000 f836 	bl	80147b0 <SystemClock_Config>
  /* When system initialization is finished, Cortex-M7 could wakeup (when needed) the Cortex-M4  by means of
     HSEM notification or by any D2 wakeup source (SEV,EXTI..)   */


  /* Configure the Wakeup push-button in EXTI Mode */
  BSP_PB_Init(BUTTON_WAKEUP, BUTTON_MODE_EXTI);
 8014744:	2101      	movs	r1, #1
 8014746:	2000      	movs	r0, #0
 8014748:	f7f0 fe48 	bl	80053dc <BSP_PB_Init>
  BSP_LED_Init(LED1);
 801474c:	2000      	movs	r0, #0
 801474e:	f7f0 fde3 	bl	8005318 <BSP_LED_Init>
  BSP_LED_Init(LED2);
 8014752:	2001      	movs	r0, #1
 8014754:	f7f0 fde0 	bl	8005318 <BSP_LED_Init>
  BSP_LED_Init(LED3);
 8014758:	2002      	movs	r0, #2
 801475a:	f7f0 fddd 	bl	8005318 <BSP_LED_Init>
  BSP_LED_Init(LED4);
 801475e:	2003      	movs	r0, #3
 8014760:	f7f0 fdda 	bl	8005318 <BSP_LED_Init>
  /*##-1- Initialize the LCD #################################################*/
  /* Initialize the LCD */
  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);
 8014764:	2101      	movs	r1, #1
 8014766:	2000      	movs	r0, #0
 8014768:	f7f3 f8c4 	bl	80078f4 <BSP_LCD_Init>
  UTIL_LCD_SetFuncDriver(&LCD_Driver);
 801476c:	480d      	ldr	r0, [pc, #52]	; (80147a4 <main+0x74>)
 801476e:	f000 fa99 	bl	8014ca4 <UTIL_LCD_SetFuncDriver>
  UTIL_LCD_SetFont(&UTIL_LCD_DEFAULT_FONT);
 8014772:	480d      	ldr	r0, [pc, #52]	; (80147a8 <main+0x78>)
 8014774:	f000 fb14 	bl	8014da0 <UTIL_LCD_SetFont>
  Display_Description();
 8014778:	f000 f8b0 	bl	80148dc <Display_Description>
  /* Wait For User inputs */
  while (1)
  {
    if(ButtonState == 1)
 801477c:	4b0b      	ldr	r3, [pc, #44]	; (80147ac <main+0x7c>)
 801477e:	681b      	ldr	r3, [r3, #0]
 8014780:	2b01      	cmp	r3, #1
 8014782:	d1fb      	bne.n	801477c <main+0x4c>
    {
      HAL_Delay(400);
 8014784:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8014788:	f7f4 fc40 	bl	800900c <HAL_Delay>
      ButtonState = 0;
 801478c:	4b07      	ldr	r3, [pc, #28]	; (80147ac <main+0x7c>)
 801478e:	2200      	movs	r2, #0
 8014790:	601a      	str	r2, [r3, #0]
      //BSP_examples[DemoIndex++].DemoFunc();
      AudioRecord();
 8014792:	f7ff fd33 	bl	80141fc <AudioRecord>

      HAL_Delay(100);
 8014796:	2064      	movs	r0, #100	; 0x64
 8014798:	f7f4 fc38 	bl	800900c <HAL_Delay>

      Display_Description();
 801479c:	f000 f89e 	bl	80148dc <Display_Description>
    if(ButtonState == 1)
 80147a0:	e7ec      	b.n	801477c <main+0x4c>
 80147a2:	bf00      	nop
 80147a4:	08015b40 	.word	0x08015b40
 80147a8:	2400016c 	.word	0x2400016c
 80147ac:	24001c90 	.word	0x24001c90

080147b0 <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 80147b0:	b580      	push	{r7, lr}
 80147b2:	b09e      	sub	sp, #120	; 0x78
 80147b4:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 80147b6:	2300      	movs	r3, #0
 80147b8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80147bc:	2004      	movs	r0, #4
 80147be:	f7fa fddd 	bl	800f37c <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80147c2:	2300      	movs	r3, #0
 80147c4:	607b      	str	r3, [r7, #4]
 80147c6:	4b42      	ldr	r3, [pc, #264]	; (80148d0 <SystemClock_Config+0x120>)
 80147c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80147ca:	4a41      	ldr	r2, [pc, #260]	; (80148d0 <SystemClock_Config+0x120>)
 80147cc:	f023 0301 	bic.w	r3, r3, #1
 80147d0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80147d2:	4b3f      	ldr	r3, [pc, #252]	; (80148d0 <SystemClock_Config+0x120>)
 80147d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80147d6:	f003 0301 	and.w	r3, r3, #1
 80147da:	607b      	str	r3, [r7, #4]
 80147dc:	4b3d      	ldr	r3, [pc, #244]	; (80148d4 <SystemClock_Config+0x124>)
 80147de:	699b      	ldr	r3, [r3, #24]
 80147e0:	4a3c      	ldr	r2, [pc, #240]	; (80148d4 <SystemClock_Config+0x124>)
 80147e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80147e6:	6193      	str	r3, [r2, #24]
 80147e8:	4b3a      	ldr	r3, [pc, #232]	; (80148d4 <SystemClock_Config+0x124>)
 80147ea:	699b      	ldr	r3, [r3, #24]
 80147ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80147f0:	607b      	str	r3, [r7, #4]
 80147f2:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80147f4:	bf00      	nop
 80147f6:	4b37      	ldr	r3, [pc, #220]	; (80148d4 <SystemClock_Config+0x124>)
 80147f8:	699b      	ldr	r3, [r3, #24]
 80147fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80147fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014802:	d1f8      	bne.n	80147f6 <SystemClock_Config+0x46>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8014804:	2301      	movs	r3, #1
 8014806:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8014808:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801480c:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 801480e:	2300      	movs	r3, #0
 8014810:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 8014812:	2300      	movs	r3, #0
 8014814:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8014816:	2302      	movs	r3, #2
 8014818:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 801481a:	2302      	movs	r3, #2
 801481c:	633b      	str	r3, [r7, #48]	; 0x30

  RCC_OscInitStruct.PLL.PLLM = 5;
 801481e:	2305      	movs	r3, #5
 8014820:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 160;
 8014822:	23a0      	movs	r3, #160	; 0xa0
 8014824:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8014826:	2300      	movs	r3, #0
 8014828:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = 2;
 801482a:	2302      	movs	r3, #2
 801482c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLR = 2;
 801482e:	2302      	movs	r3, #2
 8014830:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8014832:	2304      	movs	r3, #4
 8014834:	643b      	str	r3, [r7, #64]	; 0x40

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8014836:	2300      	movs	r3, #0
 8014838:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 801483a:	2308      	movs	r3, #8
 801483c:	64bb      	str	r3, [r7, #72]	; 0x48
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 801483e:	f107 0308 	add.w	r3, r7, #8
 8014842:	4618      	mov	r0, r3
 8014844:	f7fa fdf4 	bl	800f430 <HAL_RCC_OscConfig>
 8014848:	4603      	mov	r3, r0
 801484a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 801484e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014852:	2b00      	cmp	r3, #0
 8014854:	d001      	beq.n	801485a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8014856:	f000 f8dd 	bl	8014a14 <Error_Handler>
  }

/* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 801485a:	233f      	movs	r3, #63	; 0x3f
 801485c:	657b      	str	r3, [r7, #84]	; 0x54
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 801485e:	2303      	movs	r3, #3
 8014860:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8014862:	2300      	movs	r3, #0
 8014864:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8014866:	2308      	movs	r3, #8
 8014868:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 801486a:	2340      	movs	r3, #64	; 0x40
 801486c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 801486e:	2340      	movs	r3, #64	; 0x40
 8014870:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8014872:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014876:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8014878:	2340      	movs	r3, #64	; 0x40
 801487a:	673b      	str	r3, [r7, #112]	; 0x70
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 801487c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8014880:	2104      	movs	r1, #4
 8014882:	4618      	mov	r0, r3
 8014884:	f7fb f9e4 	bl	800fc50 <HAL_RCC_ClockConfig>
 8014888:	4603      	mov	r3, r0
 801488a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 801488e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014892:	2b00      	cmp	r3, #0
 8014894:	d001      	beq.n	801489a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8014896:	f000 f8bd 	bl	8014a14 <Error_Handler>
        - The activation of the SYSCFG clock
        - Enabling the I/O Compensation Cell : setting bit[0] of register SYSCFG_CCCSR
 */

  /*activate CSI clock mondatory for I/O Compensation Cell*/
  __HAL_RCC_CSI_ENABLE() ;
 801489a:	4b0f      	ldr	r3, [pc, #60]	; (80148d8 <SystemClock_Config+0x128>)
 801489c:	681b      	ldr	r3, [r3, #0]
 801489e:	4a0e      	ldr	r2, [pc, #56]	; (80148d8 <SystemClock_Config+0x128>)
 80148a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80148a4:	6013      	str	r3, [r2, #0]

  /* Enable SYSCFG clock mondatory for I/O Compensation Cell */
  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
 80148a6:	4b0c      	ldr	r3, [pc, #48]	; (80148d8 <SystemClock_Config+0x128>)
 80148a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80148ac:	4a0a      	ldr	r2, [pc, #40]	; (80148d8 <SystemClock_Config+0x128>)
 80148ae:	f043 0302 	orr.w	r3, r3, #2
 80148b2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80148b6:	4b08      	ldr	r3, [pc, #32]	; (80148d8 <SystemClock_Config+0x128>)
 80148b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80148bc:	f003 0302 	and.w	r3, r3, #2
 80148c0:	603b      	str	r3, [r7, #0]
 80148c2:	683b      	ldr	r3, [r7, #0]

  /* Enables the I/O Compensation Cell */
  HAL_EnableCompensationCell();
 80148c4:	f7f4 fbd2 	bl	800906c <HAL_EnableCompensationCell>
}
 80148c8:	bf00      	nop
 80148ca:	3778      	adds	r7, #120	; 0x78
 80148cc:	46bd      	mov	sp, r7
 80148ce:	bd80      	pop	{r7, pc}
 80148d0:	58000400 	.word	0x58000400
 80148d4:	58024800 	.word	0x58024800
 80148d8:	58024400 	.word	0x58024400

080148dc <Display_Description>:
  * @brief  Display main demo messages
  * @param  None
  * @retval None
  */
static void Display_Description(void)
{
 80148dc:	b580      	push	{r7, lr}
 80148de:	b094      	sub	sp, #80	; 0x50
 80148e0:	af02      	add	r7, sp, #8
  char desc[64];
  uint32_t x_size;
  uint32_t y_size;

  BSP_LCD_GetXSize(0, &x_size);
 80148e2:	1d3b      	adds	r3, r7, #4
 80148e4:	4619      	mov	r1, r3
 80148e6:	2000      	movs	r0, #0
 80148e8:	f7f3 fb1c 	bl	8007f24 <BSP_LCD_GetXSize>
  BSP_LCD_GetYSize(0, &y_size);
 80148ec:	463b      	mov	r3, r7
 80148ee:	4619      	mov	r1, r3
 80148f0:	2000      	movs	r0, #0
 80148f2:	f7f3 fb3f 	bl	8007f74 <BSP_LCD_GetYSize>
  /* Set LCD Foreground Layer  */
  UTIL_LCD_SetFont(&UTIL_LCD_DEFAULT_FONT);
 80148f6:	482d      	ldr	r0, [pc, #180]	; (80149ac <Display_Description+0xd0>)
 80148f8:	f000 fa52 	bl	8014da0 <UTIL_LCD_SetFont>

  /* Clear the LCD */
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_WHITE);
 80148fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014900:	f000 fa3a 	bl	8014d78 <UTIL_LCD_SetBackColor>
  UTIL_LCD_Clear(UTIL_LCD_COLOR_WHITE);
 8014904:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014908:	f000 faf6 	bl	8014ef8 <UTIL_LCD_Clear>

  /* Set the LCD Text Color */
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_DARKBLUE);
 801490c:	4828      	ldr	r0, [pc, #160]	; (80149b0 <Display_Description+0xd4>)
 801490e:	f000 fa1f 	bl	8014d50 <UTIL_LCD_SetTextColor>

  /* Display LCD messages */
  UTIL_LCD_DisplayStringAt(0, 10, (uint8_t *)"STM32H747I Speech Recognition", CENTER_MODE);
 8014912:	2301      	movs	r3, #1
 8014914:	4a27      	ldr	r2, [pc, #156]	; (80149b4 <Display_Description+0xd8>)
 8014916:	210a      	movs	r1, #10
 8014918:	2000      	movs	r0, #0
 801491a:	f000 fb39 	bl	8014f90 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, 35, (uint8_t *)"Bachelorarbeit Tim Krebs", CENTER_MODE);
 801491e:	2301      	movs	r3, #1
 8014920:	4a25      	ldr	r2, [pc, #148]	; (80149b8 <Display_Description+0xdc>)
 8014922:	2123      	movs	r1, #35	; 0x23
 8014924:	2000      	movs	r0, #0
 8014926:	f000 fb33 	bl	8014f90 <UTIL_LCD_DisplayStringAt>

  /* Draw Bitmap */
  UTIL_LCD_DrawBitmap((x_size - 80)/2, 65, (uint8_t *)stlogo);
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	3b50      	subs	r3, #80	; 0x50
 801492e:	085b      	lsrs	r3, r3, #1
 8014930:	4a22      	ldr	r2, [pc, #136]	; (80149bc <Display_Description+0xe0>)
 8014932:	2141      	movs	r1, #65	; 0x41
 8014934:	4618      	mov	r0, r3
 8014936:	f000 fc03 	bl	8015140 <UTIL_LCD_DrawBitmap>

  UTIL_LCD_SetFont(&Font12);
 801493a:	4821      	ldr	r0, [pc, #132]	; (80149c0 <Display_Description+0xe4>)
 801493c:	f000 fa30 	bl	8014da0 <UTIL_LCD_SetFont>
  UTIL_LCD_DisplayStringAt(0, y_size - 20, (uint8_t *)"Copyright (c) Tim Krebs 2021", CENTER_MODE);
 8014940:	683b      	ldr	r3, [r7, #0]
 8014942:	f1a3 0114 	sub.w	r1, r3, #20
 8014946:	2301      	movs	r3, #1
 8014948:	4a1e      	ldr	r2, [pc, #120]	; (80149c4 <Display_Description+0xe8>)
 801494a:	2000      	movs	r0, #0
 801494c:	f000 fb20 	bl	8014f90 <UTIL_LCD_DisplayStringAt>

  UTIL_LCD_SetFont(&Font16);
 8014950:	481d      	ldr	r0, [pc, #116]	; (80149c8 <Display_Description+0xec>)
 8014952:	f000 fa25 	bl	8014da0 <UTIL_LCD_SetFont>
  BSP_LCD_FillRect(0, 0, y_size/2 + 15, x_size, 60, UTIL_LCD_COLOR_BLUE);
 8014956:	683b      	ldr	r3, [r7, #0]
 8014958:	085b      	lsrs	r3, r3, #1
 801495a:	f103 020f 	add.w	r2, r3, #15
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	491a      	ldr	r1, [pc, #104]	; (80149cc <Display_Description+0xf0>)
 8014962:	9101      	str	r1, [sp, #4]
 8014964:	213c      	movs	r1, #60	; 0x3c
 8014966:	9100      	str	r1, [sp, #0]
 8014968:	2100      	movs	r1, #0
 801496a:	2000      	movs	r0, #0
 801496c:	f7f3 fd0c 	bl	8008388 <BSP_LCD_FillRect>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 8014970:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014974:	f000 f9ec 	bl	8014d50 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLUE);
 8014978:	4814      	ldr	r0, [pc, #80]	; (80149cc <Display_Description+0xf0>)
 801497a:	f000 f9fd 	bl	8014d78 <UTIL_LCD_SetBackColor>
  UTIL_LCD_DisplayStringAt(0, y_size / 2 + 30, (uint8_t *)"Press Wakeup button and start speaking:", CENTER_MODE);
 801497e:	683b      	ldr	r3, [r7, #0]
 8014980:	085b      	lsrs	r3, r3, #1
 8014982:	f103 011e 	add.w	r1, r3, #30
 8014986:	2301      	movs	r3, #1
 8014988:	4a11      	ldr	r2, [pc, #68]	; (80149d0 <Display_Description+0xf4>)
 801498a:	2000      	movs	r0, #0
 801498c:	f000 fb00 	bl	8014f90 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, y_size/2 + 45, (uint8_t *)desc, CENTER_MODE);
 8014990:	683b      	ldr	r3, [r7, #0]
 8014992:	085b      	lsrs	r3, r3, #1
 8014994:	f103 012d 	add.w	r1, r3, #45	; 0x2d
 8014998:	f107 0208 	add.w	r2, r7, #8
 801499c:	2301      	movs	r3, #1
 801499e:	2000      	movs	r0, #0
 80149a0:	f000 faf6 	bl	8014f90 <UTIL_LCD_DisplayStringAt>
}
 80149a4:	bf00      	nop
 80149a6:	3748      	adds	r7, #72	; 0x48
 80149a8:	46bd      	mov	sp, r7
 80149aa:	bd80      	pop	{r7, pc}
 80149ac:	2400016c 	.word	0x2400016c
 80149b0:	ff000080 	.word	0xff000080
 80149b4:	08018204 	.word	0x08018204
 80149b8:	08018224 	.word	0x08018224
 80149bc:	08015e2c 	.word	0x08015e2c
 80149c0:	24000184 	.word	0x24000184
 80149c4:	08018240 	.word	0x08018240
 80149c8:	2400017c 	.word	0x2400017c
 80149cc:	ff0000ff 	.word	0xff0000ff
 80149d0:	08018260 	.word	0x08018260

080149d4 <CheckForUserInput>:
  * @brief  Check for user input
  * @param  None
  * @retval Input state (1 : active / 0 : Inactive)
  */
uint8_t CheckForUserInput(void)
{
 80149d4:	b480      	push	{r7}
 80149d6:	af00      	add	r7, sp, #0
  return ButtonState;
 80149d8:	4b03      	ldr	r3, [pc, #12]	; (80149e8 <CheckForUserInput+0x14>)
 80149da:	681b      	ldr	r3, [r3, #0]
 80149dc:	b2db      	uxtb	r3, r3
}
 80149de:	4618      	mov	r0, r3
 80149e0:	46bd      	mov	sp, r7
 80149e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149e6:	4770      	bx	lr
 80149e8:	24001c90 	.word	0x24001c90

080149ec <BSP_PB_Callback>:
  * @brief  Button Callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 80149ec:	b480      	push	{r7}
 80149ee:	b083      	sub	sp, #12
 80149f0:	af00      	add	r7, sp, #0
 80149f2:	4603      	mov	r3, r0
 80149f4:	71fb      	strb	r3, [r7, #7]
  if(Button == BUTTON_WAKEUP)
 80149f6:	79fb      	ldrb	r3, [r7, #7]
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	d102      	bne.n	8014a02 <BSP_PB_Callback+0x16>
  {

    ButtonState = 1;
 80149fc:	4b04      	ldr	r3, [pc, #16]	; (8014a10 <BSP_PB_Callback+0x24>)
 80149fe:	2201      	movs	r2, #1
 8014a00:	601a      	str	r2, [r3, #0]
  }

}
 8014a02:	bf00      	nop
 8014a04:	370c      	adds	r7, #12
 8014a06:	46bd      	mov	sp, r7
 8014a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a0c:	4770      	bx	lr
 8014a0e:	bf00      	nop
 8014a10:	24001c90 	.word	0x24001c90

08014a14 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 8014a14:	b580      	push	{r7, lr}
 8014a16:	af00      	add	r7, sp, #0
  /* Turn LED REDon */
  BSP_LED_On(LED_RED);
 8014a18:	2002      	movs	r0, #2
 8014a1a:	f7f0 fcc1 	bl	80053a0 <BSP_LED_On>
  while(1)
 8014a1e:	e7fe      	b.n	8014a1e <Error_Handler+0xa>

08014a20 <MPU_Config>:
  *         The Region Size is 32MB.
  * @param  None
  * @retval None
  */
static void MPU_Config(void)
{
 8014a20:	b580      	push	{r7, lr}
 8014a22:	b084      	sub	sp, #16
 8014a24:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct;

  /* Disable the MPU */
  HAL_MPU_Disable();
 8014a26:	f7f4 fc73 	bl	8009310 <HAL_MPU_Disable>

  /* Configure the MPU attributes as WT for SDRAM */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8014a2a:	2301      	movs	r3, #1
 8014a2c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = SDRAM_DEVICE_ADDR;
 8014a2e:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8014a32:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8014a34:	2318      	movs	r3, #24
 8014a36:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8014a38:	2303      	movs	r3, #3
 8014a3a:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8014a3c:	2300      	movs	r3, #0
 8014a3e:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8014a40:	2301      	movs	r3, #1
 8014a42:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8014a44:	2300      	movs	r3, #0
 8014a46:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8014a48:	2300      	movs	r3, #0
 8014a4a:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8014a4c:	2300      	movs	r3, #0
 8014a4e:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 8014a50:	2300      	movs	r3, #0
 8014a52:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8014a54:	2300      	movs	r3, #0
 8014a56:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8014a58:	463b      	mov	r3, r7
 8014a5a:	4618      	mov	r0, r3
 8014a5c:	f7f4 fc90 	bl	8009380 <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8014a60:	2004      	movs	r0, #4
 8014a62:	f7f4 fc6d 	bl	8009340 <HAL_MPU_Enable>
}
 8014a66:	bf00      	nop
 8014a68:	3710      	adds	r7, #16
 8014a6a:	46bd      	mov	sp, r7
 8014a6c:	bd80      	pop	{r7, pc}
	...

08014a70 <CPU_CACHE_Enable>:
  * @brief  CPU L1-Cache enable.
  * @param  None
  * @retval None
  */
static void CPU_CACHE_Enable(void)
{
 8014a70:	b480      	push	{r7}
 8014a72:	b085      	sub	sp, #20
 8014a74:	af00      	add	r7, sp, #0
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8014a76:	4b34      	ldr	r3, [pc, #208]	; (8014b48 <CPU_CACHE_Enable+0xd8>)
 8014a78:	695b      	ldr	r3, [r3, #20]
 8014a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014a7e:	2b00      	cmp	r3, #0
 8014a80:	d11b      	bne.n	8014aba <CPU_CACHE_Enable+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 8014a82:	f3bf 8f4f 	dsb	sy
}
 8014a86:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8014a88:	f3bf 8f6f 	isb	sy
}
 8014a8c:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8014a8e:	4b2e      	ldr	r3, [pc, #184]	; (8014b48 <CPU_CACHE_Enable+0xd8>)
 8014a90:	2200      	movs	r2, #0
 8014a92:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8014a96:	f3bf 8f4f 	dsb	sy
}
 8014a9a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8014a9c:	f3bf 8f6f 	isb	sy
}
 8014aa0:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8014aa2:	4b29      	ldr	r3, [pc, #164]	; (8014b48 <CPU_CACHE_Enable+0xd8>)
 8014aa4:	695b      	ldr	r3, [r3, #20]
 8014aa6:	4a28      	ldr	r2, [pc, #160]	; (8014b48 <CPU_CACHE_Enable+0xd8>)
 8014aa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8014aac:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8014aae:	f3bf 8f4f 	dsb	sy
}
 8014ab2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8014ab4:	f3bf 8f6f 	isb	sy
}
 8014ab8:	e000      	b.n	8014abc <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8014aba:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8014abc:	4b22      	ldr	r3, [pc, #136]	; (8014b48 <CPU_CACHE_Enable+0xd8>)
 8014abe:	695b      	ldr	r3, [r3, #20]
 8014ac0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	d138      	bne.n	8014b3a <CPU_CACHE_Enable+0xca>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8014ac8:	4b1f      	ldr	r3, [pc, #124]	; (8014b48 <CPU_CACHE_Enable+0xd8>)
 8014aca:	2200      	movs	r2, #0
 8014acc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8014ad0:	f3bf 8f4f 	dsb	sy
}
 8014ad4:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8014ad6:	4b1c      	ldr	r3, [pc, #112]	; (8014b48 <CPU_CACHE_Enable+0xd8>)
 8014ad8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014adc:	60fb      	str	r3, [r7, #12]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8014ade:	68fb      	ldr	r3, [r7, #12]
 8014ae0:	0b5b      	lsrs	r3, r3, #13
 8014ae2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8014ae6:	60bb      	str	r3, [r7, #8]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8014ae8:	68fb      	ldr	r3, [r7, #12]
 8014aea:	08db      	lsrs	r3, r3, #3
 8014aec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8014af0:	607b      	str	r3, [r7, #4]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8014af2:	68bb      	ldr	r3, [r7, #8]
 8014af4:	015a      	lsls	r2, r3, #5
 8014af6:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8014afa:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8014afc:	687a      	ldr	r2, [r7, #4]
 8014afe:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8014b00:	4911      	ldr	r1, [pc, #68]	; (8014b48 <CPU_CACHE_Enable+0xd8>)
 8014b02:	4313      	orrs	r3, r2
 8014b04:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	1e5a      	subs	r2, r3, #1
 8014b0c:	607a      	str	r2, [r7, #4]
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	d1ef      	bne.n	8014af2 <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
 8014b12:	68bb      	ldr	r3, [r7, #8]
 8014b14:	1e5a      	subs	r2, r3, #1
 8014b16:	60ba      	str	r2, [r7, #8]
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	d1e5      	bne.n	8014ae8 <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8014b1c:	f3bf 8f4f 	dsb	sy
}
 8014b20:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8014b22:	4b09      	ldr	r3, [pc, #36]	; (8014b48 <CPU_CACHE_Enable+0xd8>)
 8014b24:	695b      	ldr	r3, [r3, #20]
 8014b26:	4a08      	ldr	r2, [pc, #32]	; (8014b48 <CPU_CACHE_Enable+0xd8>)
 8014b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014b2c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8014b2e:	f3bf 8f4f 	dsb	sy
}
 8014b32:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8014b34:	f3bf 8f6f 	isb	sy
}
 8014b38:	e000      	b.n	8014b3c <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8014b3a:	bf00      	nop
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 8014b3c:	bf00      	nop
 8014b3e:	3714      	adds	r7, #20
 8014b40:	46bd      	mov	sp, r7
 8014b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b46:	4770      	bx	lr
 8014b48:	e000ed00 	.word	0xe000ed00

08014b4c <BSP_SD_WriteCpltCallback>:
* @brief Tx Transfer completed callbacks
* @param hsd: SD handle
* @retval None
*/
void BSP_SD_WriteCpltCallback(uint32_t Instance)
{
 8014b4c:	b480      	push	{r7}
 8014b4e:	b083      	sub	sp, #12
 8014b50:	af00      	add	r7, sp, #0
 8014b52:	6078      	str	r0, [r7, #4]
  SD1WriteStatus = 1;
 8014b54:	4b04      	ldr	r3, [pc, #16]	; (8014b68 <BSP_SD_WriteCpltCallback+0x1c>)
 8014b56:	2201      	movs	r2, #1
 8014b58:	601a      	str	r2, [r3, #0]
}
 8014b5a:	bf00      	nop
 8014b5c:	370c      	adds	r7, #12
 8014b5e:	46bd      	mov	sp, r7
 8014b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b64:	4770      	bx	lr
 8014b66:	bf00      	nop
 8014b68:	24001cac 	.word	0x24001cac

08014b6c <BSP_SD_ReadCpltCallback>:
* @brief Rx Transfer completed callbacks
* @param hsd: SD handle
* @retval None
*/
void BSP_SD_ReadCpltCallback(uint32_t Instance)
{
 8014b6c:	b480      	push	{r7}
 8014b6e:	b083      	sub	sp, #12
 8014b70:	af00      	add	r7, sp, #0
 8014b72:	6078      	str	r0, [r7, #4]
  SD1ReadStatus = 1;
 8014b74:	4b04      	ldr	r3, [pc, #16]	; (8014b88 <BSP_SD_ReadCpltCallback+0x1c>)
 8014b76:	2201      	movs	r2, #1
 8014b78:	601a      	str	r2, [r3, #0]
}
 8014b7a:	bf00      	nop
 8014b7c:	370c      	adds	r7, #12
 8014b7e:	46bd      	mov	sp, r7
 8014b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b84:	4770      	bx	lr
 8014b86:	bf00      	nop
 8014b88:	24001cb0 	.word	0x24001cb0

08014b8c <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8014b8c:	b480      	push	{r7}
 8014b8e:	af00      	add	r7, sp, #0
}
 8014b90:	bf00      	nop
 8014b92:	46bd      	mov	sp, r7
 8014b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b98:	4770      	bx	lr

08014b9a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8014b9a:	b480      	push	{r7}
 8014b9c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8014b9e:	e7fe      	b.n	8014b9e <HardFault_Handler+0x4>

08014ba0 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8014ba0:	b480      	push	{r7}
 8014ba2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8014ba4:	e7fe      	b.n	8014ba4 <MemManage_Handler+0x4>

08014ba6 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8014ba6:	b480      	push	{r7}
 8014ba8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8014baa:	e7fe      	b.n	8014baa <BusFault_Handler+0x4>

08014bac <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8014bac:	b480      	push	{r7}
 8014bae:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8014bb0:	e7fe      	b.n	8014bb0 <UsageFault_Handler+0x4>

08014bb2 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8014bb2:	b480      	push	{r7}
 8014bb4:	af00      	add	r7, sp, #0
}
 8014bb6:	bf00      	nop
 8014bb8:	46bd      	mov	sp, r7
 8014bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bbe:	4770      	bx	lr

08014bc0 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8014bc0:	b480      	push	{r7}
 8014bc2:	af00      	add	r7, sp, #0
}
 8014bc4:	bf00      	nop
 8014bc6:	46bd      	mov	sp, r7
 8014bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bcc:	4770      	bx	lr

08014bce <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8014bce:	b480      	push	{r7}
 8014bd0:	af00      	add	r7, sp, #0
}
 8014bd2:	bf00      	nop
 8014bd4:	46bd      	mov	sp, r7
 8014bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bda:	4770      	bx	lr

08014bdc <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8014bdc:	b580      	push	{r7, lr}
 8014bde:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8014be0:	f7f4 f9f4 	bl	8008fcc <HAL_IncTick>
}
 8014be4:	bf00      	nop
 8014be6:	bd80      	pop	{r7, pc}

08014be8 <EXTI2_IRQHandler>:
* @brief  This function handles External line 2 interrupt request.
* @param  None
* @retval None
*/
void EXTI2_IRQHandler(void)
{
 8014be8:	b580      	push	{r7, lr}
 8014bea:	af00      	add	r7, sp, #0
   BSP_JOY_IRQHandler(JOY1, JOY_SEL);
 8014bec:	2101      	movs	r1, #1
 8014bee:	2000      	movs	r0, #0
 8014bf0:	f7f0 fd88 	bl	8005704 <BSP_JOY_IRQHandler>
}
 8014bf4:	bf00      	nop
 8014bf6:	bd80      	pop	{r7, pc}

08014bf8 <EXTI3_IRQHandler>:
* @brief  This function handles External line 3 interrupt request.
* @param  None
* @retval None
*/
void EXTI3_IRQHandler(void)
{
 8014bf8:	b580      	push	{r7, lr}
 8014bfa:	af00      	add	r7, sp, #0
   BSP_JOY_IRQHandler(JOY1, JOY_DOWN);
 8014bfc:	2102      	movs	r1, #2
 8014bfe:	2000      	movs	r0, #0
 8014c00:	f7f0 fd80 	bl	8005704 <BSP_JOY_IRQHandler>
}
 8014c04:	bf00      	nop
 8014c06:	bd80      	pop	{r7, pc}

08014c08 <EXTI4_IRQHandler>:
* @brief  This function handles External line 4 interrupt request.
* @param  None
* @retval None
*/
void EXTI4_IRQHandler(void)
{
 8014c08:	b580      	push	{r7, lr}
 8014c0a:	af00      	add	r7, sp, #0
   BSP_JOY_IRQHandler(JOY1, JOY_LEFT);
 8014c0c:	2104      	movs	r1, #4
 8014c0e:	2000      	movs	r0, #0
 8014c10:	f7f0 fd78 	bl	8005704 <BSP_JOY_IRQHandler>
}
 8014c14:	bf00      	nop
 8014c16:	bd80      	pop	{r7, pc}

08014c18 <EXTI9_5_IRQHandler>:
* @brief  This function handles External lines 9 to 5 interrupt request.
* @param  None
* @retval None
*/
void EXTI9_5_IRQHandler(void)
{
 8014c18:	b580      	push	{r7, lr}
 8014c1a:	af00      	add	r7, sp, #0
  BSP_JOY_IRQHandler(JOY1, JOY_RIGHT);
 8014c1c:	2108      	movs	r1, #8
 8014c1e:	2000      	movs	r0, #0
 8014c20:	f7f0 fd70 	bl	8005704 <BSP_JOY_IRQHandler>
  BSP_JOY_IRQHandler(JOY1, JOY_UP);
 8014c24:	2110      	movs	r1, #16
 8014c26:	2000      	movs	r0, #0
 8014c28:	f7f0 fd6c 	bl	8005704 <BSP_JOY_IRQHandler>
}
 8014c2c:	bf00      	nop
 8014c2e:	bd80      	pop	{r7, pc}

08014c30 <EXTI15_10_IRQHandler>:
  * @brief  This function handles External lines 15 to 10 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 8014c30:	b580      	push	{r7, lr}
 8014c32:	af00      	add	r7, sp, #0
  BSP_PB_IRQHandler(BUTTON_WAKEUP);
 8014c34:	2000      	movs	r0, #0
 8014c36:	f7f0 fc59 	bl	80054ec <BSP_PB_IRQHandler>
}
 8014c3a:	bf00      	nop
 8014c3c:	bd80      	pop	{r7, pc}

08014c3e <DMA2_Stream4_IRQHandler>:
  * @brief  This function handles SAI DMA interrupt request.
  * @param  None
  * @retval None
  */
void AUDIO_IN_SAIx_DMAx_IRQHandler()
{
 8014c3e:	b580      	push	{r7, lr}
 8014c40:	af00      	add	r7, sp, #0
  BSP_AUDIO_IN_IRQHandler(0,AUDIO_IN_DEVICE_DIGITAL_MIC);
 8014c42:	2110      	movs	r1, #16
 8014c44:	2000      	movs	r0, #0
 8014c46:	f7f1 fdab 	bl	80067a0 <BSP_AUDIO_IN_IRQHandler>
}
 8014c4a:	bf00      	nop
 8014c4c:	bd80      	pop	{r7, pc}

08014c4e <DMA2_Stream1_IRQHandler>:
  * @brief  This function handles DMA2 Stream 1 interrupt request.
  * @param  None
  * @retval None
  */
void AUDIO_OUT_SAIx_DMAx_IRQHandler(void)
{
 8014c4e:	b580      	push	{r7, lr}
 8014c50:	af00      	add	r7, sp, #0
  BSP_AUDIO_OUT_IRQHandler(0);
 8014c52:	2000      	movs	r0, #0
 8014c54:	f7f1 f8e4 	bl	8005e20 <BSP_AUDIO_OUT_IRQHandler>
}
 8014c58:	bf00      	nop
 8014c5a:	bd80      	pop	{r7, pc}

08014c5c <BDMA_Channel1_IRQHandler>:
  * @brief  This function handles BDMA Channel 1 for SAI_PDM interrupt request.
  * @param  None
  * @retval None
  */
void AUDIO_IN_SAI_PDMx_DMAx_IRQHandler(void)
{
 8014c5c:	b580      	push	{r7, lr}
 8014c5e:	af00      	add	r7, sp, #0
  BSP_AUDIO_IN_IRQHandler(1, AUDIO_IN_DEVICE_DIGITAL_MIC);
 8014c60:	2110      	movs	r1, #16
 8014c62:	2001      	movs	r0, #1
 8014c64:	f7f1 fd9c 	bl	80067a0 <BSP_AUDIO_IN_IRQHandler>
}
 8014c68:	bf00      	nop
 8014c6a:	bd80      	pop	{r7, pc}

08014c6c <MDMA_IRQHandler>:
/**
  * @brief  Handles MDMA transfer interrupt request.
  * @retval None
  */
void MDMA_IRQHandler(void)
{
 8014c6c:	b580      	push	{r7, lr}
 8014c6e:	af00      	add	r7, sp, #0
    BSP_SDRAM_IRQHandler(0);
 8014c70:	2000      	movs	r0, #0
 8014c72:	f7f3 ff8f 	bl	8008b94 <BSP_SDRAM_IRQHandler>
}
 8014c76:	bf00      	nop
 8014c78:	bd80      	pop	{r7, pc}

08014c7a <SDMMC1_IRQHandler>:
  * @brief  This function handles SD interrupt request.
  * @param  None
  * @retval None
  */
void SDMMC1_IRQHandler(void)
{
 8014c7a:	b580      	push	{r7, lr}
 8014c7c:	af00      	add	r7, sp, #0
  BSP_SD_IRQHandler(0);
 8014c7e:	2000      	movs	r0, #0
 8014c80:	f7f3 fee2 	bl	8008a48 <BSP_SD_IRQHandler>
}
 8014c84:	bf00      	nop
 8014c86:	bd80      	pop	{r7, pc}

08014c88 <DCMI_IRQHandler>:
  * @brief  DCMI interrupt handler.
  * @param  None
  * @retval None
  */
void DCMI_IRQHandler(void)
{
 8014c88:	b580      	push	{r7, lr}
 8014c8a:	af00      	add	r7, sp, #0
   BSP_CAMERA_IRQHandler(0);
 8014c8c:	2000      	movs	r0, #0
 8014c8e:	f7f2 fdc9 	bl	8007824 <BSP_CAMERA_IRQHandler>
}
 8014c92:	bf00      	nop
 8014c94:	bd80      	pop	{r7, pc}

08014c96 <DMA2_Stream3_IRQHandler>:
  * @brief  DMA interrupt handler.
  * @param  None
  * @retval None
  */
void DMA2_Stream3_IRQHandler(void)
{
 8014c96:	b580      	push	{r7, lr}
 8014c98:	af00      	add	r7, sp, #0
  BSP_CAMERA_DMA_IRQHandler(0);
 8014c9a:	2000      	movs	r0, #0
 8014c9c:	f7f2 fdd0 	bl	8007840 <BSP_CAMERA_DMA_IRQHandler>
}
 8014ca0:	bf00      	nop
 8014ca2:	bd80      	pop	{r7, pc}

08014ca4 <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
 8014ca4:	b580      	push	{r7, lr}
 8014ca6:	b082      	sub	sp, #8
 8014ca8:	af00      	add	r7, sp, #0
 8014caa:	6078      	str	r0, [r7, #4]
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	681b      	ldr	r3, [r3, #0]
 8014cb0:	4a22      	ldr	r2, [pc, #136]	; (8014d3c <UTIL_LCD_SetFuncDriver+0x98>)
 8014cb2:	6013      	str	r3, [r2, #0]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	685b      	ldr	r3, [r3, #4]
 8014cb8:	4a20      	ldr	r2, [pc, #128]	; (8014d3c <UTIL_LCD_SetFuncDriver+0x98>)
 8014cba:	6053      	str	r3, [r2, #4]
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	689b      	ldr	r3, [r3, #8]
 8014cc0:	4a1e      	ldr	r2, [pc, #120]	; (8014d3c <UTIL_LCD_SetFuncDriver+0x98>)
 8014cc2:	6093      	str	r3, [r2, #8]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	68db      	ldr	r3, [r3, #12]
 8014cc8:	4a1c      	ldr	r2, [pc, #112]	; (8014d3c <UTIL_LCD_SetFuncDriver+0x98>)
 8014cca:	60d3      	str	r3, [r2, #12]
  FuncDriver.FillRect       = pDrv->FillRect;
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	691b      	ldr	r3, [r3, #16]
 8014cd0:	4a1a      	ldr	r2, [pc, #104]	; (8014d3c <UTIL_LCD_SetFuncDriver+0x98>)
 8014cd2:	6113      	str	r3, [r2, #16]
  FuncDriver.GetPixel       = pDrv->GetPixel;
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	695b      	ldr	r3, [r3, #20]
 8014cd8:	4a18      	ldr	r2, [pc, #96]	; (8014d3c <UTIL_LCD_SetFuncDriver+0x98>)
 8014cda:	6153      	str	r3, [r2, #20]
  FuncDriver.SetPixel       = pDrv->SetPixel;
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	699b      	ldr	r3, [r3, #24]
 8014ce0:	4a16      	ldr	r2, [pc, #88]	; (8014d3c <UTIL_LCD_SetFuncDriver+0x98>)
 8014ce2:	6193      	str	r3, [r2, #24]
  FuncDriver.GetXSize       = pDrv->GetXSize;
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	69db      	ldr	r3, [r3, #28]
 8014ce8:	4a14      	ldr	r2, [pc, #80]	; (8014d3c <UTIL_LCD_SetFuncDriver+0x98>)
 8014cea:	61d3      	str	r3, [r2, #28]
  FuncDriver.GetYSize       = pDrv->GetYSize;
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	6a1b      	ldr	r3, [r3, #32]
 8014cf0:	4a12      	ldr	r2, [pc, #72]	; (8014d3c <UTIL_LCD_SetFuncDriver+0x98>)
 8014cf2:	6213      	str	r3, [r2, #32]
  FuncDriver.SetLayer       = pDrv->SetLayer;
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014cf8:	4a10      	ldr	r2, [pc, #64]	; (8014d3c <UTIL_LCD_SetFuncDriver+0x98>)
 8014cfa:	6253      	str	r3, [r2, #36]	; 0x24
  FuncDriver.GetFormat      = pDrv->GetFormat;
 8014cfc:	687b      	ldr	r3, [r7, #4]
 8014cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014d00:	4a0e      	ldr	r2, [pc, #56]	; (8014d3c <UTIL_LCD_SetFuncDriver+0x98>)
 8014d02:	6293      	str	r3, [r2, #40]	; 0x28

  DrawProp->LcdLayer = 0;
 8014d04:	4b0e      	ldr	r3, [pc, #56]	; (8014d40 <UTIL_LCD_SetFuncDriver+0x9c>)
 8014d06:	2200      	movs	r2, #0
 8014d08:	60da      	str	r2, [r3, #12]
  DrawProp->LcdDevice = 0;
 8014d0a:	4b0d      	ldr	r3, [pc, #52]	; (8014d40 <UTIL_LCD_SetFuncDriver+0x9c>)
 8014d0c:	2200      	movs	r2, #0
 8014d0e:	611a      	str	r2, [r3, #16]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 8014d10:	4b0a      	ldr	r3, [pc, #40]	; (8014d3c <UTIL_LCD_SetFuncDriver+0x98>)
 8014d12:	69db      	ldr	r3, [r3, #28]
 8014d14:	4a0b      	ldr	r2, [pc, #44]	; (8014d44 <UTIL_LCD_SetFuncDriver+0xa0>)
 8014d16:	4611      	mov	r1, r2
 8014d18:	2000      	movs	r0, #0
 8014d1a:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
 8014d1c:	4b07      	ldr	r3, [pc, #28]	; (8014d3c <UTIL_LCD_SetFuncDriver+0x98>)
 8014d1e:	6a1b      	ldr	r3, [r3, #32]
 8014d20:	4a09      	ldr	r2, [pc, #36]	; (8014d48 <UTIL_LCD_SetFuncDriver+0xa4>)
 8014d22:	4611      	mov	r1, r2
 8014d24:	2000      	movs	r0, #0
 8014d26:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 8014d28:	4b04      	ldr	r3, [pc, #16]	; (8014d3c <UTIL_LCD_SetFuncDriver+0x98>)
 8014d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014d2c:	4a07      	ldr	r2, [pc, #28]	; (8014d4c <UTIL_LCD_SetFuncDriver+0xa8>)
 8014d2e:	4611      	mov	r1, r2
 8014d30:	2000      	movs	r0, #0
 8014d32:	4798      	blx	r3
}
 8014d34:	bf00      	nop
 8014d36:	3708      	adds	r7, #8
 8014d38:	46bd      	mov	sp, r7
 8014d3a:	bd80      	pop	{r7, pc}
 8014d3c:	24001cfc 	.word	0x24001cfc
 8014d40:	24001cbc 	.word	0x24001cbc
 8014d44:	24001cd0 	.word	0x24001cd0
 8014d48:	24001cd4 	.word	0x24001cd4
 8014d4c:	24001cd8 	.word	0x24001cd8

08014d50 <UTIL_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
 8014d50:	b480      	push	{r7}
 8014d52:	b083      	sub	sp, #12
 8014d54:	af00      	add	r7, sp, #0
 8014d56:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
 8014d58:	4b06      	ldr	r3, [pc, #24]	; (8014d74 <UTIL_LCD_SetTextColor+0x24>)
 8014d5a:	68db      	ldr	r3, [r3, #12]
 8014d5c:	4a05      	ldr	r2, [pc, #20]	; (8014d74 <UTIL_LCD_SetTextColor+0x24>)
 8014d5e:	015b      	lsls	r3, r3, #5
 8014d60:	4413      	add	r3, r2
 8014d62:	687a      	ldr	r2, [r7, #4]
 8014d64:	601a      	str	r2, [r3, #0]
}
 8014d66:	bf00      	nop
 8014d68:	370c      	adds	r7, #12
 8014d6a:	46bd      	mov	sp, r7
 8014d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d70:	4770      	bx	lr
 8014d72:	bf00      	nop
 8014d74:	24001cbc 	.word	0x24001cbc

08014d78 <UTIL_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
 8014d78:	b480      	push	{r7}
 8014d7a:	b083      	sub	sp, #12
 8014d7c:	af00      	add	r7, sp, #0
 8014d7e:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
 8014d80:	4b06      	ldr	r3, [pc, #24]	; (8014d9c <UTIL_LCD_SetBackColor+0x24>)
 8014d82:	68db      	ldr	r3, [r3, #12]
 8014d84:	4a05      	ldr	r2, [pc, #20]	; (8014d9c <UTIL_LCD_SetBackColor+0x24>)
 8014d86:	015b      	lsls	r3, r3, #5
 8014d88:	4413      	add	r3, r2
 8014d8a:	3304      	adds	r3, #4
 8014d8c:	687a      	ldr	r2, [r7, #4]
 8014d8e:	601a      	str	r2, [r3, #0]
}
 8014d90:	bf00      	nop
 8014d92:	370c      	adds	r7, #12
 8014d94:	46bd      	mov	sp, r7
 8014d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d9a:	4770      	bx	lr
 8014d9c:	24001cbc 	.word	0x24001cbc

08014da0 <UTIL_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
 8014da0:	b480      	push	{r7}
 8014da2:	b083      	sub	sp, #12
 8014da4:	af00      	add	r7, sp, #0
 8014da6:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
 8014da8:	4b06      	ldr	r3, [pc, #24]	; (8014dc4 <UTIL_LCD_SetFont+0x24>)
 8014daa:	68db      	ldr	r3, [r3, #12]
 8014dac:	4a05      	ldr	r2, [pc, #20]	; (8014dc4 <UTIL_LCD_SetFont+0x24>)
 8014dae:	015b      	lsls	r3, r3, #5
 8014db0:	4413      	add	r3, r2
 8014db2:	3308      	adds	r3, #8
 8014db4:	687a      	ldr	r2, [r7, #4]
 8014db6:	601a      	str	r2, [r3, #0]
}
 8014db8:	bf00      	nop
 8014dba:	370c      	adds	r7, #12
 8014dbc:	46bd      	mov	sp, r7
 8014dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dc2:	4770      	bx	lr
 8014dc4:	24001cbc 	.word	0x24001cbc

08014dc8 <UTIL_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *UTIL_LCD_GetFont(void)
{
 8014dc8:	b480      	push	{r7}
 8014dca:	af00      	add	r7, sp, #0
  return DrawProp[DrawProp->LcdLayer].pFont;
 8014dcc:	4b05      	ldr	r3, [pc, #20]	; (8014de4 <UTIL_LCD_GetFont+0x1c>)
 8014dce:	68db      	ldr	r3, [r3, #12]
 8014dd0:	4a04      	ldr	r2, [pc, #16]	; (8014de4 <UTIL_LCD_GetFont+0x1c>)
 8014dd2:	015b      	lsls	r3, r3, #5
 8014dd4:	4413      	add	r3, r2
 8014dd6:	3308      	adds	r3, #8
 8014dd8:	681b      	ldr	r3, [r3, #0]
}
 8014dda:	4618      	mov	r0, r3
 8014ddc:	46bd      	mov	sp, r7
 8014dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014de2:	4770      	bx	lr
 8014de4:	24001cbc 	.word	0x24001cbc

08014de8 <UTIL_LCD_FillRGBRect>:
  * @param  Xpos    X position
  * @param  Ypos    Y position
  * @param  Length  Line length
  */
void UTIL_LCD_FillRGBRect(uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8014de8:	b590      	push	{r4, r7, lr}
 8014dea:	b087      	sub	sp, #28
 8014dec:	af02      	add	r7, sp, #8
 8014dee:	60f8      	str	r0, [r7, #12]
 8014df0:	60b9      	str	r1, [r7, #8]
 8014df2:	607a      	str	r2, [r7, #4]
 8014df4:	603b      	str	r3, [r7, #0]
  /* Write RGB rectangle data */
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 8014df6:	4b08      	ldr	r3, [pc, #32]	; (8014e18 <UTIL_LCD_FillRGBRect+0x30>)
 8014df8:	685c      	ldr	r4, [r3, #4]
 8014dfa:	4b08      	ldr	r3, [pc, #32]	; (8014e1c <UTIL_LCD_FillRGBRect+0x34>)
 8014dfc:	6918      	ldr	r0, [r3, #16]
 8014dfe:	6a3b      	ldr	r3, [r7, #32]
 8014e00:	9301      	str	r3, [sp, #4]
 8014e02:	683b      	ldr	r3, [r7, #0]
 8014e04:	9300      	str	r3, [sp, #0]
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	68ba      	ldr	r2, [r7, #8]
 8014e0a:	68f9      	ldr	r1, [r7, #12]
 8014e0c:	47a0      	blx	r4
}
 8014e0e:	bf00      	nop
 8014e10:	3714      	adds	r7, #20
 8014e12:	46bd      	mov	sp, r7
 8014e14:	bd90      	pop	{r4, r7, pc}
 8014e16:	bf00      	nop
 8014e18:	24001cfc 	.word	0x24001cfc
 8014e1c:	24001cbc 	.word	0x24001cbc

08014e20 <UTIL_LCD_DrawHLine>:
  * @param  Ypos    Y position
  * @param  Length  Line length
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawHLine(uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8014e20:	b590      	push	{r4, r7, lr}
 8014e22:	b087      	sub	sp, #28
 8014e24:	af02      	add	r7, sp, #8
 8014e26:	60f8      	str	r0, [r7, #12]
 8014e28:	60b9      	str	r1, [r7, #8]
 8014e2a:	607a      	str	r2, [r7, #4]
 8014e2c:	603b      	str	r3, [r7, #0]
  /* Write line */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8014e2e:	4b15      	ldr	r3, [pc, #84]	; (8014e84 <UTIL_LCD_DrawHLine+0x64>)
 8014e30:	69db      	ldr	r3, [r3, #28]
 8014e32:	2b02      	cmp	r3, #2
 8014e34:	d118      	bne.n	8014e68 <UTIL_LCD_DrawHLine+0x48>
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 8014e36:	4b14      	ldr	r3, [pc, #80]	; (8014e88 <UTIL_LCD_DrawHLine+0x68>)
 8014e38:	689c      	ldr	r4, [r3, #8]
 8014e3a:	4b12      	ldr	r3, [pc, #72]	; (8014e84 <UTIL_LCD_DrawHLine+0x64>)
 8014e3c:	6918      	ldr	r0, [r3, #16]
 8014e3e:	683b      	ldr	r3, [r7, #0]
 8014e40:	08db      	lsrs	r3, r3, #3
 8014e42:	f003 021f 	and.w	r2, r3, #31
 8014e46:	683b      	ldr	r3, [r7, #0]
 8014e48:	0a9b      	lsrs	r3, r3, #10
 8014e4a:	015b      	lsls	r3, r3, #5
 8014e4c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8014e50:	431a      	orrs	r2, r3
 8014e52:	683b      	ldr	r3, [r7, #0]
 8014e54:	0cdb      	lsrs	r3, r3, #19
 8014e56:	02db      	lsls	r3, r3, #11
 8014e58:	b29b      	uxth	r3, r3
 8014e5a:	4313      	orrs	r3, r2
 8014e5c:	9300      	str	r3, [sp, #0]
 8014e5e:	687b      	ldr	r3, [r7, #4]
 8014e60:	68ba      	ldr	r2, [r7, #8]
 8014e62:	68f9      	ldr	r1, [r7, #12]
 8014e64:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
  }
}
 8014e66:	e009      	b.n	8014e7c <UTIL_LCD_DrawHLine+0x5c>
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 8014e68:	4b07      	ldr	r3, [pc, #28]	; (8014e88 <UTIL_LCD_DrawHLine+0x68>)
 8014e6a:	689c      	ldr	r4, [r3, #8]
 8014e6c:	4b05      	ldr	r3, [pc, #20]	; (8014e84 <UTIL_LCD_DrawHLine+0x64>)
 8014e6e:	6918      	ldr	r0, [r3, #16]
 8014e70:	683b      	ldr	r3, [r7, #0]
 8014e72:	9300      	str	r3, [sp, #0]
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	68ba      	ldr	r2, [r7, #8]
 8014e78:	68f9      	ldr	r1, [r7, #12]
 8014e7a:	47a0      	blx	r4
}
 8014e7c:	bf00      	nop
 8014e7e:	3714      	adds	r7, #20
 8014e80:	46bd      	mov	sp, r7
 8014e82:	bd90      	pop	{r4, r7, pc}
 8014e84:	24001cbc 	.word	0x24001cbc
 8014e88:	24001cfc 	.word	0x24001cfc

08014e8c <UTIL_LCD_DrawVLine>:
  * @param  Ypos    Y position
  * @param  Length  Line length
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawVLine(uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8014e8c:	b590      	push	{r4, r7, lr}
 8014e8e:	b087      	sub	sp, #28
 8014e90:	af02      	add	r7, sp, #8
 8014e92:	60f8      	str	r0, [r7, #12]
 8014e94:	60b9      	str	r1, [r7, #8]
 8014e96:	607a      	str	r2, [r7, #4]
 8014e98:	603b      	str	r3, [r7, #0]
  /* Write line */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8014e9a:	4b15      	ldr	r3, [pc, #84]	; (8014ef0 <UTIL_LCD_DrawVLine+0x64>)
 8014e9c:	69db      	ldr	r3, [r3, #28]
 8014e9e:	2b02      	cmp	r3, #2
 8014ea0:	d118      	bne.n	8014ed4 <UTIL_LCD_DrawVLine+0x48>
  {
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 8014ea2:	4b14      	ldr	r3, [pc, #80]	; (8014ef4 <UTIL_LCD_DrawVLine+0x68>)
 8014ea4:	68dc      	ldr	r4, [r3, #12]
 8014ea6:	4b12      	ldr	r3, [pc, #72]	; (8014ef0 <UTIL_LCD_DrawVLine+0x64>)
 8014ea8:	6918      	ldr	r0, [r3, #16]
 8014eaa:	683b      	ldr	r3, [r7, #0]
 8014eac:	08db      	lsrs	r3, r3, #3
 8014eae:	f003 021f 	and.w	r2, r3, #31
 8014eb2:	683b      	ldr	r3, [r7, #0]
 8014eb4:	0a9b      	lsrs	r3, r3, #10
 8014eb6:	015b      	lsls	r3, r3, #5
 8014eb8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8014ebc:	431a      	orrs	r2, r3
 8014ebe:	683b      	ldr	r3, [r7, #0]
 8014ec0:	0cdb      	lsrs	r3, r3, #19
 8014ec2:	02db      	lsls	r3, r3, #11
 8014ec4:	b29b      	uxth	r3, r3
 8014ec6:	4313      	orrs	r3, r2
 8014ec8:	9300      	str	r3, [sp, #0]
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	68ba      	ldr	r2, [r7, #8]
 8014ece:	68f9      	ldr	r1, [r7, #12]
 8014ed0:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
  }
}
 8014ed2:	e009      	b.n	8014ee8 <UTIL_LCD_DrawVLine+0x5c>
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 8014ed4:	4b07      	ldr	r3, [pc, #28]	; (8014ef4 <UTIL_LCD_DrawVLine+0x68>)
 8014ed6:	68dc      	ldr	r4, [r3, #12]
 8014ed8:	4b05      	ldr	r3, [pc, #20]	; (8014ef0 <UTIL_LCD_DrawVLine+0x64>)
 8014eda:	6918      	ldr	r0, [r3, #16]
 8014edc:	683b      	ldr	r3, [r7, #0]
 8014ede:	9300      	str	r3, [sp, #0]
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	68ba      	ldr	r2, [r7, #8]
 8014ee4:	68f9      	ldr	r1, [r7, #12]
 8014ee6:	47a0      	blx	r4
}
 8014ee8:	bf00      	nop
 8014eea:	3714      	adds	r7, #20
 8014eec:	46bd      	mov	sp, r7
 8014eee:	bd90      	pop	{r4, r7, pc}
 8014ef0:	24001cbc 	.word	0x24001cbc
 8014ef4:	24001cfc 	.word	0x24001cfc

08014ef8 <UTIL_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color  Color of the background
  */
void UTIL_LCD_Clear(uint32_t Color)
{
 8014ef8:	b580      	push	{r7, lr}
 8014efa:	b084      	sub	sp, #16
 8014efc:	af02      	add	r7, sp, #8
 8014efe:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 8014f00:	4b07      	ldr	r3, [pc, #28]	; (8014f20 <UTIL_LCD_Clear+0x28>)
 8014f02:	695a      	ldr	r2, [r3, #20]
 8014f04:	4b06      	ldr	r3, [pc, #24]	; (8014f20 <UTIL_LCD_Clear+0x28>)
 8014f06:	6999      	ldr	r1, [r3, #24]
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	9300      	str	r3, [sp, #0]
 8014f0c:	460b      	mov	r3, r1
 8014f0e:	2100      	movs	r1, #0
 8014f10:	2000      	movs	r0, #0
 8014f12:	f000 f92b 	bl	801516c <UTIL_LCD_FillRect>
}
 8014f16:	bf00      	nop
 8014f18:	3708      	adds	r7, #8
 8014f1a:	46bd      	mov	sp, r7
 8014f1c:	bd80      	pop	{r7, pc}
 8014f1e:	bf00      	nop
 8014f20:	24001cbc 	.word	0x24001cbc

08014f24 <UTIL_LCD_DisplayChar>:
  * @param  Ypos Line where to display the character shape.
  * @param  Ascii Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void UTIL_LCD_DisplayChar(uint32_t Xpos, uint32_t Ypos, uint8_t Ascii)
{
 8014f24:	b580      	push	{r7, lr}
 8014f26:	b084      	sub	sp, #16
 8014f28:	af00      	add	r7, sp, #0
 8014f2a:	60f8      	str	r0, [r7, #12]
 8014f2c:	60b9      	str	r1, [r7, #8]
 8014f2e:	4613      	mov	r3, r2
 8014f30:	71fb      	strb	r3, [r7, #7]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 8014f32:	4b16      	ldr	r3, [pc, #88]	; (8014f8c <UTIL_LCD_DisplayChar+0x68>)
 8014f34:	68db      	ldr	r3, [r3, #12]
 8014f36:	4a15      	ldr	r2, [pc, #84]	; (8014f8c <UTIL_LCD_DisplayChar+0x68>)
 8014f38:	015b      	lsls	r3, r3, #5
 8014f3a:	4413      	add	r3, r2
 8014f3c:	3308      	adds	r3, #8
 8014f3e:	681b      	ldr	r3, [r3, #0]
 8014f40:	681a      	ldr	r2, [r3, #0]
 8014f42:	79fb      	ldrb	r3, [r7, #7]
 8014f44:	3b20      	subs	r3, #32
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 8014f46:	4911      	ldr	r1, [pc, #68]	; (8014f8c <UTIL_LCD_DisplayChar+0x68>)
 8014f48:	68c9      	ldr	r1, [r1, #12]
 8014f4a:	4810      	ldr	r0, [pc, #64]	; (8014f8c <UTIL_LCD_DisplayChar+0x68>)
 8014f4c:	0149      	lsls	r1, r1, #5
 8014f4e:	4401      	add	r1, r0
 8014f50:	3108      	adds	r1, #8
 8014f52:	6809      	ldr	r1, [r1, #0]
 8014f54:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 8014f56:	fb01 f103 	mul.w	r1, r1, r3
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 8014f5a:	4b0c      	ldr	r3, [pc, #48]	; (8014f8c <UTIL_LCD_DisplayChar+0x68>)
 8014f5c:	68db      	ldr	r3, [r3, #12]
 8014f5e:	480b      	ldr	r0, [pc, #44]	; (8014f8c <UTIL_LCD_DisplayChar+0x68>)
 8014f60:	015b      	lsls	r3, r3, #5
 8014f62:	4403      	add	r3, r0
 8014f64:	3308      	adds	r3, #8
 8014f66:	681b      	ldr	r3, [r3, #0]
 8014f68:	889b      	ldrh	r3, [r3, #4]
 8014f6a:	3307      	adds	r3, #7
 8014f6c:	2b00      	cmp	r3, #0
 8014f6e:	da00      	bge.n	8014f72 <UTIL_LCD_DisplayChar+0x4e>
 8014f70:	3307      	adds	r3, #7
 8014f72:	10db      	asrs	r3, r3, #3
 8014f74:	fb03 f301 	mul.w	r3, r3, r1
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 8014f78:	4413      	add	r3, r2
 8014f7a:	461a      	mov	r2, r3
 8014f7c:	68b9      	ldr	r1, [r7, #8]
 8014f7e:	68f8      	ldr	r0, [r7, #12]
 8014f80:	f000 f92e 	bl	80151e0 <DrawChar>
}
 8014f84:	bf00      	nop
 8014f86:	3710      	adds	r7, #16
 8014f88:	46bd      	mov	sp, r7
 8014f8a:	bd80      	pop	{r7, pc}
 8014f8c:	24001cbc 	.word	0x24001cbc

08014f90 <UTIL_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void UTIL_LCD_DisplayStringAt(uint32_t Xpos, uint32_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8014f90:	b580      	push	{r7, lr}
 8014f92:	b08a      	sub	sp, #40	; 0x28
 8014f94:	af00      	add	r7, sp, #0
 8014f96:	60f8      	str	r0, [r7, #12]
 8014f98:	60b9      	str	r1, [r7, #8]
 8014f9a:	607a      	str	r2, [r7, #4]
 8014f9c:	70fb      	strb	r3, [r7, #3]
  uint32_t refcolumn = 1, i = 0;
 8014f9e:	2301      	movs	r3, #1
 8014fa0:	627b      	str	r3, [r7, #36]	; 0x24
 8014fa2:	2300      	movs	r3, #0
 8014fa4:	623b      	str	r3, [r7, #32]
  uint32_t size = 0, xsize = 0;
 8014fa6:	2300      	movs	r3, #0
 8014fa8:	61fb      	str	r3, [r7, #28]
 8014faa:	2300      	movs	r3, #0
 8014fac:	617b      	str	r3, [r7, #20]
  uint8_t  *ptr = Text;
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	61bb      	str	r3, [r7, #24]

  /* Get the text size */
  while (*ptr++) size ++ ;
 8014fb2:	e002      	b.n	8014fba <UTIL_LCD_DisplayStringAt+0x2a>
 8014fb4:	69fb      	ldr	r3, [r7, #28]
 8014fb6:	3301      	adds	r3, #1
 8014fb8:	61fb      	str	r3, [r7, #28]
 8014fba:	69bb      	ldr	r3, [r7, #24]
 8014fbc:	1c5a      	adds	r2, r3, #1
 8014fbe:	61ba      	str	r2, [r7, #24]
 8014fc0:	781b      	ldrb	r3, [r3, #0]
 8014fc2:	2b00      	cmp	r3, #0
 8014fc4:	d1f6      	bne.n	8014fb4 <UTIL_LCD_DisplayStringAt+0x24>

  /* Characters number per line */
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
 8014fc6:	4b48      	ldr	r3, [pc, #288]	; (80150e8 <UTIL_LCD_DisplayStringAt+0x158>)
 8014fc8:	695b      	ldr	r3, [r3, #20]
 8014fca:	4a47      	ldr	r2, [pc, #284]	; (80150e8 <UTIL_LCD_DisplayStringAt+0x158>)
 8014fcc:	68d2      	ldr	r2, [r2, #12]
 8014fce:	4946      	ldr	r1, [pc, #280]	; (80150e8 <UTIL_LCD_DisplayStringAt+0x158>)
 8014fd0:	0152      	lsls	r2, r2, #5
 8014fd2:	440a      	add	r2, r1
 8014fd4:	3208      	adds	r2, #8
 8014fd6:	6812      	ldr	r2, [r2, #0]
 8014fd8:	8892      	ldrh	r2, [r2, #4]
 8014fda:	fbb3 f3f2 	udiv	r3, r3, r2
 8014fde:	617b      	str	r3, [r7, #20]

  switch (Mode)
 8014fe0:	78fb      	ldrb	r3, [r7, #3]
 8014fe2:	2b03      	cmp	r3, #3
 8014fe4:	d018      	beq.n	8015018 <UTIL_LCD_DisplayStringAt+0x88>
 8014fe6:	2b03      	cmp	r3, #3
 8014fe8:	dc2a      	bgt.n	8015040 <UTIL_LCD_DisplayStringAt+0xb0>
 8014fea:	2b01      	cmp	r3, #1
 8014fec:	d002      	beq.n	8014ff4 <UTIL_LCD_DisplayStringAt+0x64>
 8014fee:	2b02      	cmp	r3, #2
 8014ff0:	d015      	beq.n	801501e <UTIL_LCD_DisplayStringAt+0x8e>
 8014ff2:	e025      	b.n	8015040 <UTIL_LCD_DisplayStringAt+0xb0>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[DrawProp->LcdLayer].pFont->Width) / 2;
 8014ff4:	697a      	ldr	r2, [r7, #20]
 8014ff6:	69fb      	ldr	r3, [r7, #28]
 8014ff8:	1ad3      	subs	r3, r2, r3
 8014ffa:	4a3b      	ldr	r2, [pc, #236]	; (80150e8 <UTIL_LCD_DisplayStringAt+0x158>)
 8014ffc:	68d2      	ldr	r2, [r2, #12]
 8014ffe:	493a      	ldr	r1, [pc, #232]	; (80150e8 <UTIL_LCD_DisplayStringAt+0x158>)
 8015000:	0152      	lsls	r2, r2, #5
 8015002:	440a      	add	r2, r1
 8015004:	3208      	adds	r2, #8
 8015006:	6812      	ldr	r2, [r2, #0]
 8015008:	8892      	ldrh	r2, [r2, #4]
 801500a:	fb02 f303 	mul.w	r3, r2, r3
 801500e:	085b      	lsrs	r3, r3, #1
 8015010:	68fa      	ldr	r2, [r7, #12]
 8015012:	4413      	add	r3, r2
 8015014:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8015016:	e016      	b.n	8015046 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8015018:	68fb      	ldr	r3, [r7, #12]
 801501a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801501c:	e013      	b.n	8015046 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
 801501e:	697a      	ldr	r2, [r7, #20]
 8015020:	69fb      	ldr	r3, [r7, #28]
 8015022:	1ad3      	subs	r3, r2, r3
 8015024:	4a30      	ldr	r2, [pc, #192]	; (80150e8 <UTIL_LCD_DisplayStringAt+0x158>)
 8015026:	68d2      	ldr	r2, [r2, #12]
 8015028:	492f      	ldr	r1, [pc, #188]	; (80150e8 <UTIL_LCD_DisplayStringAt+0x158>)
 801502a:	0152      	lsls	r2, r2, #5
 801502c:	440a      	add	r2, r1
 801502e:	3208      	adds	r2, #8
 8015030:	6812      	ldr	r2, [r2, #0]
 8015032:	8892      	ldrh	r2, [r2, #4]
 8015034:	fb02 f203 	mul.w	r2, r2, r3
 8015038:	68fb      	ldr	r3, [r7, #12]
 801503a:	1ad3      	subs	r3, r2, r3
 801503c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801503e:	e002      	b.n	8015046 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  default:
    {
      refcolumn = Xpos;
 8015040:	68fb      	ldr	r3, [r7, #12]
 8015042:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8015044:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8015046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015048:	2b00      	cmp	r3, #0
 801504a:	d003      	beq.n	8015054 <UTIL_LCD_DisplayStringAt+0xc4>
 801504c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801504e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015052:	d31b      	bcc.n	801508c <UTIL_LCD_DisplayStringAt+0xfc>
  {
    refcolumn = 1;
 8015054:	2301      	movs	r3, #1
 8015056:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 8015058:	e018      	b.n	801508c <UTIL_LCD_DisplayStringAt+0xfc>
  {
    /* Display one character on LCD */
    UTIL_LCD_DisplayChar(refcolumn, Ypos, *Text);
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	781b      	ldrb	r3, [r3, #0]
 801505e:	461a      	mov	r2, r3
 8015060:	68b9      	ldr	r1, [r7, #8]
 8015062:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015064:	f7ff ff5e 	bl	8014f24 <UTIL_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 8015068:	4b1f      	ldr	r3, [pc, #124]	; (80150e8 <UTIL_LCD_DisplayStringAt+0x158>)
 801506a:	68db      	ldr	r3, [r3, #12]
 801506c:	4a1e      	ldr	r2, [pc, #120]	; (80150e8 <UTIL_LCD_DisplayStringAt+0x158>)
 801506e:	015b      	lsls	r3, r3, #5
 8015070:	4413      	add	r3, r2
 8015072:	3308      	adds	r3, #8
 8015074:	681b      	ldr	r3, [r3, #0]
 8015076:	889b      	ldrh	r3, [r3, #4]
 8015078:	461a      	mov	r2, r3
 801507a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801507c:	4413      	add	r3, r2
 801507e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Point on the next character */
    Text++;
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	3301      	adds	r3, #1
 8015084:	607b      	str	r3, [r7, #4]
    i++;
 8015086:	6a3b      	ldr	r3, [r7, #32]
 8015088:	3301      	adds	r3, #1
 801508a:	623b      	str	r3, [r7, #32]
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	781b      	ldrb	r3, [r3, #0]
 8015090:	2b00      	cmp	r3, #0
 8015092:	bf14      	ite	ne
 8015094:	2301      	movne	r3, #1
 8015096:	2300      	moveq	r3, #0
 8015098:	b2da      	uxtb	r2, r3
 801509a:	4b13      	ldr	r3, [pc, #76]	; (80150e8 <UTIL_LCD_DisplayStringAt+0x158>)
 801509c:	6959      	ldr	r1, [r3, #20]
 801509e:	4b12      	ldr	r3, [pc, #72]	; (80150e8 <UTIL_LCD_DisplayStringAt+0x158>)
 80150a0:	68db      	ldr	r3, [r3, #12]
 80150a2:	4811      	ldr	r0, [pc, #68]	; (80150e8 <UTIL_LCD_DisplayStringAt+0x158>)
 80150a4:	015b      	lsls	r3, r3, #5
 80150a6:	4403      	add	r3, r0
 80150a8:	3308      	adds	r3, #8
 80150aa:	681b      	ldr	r3, [r3, #0]
 80150ac:	889b      	ldrh	r3, [r3, #4]
 80150ae:	4618      	mov	r0, r3
 80150b0:	6a3b      	ldr	r3, [r7, #32]
 80150b2:	fb03 f300 	mul.w	r3, r3, r0
 80150b6:	1acb      	subs	r3, r1, r3
 80150b8:	b29b      	uxth	r3, r3
 80150ba:	490b      	ldr	r1, [pc, #44]	; (80150e8 <UTIL_LCD_DisplayStringAt+0x158>)
 80150bc:	68c9      	ldr	r1, [r1, #12]
 80150be:	480a      	ldr	r0, [pc, #40]	; (80150e8 <UTIL_LCD_DisplayStringAt+0x158>)
 80150c0:	0149      	lsls	r1, r1, #5
 80150c2:	4401      	add	r1, r0
 80150c4:	3108      	adds	r1, #8
 80150c6:	6809      	ldr	r1, [r1, #0]
 80150c8:	8889      	ldrh	r1, [r1, #4]
 80150ca:	428b      	cmp	r3, r1
 80150cc:	bf2c      	ite	cs
 80150ce:	2301      	movcs	r3, #1
 80150d0:	2300      	movcc	r3, #0
 80150d2:	b2db      	uxtb	r3, r3
 80150d4:	4013      	ands	r3, r2
 80150d6:	b2db      	uxtb	r3, r3
 80150d8:	2b00      	cmp	r3, #0
 80150da:	d1be      	bne.n	801505a <UTIL_LCD_DisplayStringAt+0xca>
  }
}
 80150dc:	bf00      	nop
 80150de:	bf00      	nop
 80150e0:	3728      	adds	r7, #40	; 0x28
 80150e2:	46bd      	mov	sp, r7
 80150e4:	bd80      	pop	{r7, pc}
 80150e6:	bf00      	nop
 80150e8:	24001cbc 	.word	0x24001cbc

080150ec <UTIL_LCD_DrawRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_DrawRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 80150ec:	b580      	push	{r7, lr}
 80150ee:	b084      	sub	sp, #16
 80150f0:	af00      	add	r7, sp, #0
 80150f2:	60f8      	str	r0, [r7, #12]
 80150f4:	60b9      	str	r1, [r7, #8]
 80150f6:	607a      	str	r2, [r7, #4]
 80150f8:	603b      	str	r3, [r7, #0]
  /* Draw horizontal lines */
  UTIL_LCD_DrawHLine(Xpos, Ypos, Width, Color);
 80150fa:	69bb      	ldr	r3, [r7, #24]
 80150fc:	687a      	ldr	r2, [r7, #4]
 80150fe:	68b9      	ldr	r1, [r7, #8]
 8015100:	68f8      	ldr	r0, [r7, #12]
 8015102:	f7ff fe8d 	bl	8014e20 <UTIL_LCD_DrawHLine>
  UTIL_LCD_DrawHLine(Xpos, (Ypos+ Height - 1U), Width, Color);
 8015106:	68ba      	ldr	r2, [r7, #8]
 8015108:	683b      	ldr	r3, [r7, #0]
 801510a:	4413      	add	r3, r2
 801510c:	1e59      	subs	r1, r3, #1
 801510e:	69bb      	ldr	r3, [r7, #24]
 8015110:	687a      	ldr	r2, [r7, #4]
 8015112:	68f8      	ldr	r0, [r7, #12]
 8015114:	f7ff fe84 	bl	8014e20 <UTIL_LCD_DrawHLine>

  /* Draw vertical lines */
  UTIL_LCD_DrawVLine(Xpos, Ypos, Height, Color);
 8015118:	69bb      	ldr	r3, [r7, #24]
 801511a:	683a      	ldr	r2, [r7, #0]
 801511c:	68b9      	ldr	r1, [r7, #8]
 801511e:	68f8      	ldr	r0, [r7, #12]
 8015120:	f7ff feb4 	bl	8014e8c <UTIL_LCD_DrawVLine>
  UTIL_LCD_DrawVLine((Xpos + Width - 1U), Ypos, Height, Color);
 8015124:	68fa      	ldr	r2, [r7, #12]
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	4413      	add	r3, r2
 801512a:	1e58      	subs	r0, r3, #1
 801512c:	69bb      	ldr	r3, [r7, #24]
 801512e:	683a      	ldr	r2, [r7, #0]
 8015130:	68b9      	ldr	r1, [r7, #8]
 8015132:	f7ff feab 	bl	8014e8c <UTIL_LCD_DrawVLine>
}
 8015136:	bf00      	nop
 8015138:	3710      	adds	r7, #16
 801513a:	46bd      	mov	sp, r7
 801513c:	bd80      	pop	{r7, pc}
	...

08015140 <UTIL_LCD_DrawBitmap>:
  * @param  Xpos  Bmp X position in the LCD
  * @param  Ypos  Bmp Y position in the LCD
  * @param  pData Pointer to Bmp picture address in the internal Flash
  */
void UTIL_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pData)
{
 8015140:	b590      	push	{r4, r7, lr}
 8015142:	b085      	sub	sp, #20
 8015144:	af00      	add	r7, sp, #0
 8015146:	60f8      	str	r0, [r7, #12]
 8015148:	60b9      	str	r1, [r7, #8]
 801514a:	607a      	str	r2, [r7, #4]
  FuncDriver.DrawBitmap(DrawProp->LcdDevice, Xpos, Ypos, pData);
 801514c:	4b05      	ldr	r3, [pc, #20]	; (8015164 <UTIL_LCD_DrawBitmap+0x24>)
 801514e:	681c      	ldr	r4, [r3, #0]
 8015150:	4b05      	ldr	r3, [pc, #20]	; (8015168 <UTIL_LCD_DrawBitmap+0x28>)
 8015152:	6918      	ldr	r0, [r3, #16]
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	68ba      	ldr	r2, [r7, #8]
 8015158:	68f9      	ldr	r1, [r7, #12]
 801515a:	47a0      	blx	r4
}
 801515c:	bf00      	nop
 801515e:	3714      	adds	r7, #20
 8015160:	46bd      	mov	sp, r7
 8015162:	bd90      	pop	{r4, r7, pc}
 8015164:	24001cfc 	.word	0x24001cfc
 8015168:	24001cbc 	.word	0x24001cbc

0801516c <UTIL_LCD_FillRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 801516c:	b590      	push	{r4, r7, lr}
 801516e:	b087      	sub	sp, #28
 8015170:	af02      	add	r7, sp, #8
 8015172:	60f8      	str	r0, [r7, #12]
 8015174:	60b9      	str	r1, [r7, #8]
 8015176:	607a      	str	r2, [r7, #4]
 8015178:	603b      	str	r3, [r7, #0]
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801517a:	4b17      	ldr	r3, [pc, #92]	; (80151d8 <UTIL_LCD_FillRect+0x6c>)
 801517c:	69db      	ldr	r3, [r3, #28]
 801517e:	2b02      	cmp	r3, #2
 8015180:	d11a      	bne.n	80151b8 <UTIL_LCD_FillRect+0x4c>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 8015182:	4b16      	ldr	r3, [pc, #88]	; (80151dc <UTIL_LCD_FillRect+0x70>)
 8015184:	691c      	ldr	r4, [r3, #16]
 8015186:	4b14      	ldr	r3, [pc, #80]	; (80151d8 <UTIL_LCD_FillRect+0x6c>)
 8015188:	6918      	ldr	r0, [r3, #16]
 801518a:	6a3b      	ldr	r3, [r7, #32]
 801518c:	08db      	lsrs	r3, r3, #3
 801518e:	f003 021f 	and.w	r2, r3, #31
 8015192:	6a3b      	ldr	r3, [r7, #32]
 8015194:	0a9b      	lsrs	r3, r3, #10
 8015196:	015b      	lsls	r3, r3, #5
 8015198:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801519c:	431a      	orrs	r2, r3
 801519e:	6a3b      	ldr	r3, [r7, #32]
 80151a0:	0cdb      	lsrs	r3, r3, #19
 80151a2:	02db      	lsls	r3, r3, #11
 80151a4:	b29b      	uxth	r3, r3
 80151a6:	4313      	orrs	r3, r2
 80151a8:	9301      	str	r3, [sp, #4]
 80151aa:	683b      	ldr	r3, [r7, #0]
 80151ac:	9300      	str	r3, [sp, #0]
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	68ba      	ldr	r2, [r7, #8]
 80151b2:	68f9      	ldr	r1, [r7, #12]
 80151b4:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
  }
}
 80151b6:	e00b      	b.n	80151d0 <UTIL_LCD_FillRect+0x64>
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
 80151b8:	4b08      	ldr	r3, [pc, #32]	; (80151dc <UTIL_LCD_FillRect+0x70>)
 80151ba:	691c      	ldr	r4, [r3, #16]
 80151bc:	4b06      	ldr	r3, [pc, #24]	; (80151d8 <UTIL_LCD_FillRect+0x6c>)
 80151be:	6918      	ldr	r0, [r3, #16]
 80151c0:	6a3b      	ldr	r3, [r7, #32]
 80151c2:	9301      	str	r3, [sp, #4]
 80151c4:	683b      	ldr	r3, [r7, #0]
 80151c6:	9300      	str	r3, [sp, #0]
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	68ba      	ldr	r2, [r7, #8]
 80151cc:	68f9      	ldr	r1, [r7, #12]
 80151ce:	47a0      	blx	r4
}
 80151d0:	bf00      	nop
 80151d2:	3714      	adds	r7, #20
 80151d4:	46bd      	mov	sp, r7
 80151d6:	bd90      	pop	{r4, r7, pc}
 80151d8:	24001cbc 	.word	0x24001cbc
 80151dc:	24001cfc 	.word	0x24001cfc

080151e0 <DrawChar>:
  * @param  Xpos  Line where to display the character shape
  * @param  Ypos  Start column address
  * @param  pData Pointer to the character data
  */
static void DrawChar(uint32_t Xpos, uint32_t Ypos, const uint8_t *pData)
{
 80151e0:	b580      	push	{r7, lr}
 80151e2:	b0b2      	sub	sp, #200	; 0xc8
 80151e4:	af02      	add	r7, sp, #8
 80151e6:	60f8      	str	r0, [r7, #12]
 80151e8:	60b9      	str	r1, [r7, #8]
 80151ea:	607a      	str	r2, [r7, #4]
  uint32_t i = 0, j = 0, offset;
 80151ec:	2300      	movs	r3, #0
 80151ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80151f2:	2300      	movs	r3, #0
 80151f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t height, width;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[DrawProp->LcdLayer].pFont->Height;
 80151f8:	4ba7      	ldr	r3, [pc, #668]	; (8015498 <DrawChar+0x2b8>)
 80151fa:	68db      	ldr	r3, [r3, #12]
 80151fc:	4aa6      	ldr	r2, [pc, #664]	; (8015498 <DrawChar+0x2b8>)
 80151fe:	015b      	lsls	r3, r3, #5
 8015200:	4413      	add	r3, r2
 8015202:	3308      	adds	r3, #8
 8015204:	681b      	ldr	r3, [r3, #0]
 8015206:	88db      	ldrh	r3, [r3, #6]
 8015208:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  width  = DrawProp[DrawProp->LcdLayer].pFont->Width;
 801520c:	4ba2      	ldr	r3, [pc, #648]	; (8015498 <DrawChar+0x2b8>)
 801520e:	68db      	ldr	r3, [r3, #12]
 8015210:	4aa1      	ldr	r2, [pc, #644]	; (8015498 <DrawChar+0x2b8>)
 8015212:	015b      	lsls	r3, r3, #5
 8015214:	4413      	add	r3, r2
 8015216:	3308      	adds	r3, #8
 8015218:	681b      	ldr	r3, [r3, #0]
 801521a:	889b      	ldrh	r3, [r3, #4]
 801521c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint16_t rgb565[24];
  uint32_t argb8888[24];

  offset =  8 *((width + 7)/8) -  width ;
 8015220:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015224:	3307      	adds	r3, #7
 8015226:	f023 0207 	bic.w	r2, r3, #7
 801522a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801522e:	1ad3      	subs	r3, r2, r3
 8015230:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  for(i = 0; i < height; i++)
 8015234:	2300      	movs	r3, #0
 8015236:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801523a:	e120      	b.n	801547e <DrawChar+0x29e>
  {
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
 801523c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015240:	3307      	adds	r3, #7
 8015242:	08db      	lsrs	r3, r3, #3
 8015244:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8015248:	fb02 f303 	mul.w	r3, r2, r3
 801524c:	687a      	ldr	r2, [r7, #4]
 801524e:	4413      	add	r3, r2
 8015250:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

    switch(((width + 7)/8))
 8015254:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015258:	3307      	adds	r3, #7
 801525a:	08db      	lsrs	r3, r3, #3
 801525c:	2b01      	cmp	r3, #1
 801525e:	d002      	beq.n	8015266 <DrawChar+0x86>
 8015260:	2b02      	cmp	r3, #2
 8015262:	d006      	beq.n	8015272 <DrawChar+0x92>
 8015264:	e011      	b.n	801528a <DrawChar+0xaa>
    {

    case 1:
      line =  pchar[0];
 8015266:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801526a:	781b      	ldrb	r3, [r3, #0]
 801526c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      break;
 8015270:	e01d      	b.n	80152ae <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8015272:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8015276:	781b      	ldrb	r3, [r3, #0]
 8015278:	021b      	lsls	r3, r3, #8
 801527a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801527e:	3201      	adds	r2, #1
 8015280:	7812      	ldrb	r2, [r2, #0]
 8015282:	4313      	orrs	r3, r2
 8015284:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      break;
 8015288:	e011      	b.n	80152ae <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 801528a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801528e:	781b      	ldrb	r3, [r3, #0]
 8015290:	041a      	lsls	r2, r3, #16
 8015292:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8015296:	3301      	adds	r3, #1
 8015298:	781b      	ldrb	r3, [r3, #0]
 801529a:	021b      	lsls	r3, r3, #8
 801529c:	4313      	orrs	r3, r2
 801529e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80152a2:	3202      	adds	r2, #2
 80152a4:	7812      	ldrb	r2, [r2, #0]
 80152a6:	4313      	orrs	r3, r2
 80152a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      break;
 80152ac:	bf00      	nop
    }

    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 80152ae:	4b7a      	ldr	r3, [pc, #488]	; (8015498 <DrawChar+0x2b8>)
 80152b0:	68db      	ldr	r3, [r3, #12]
 80152b2:	4a79      	ldr	r2, [pc, #484]	; (8015498 <DrawChar+0x2b8>)
 80152b4:	015b      	lsls	r3, r3, #5
 80152b6:	4413      	add	r3, r2
 80152b8:	331c      	adds	r3, #28
 80152ba:	681b      	ldr	r3, [r3, #0]
 80152bc:	2b02      	cmp	r3, #2
 80152be:	f040 808e 	bne.w	80153de <DrawChar+0x1fe>
    {
      for (j = 0; j < width; j++)
 80152c2:	2300      	movs	r3, #0
 80152c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80152c8:	e076      	b.n	80153b8 <DrawChar+0x1d8>
      {
        if(line & (1 << (width- j + offset- 1)))
 80152ca:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80152ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80152d2:	1ad2      	subs	r2, r2, r3
 80152d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80152d8:	4413      	add	r3, r2
 80152da:	3b01      	subs	r3, #1
 80152dc:	2201      	movs	r2, #1
 80152de:	fa02 f303 	lsl.w	r3, r2, r3
 80152e2:	461a      	mov	r2, r3
 80152e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80152e8:	4013      	ands	r3, r2
 80152ea:	2b00      	cmp	r3, #0
 80152ec:	d02e      	beq.n	801534c <DrawChar+0x16c>
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
 80152ee:	4b6a      	ldr	r3, [pc, #424]	; (8015498 <DrawChar+0x2b8>)
 80152f0:	68db      	ldr	r3, [r3, #12]
 80152f2:	4a69      	ldr	r2, [pc, #420]	; (8015498 <DrawChar+0x2b8>)
 80152f4:	015b      	lsls	r3, r3, #5
 80152f6:	4413      	add	r3, r2
 80152f8:	681b      	ldr	r3, [r3, #0]
 80152fa:	08db      	lsrs	r3, r3, #3
 80152fc:	b29b      	uxth	r3, r3
 80152fe:	f003 031f 	and.w	r3, r3, #31
 8015302:	b29a      	uxth	r2, r3
 8015304:	4b64      	ldr	r3, [pc, #400]	; (8015498 <DrawChar+0x2b8>)
 8015306:	68db      	ldr	r3, [r3, #12]
 8015308:	4963      	ldr	r1, [pc, #396]	; (8015498 <DrawChar+0x2b8>)
 801530a:	015b      	lsls	r3, r3, #5
 801530c:	440b      	add	r3, r1
 801530e:	681b      	ldr	r3, [r3, #0]
 8015310:	0a9b      	lsrs	r3, r3, #10
 8015312:	b29b      	uxth	r3, r3
 8015314:	015b      	lsls	r3, r3, #5
 8015316:	b29b      	uxth	r3, r3
 8015318:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801531c:	b29b      	uxth	r3, r3
 801531e:	4313      	orrs	r3, r2
 8015320:	b29a      	uxth	r2, r3
 8015322:	4b5d      	ldr	r3, [pc, #372]	; (8015498 <DrawChar+0x2b8>)
 8015324:	68db      	ldr	r3, [r3, #12]
 8015326:	495c      	ldr	r1, [pc, #368]	; (8015498 <DrawChar+0x2b8>)
 8015328:	015b      	lsls	r3, r3, #5
 801532a:	440b      	add	r3, r1
 801532c:	681b      	ldr	r3, [r3, #0]
 801532e:	0cdb      	lsrs	r3, r3, #19
 8015330:	b29b      	uxth	r3, r3
 8015332:	02db      	lsls	r3, r3, #11
 8015334:	b29b      	uxth	r3, r3
 8015336:	4313      	orrs	r3, r2
 8015338:	b29a      	uxth	r2, r3
 801533a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801533e:	005b      	lsls	r3, r3, #1
 8015340:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 8015344:	440b      	add	r3, r1
 8015346:	f823 2c4c 	strh.w	r2, [r3, #-76]
 801534a:	e030      	b.n	80153ae <DrawChar+0x1ce>
        }
        else
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
 801534c:	4b52      	ldr	r3, [pc, #328]	; (8015498 <DrawChar+0x2b8>)
 801534e:	68db      	ldr	r3, [r3, #12]
 8015350:	4a51      	ldr	r2, [pc, #324]	; (8015498 <DrawChar+0x2b8>)
 8015352:	015b      	lsls	r3, r3, #5
 8015354:	4413      	add	r3, r2
 8015356:	3304      	adds	r3, #4
 8015358:	681b      	ldr	r3, [r3, #0]
 801535a:	08db      	lsrs	r3, r3, #3
 801535c:	b29b      	uxth	r3, r3
 801535e:	f003 031f 	and.w	r3, r3, #31
 8015362:	b29a      	uxth	r2, r3
 8015364:	4b4c      	ldr	r3, [pc, #304]	; (8015498 <DrawChar+0x2b8>)
 8015366:	68db      	ldr	r3, [r3, #12]
 8015368:	494b      	ldr	r1, [pc, #300]	; (8015498 <DrawChar+0x2b8>)
 801536a:	015b      	lsls	r3, r3, #5
 801536c:	440b      	add	r3, r1
 801536e:	3304      	adds	r3, #4
 8015370:	681b      	ldr	r3, [r3, #0]
 8015372:	0a9b      	lsrs	r3, r3, #10
 8015374:	b29b      	uxth	r3, r3
 8015376:	015b      	lsls	r3, r3, #5
 8015378:	b29b      	uxth	r3, r3
 801537a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801537e:	b29b      	uxth	r3, r3
 8015380:	4313      	orrs	r3, r2
 8015382:	b29a      	uxth	r2, r3
 8015384:	4b44      	ldr	r3, [pc, #272]	; (8015498 <DrawChar+0x2b8>)
 8015386:	68db      	ldr	r3, [r3, #12]
 8015388:	4943      	ldr	r1, [pc, #268]	; (8015498 <DrawChar+0x2b8>)
 801538a:	015b      	lsls	r3, r3, #5
 801538c:	440b      	add	r3, r1
 801538e:	3304      	adds	r3, #4
 8015390:	681b      	ldr	r3, [r3, #0]
 8015392:	0cdb      	lsrs	r3, r3, #19
 8015394:	b29b      	uxth	r3, r3
 8015396:	02db      	lsls	r3, r3, #11
 8015398:	b29b      	uxth	r3, r3
 801539a:	4313      	orrs	r3, r2
 801539c:	b29a      	uxth	r2, r3
 801539e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80153a2:	005b      	lsls	r3, r3, #1
 80153a4:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 80153a8:	440b      	add	r3, r1
 80153aa:	f823 2c4c 	strh.w	r2, [r3, #-76]
      for (j = 0; j < width; j++)
 80153ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80153b2:	3301      	adds	r3, #1
 80153b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80153b8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80153bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80153c0:	429a      	cmp	r2, r3
 80153c2:	d382      	bcc.n	80152ca <DrawChar+0xea>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&rgb565[0], width, 1);
 80153c4:	68b9      	ldr	r1, [r7, #8]
 80153c6:	1c4b      	adds	r3, r1, #1
 80153c8:	60bb      	str	r3, [r7, #8]
 80153ca:	f107 0274 	add.w	r2, r7, #116	; 0x74
 80153ce:	2301      	movs	r3, #1
 80153d0:	9300      	str	r3, [sp, #0]
 80153d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80153d6:	68f8      	ldr	r0, [r7, #12]
 80153d8:	f7ff fd06 	bl	8014de8 <UTIL_LCD_FillRGBRect>
 80153dc:	e04a      	b.n	8015474 <DrawChar+0x294>
    }
    else
    {
      for (j = 0; j < width; j++)
 80153de:	2300      	movs	r3, #0
 80153e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80153e4:	e034      	b.n	8015450 <DrawChar+0x270>
      {
        if(line & (1 << (width- j + offset- 1)))
 80153e6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80153ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80153ee:	1ad2      	subs	r2, r2, r3
 80153f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80153f4:	4413      	add	r3, r2
 80153f6:	3b01      	subs	r3, #1
 80153f8:	2201      	movs	r2, #1
 80153fa:	fa02 f303 	lsl.w	r3, r2, r3
 80153fe:	461a      	mov	r2, r3
 8015400:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015404:	4013      	ands	r3, r2
 8015406:	2b00      	cmp	r3, #0
 8015408:	d00e      	beq.n	8015428 <DrawChar+0x248>
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].TextColor;
 801540a:	4b23      	ldr	r3, [pc, #140]	; (8015498 <DrawChar+0x2b8>)
 801540c:	68db      	ldr	r3, [r3, #12]
 801540e:	4a22      	ldr	r2, [pc, #136]	; (8015498 <DrawChar+0x2b8>)
 8015410:	015b      	lsls	r3, r3, #5
 8015412:	4413      	add	r3, r2
 8015414:	681a      	ldr	r2, [r3, #0]
 8015416:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801541a:	009b      	lsls	r3, r3, #2
 801541c:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 8015420:	440b      	add	r3, r1
 8015422:	f843 2cac 	str.w	r2, [r3, #-172]
 8015426:	e00e      	b.n	8015446 <DrawChar+0x266>
        }
        else
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
 8015428:	4b1b      	ldr	r3, [pc, #108]	; (8015498 <DrawChar+0x2b8>)
 801542a:	68db      	ldr	r3, [r3, #12]
 801542c:	4a1a      	ldr	r2, [pc, #104]	; (8015498 <DrawChar+0x2b8>)
 801542e:	015b      	lsls	r3, r3, #5
 8015430:	4413      	add	r3, r2
 8015432:	3304      	adds	r3, #4
 8015434:	681a      	ldr	r2, [r3, #0]
 8015436:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801543a:	009b      	lsls	r3, r3, #2
 801543c:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 8015440:	440b      	add	r3, r1
 8015442:	f843 2cac 	str.w	r2, [r3, #-172]
      for (j = 0; j < width; j++)
 8015446:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801544a:	3301      	adds	r3, #1
 801544c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8015450:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8015454:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015458:	429a      	cmp	r2, r3
 801545a:	d3c4      	bcc.n	80153e6 <DrawChar+0x206>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&argb8888[0], width, 1);
 801545c:	68b9      	ldr	r1, [r7, #8]
 801545e:	1c4b      	adds	r3, r1, #1
 8015460:	60bb      	str	r3, [r7, #8]
 8015462:	f107 0214 	add.w	r2, r7, #20
 8015466:	2301      	movs	r3, #1
 8015468:	9300      	str	r3, [sp, #0]
 801546a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801546e:	68f8      	ldr	r0, [r7, #12]
 8015470:	f7ff fcba 	bl	8014de8 <UTIL_LCD_FillRGBRect>
  for(i = 0; i < height; i++)
 8015474:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8015478:	3301      	adds	r3, #1
 801547a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801547e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8015482:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8015486:	429a      	cmp	r2, r3
 8015488:	f4ff aed8 	bcc.w	801523c <DrawChar+0x5c>
    }
  }
}
 801548c:	bf00      	nop
 801548e:	bf00      	nop
 8015490:	37c0      	adds	r7, #192	; 0xc0
 8015492:	46bd      	mov	sp, r7
 8015494:	bd80      	pop	{r7, pc}
 8015496:	bf00      	nop
 8015498:	24001cbc 	.word	0x24001cbc

0801549c <checkint>:
 801549c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80154a0:	2b7e      	cmp	r3, #126	; 0x7e
 80154a2:	dd10      	ble.n	80154c6 <checkint+0x2a>
 80154a4:	2b96      	cmp	r3, #150	; 0x96
 80154a6:	dc0c      	bgt.n	80154c2 <checkint+0x26>
 80154a8:	2201      	movs	r2, #1
 80154aa:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80154ae:	fa02 f303 	lsl.w	r3, r2, r3
 80154b2:	1e5a      	subs	r2, r3, #1
 80154b4:	4202      	tst	r2, r0
 80154b6:	d106      	bne.n	80154c6 <checkint+0x2a>
 80154b8:	4203      	tst	r3, r0
 80154ba:	bf0c      	ite	eq
 80154bc:	2002      	moveq	r0, #2
 80154be:	2001      	movne	r0, #1
 80154c0:	4770      	bx	lr
 80154c2:	2002      	movs	r0, #2
 80154c4:	4770      	bx	lr
 80154c6:	2000      	movs	r0, #0
 80154c8:	4770      	bx	lr
 80154ca:	0000      	movs	r0, r0
 80154cc:	0000      	movs	r0, r0
	...

080154d0 <powf>:
 80154d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80154d2:	ee10 1a10 	vmov	r1, s0
 80154d6:	ee10 6a90 	vmov	r6, s1
 80154da:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 80154de:	0072      	lsls	r2, r6, #1
 80154e0:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80154e4:	b085      	sub	sp, #20
 80154e6:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 80154ea:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 80154ee:	d256      	bcs.n	801559e <powf+0xce>
 80154f0:	4298      	cmp	r0, r3
 80154f2:	d256      	bcs.n	80155a2 <powf+0xd2>
 80154f4:	2000      	movs	r0, #0
 80154f6:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 80154fa:	4ea3      	ldr	r6, [pc, #652]	; (8015788 <powf+0x2b8>)
 80154fc:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8015500:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 8015504:	f3c2 47c3 	ubfx	r7, r2, #19, #4
 8015508:	0dd2      	lsrs	r2, r2, #23
 801550a:	eb06 1707 	add.w	r7, r6, r7, lsl #4
 801550e:	05d2      	lsls	r2, r2, #23
 8015510:	1a8b      	subs	r3, r1, r2
 8015512:	ed97 5b00 	vldr	d5, [r7]
 8015516:	ee07 3a90 	vmov	s15, r3
 801551a:	15d2      	asrs	r2, r2, #23
 801551c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8015520:	eea5 6b07 	vfma.f64	d6, d5, d7
 8015524:	ed97 5b02 	vldr	d5, [r7, #8]
 8015528:	ee26 2b06 	vmul.f64	d2, d6, d6
 801552c:	ee22 1b02 	vmul.f64	d1, d2, d2
 8015530:	ee07 2a90 	vmov	s15, r2
 8015534:	ed96 4b40 	vldr	d4, [r6, #256]	; 0x100
 8015538:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801553c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8015540:	ed96 5b42 	vldr	d5, [r6, #264]	; 0x108
 8015544:	ed96 3b44 	vldr	d3, [r6, #272]	; 0x110
 8015548:	eea6 5b04 	vfma.f64	d5, d6, d4
 801554c:	ed96 4b46 	vldr	d4, [r6, #280]	; 0x118
 8015550:	eea6 4b03 	vfma.f64	d4, d6, d3
 8015554:	ed96 3b48 	vldr	d3, [r6, #288]	; 0x120
 8015558:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 801555c:	eea6 7b03 	vfma.f64	d7, d6, d3
 8015560:	eea2 7b04 	vfma.f64	d7, d2, d4
 8015564:	eea5 7b01 	vfma.f64	d7, d5, d1
 8015568:	ee20 0b07 	vmul.f64	d0, d0, d7
 801556c:	ee10 1a90 	vmov	r1, s1
 8015570:	2300      	movs	r3, #0
 8015572:	2700      	movs	r7, #0
 8015574:	f3c1 32cf 	ubfx	r2, r1, #15, #16
 8015578:	f248 06be 	movw	r6, #32958	; 0x80be
 801557c:	429f      	cmp	r7, r3
 801557e:	bf08      	it	eq
 8015580:	4296      	cmpeq	r6, r2
 8015582:	f080 80b1 	bcs.w	80156e8 <powf+0x218>
 8015586:	ed9f 7b78 	vldr	d7, [pc, #480]	; 8015768 <powf+0x298>
 801558a:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801558e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015592:	dd79      	ble.n	8015688 <powf+0x1b8>
 8015594:	b005      	add	sp, #20
 8015596:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801559a:	f000 b945 	b.w	8015828 <__math_oflowf>
 801559e:	4298      	cmp	r0, r3
 80155a0:	d32d      	bcc.n	80155fe <powf+0x12e>
 80155a2:	b952      	cbnz	r2, 80155ba <powf+0xea>
 80155a4:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 80155a8:	005b      	lsls	r3, r3, #1
 80155aa:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 80155ae:	f240 80cd 	bls.w	801574c <powf+0x27c>
 80155b2:	ee30 0a20 	vadd.f32	s0, s0, s1
 80155b6:	b005      	add	sp, #20
 80155b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80155ba:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 80155be:	d105      	bne.n	80155cc <powf+0xfc>
 80155c0:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 80155c4:	0076      	lsls	r6, r6, #1
 80155c6:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 80155ca:	e7f0      	b.n	80155ae <powf+0xde>
 80155cc:	004b      	lsls	r3, r1, #1
 80155ce:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 80155d2:	d8ee      	bhi.n	80155b2 <powf+0xe2>
 80155d4:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 80155d8:	d1eb      	bne.n	80155b2 <powf+0xe2>
 80155da:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80155de:	f000 80b5 	beq.w	801574c <powf+0x27c>
 80155e2:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80155e6:	ea6f 0606 	mvn.w	r6, r6
 80155ea:	bf34      	ite	cc
 80155ec:	2300      	movcc	r3, #0
 80155ee:	2301      	movcs	r3, #1
 80155f0:	0ff6      	lsrs	r6, r6, #31
 80155f2:	42b3      	cmp	r3, r6
 80155f4:	f040 80ad 	bne.w	8015752 <powf+0x282>
 80155f8:	ee20 0aa0 	vmul.f32	s0, s1, s1
 80155fc:	e7db      	b.n	80155b6 <powf+0xe6>
 80155fe:	004f      	lsls	r7, r1, #1
 8015600:	1e7a      	subs	r2, r7, #1
 8015602:	429a      	cmp	r2, r3
 8015604:	d31c      	bcc.n	8015640 <powf+0x170>
 8015606:	2900      	cmp	r1, #0
 8015608:	ee20 0a00 	vmul.f32	s0, s0, s0
 801560c:	da0f      	bge.n	801562e <powf+0x15e>
 801560e:	ee10 0a90 	vmov	r0, s1
 8015612:	f7ff ff43 	bl	801549c <checkint>
 8015616:	2801      	cmp	r0, #1
 8015618:	d109      	bne.n	801562e <powf+0x15e>
 801561a:	eeb1 0a40 	vneg.f32	s0, s0
 801561e:	b947      	cbnz	r7, 8015632 <powf+0x162>
 8015620:	2e00      	cmp	r6, #0
 8015622:	dac8      	bge.n	80155b6 <powf+0xe6>
 8015624:	b005      	add	sp, #20
 8015626:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801562a:	f000 b903 	b.w	8015834 <__math_divzerof>
 801562e:	2000      	movs	r0, #0
 8015630:	e7f5      	b.n	801561e <powf+0x14e>
 8015632:	2e00      	cmp	r6, #0
 8015634:	dabf      	bge.n	80155b6 <powf+0xe6>
 8015636:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801563a:	ee87 0a80 	vdiv.f32	s0, s15, s0
 801563e:	e7ba      	b.n	80155b6 <powf+0xe6>
 8015640:	2900      	cmp	r1, #0
 8015642:	da1f      	bge.n	8015684 <powf+0x1b4>
 8015644:	ee10 0a90 	vmov	r0, s1
 8015648:	f7ff ff28 	bl	801549c <checkint>
 801564c:	b920      	cbnz	r0, 8015658 <powf+0x188>
 801564e:	b005      	add	sp, #20
 8015650:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015654:	f000 b8fe 	b.w	8015854 <__math_invalidf>
 8015658:	2801      	cmp	r0, #1
 801565a:	bf14      	ite	ne
 801565c:	2000      	movne	r0, #0
 801565e:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8015662:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8015666:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 801566a:	f4bf af44 	bcs.w	80154f6 <powf+0x26>
 801566e:	eddf 7a47 	vldr	s15, [pc, #284]	; 801578c <powf+0x2bc>
 8015672:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015676:	ee10 3a10 	vmov	r3, s0
 801567a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801567e:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 8015682:	e738      	b.n	80154f6 <powf+0x26>
 8015684:	2000      	movs	r0, #0
 8015686:	e7ee      	b.n	8015666 <powf+0x196>
 8015688:	ed9f 7b39 	vldr	d7, [pc, #228]	; 8015770 <powf+0x2a0>
 801568c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8015690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015694:	dd10      	ble.n	80156b8 <powf+0x1e8>
 8015696:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 801569a:	2800      	cmp	r0, #0
 801569c:	d15c      	bne.n	8015758 <powf+0x288>
 801569e:	9302      	str	r3, [sp, #8]
 80156a0:	eddd 7a02 	vldr	s15, [sp, #8]
 80156a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80156a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80156ac:	eef4 7a47 	vcmp.f32	s15, s14
 80156b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156b4:	f47f af6e 	bne.w	8015594 <powf+0xc4>
 80156b8:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8015778 <powf+0x2a8>
 80156bc:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80156c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156c4:	d804      	bhi.n	80156d0 <powf+0x200>
 80156c6:	b005      	add	sp, #20
 80156c8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80156cc:	f000 b8a0 	b.w	8015810 <__math_uflowf>
 80156d0:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 8015780 <powf+0x2b0>
 80156d4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80156d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156dc:	d504      	bpl.n	80156e8 <powf+0x218>
 80156de:	b005      	add	sp, #20
 80156e0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80156e4:	f000 b89a 	b.w	801581c <__math_may_uflowf>
 80156e8:	4b29      	ldr	r3, [pc, #164]	; (8015790 <powf+0x2c0>)
 80156ea:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 80156ee:	ee30 6b07 	vadd.f64	d6, d0, d7
 80156f2:	ed8d 6b00 	vstr	d6, [sp]
 80156f6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80156fa:	ee30 7b47 	vsub.f64	d7, d0, d7
 80156fe:	e9dd 6700 	ldrd	r6, r7, [sp]
 8015702:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8015706:	f006 011f 	and.w	r1, r6, #31
 801570a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 801570e:	e9d1 ce00 	ldrd	ip, lr, [r1]
 8015712:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 8015716:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 801571a:	ed93 4b46 	vldr	d4, [r3, #280]	; 0x118
 801571e:	eea7 6b05 	vfma.f64	d6, d7, d5
 8015722:	ee27 5b07 	vmul.f64	d5, d7, d7
 8015726:	1836      	adds	r6, r6, r0
 8015728:	2300      	movs	r3, #0
 801572a:	eb13 040c 	adds.w	r4, r3, ip
 801572e:	ea4f 31c6 	mov.w	r1, r6, lsl #15
 8015732:	eb41 050e 	adc.w	r5, r1, lr
 8015736:	eea7 0b04 	vfma.f64	d0, d7, d4
 801573a:	ec45 4b17 	vmov	d7, r4, r5
 801573e:	eea6 0b05 	vfma.f64	d0, d6, d5
 8015742:	ee20 0b07 	vmul.f64	d0, d0, d7
 8015746:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801574a:	e734      	b.n	80155b6 <powf+0xe6>
 801574c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8015750:	e731      	b.n	80155b6 <powf+0xe6>
 8015752:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8015794 <powf+0x2c4>
 8015756:	e72e      	b.n	80155b6 <powf+0xe6>
 8015758:	9303      	str	r3, [sp, #12]
 801575a:	eddd 7a03 	vldr	s15, [sp, #12]
 801575e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8015762:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015766:	e7a1      	b.n	80156ac <powf+0x1dc>
 8015768:	ffd1d571 	.word	0xffd1d571
 801576c:	405fffff 	.word	0x405fffff
 8015770:	ffa3aae2 	.word	0xffa3aae2
 8015774:	405fffff 	.word	0x405fffff
 8015778:	00000000 	.word	0x00000000
 801577c:	c062c000 	.word	0xc062c000
 8015780:	00000000 	.word	0x00000000
 8015784:	c062a000 	.word	0xc062a000
 8015788:	0801bf68 	.word	0x0801bf68
 801578c:	4b000000 	.word	0x4b000000
 8015790:	0801c090 	.word	0x0801c090
 8015794:	00000000 	.word	0x00000000

08015798 <roundf>:
 8015798:	ee10 0a10 	vmov	r0, s0
 801579c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80157a0:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 80157a4:	2a16      	cmp	r2, #22
 80157a6:	dc15      	bgt.n	80157d4 <roundf+0x3c>
 80157a8:	2a00      	cmp	r2, #0
 80157aa:	da08      	bge.n	80157be <roundf+0x26>
 80157ac:	3201      	adds	r2, #1
 80157ae:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80157b2:	d101      	bne.n	80157b8 <roundf+0x20>
 80157b4:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 80157b8:	ee00 3a10 	vmov	s0, r3
 80157bc:	4770      	bx	lr
 80157be:	4908      	ldr	r1, [pc, #32]	; (80157e0 <roundf+0x48>)
 80157c0:	4111      	asrs	r1, r2
 80157c2:	4208      	tst	r0, r1
 80157c4:	d0fa      	beq.n	80157bc <roundf+0x24>
 80157c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80157ca:	4113      	asrs	r3, r2
 80157cc:	4403      	add	r3, r0
 80157ce:	ea23 0301 	bic.w	r3, r3, r1
 80157d2:	e7f1      	b.n	80157b8 <roundf+0x20>
 80157d4:	2a80      	cmp	r2, #128	; 0x80
 80157d6:	d1f1      	bne.n	80157bc <roundf+0x24>
 80157d8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80157dc:	4770      	bx	lr
 80157de:	bf00      	nop
 80157e0:	007fffff 	.word	0x007fffff

080157e4 <with_errnof>:
 80157e4:	b513      	push	{r0, r1, r4, lr}
 80157e6:	4604      	mov	r4, r0
 80157e8:	ed8d 0a01 	vstr	s0, [sp, #4]
 80157ec:	f000 f844 	bl	8015878 <__errno>
 80157f0:	ed9d 0a01 	vldr	s0, [sp, #4]
 80157f4:	6004      	str	r4, [r0, #0]
 80157f6:	b002      	add	sp, #8
 80157f8:	bd10      	pop	{r4, pc}

080157fa <xflowf>:
 80157fa:	b130      	cbz	r0, 801580a <xflowf+0x10>
 80157fc:	eef1 7a40 	vneg.f32	s15, s0
 8015800:	ee27 0a80 	vmul.f32	s0, s15, s0
 8015804:	2022      	movs	r0, #34	; 0x22
 8015806:	f7ff bfed 	b.w	80157e4 <with_errnof>
 801580a:	eef0 7a40 	vmov.f32	s15, s0
 801580e:	e7f7      	b.n	8015800 <xflowf+0x6>

08015810 <__math_uflowf>:
 8015810:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8015818 <__math_uflowf+0x8>
 8015814:	f7ff bff1 	b.w	80157fa <xflowf>
 8015818:	10000000 	.word	0x10000000

0801581c <__math_may_uflowf>:
 801581c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8015824 <__math_may_uflowf+0x8>
 8015820:	f7ff bfeb 	b.w	80157fa <xflowf>
 8015824:	1a200000 	.word	0x1a200000

08015828 <__math_oflowf>:
 8015828:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8015830 <__math_oflowf+0x8>
 801582c:	f7ff bfe5 	b.w	80157fa <xflowf>
 8015830:	70000000 	.word	0x70000000

08015834 <__math_divzerof>:
 8015834:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8015838:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 801583c:	2800      	cmp	r0, #0
 801583e:	fe40 7a27 	vseleq.f32	s15, s0, s15
 8015842:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8015850 <__math_divzerof+0x1c>
 8015846:	2022      	movs	r0, #34	; 0x22
 8015848:	ee87 0a80 	vdiv.f32	s0, s15, s0
 801584c:	f7ff bfca 	b.w	80157e4 <with_errnof>
 8015850:	00000000 	.word	0x00000000

08015854 <__math_invalidf>:
 8015854:	eef0 7a40 	vmov.f32	s15, s0
 8015858:	ee30 7a40 	vsub.f32	s14, s0, s0
 801585c:	eef4 7a67 	vcmp.f32	s15, s15
 8015860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015864:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8015868:	d602      	bvs.n	8015870 <__math_invalidf+0x1c>
 801586a:	2021      	movs	r0, #33	; 0x21
 801586c:	f7ff bfba 	b.w	80157e4 <with_errnof>
 8015870:	4770      	bx	lr

08015872 <__aeabi_memclr>:
 8015872:	2200      	movs	r2, #0
 8015874:	f7ec bc58 	b.w	8002128 <__aeabi_memset>

08015878 <__errno>:
 8015878:	4b01      	ldr	r3, [pc, #4]	; (8015880 <__errno+0x8>)
 801587a:	6818      	ldr	r0, [r3, #0]
 801587c:	4770      	bx	lr
 801587e:	bf00      	nop
 8015880:	24000598 	.word	0x24000598

08015884 <__libc_init_array>:
 8015884:	b570      	push	{r4, r5, r6, lr}
 8015886:	4d0d      	ldr	r5, [pc, #52]	; (80158bc <__libc_init_array+0x38>)
 8015888:	4c0d      	ldr	r4, [pc, #52]	; (80158c0 <__libc_init_array+0x3c>)
 801588a:	1b64      	subs	r4, r4, r5
 801588c:	10a4      	asrs	r4, r4, #2
 801588e:	2600      	movs	r6, #0
 8015890:	42a6      	cmp	r6, r4
 8015892:	d109      	bne.n	80158a8 <__libc_init_array+0x24>
 8015894:	4d0b      	ldr	r5, [pc, #44]	; (80158c4 <__libc_init_array+0x40>)
 8015896:	4c0c      	ldr	r4, [pc, #48]	; (80158c8 <__libc_init_array+0x44>)
 8015898:	f000 f818 	bl	80158cc <_init>
 801589c:	1b64      	subs	r4, r4, r5
 801589e:	10a4      	asrs	r4, r4, #2
 80158a0:	2600      	movs	r6, #0
 80158a2:	42a6      	cmp	r6, r4
 80158a4:	d105      	bne.n	80158b2 <__libc_init_array+0x2e>
 80158a6:	bd70      	pop	{r4, r5, r6, pc}
 80158a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80158ac:	4798      	blx	r3
 80158ae:	3601      	adds	r6, #1
 80158b0:	e7ee      	b.n	8015890 <__libc_init_array+0xc>
 80158b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80158b6:	4798      	blx	r3
 80158b8:	3601      	adds	r6, #1
 80158ba:	e7f2      	b.n	80158a2 <__libc_init_array+0x1e>
 80158bc:	0801c1d8 	.word	0x0801c1d8
 80158c0:	0801c1d8 	.word	0x0801c1d8
 80158c4:	0801c1d8 	.word	0x0801c1d8
 80158c8:	0801c1dc 	.word	0x0801c1dc

080158cc <_init>:
 80158cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80158ce:	bf00      	nop
 80158d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80158d2:	bc08      	pop	{r3}
 80158d4:	469e      	mov	lr, r3
 80158d6:	4770      	bx	lr

080158d8 <_fini>:
 80158d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80158da:	bf00      	nop
 80158dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80158de:	bc08      	pop	{r3}
 80158e0:	469e      	mov	lr, r3
 80158e2:	4770      	bx	lr
