#include <complex>
#include <math.h>
#include "inc/fft.hpp"


void DFT(std::complex<double> *data, int N){
	bool error = false;						// error flag
	std::complex<double> *tmp=NULL;			// Pointer to temporary data
	int k, n;
	std::complex<double> wActual;
	std::complex<double> wStep;

	// get memory for temporary data
	error = error || (tmp=new std::complex<double>[N])==NULL;

	// initialize temporary data
	for(n=0; !error && n<N; n++){
		tmp[n] = std::complex<double>(0, 0);
	}

	// loop over all target values
	for(n=0; !error && n<N; n++){
		// actual angle and angle step
		wActual = std::complex<double>(1, 0);
		wStep = std::complex<double>(cos(-2 * PI * (n / N)), sin(-2 * PI * (n / N)));

		// loop over all source values
		for(k=0; (k < N); k++) {
			tmp[n] += data[k]*wActual;
			wActual *= wStep;
		}
	}
	// copy data
	for(n=0; !error && (n < N); n++){
		data[n] = tmp[n];
	}
	// free memory
	if(tmp){
		delete[]tmp;
	}
}

void FFT(std::complex<double> *data, unsigned N){

	unsigned butterflySize; // size for actual butterfly calculation
	int i, j, k; // local index variables
	std::complex<double> wActual; // actual rotation factor
	std::complex<double> wStep; // step rotation factors
	std::complex<double> tmp; // temp. value for butterfly calculation

	// loop over all level of FFT
	for(butterflySize=N/2; butterflySize>0; butterflySize/=2) {
		// evaluate angle step and set first angle
		wStep = std::complex<double>(cos(-PI / butterflySize),
		sin(-pi/butterflySize));
		wActual = std::complex<double>(1, 0);
		// loop over number of butterflys
		for(j=0; j<butterflySize; j++) {
			// loop over number of FFTs
			for(i=j; i<N; i+=2*butterflySize) {
				// get index of second element
				k = i+butterflySize;
				// perform butterfly calculation
				tmp = data[i]; // store one element
				data[i] += data[k]; // take sum
				data[k] = tmp-data[k]; // take difference
				data[k] *= wActual; // multiply with rotation factor
			}
			// evaluate next rotation factor
			wActual *= wStep;
		}
	}

	// perform bit reversal
	j = 0;
	for(i=0; i<N; i++) {
		if(j>i) {
			// swap numbers
			tmp = data[i];
			data[i] = data[j];
			data[j] = tmp;
		}
		k = N/2;
		while(k>=2 && j>=k) {
			j -= k;
			k /= 2;
		}
		j += k;
	}
}
